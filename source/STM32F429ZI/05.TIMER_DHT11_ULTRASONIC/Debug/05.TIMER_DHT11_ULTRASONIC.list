
05.TIMER_DHT11_ULTRASONIC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a00  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  08007bb0  08007bb0  00017bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e7c  08007e7c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007e7c  08007e7c  00017e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e84  08007e84  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e84  08007e84  00017e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e88  08007e88  00017e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007e8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000ca4  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000d18  20000d18  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019fa9  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000326a  00000000  00000000  0003a04d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001630  00000000  00000000  0003d2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001500  00000000  00000000  0003e8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002710e  00000000  00000000  0003fde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a32c  00000000  00000000  00066ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e70a2  00000000  00000000  00081222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001682c4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000068a0  00000000  00000000  00168314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007b98 	.word	0x08007b98

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08007b98 	.word	0x08007b98

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b974 	b.w	8000d7c <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	468e      	mov	lr, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d14d      	bne.n	8000b56 <__udivmoddi4+0xaa>
 8000aba:	428a      	cmp	r2, r1
 8000abc:	4694      	mov	ip, r2
 8000abe:	d969      	bls.n	8000b94 <__udivmoddi4+0xe8>
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	b152      	cbz	r2, 8000adc <__udivmoddi4+0x30>
 8000ac6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aca:	f1c2 0120 	rsb	r1, r2, #32
 8000ace:	fa20 f101 	lsr.w	r1, r0, r1
 8000ad2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad6:	ea41 0e03 	orr.w	lr, r1, r3
 8000ada:	4094      	lsls	r4, r2
 8000adc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae0:	0c21      	lsrs	r1, r4, #16
 8000ae2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ae6:	fa1f f78c 	uxth.w	r7, ip
 8000aea:	fb08 e316 	mls	r3, r8, r6, lr
 8000aee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000af2:	fb06 f107 	mul.w	r1, r6, r7
 8000af6:	4299      	cmp	r1, r3
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x64>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b02:	f080 811f 	bcs.w	8000d44 <__udivmoddi4+0x298>
 8000b06:	4299      	cmp	r1, r3
 8000b08:	f240 811c 	bls.w	8000d44 <__udivmoddi4+0x298>
 8000b0c:	3e02      	subs	r6, #2
 8000b0e:	4463      	add	r3, ip
 8000b10:	1a5b      	subs	r3, r3, r1
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b18:	fb08 3310 	mls	r3, r8, r0, r3
 8000b1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b20:	fb00 f707 	mul.w	r7, r0, r7
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x92>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b30:	f080 810a 	bcs.w	8000d48 <__udivmoddi4+0x29c>
 8000b34:	42a7      	cmp	r7, r4
 8000b36:	f240 8107 	bls.w	8000d48 <__udivmoddi4+0x29c>
 8000b3a:	4464      	add	r4, ip
 8000b3c:	3802      	subs	r0, #2
 8000b3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b42:	1be4      	subs	r4, r4, r7
 8000b44:	2600      	movs	r6, #0
 8000b46:	b11d      	cbz	r5, 8000b50 <__udivmoddi4+0xa4>
 8000b48:	40d4      	lsrs	r4, r2
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b50:	4631      	mov	r1, r6
 8000b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d909      	bls.n	8000b6e <__udivmoddi4+0xc2>
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	f000 80ef 	beq.w	8000d3e <__udivmoddi4+0x292>
 8000b60:	2600      	movs	r6, #0
 8000b62:	e9c5 0100 	strd	r0, r1, [r5]
 8000b66:	4630      	mov	r0, r6
 8000b68:	4631      	mov	r1, r6
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	fab3 f683 	clz	r6, r3
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	d14a      	bne.n	8000c0c <__udivmoddi4+0x160>
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d302      	bcc.n	8000b80 <__udivmoddi4+0xd4>
 8000b7a:	4282      	cmp	r2, r0
 8000b7c:	f200 80f9 	bhi.w	8000d72 <__udivmoddi4+0x2c6>
 8000b80:	1a84      	subs	r4, r0, r2
 8000b82:	eb61 0303 	sbc.w	r3, r1, r3
 8000b86:	2001      	movs	r0, #1
 8000b88:	469e      	mov	lr, r3
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	d0e0      	beq.n	8000b50 <__udivmoddi4+0xa4>
 8000b8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b92:	e7dd      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000b94:	b902      	cbnz	r2, 8000b98 <__udivmoddi4+0xec>
 8000b96:	deff      	udf	#255	; 0xff
 8000b98:	fab2 f282 	clz	r2, r2
 8000b9c:	2a00      	cmp	r2, #0
 8000b9e:	f040 8092 	bne.w	8000cc6 <__udivmoddi4+0x21a>
 8000ba2:	eba1 010c 	sub.w	r1, r1, ip
 8000ba6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000baa:	fa1f fe8c 	uxth.w	lr, ip
 8000bae:	2601      	movs	r6, #1
 8000bb0:	0c20      	lsrs	r0, r4, #16
 8000bb2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bb6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bbe:	fb0e f003 	mul.w	r0, lr, r3
 8000bc2:	4288      	cmp	r0, r1
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x12c>
 8000bc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bca:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x12a>
 8000bd0:	4288      	cmp	r0, r1
 8000bd2:	f200 80cb 	bhi.w	8000d6c <__udivmoddi4+0x2c0>
 8000bd6:	4643      	mov	r3, r8
 8000bd8:	1a09      	subs	r1, r1, r0
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000be0:	fb07 1110 	mls	r1, r7, r0, r1
 8000be4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000be8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bec:	45a6      	cmp	lr, r4
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x156>
 8000bf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bf8:	d202      	bcs.n	8000c00 <__udivmoddi4+0x154>
 8000bfa:	45a6      	cmp	lr, r4
 8000bfc:	f200 80bb 	bhi.w	8000d76 <__udivmoddi4+0x2ca>
 8000c00:	4608      	mov	r0, r1
 8000c02:	eba4 040e 	sub.w	r4, r4, lr
 8000c06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c0a:	e79c      	b.n	8000b46 <__udivmoddi4+0x9a>
 8000c0c:	f1c6 0720 	rsb	r7, r6, #32
 8000c10:	40b3      	lsls	r3, r6
 8000c12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c22:	431c      	orrs	r4, r3
 8000c24:	40f9      	lsrs	r1, r7
 8000c26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c32:	0c20      	lsrs	r0, r4, #16
 8000c34:	fa1f fe8c 	uxth.w	lr, ip
 8000c38:	fb09 1118 	mls	r1, r9, r8, r1
 8000c3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c40:	fb08 f00e 	mul.w	r0, r8, lr
 8000c44:	4288      	cmp	r0, r1
 8000c46:	fa02 f206 	lsl.w	r2, r2, r6
 8000c4a:	d90b      	bls.n	8000c64 <__udivmoddi4+0x1b8>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c54:	f080 8088 	bcs.w	8000d68 <__udivmoddi4+0x2bc>
 8000c58:	4288      	cmp	r0, r1
 8000c5a:	f240 8085 	bls.w	8000d68 <__udivmoddi4+0x2bc>
 8000c5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c62:	4461      	add	r1, ip
 8000c64:	1a09      	subs	r1, r1, r0
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c78:	458e      	cmp	lr, r1
 8000c7a:	d908      	bls.n	8000c8e <__udivmoddi4+0x1e2>
 8000c7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c84:	d26c      	bcs.n	8000d60 <__udivmoddi4+0x2b4>
 8000c86:	458e      	cmp	lr, r1
 8000c88:	d96a      	bls.n	8000d60 <__udivmoddi4+0x2b4>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	4461      	add	r1, ip
 8000c8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c92:	fba0 9402 	umull	r9, r4, r0, r2
 8000c96:	eba1 010e 	sub.w	r1, r1, lr
 8000c9a:	42a1      	cmp	r1, r4
 8000c9c:	46c8      	mov	r8, r9
 8000c9e:	46a6      	mov	lr, r4
 8000ca0:	d356      	bcc.n	8000d50 <__udivmoddi4+0x2a4>
 8000ca2:	d053      	beq.n	8000d4c <__udivmoddi4+0x2a0>
 8000ca4:	b15d      	cbz	r5, 8000cbe <__udivmoddi4+0x212>
 8000ca6:	ebb3 0208 	subs.w	r2, r3, r8
 8000caa:	eb61 010e 	sbc.w	r1, r1, lr
 8000cae:	fa01 f707 	lsl.w	r7, r1, r7
 8000cb2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cb6:	40f1      	lsrs	r1, r6
 8000cb8:	431f      	orrs	r7, r3
 8000cba:	e9c5 7100 	strd	r7, r1, [r5]
 8000cbe:	2600      	movs	r6, #0
 8000cc0:	4631      	mov	r1, r6
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	f1c2 0320 	rsb	r3, r2, #32
 8000cca:	40d8      	lsrs	r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cd4:	4091      	lsls	r1, r2
 8000cd6:	4301      	orrs	r1, r0
 8000cd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cdc:	fa1f fe8c 	uxth.w	lr, ip
 8000ce0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ce4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ce8:	0c0b      	lsrs	r3, r1, #16
 8000cea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cee:	fb00 f60e 	mul.w	r6, r0, lr
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x260>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d02:	d22f      	bcs.n	8000d64 <__udivmoddi4+0x2b8>
 8000d04:	429e      	cmp	r6, r3
 8000d06:	d92d      	bls.n	8000d64 <__udivmoddi4+0x2b8>
 8000d08:	3802      	subs	r0, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	b289      	uxth	r1, r1
 8000d10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d14:	fb07 3316 	mls	r3, r7, r6, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x28a>
 8000d24:	eb1c 0101 	adds.w	r1, ip, r1
 8000d28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d2c:	d216      	bcs.n	8000d5c <__udivmoddi4+0x2b0>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d914      	bls.n	8000d5c <__udivmoddi4+0x2b0>
 8000d32:	3e02      	subs	r6, #2
 8000d34:	4461      	add	r1, ip
 8000d36:	1ac9      	subs	r1, r1, r3
 8000d38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d3c:	e738      	b.n	8000bb0 <__udivmoddi4+0x104>
 8000d3e:	462e      	mov	r6, r5
 8000d40:	4628      	mov	r0, r5
 8000d42:	e705      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000d44:	4606      	mov	r6, r0
 8000d46:	e6e3      	b.n	8000b10 <__udivmoddi4+0x64>
 8000d48:	4618      	mov	r0, r3
 8000d4a:	e6f8      	b.n	8000b3e <__udivmoddi4+0x92>
 8000d4c:	454b      	cmp	r3, r9
 8000d4e:	d2a9      	bcs.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d50:	ebb9 0802 	subs.w	r8, r9, r2
 8000d54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d58:	3801      	subs	r0, #1
 8000d5a:	e7a3      	b.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d5c:	4646      	mov	r6, r8
 8000d5e:	e7ea      	b.n	8000d36 <__udivmoddi4+0x28a>
 8000d60:	4620      	mov	r0, r4
 8000d62:	e794      	b.n	8000c8e <__udivmoddi4+0x1e2>
 8000d64:	4640      	mov	r0, r8
 8000d66:	e7d1      	b.n	8000d0c <__udivmoddi4+0x260>
 8000d68:	46d0      	mov	r8, sl
 8000d6a:	e77b      	b.n	8000c64 <__udivmoddi4+0x1b8>
 8000d6c:	3b02      	subs	r3, #2
 8000d6e:	4461      	add	r1, ip
 8000d70:	e732      	b.n	8000bd8 <__udivmoddi4+0x12c>
 8000d72:	4630      	mov	r0, r6
 8000d74:	e709      	b.n	8000b8a <__udivmoddi4+0xde>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	e742      	b.n	8000c02 <__udivmoddi4+0x156>

08000d7c <__aeabi_idiv0>:
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <DHT11_processing>:
	
}

int dht11time = 150; // 전역변수 상태
void DHT11_processing(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
	uint8_t i_RH, d_RH, i_Tmp, d_Tmp;

	if (TIM10_10ms_counter >= dht11time)
 8000d86:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <DHT11_processing+0x78>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	4b1c      	ldr	r3, [pc, #112]	; (8000dfc <DHT11_processing+0x7c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	db2d      	blt.n	8000dee <DHT11_processing+0x6e>
	{
		TIM10_10ms_counter = 0;
 8000d92:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <DHT11_processing+0x78>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]

		// 아래 세줄은 DHT11과 MCU의 Hand-shaking과정이다.
		DHT11_trriger();
 8000d98:	f000 f84a 	bl	8000e30 <DHT11_trriger>
		DHT11_DataLine_Input();
 8000d9c:	f000 f85e 	bl	8000e5c <DHT11_DataLine_Input>
		DHT11_dumi_read();
 8000da0:	f000 f8cc 	bl	8000f3c <DHT11_dumi_read>

		// 여기부터 DHT11가 수집한 데이터를 읽어오는 것이다.
		i_RH = DHT11_rx_Data();
 8000da4:	f000 f894 	bl	8000ed0 <DHT11_rx_Data>
 8000da8:	4603      	mov	r3, r0
 8000daa:	71fb      	strb	r3, [r7, #7]
		d_RH = DHT11_rx_Data();
 8000dac:	f000 f890 	bl	8000ed0 <DHT11_rx_Data>
 8000db0:	4603      	mov	r3, r0
 8000db2:	71bb      	strb	r3, [r7, #6]
		i_Tmp = DHT11_rx_Data();
 8000db4:	f000 f88c 	bl	8000ed0 <DHT11_rx_Data>
 8000db8:	4603      	mov	r3, r0
 8000dba:	717b      	strb	r3, [r7, #5]
		d_Tmp = DHT11_rx_Data();
 8000dbc:	f000 f888 	bl	8000ed0 <DHT11_rx_Data>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	713b      	strb	r3, [r7, #4]

		DHT11_DataLine_Output();
 8000dc4:	f000 f866 	bl	8000e94 <DHT11_DataLine_Output>
		HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_SET);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2101      	movs	r1, #1
 8000dcc:	480c      	ldr	r0, [pc, #48]	; (8000e00 <DHT11_processing+0x80>)
 8000dce:	f002 fc43 	bl	8003658 <HAL_GPIO_WritePin>

		if (DHT11_print_flag)
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <DHT11_processing+0x84>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d009      	beq.n	8000dee <DHT11_processing+0x6e>
		{
			printf("[Tmp]%d\n",(int)i_Tmp);
 8000dda:	797b      	ldrb	r3, [r7, #5]
 8000ddc:	4619      	mov	r1, r3
 8000dde:	480a      	ldr	r0, [pc, #40]	; (8000e08 <DHT11_processing+0x88>)
 8000de0:	f005 fe36 	bl	8006a50 <iprintf>
			printf("[Wet]%d\n",(int)i_RH);
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	4619      	mov	r1, r3
 8000de8:	4808      	ldr	r0, [pc, #32]	; (8000e0c <DHT11_processing+0x8c>)
 8000dea:	f005 fe31 	bl	8006a50 <iprintf>
		}

		//	FND_update(i_Tmp*100 + i_RH);
	}
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000984 	.word	0x20000984
 8000dfc:	20000000 	.word	0x20000000
 8000e00:	40020000 	.word	0x40020000
 8000e04:	20000090 	.word	0x20000090
 8000e08:	08007bb0 	.word	0x08007bb0
 8000e0c:	08007bbc 	.word	0x08007bbc

08000e10 <DHT11_Init>:

void DHT11_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_SET);
 8000e14:	2201      	movs	r2, #1
 8000e16:	2101      	movs	r1, #1
 8000e18:	4804      	ldr	r0, [pc, #16]	; (8000e2c <DHT11_Init+0x1c>)
 8000e1a:	f002 fc1d 	bl	8003658 <HAL_GPIO_WritePin>
	HAL_Delay(3000); // 초기화 할때는 딱 한번만 일어나기 때문에 hal_delay()를 줘도 상관 없다.
 8000e1e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e22:	f001 fd65 	bl	80028f0 <HAL_Delay>
	return;
 8000e26:	bf00      	nop
}
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40020000 	.word	0x40020000

08000e30 <DHT11_trriger>:


void DHT11_trriger(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_RESET);
 8000e34:	2200      	movs	r2, #0
 8000e36:	2101      	movs	r1, #1
 8000e38:	4807      	ldr	r0, [pc, #28]	; (8000e58 <DHT11_trriger+0x28>)
 8000e3a:	f002 fc0d 	bl	8003658 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000e3e:	2014      	movs	r0, #20
 8000e40:	f001 fd56 	bl	80028f0 <HAL_Delay>
	
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_SET);
 8000e44:	2201      	movs	r2, #1
 8000e46:	2101      	movs	r1, #1
 8000e48:	4803      	ldr	r0, [pc, #12]	; (8000e58 <DHT11_trriger+0x28>)
 8000e4a:	f002 fc05 	bl	8003658 <HAL_GPIO_WritePin>
	delay_us(7);
 8000e4e:	2007      	movs	r0, #7
 8000e50:	f000 fa02 	bl	8001258 <delay_us>
	return;
 8000e54:	bf00      	nop
}
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40020000 	.word	0x40020000

08000e5c <DHT11_DataLine_Input>:


void DHT11_DataLine_Input(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
	
	/*Configure GPIO pin : PH0 */
  GPIO_InitStruct.Pin = DHT11_DATA_RIN;
 8000e70:	2301      	movs	r3, #1
 8000e72:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;			//Change Output to Input
 8000e74:	2300      	movs	r3, #0
 8000e76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4803      	ldr	r0, [pc, #12]	; (8000e90 <DHT11_DataLine_Input+0x34>)
 8000e82:	f002 fa25 	bl	80032d0 <HAL_GPIO_Init>
	
	return;
 8000e86:	bf00      	nop
}
 8000e88:	3718      	adds	r7, #24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40020000 	.word	0x40020000

08000e94 <DHT11_DataLine_Output>:


void DHT11_DataLine_Output(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
	
	/*Configure GPIO pin : PH0 */
  GPIO_InitStruct.Pin = DHT11_DATA_RIN;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;			//Change Input to Output 
 8000eac:	2301      	movs	r3, #1
 8000eae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4803      	ldr	r0, [pc, #12]	; (8000ecc <DHT11_DataLine_Output+0x38>)
 8000ebe:	f002 fa07 	bl	80032d0 <HAL_GPIO_Init>
	
	return;
 8000ec2:	bf00      	nop
}
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40020000 	.word	0x40020000

08000ed0 <DHT11_rx_Data>:


uint8_t DHT11_rx_Data(void) // 이 함수가 데이터시트를 코드로 옮기는 핵심 포인트 함수이다. 0과 1을 판별하는 법..
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
	uint8_t rx_data = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	71fb      	strb	r3, [r7, #7]
	
	for(int i = 0; i < 8; i++) // 8비트 받아야 하니까 for문을 8번 돌린다.
 8000eda:	2300      	movs	r3, #0
 8000edc:	603b      	str	r3, [r7, #0]
 8000ede:	e023      	b.n	8000f28 <DHT11_rx_Data+0x58>
	{
		//when Input Data == 0
		while( 0 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000ee0:	bf00      	nop
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	4814      	ldr	r0, [pc, #80]	; (8000f38 <DHT11_rx_Data+0x68>)
 8000ee6:	f002 fb9f 	bl	8003628 <HAL_GPIO_ReadPin>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d0f8      	beq.n	8000ee2 <DHT11_rx_Data+0x12>
#if 1
		delay_us(40); // 0인지 1인지 구분해야 하니까 둘의 중간 값 정도인 40마이크로 세컨드 만큼 딜레이를 주고 그 다음에 오는 if문을 통해 0인지 1인지 판단하겠다는 것이다. (0이면 26마이크로 세컨드만 유지되고, 1이면 70마이크로 세컨트가 유지되기 때문)
 8000ef0:	2028      	movs	r0, #40	; 0x28
 8000ef2:	f000 f9b1 	bl	8001258 <delay_us>
#else  // org
		delay_us(16);
#endif
		rx_data<<=1; // 한 비트를 좌로 쉬프트 시킨다. 총 8비트를 쌓아가야 하니까...
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	71fb      	strb	r3, [r7, #7]
		
		//when Input Data == 1
		if(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN))
 8000efc:	2101      	movs	r1, #1
 8000efe:	480e      	ldr	r0, [pc, #56]	; (8000f38 <DHT11_rx_Data+0x68>)
 8000f00:	f002 fb92 	bl	8003628 <HAL_GPIO_ReadPin>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <DHT11_rx_Data+0x42>
		{
			rx_data |= 1;
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	71fb      	strb	r3, [r7, #7]
		}
		while( 1 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f12:	bf00      	nop
 8000f14:	2101      	movs	r1, #1
 8000f16:	4808      	ldr	r0, [pc, #32]	; (8000f38 <DHT11_rx_Data+0x68>)
 8000f18:	f002 fb86 	bl	8003628 <HAL_GPIO_ReadPin>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d0f8      	beq.n	8000f14 <DHT11_rx_Data+0x44>
	for(int i = 0; i < 8; i++) // 8비트 받아야 하니까 for문을 8번 돌린다.
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	3301      	adds	r3, #1
 8000f26:	603b      	str	r3, [r7, #0]
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	2b07      	cmp	r3, #7
 8000f2c:	ddd8      	ble.n	8000ee0 <DHT11_rx_Data+0x10>
	}
	return rx_data;
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40020000 	.word	0x40020000

08000f3c <DHT11_dumi_read>:


void DHT11_dumi_read(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	while( 1 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f40:	bf00      	nop
 8000f42:	2101      	movs	r1, #1
 8000f44:	480b      	ldr	r0, [pc, #44]	; (8000f74 <DHT11_dumi_read+0x38>)
 8000f46:	f002 fb6f 	bl	8003628 <HAL_GPIO_ReadPin>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d0f8      	beq.n	8000f42 <DHT11_dumi_read+0x6>
	while( 0 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f50:	bf00      	nop
 8000f52:	2101      	movs	r1, #1
 8000f54:	4807      	ldr	r0, [pc, #28]	; (8000f74 <DHT11_dumi_read+0x38>)
 8000f56:	f002 fb67 	bl	8003628 <HAL_GPIO_ReadPin>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d0f8      	beq.n	8000f52 <DHT11_dumi_read+0x16>
	while( 1 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f60:	bf00      	nop
 8000f62:	2101      	movs	r1, #1
 8000f64:	4803      	ldr	r0, [pc, #12]	; (8000f74 <DHT11_dumi_read+0x38>)
 8000f66:	f002 fb5f 	bl	8003628 <HAL_GPIO_ReadPin>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d0f8      	beq.n	8000f62 <DHT11_dumi_read+0x26>
	return;
 8000f70:	bf00      	nop
}
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40020000 	.word	0x40020000

08000f78 <led_all_on>:

	fp[func_index]();
}

void led_all_on(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|
//			GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, 1);
	HAL_GPIO_WritePin(GPIOD, 0xff, 1);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	21ff      	movs	r1, #255	; 0xff
 8000f80:	4802      	ldr	r0, [pc, #8]	; (8000f8c <led_all_on+0x14>)
 8000f82:	f002 fb69 	bl	8003658 <HAL_GPIO_WritePin>
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40020c00 	.word	0x40020c00

08000f90 <led_all_off>:

void led_all_off(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|
//				GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, 0);
	HAL_GPIO_WritePin(GPIOD, 0xff, 0);
 8000f94:	2200      	movs	r2, #0
 8000f96:	21ff      	movs	r1, #255	; 0xff
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <led_all_off+0x14>)
 8000f9a:	f002 fb5d 	bl	8003658 <HAL_GPIO_WritePin>
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40020c00 	.word	0x40020c00

08000fa8 <led_on_up>:

void led_on_up(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
	//	static int i = 0;
	int i = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	607b      	str	r3, [r7, #4]
	t1ms_counter = 0;
 8000fb2:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <led_on_up+0x50>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]

	led_all_off();
 8000fb8:	f7ff ffea 	bl	8000f90 <led_all_off>

	while(i < 8)
 8000fbc:	e014      	b.n	8000fe8 <led_on_up+0x40>
	{
		if (t1ms_counter >= 200)
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <led_on_up+0x50>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2bc7      	cmp	r3, #199	; 0xc7
 8000fc4:	dd10      	ble.n	8000fe8 <led_on_up+0x40>
		{
			t1ms_counter = 0;
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <led_on_up+0x50>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
			led_all_off();
 8000fcc:	f7ff ffe0 	bl	8000f90 <led_all_off>
			HAL_GPIO_WritePin(GPIOD, 0x01 << i++, 1);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	1c5a      	adds	r2, r3, #1
 8000fd4:	607a      	str	r2, [r7, #4]
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	2201      	movs	r2, #1
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4806      	ldr	r0, [pc, #24]	; (8000ffc <led_on_up+0x54>)
 8000fe4:	f002 fb38 	bl	8003658 <HAL_GPIO_WritePin>
	while(i < 8)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b07      	cmp	r3, #7
 8000fec:	dde7      	ble.n	8000fbe <led_on_up+0x16>
		}
	}
}
 8000fee:	bf00      	nop
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000980 	.word	0x20000980
 8000ffc:	40020c00 	.word	0x40020c00

08001000 <led_on_down>:

void led_on_down(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
	int i = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	607b      	str	r3, [r7, #4]
	t1ms_counter = 0;
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <led_on_down+0x50>)
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]

	led_all_off();
 8001010:	f7ff ffbe 	bl	8000f90 <led_all_off>

	while(i < 8)
 8001014:	e014      	b.n	8001040 <led_on_down+0x40>
	{
		if (t1ms_counter >= 200)
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <led_on_down+0x50>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2bc7      	cmp	r3, #199	; 0xc7
 800101c:	dd10      	ble.n	8001040 <led_on_down+0x40>
		{
			t1ms_counter = 0;
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <led_on_down+0x50>)
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
			led_all_off();
 8001024:	f7ff ffb4 	bl	8000f90 <led_all_off>
			HAL_GPIO_WritePin(GPIOD, 0x80 >> i++, 1);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	1c5a      	adds	r2, r3, #1
 800102c:	607a      	str	r2, [r7, #4]
 800102e:	2280      	movs	r2, #128	; 0x80
 8001030:	fa42 f303 	asr.w	r3, r2, r3
 8001034:	b29b      	uxth	r3, r3
 8001036:	2201      	movs	r2, #1
 8001038:	4619      	mov	r1, r3
 800103a:	4806      	ldr	r0, [pc, #24]	; (8001054 <led_on_down+0x54>)
 800103c:	f002 fb0c 	bl	8003658 <HAL_GPIO_WritePin>
	while(i < 8)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b07      	cmp	r3, #7
 8001044:	dde7      	ble.n	8001016 <led_on_down+0x16>
		}
	}
}
 8001046:	bf00      	nop
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000980 	.word	0x20000980
 8001054:	40020c00 	.word	0x40020c00

08001058 <led_keepon_up>:

void led_keepon_up(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
	int i = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	607b      	str	r3, [r7, #4]
	t1ms_counter = 0;
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <led_keepon_up+0x4c>)
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]

	led_all_off();
 8001068:	f7ff ff92 	bl	8000f90 <led_all_off>

	while (i < 8)
 800106c:	e012      	b.n	8001094 <led_keepon_up+0x3c>
	{
		if (t1ms_counter >= 200)
 800106e:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <led_keepon_up+0x4c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2bc7      	cmp	r3, #199	; 0xc7
 8001074:	dd0e      	ble.n	8001094 <led_keepon_up+0x3c>
		{
			t1ms_counter = 0;
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <led_keepon_up+0x4c>)
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, 0x01 << i++, 1);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	1c5a      	adds	r2, r3, #1
 8001080:	607a      	str	r2, [r7, #4]
 8001082:	2201      	movs	r2, #1
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	b29b      	uxth	r3, r3
 800108a:	2201      	movs	r2, #1
 800108c:	4619      	mov	r1, r3
 800108e:	4806      	ldr	r0, [pc, #24]	; (80010a8 <led_keepon_up+0x50>)
 8001090:	f002 fae2 	bl	8003658 <HAL_GPIO_WritePin>
	while (i < 8)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b07      	cmp	r3, #7
 8001098:	dde9      	ble.n	800106e <led_keepon_up+0x16>
		}
	}
}
 800109a:	bf00      	nop
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000980 	.word	0x20000980
 80010a8:	40020c00 	.word	0x40020c00

080010ac <led_keepon_down>:

void led_keepon_down(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
	int i = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
	t1ms_counter = 0;
 80010b6:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <led_keepon_down+0x4c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]

	led_all_off();
 80010bc:	f7ff ff68 	bl	8000f90 <led_all_off>

	while (i < 8)
 80010c0:	e012      	b.n	80010e8 <led_keepon_down+0x3c>
	{
		if (t1ms_counter >= 200)
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <led_keepon_down+0x4c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2bc7      	cmp	r3, #199	; 0xc7
 80010c8:	dd0e      	ble.n	80010e8 <led_keepon_down+0x3c>
		{
			t1ms_counter = 0;
 80010ca:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <led_keepon_down+0x4c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, 0x80 >> i++, 1);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	1c5a      	adds	r2, r3, #1
 80010d4:	607a      	str	r2, [r7, #4]
 80010d6:	2280      	movs	r2, #128	; 0x80
 80010d8:	fa42 f303 	asr.w	r3, r2, r3
 80010dc:	b29b      	uxth	r3, r3
 80010de:	2201      	movs	r2, #1
 80010e0:	4619      	mov	r1, r3
 80010e2:	4806      	ldr	r0, [pc, #24]	; (80010fc <led_keepon_down+0x50>)
 80010e4:	f002 fab8 	bl	8003658 <HAL_GPIO_WritePin>
	while (i < 8)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b07      	cmp	r3, #7
 80010ec:	dde9      	ble.n	80010c2 <led_keepon_down+0x16>
		}
	}
}
 80010ee:	bf00      	nop
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000980 	.word	0x20000980
 80010fc:	40020c00 	.word	0x40020c00

08001100 <led_flower_on>:

void led_flower_on(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
	int i = 0, delay = 300;
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800110e:	603b      	str	r3, [r7, #0]
	t1ms_counter = 0;
 8001110:	4b19      	ldr	r3, [pc, #100]	; (8001178 <led_flower_on+0x78>)
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]

	led_all_off();
 8001116:	f7ff ff3b 	bl	8000f90 <led_all_off>

	while(i < 4)
 800111a:	e024      	b.n	8001166 <led_flower_on+0x66>
	{
		if (t1ms_counter >= delay)
 800111c:	4b16      	ldr	r3, [pc, #88]	; (8001178 <led_flower_on+0x78>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	683a      	ldr	r2, [r7, #0]
 8001122:	429a      	cmp	r2, r3
 8001124:	dc1f      	bgt.n	8001166 <led_flower_on+0x66>
		{
			t1ms_counter = 0;
 8001126:	4b14      	ldr	r3, [pc, #80]	; (8001178 <led_flower_on+0x78>)
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, 0x01 << (4 + i), 1);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3304      	adds	r3, #4
 8001130:	2201      	movs	r2, #1
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	b29b      	uxth	r3, r3
 8001138:	2201      	movs	r2, #1
 800113a:	4619      	mov	r1, r3
 800113c:	480f      	ldr	r0, [pc, #60]	; (800117c <led_flower_on+0x7c>)
 800113e:	f002 fa8b 	bl	8003658 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, 0x01 << (3 - i), 1);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f1c3 0303 	rsb	r3, r3, #3
 8001148:	2201      	movs	r2, #1
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	b29b      	uxth	r3, r3
 8001150:	2201      	movs	r2, #1
 8001152:	4619      	mov	r1, r3
 8001154:	4809      	ldr	r0, [pc, #36]	; (800117c <led_flower_on+0x7c>)
 8001156:	f002 fa7f 	bl	8003658 <HAL_GPIO_WritePin>
			i++;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	3301      	adds	r3, #1
 800115e:	607b      	str	r3, [r7, #4]
			delay += 100;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	3364      	adds	r3, #100	; 0x64
 8001164:	603b      	str	r3, [r7, #0]
	while(i < 4)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b03      	cmp	r3, #3
 800116a:	ddd7      	ble.n	800111c <led_flower_on+0x1c>
		}
	}
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000980 	.word	0x20000980
 800117c:	40020c00 	.word	0x40020c00

08001180 <led_flower_off>:

void led_flower_off(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
	int i = 0, delay = 700;
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800118e:	603b      	str	r3, [r7, #0]
	t1ms_counter = 0;
 8001190:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <led_flower_off+0x74>)
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]

	led_all_on();
 8001196:	f7ff feef 	bl	8000f78 <led_all_on>

	while(i < 4)
 800119a:	e023      	b.n	80011e4 <led_flower_off+0x64>
	{
		if (t1ms_counter >= delay)
 800119c:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <led_flower_off+0x74>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	683a      	ldr	r2, [r7, #0]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	dc1e      	bgt.n	80011e4 <led_flower_off+0x64>
		{
			t1ms_counter = 0;
 80011a6:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <led_flower_off+0x74>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, 0x01 << (0 + i), 0);
 80011ac:	2201      	movs	r2, #1
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	2200      	movs	r2, #0
 80011b8:	4619      	mov	r1, r3
 80011ba:	480f      	ldr	r0, [pc, #60]	; (80011f8 <led_flower_off+0x78>)
 80011bc:	f002 fa4c 	bl	8003658 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, 0x01 << (7 - i), 0);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f1c3 0307 	rsb	r3, r3, #7
 80011c6:	2201      	movs	r2, #1
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	2200      	movs	r2, #0
 80011d0:	4619      	mov	r1, r3
 80011d2:	4809      	ldr	r0, [pc, #36]	; (80011f8 <led_flower_off+0x78>)
 80011d4:	f002 fa40 	bl	8003658 <HAL_GPIO_WritePin>
			i++;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3301      	adds	r3, #1
 80011dc:	607b      	str	r3, [r7, #4]
			delay -= 100;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	3b64      	subs	r3, #100	; 0x64
 80011e2:	603b      	str	r3, [r7, #0]
	while(i < 4)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b03      	cmp	r3, #3
 80011e8:	ddd8      	ble.n	800119c <led_flower_off+0x1c>
		}
	}
}
 80011ea:	bf00      	nop
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000980 	.word	0x20000980
 80011f8:	40020c00 	.word	0x40020c00

080011fc <HAL_STSTICK_Handler>:
// call by SysTick_Handler of stm32f4xx_it.c
// ARM default timer
// enter here every 1ms
volatile int t1ms_counter = 0;
void HAL_STSTICK_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
	t1ms_counter++; // 1ms timer
 8001200:	4b04      	ldr	r3, [pc, #16]	; (8001214 <HAL_STSTICK_Handler+0x18>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	3301      	adds	r3, #1
 8001206:	4a03      	ldr	r2, [pc, #12]	; (8001214 <HAL_STSTICK_Handler+0x18>)
 8001208:	6013      	str	r3, [r2, #0]
}
 800120a:	bf00      	nop
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	20000980 	.word	0x20000980

08001218 <HAL_TIM_PeriodElapsedCallback>:
// move from Driver/STM32F4xx_HAL_Driver/stm32f4xx_hal_tim.c to here
// enter here when every timer interrupt occurs
volatile int TIM10_10ms_counter = 0;
volatile int TIM10_10ms_ultrasonic = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a09      	ldr	r2, [pc, #36]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d109      	bne.n	800123e <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		TIM10_10ms_counter++; // timer for LED
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	3301      	adds	r3, #1
 8001230:	4a07      	ldr	r2, [pc, #28]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001232:	6013      	str	r3, [r2, #0]
		TIM10_10ms_ultrasonic++; // timer for ultrasonic trigger
 8001234:	4b07      	ldr	r3, [pc, #28]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	3301      	adds	r3, #1
 800123a:	4a06      	ldr	r2, [pc, #24]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800123c:	6013      	str	r3, [r2, #0]
	}
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40014400 	.word	0x40014400
 8001250:	20000984 	.word	0x20000984
 8001254:	20000988 	.word	0x20000988

08001258 <delay_us>:

// function implement that extern from DHT11.c
void delay_us (unsigned long us)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim11, 0); // tim11 clear // H/W counter...
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <delay_us+0x2c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2200      	movs	r2, #0
 8001266:	625a      	str	r2, [r3, #36]	; 0x24

	while(__HAL_TIM_GET_COUNTER(&htim11) < us)
 8001268:	bf00      	nop
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <delay_us+0x2c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	429a      	cmp	r2, r3
 8001274:	d8f9      	bhi.n	800126a <delay_us+0x12>
		;

}
 8001276:	bf00      	nop
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	200003a0 	.word	0x200003a0

08001288 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8001290:	1d39      	adds	r1, r7, #4
 8001292:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001296:	2201      	movs	r2, #1
 8001298:	4803      	ldr	r0, [pc, #12]	; (80012a8 <__io_putchar+0x20>)
 800129a:	f004 f876 	bl	800538a <HAL_UART_Transmit>

  return ch;
 800129e:	687b      	ldr	r3, [r7, #4]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	200003e8 	.word	0x200003e8

080012ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b0:	f001 faac 	bl	800280c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b4:	f000 f84a 	bl	800134c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b8:	f000 fa5e 	bl	8001778 <MX_GPIO_Init>
  MX_ETH_Init();
 80012bc:	f000 f8b0 	bl	8001420 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80012c0:	f000 f9d8 	bl	8001674 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80012c4:	f000 fa2a 	bl	800171c <MX_USB_OTG_FS_PCD_Init>
  MX_USART6_UART_Init();
 80012c8:	f000 f9fe 	bl	80016c8 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 80012cc:	f000 f98a 	bl	80015e4 <MX_TIM10_Init>
  MX_TIM11_Init();
 80012d0:	f000 f9ac 	bl	800162c <MX_TIM11_Init>
  MX_TIM3_Init();
 80012d4:	f000 f932 	bl	800153c <MX_TIM3_Init>
  MX_I2C1_Init();
 80012d8:	f000 f8f0 	bl	80014bc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  printf("main() start!!\n");
 80012dc:	4812      	ldr	r0, [pc, #72]	; (8001328 <main+0x7c>)
 80012de:	f005 fc3d 	bl	8006b5c <puts>
  //  led_main();

  DHT11_Init();
 80012e2:	f7ff fd95 	bl	8000e10 <DHT11_Init>

  HAL_UART_Receive_IT(&huart3, &rx_data, 1); // RX huart3�?????? ?��?��?��?�� interrupt ?��?��?��
 80012e6:	2201      	movs	r2, #1
 80012e8:	4910      	ldr	r1, [pc, #64]	; (800132c <main+0x80>)
 80012ea:	4811      	ldr	r0, [pc, #68]	; (8001330 <main+0x84>)
 80012ec:	f004 f8df 	bl	80054ae <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1); // RX huart6�?????? ?��?��?��?�� interrupt ?��?��?��
 80012f0:	2201      	movs	r2, #1
 80012f2:	4910      	ldr	r1, [pc, #64]	; (8001334 <main+0x88>)
 80012f4:	4810      	ldr	r0, [pc, #64]	; (8001338 <main+0x8c>)
 80012f6:	f004 f8da 	bl	80054ae <HAL_UART_Receive_IT>

  HAL_TIM_Base_Start_IT(&htim10); // add_kenGwon_1011
 80012fa:	4810      	ldr	r0, [pc, #64]	; (800133c <main+0x90>)
 80012fc:	f003 f98a 	bl	8004614 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11); // add_kenGwon_1011
 8001300:	480f      	ldr	r0, [pc, #60]	; (8001340 <main+0x94>)
 8001302:	f003 f987 	bl	8004614 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1); // for count pulse(InputCapture between rising edge & falling edge) add_kenGwon_1012
 8001306:	2100      	movs	r1, #0
 8001308:	480e      	ldr	r0, [pc, #56]	; (8001344 <main+0x98>)
 800130a:	f003 fa43 	bl	8004794 <HAL_TIM_IC_Start_IT>
  /* USER CODE BEGIN WHILE */

//  i2c_lcd_main();
//  DHT11_main();

  TIM10_10ms_counter = 0;
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <main+0x9c>)
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]

  while (1)
  {
	  DHT11_processing();
 8001314:	f7ff fd34 	bl	8000d80 <DHT11_processing>

	  pc_command_processing();
 8001318:	f000 ffce 	bl	80022b8 <pc_command_processing>
	  bt_command_processing();
 800131c:	f001 f934 	bl	8002588 <bt_command_processing>

	  ultrasonic_processing();
 8001320:	f001 f9e2 	bl	80026e8 <ultrasonic_processing>
	  DHT11_processing();
 8001324:	e7f6      	b.n	8001314 <main+0x68>
 8001326:	bf00      	nop
 8001328:	08007bc8 	.word	0x08007bc8
 800132c:	2000097c 	.word	0x2000097c
 8001330:	200003e8 	.word	0x200003e8
 8001334:	2000097d 	.word	0x2000097d
 8001338:	2000042c 	.word	0x2000042c
 800133c:	20000358 	.word	0x20000358
 8001340:	200003a0 	.word	0x200003a0
 8001344:	20000310 	.word	0x20000310
 8001348:	20000984 	.word	0x20000984

0800134c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b094      	sub	sp, #80	; 0x50
 8001350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001352:	f107 0320 	add.w	r3, r7, #32
 8001356:	2230      	movs	r2, #48	; 0x30
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f005 fb70 	bl	8006a40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001370:	2300      	movs	r3, #0
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	4b28      	ldr	r3, [pc, #160]	; (8001418 <SystemClock_Config+0xcc>)
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	4a27      	ldr	r2, [pc, #156]	; (8001418 <SystemClock_Config+0xcc>)
 800137a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800137e:	6413      	str	r3, [r2, #64]	; 0x40
 8001380:	4b25      	ldr	r3, [pc, #148]	; (8001418 <SystemClock_Config+0xcc>)
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800138c:	2300      	movs	r3, #0
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	4b22      	ldr	r3, [pc, #136]	; (800141c <SystemClock_Config+0xd0>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a21      	ldr	r2, [pc, #132]	; (800141c <SystemClock_Config+0xd0>)
 8001396:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800139a:	6013      	str	r3, [r2, #0]
 800139c:	4b1f      	ldr	r3, [pc, #124]	; (800141c <SystemClock_Config+0xd0>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013a8:	2301      	movs	r3, #1
 80013aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80013ac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013b2:	2302      	movs	r3, #2
 80013b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013bc:	2304      	movs	r3, #4
 80013be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80013c0:	23a8      	movs	r3, #168	; 0xa8
 80013c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013c4:	2302      	movs	r3, #2
 80013c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013c8:	2307      	movs	r3, #7
 80013ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013cc:	f107 0320 	add.w	r3, r7, #32
 80013d0:	4618      	mov	r0, r3
 80013d2:	f002 fc37 	bl	8003c44 <HAL_RCC_OscConfig>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013dc:	f000 fae6 	bl	80019ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e0:	230f      	movs	r3, #15
 80013e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013e4:	2302      	movs	r3, #2
 80013e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013f8:	f107 030c 	add.w	r3, r7, #12
 80013fc:	2105      	movs	r1, #5
 80013fe:	4618      	mov	r0, r3
 8001400:	f002 fe98 	bl	8004134 <HAL_RCC_ClockConfig>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800140a:	f000 facf 	bl	80019ac <Error_Handler>
  }
}
 800140e:	bf00      	nop
 8001410:	3750      	adds	r7, #80	; 0x50
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800
 800141c:	40007000 	.word	0x40007000

08001420 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001424:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <MX_ETH_Init+0x84>)
 8001426:	4a20      	ldr	r2, [pc, #128]	; (80014a8 <MX_ETH_Init+0x88>)
 8001428:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800142a:	4b20      	ldr	r3, [pc, #128]	; (80014ac <MX_ETH_Init+0x8c>)
 800142c:	2200      	movs	r2, #0
 800142e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001430:	4b1e      	ldr	r3, [pc, #120]	; (80014ac <MX_ETH_Init+0x8c>)
 8001432:	2280      	movs	r2, #128	; 0x80
 8001434:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001436:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <MX_ETH_Init+0x8c>)
 8001438:	22e1      	movs	r2, #225	; 0xe1
 800143a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800143c:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <MX_ETH_Init+0x8c>)
 800143e:	2200      	movs	r2, #0
 8001440:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001442:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <MX_ETH_Init+0x8c>)
 8001444:	2200      	movs	r2, #0
 8001446:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001448:	4b18      	ldr	r3, [pc, #96]	; (80014ac <MX_ETH_Init+0x8c>)
 800144a:	2200      	movs	r2, #0
 800144c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <MX_ETH_Init+0x84>)
 8001450:	4a16      	ldr	r2, [pc, #88]	; (80014ac <MX_ETH_Init+0x8c>)
 8001452:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001454:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <MX_ETH_Init+0x84>)
 8001456:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800145a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <MX_ETH_Init+0x84>)
 800145e:	4a14      	ldr	r2, [pc, #80]	; (80014b0 <MX_ETH_Init+0x90>)
 8001460:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001462:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <MX_ETH_Init+0x84>)
 8001464:	4a13      	ldr	r2, [pc, #76]	; (80014b4 <MX_ETH_Init+0x94>)
 8001466:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001468:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <MX_ETH_Init+0x84>)
 800146a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800146e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001470:	480c      	ldr	r0, [pc, #48]	; (80014a4 <MX_ETH_Init+0x84>)
 8001472:	f001 fc05 	bl	8002c80 <HAL_ETH_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800147c:	f000 fa96 	bl	80019ac <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001480:	2238      	movs	r2, #56	; 0x38
 8001482:	2100      	movs	r1, #0
 8001484:	480c      	ldr	r0, [pc, #48]	; (80014b8 <MX_ETH_Init+0x98>)
 8001486:	f005 fadb 	bl	8006a40 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800148a:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <MX_ETH_Init+0x98>)
 800148c:	2221      	movs	r2, #33	; 0x21
 800148e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001490:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <MX_ETH_Init+0x98>)
 8001492:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001496:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001498:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <MX_ETH_Init+0x98>)
 800149a:	2200      	movs	r2, #0
 800149c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	2000020c 	.word	0x2000020c
 80014a8:	40028000 	.word	0x40028000
 80014ac:	2000098c 	.word	0x2000098c
 80014b0:	2000016c 	.word	0x2000016c
 80014b4:	200000cc 	.word	0x200000cc
 80014b8:	20000094 	.word	0x20000094

080014bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014c0:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <MX_I2C1_Init+0x74>)
 80014c2:	4a1c      	ldr	r2, [pc, #112]	; (8001534 <MX_I2C1_Init+0x78>)
 80014c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014c6:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <MX_I2C1_Init+0x74>)
 80014c8:	4a1b      	ldr	r2, [pc, #108]	; (8001538 <MX_I2C1_Init+0x7c>)
 80014ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014cc:	4b18      	ldr	r3, [pc, #96]	; (8001530 <MX_I2C1_Init+0x74>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014d2:	4b17      	ldr	r3, [pc, #92]	; (8001530 <MX_I2C1_Init+0x74>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014d8:	4b15      	ldr	r3, [pc, #84]	; (8001530 <MX_I2C1_Init+0x74>)
 80014da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014e0:	4b13      	ldr	r3, [pc, #76]	; (8001530 <MX_I2C1_Init+0x74>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014e6:	4b12      	ldr	r3, [pc, #72]	; (8001530 <MX_I2C1_Init+0x74>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ec:	4b10      	ldr	r3, [pc, #64]	; (8001530 <MX_I2C1_Init+0x74>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014f2:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <MX_I2C1_Init+0x74>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014f8:	480d      	ldr	r0, [pc, #52]	; (8001530 <MX_I2C1_Init+0x74>)
 80014fa:	f002 f8c7 	bl	800368c <HAL_I2C_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001504:	f000 fa52 	bl	80019ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001508:	2100      	movs	r1, #0
 800150a:	4809      	ldr	r0, [pc, #36]	; (8001530 <MX_I2C1_Init+0x74>)
 800150c:	f002 fa02 	bl	8003914 <HAL_I2CEx_ConfigAnalogFilter>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001516:	f000 fa49 	bl	80019ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800151a:	2100      	movs	r1, #0
 800151c:	4804      	ldr	r0, [pc, #16]	; (8001530 <MX_I2C1_Init+0x74>)
 800151e:	f002 fa35 	bl	800398c <HAL_I2CEx_ConfigDigitalFilter>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001528:	f000 fa40 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}
 8001530:	200002bc 	.word	0x200002bc
 8001534:	40005400 	.word	0x40005400
 8001538:	000186a0 	.word	0x000186a0

0800153c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001542:	f107 0310 	add.w	r3, r7, #16
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800154c:	463b      	mov	r3, r7
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001558:	4b20      	ldr	r3, [pc, #128]	; (80015dc <MX_TIM3_Init+0xa0>)
 800155a:	4a21      	ldr	r2, [pc, #132]	; (80015e0 <MX_TIM3_Init+0xa4>)
 800155c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800155e:	4b1f      	ldr	r3, [pc, #124]	; (80015dc <MX_TIM3_Init+0xa0>)
 8001560:	2253      	movs	r2, #83	; 0x53
 8001562:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001564:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <MX_TIM3_Init+0xa0>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800156a:	4b1c      	ldr	r3, [pc, #112]	; (80015dc <MX_TIM3_Init+0xa0>)
 800156c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001570:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001572:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <MX_TIM3_Init+0xa0>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001578:	4b18      	ldr	r3, [pc, #96]	; (80015dc <MX_TIM3_Init+0xa0>)
 800157a:	2200      	movs	r2, #0
 800157c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800157e:	4817      	ldr	r0, [pc, #92]	; (80015dc <MX_TIM3_Init+0xa0>)
 8001580:	f003 f8b8 	bl	80046f4 <HAL_TIM_IC_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800158a:	f000 fa0f 	bl	80019ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001596:	f107 0310 	add.w	r3, r7, #16
 800159a:	4619      	mov	r1, r3
 800159c:	480f      	ldr	r0, [pc, #60]	; (80015dc <MX_TIM3_Init+0xa0>)
 800159e:	f003 fe17 	bl	80051d0 <HAL_TIMEx_MasterConfigSynchronization>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80015a8:	f000 fa00 	bl	80019ac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80015ac:	230a      	movs	r3, #10
 80015ae:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015b0:	2301      	movs	r3, #1
 80015b2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80015bc:	463b      	mov	r3, r7
 80015be:	2200      	movs	r2, #0
 80015c0:	4619      	mov	r1, r3
 80015c2:	4806      	ldr	r0, [pc, #24]	; (80015dc <MX_TIM3_Init+0xa0>)
 80015c4:	f003 fb16 	bl	8004bf4 <HAL_TIM_IC_ConfigChannel>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80015ce:	f000 f9ed 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015d2:	bf00      	nop
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000310 	.word	0x20000310
 80015e0:	40000400 	.word	0x40000400

080015e4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80015e8:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <MX_TIM10_Init+0x40>)
 80015ea:	4a0f      	ldr	r2, [pc, #60]	; (8001628 <MX_TIM10_Init+0x44>)
 80015ec:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 80015ee:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <MX_TIM10_Init+0x40>)
 80015f0:	22a7      	movs	r2, #167	; 0xa7
 80015f2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f4:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <MX_TIM10_Init+0x40>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 80015fa:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <MX_TIM10_Init+0x40>)
 80015fc:	f242 720f 	movw	r2, #9999	; 0x270f
 8001600:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001602:	4b08      	ldr	r3, [pc, #32]	; (8001624 <MX_TIM10_Init+0x40>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001608:	4b06      	ldr	r3, [pc, #24]	; (8001624 <MX_TIM10_Init+0x40>)
 800160a:	2200      	movs	r2, #0
 800160c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800160e:	4805      	ldr	r0, [pc, #20]	; (8001624 <MX_TIM10_Init+0x40>)
 8001610:	f002 ffb0 	bl	8004574 <HAL_TIM_Base_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800161a:	f000 f9c7 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000358 	.word	0x20000358
 8001628:	40014400 	.word	0x40014400

0800162c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001630:	4b0e      	ldr	r3, [pc, #56]	; (800166c <MX_TIM11_Init+0x40>)
 8001632:	4a0f      	ldr	r2, [pc, #60]	; (8001670 <MX_TIM11_Init+0x44>)
 8001634:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 8001636:	4b0d      	ldr	r3, [pc, #52]	; (800166c <MX_TIM11_Init+0x40>)
 8001638:	22a7      	movs	r2, #167	; 0xa7
 800163a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163c:	4b0b      	ldr	r3, [pc, #44]	; (800166c <MX_TIM11_Init+0x40>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001642:	4b0a      	ldr	r3, [pc, #40]	; (800166c <MX_TIM11_Init+0x40>)
 8001644:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001648:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800164a:	4b08      	ldr	r3, [pc, #32]	; (800166c <MX_TIM11_Init+0x40>)
 800164c:	2200      	movs	r2, #0
 800164e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <MX_TIM11_Init+0x40>)
 8001652:	2200      	movs	r2, #0
 8001654:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001656:	4805      	ldr	r0, [pc, #20]	; (800166c <MX_TIM11_Init+0x40>)
 8001658:	f002 ff8c 	bl	8004574 <HAL_TIM_Base_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001662:	f000 f9a3 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200003a0 	.word	0x200003a0
 8001670:	40014800 	.word	0x40014800

08001674 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <MX_USART3_UART_Init+0x4c>)
 800167a:	4a12      	ldr	r2, [pc, #72]	; (80016c4 <MX_USART3_UART_Init+0x50>)
 800167c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800167e:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <MX_USART3_UART_Init+0x4c>)
 8001680:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001684:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <MX_USART3_UART_Init+0x4c>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <MX_USART3_UART_Init+0x4c>)
 800168e:	2200      	movs	r2, #0
 8001690:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001692:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <MX_USART3_UART_Init+0x4c>)
 8001694:	2200      	movs	r2, #0
 8001696:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001698:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <MX_USART3_UART_Init+0x4c>)
 800169a:	220c      	movs	r2, #12
 800169c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169e:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <MX_USART3_UART_Init+0x4c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <MX_USART3_UART_Init+0x4c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016aa:	4805      	ldr	r0, [pc, #20]	; (80016c0 <MX_USART3_UART_Init+0x4c>)
 80016ac:	f003 fe20 	bl	80052f0 <HAL_UART_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80016b6:	f000 f979 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200003e8 	.word	0x200003e8
 80016c4:	40004800 	.word	0x40004800

080016c8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80016cc:	4b11      	ldr	r3, [pc, #68]	; (8001714 <MX_USART6_UART_Init+0x4c>)
 80016ce:	4a12      	ldr	r2, [pc, #72]	; (8001718 <MX_USART6_UART_Init+0x50>)
 80016d0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <MX_USART6_UART_Init+0x4c>)
 80016d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016d8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80016da:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <MX_USART6_UART_Init+0x4c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <MX_USART6_UART_Init+0x4c>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80016e6:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <MX_USART6_UART_Init+0x4c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80016ec:	4b09      	ldr	r3, [pc, #36]	; (8001714 <MX_USART6_UART_Init+0x4c>)
 80016ee:	220c      	movs	r2, #12
 80016f0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016f2:	4b08      	ldr	r3, [pc, #32]	; (8001714 <MX_USART6_UART_Init+0x4c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <MX_USART6_UART_Init+0x4c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80016fe:	4805      	ldr	r0, [pc, #20]	; (8001714 <MX_USART6_UART_Init+0x4c>)
 8001700:	f003 fdf6 	bl	80052f0 <HAL_UART_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800170a:	f000 f94f 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	2000042c 	.word	0x2000042c
 8001718:	40011400 	.word	0x40011400

0800171c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001720:	4b14      	ldr	r3, [pc, #80]	; (8001774 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001722:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001726:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001728:	4b12      	ldr	r3, [pc, #72]	; (8001774 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800172a:	2204      	movs	r2, #4
 800172c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800172e:	4b11      	ldr	r3, [pc, #68]	; (8001774 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001730:	2202      	movs	r2, #2
 8001732:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001734:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001736:	2200      	movs	r2, #0
 8001738:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800173a:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800173c:	2202      	movs	r2, #2
 800173e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001742:	2201      	movs	r2, #1
 8001744:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001746:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001748:	2200      	movs	r2, #0
 800174a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800174c:	4b09      	ldr	r3, [pc, #36]	; (8001774 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800174e:	2200      	movs	r2, #0
 8001750:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001752:	4b08      	ldr	r3, [pc, #32]	; (8001774 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001754:	2201      	movs	r2, #1
 8001756:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800175a:	2200      	movs	r2, #0
 800175c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800175e:	4805      	ldr	r0, [pc, #20]	; (8001774 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001760:	f002 f953 	bl	8003a0a <HAL_PCD_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800176a:	f000 f91f 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000470 	.word	0x20000470

08001778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08e      	sub	sp, #56	; 0x38
 800177c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	60da      	str	r2, [r3, #12]
 800178c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	623b      	str	r3, [r7, #32]
 8001792:	4b7e      	ldr	r3, [pc, #504]	; (800198c <MX_GPIO_Init+0x214>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a7d      	ldr	r2, [pc, #500]	; (800198c <MX_GPIO_Init+0x214>)
 8001798:	f043 0304 	orr.w	r3, r3, #4
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b7b      	ldr	r3, [pc, #492]	; (800198c <MX_GPIO_Init+0x214>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0304 	and.w	r3, r3, #4
 80017a6:	623b      	str	r3, [r7, #32]
 80017a8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
 80017ae:	4b77      	ldr	r3, [pc, #476]	; (800198c <MX_GPIO_Init+0x214>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a76      	ldr	r2, [pc, #472]	; (800198c <MX_GPIO_Init+0x214>)
 80017b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b74      	ldr	r3, [pc, #464]	; (800198c <MX_GPIO_Init+0x214>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017c2:	61fb      	str	r3, [r7, #28]
 80017c4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	61bb      	str	r3, [r7, #24]
 80017ca:	4b70      	ldr	r3, [pc, #448]	; (800198c <MX_GPIO_Init+0x214>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a6f      	ldr	r2, [pc, #444]	; (800198c <MX_GPIO_Init+0x214>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b6d      	ldr	r3, [pc, #436]	; (800198c <MX_GPIO_Init+0x214>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	61bb      	str	r3, [r7, #24]
 80017e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	4b69      	ldr	r3, [pc, #420]	; (800198c <MX_GPIO_Init+0x214>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a68      	ldr	r2, [pc, #416]	; (800198c <MX_GPIO_Init+0x214>)
 80017ec:	f043 0302 	orr.w	r3, r3, #2
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b66      	ldr	r3, [pc, #408]	; (800198c <MX_GPIO_Init+0x214>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	4b62      	ldr	r3, [pc, #392]	; (800198c <MX_GPIO_Init+0x214>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a61      	ldr	r2, [pc, #388]	; (800198c <MX_GPIO_Init+0x214>)
 8001808:	f043 0320 	orr.w	r3, r3, #32
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b5f      	ldr	r3, [pc, #380]	; (800198c <MX_GPIO_Init+0x214>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0320 	and.w	r3, r3, #32
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	4b5b      	ldr	r3, [pc, #364]	; (800198c <MX_GPIO_Init+0x214>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a5a      	ldr	r2, [pc, #360]	; (800198c <MX_GPIO_Init+0x214>)
 8001824:	f043 0310 	orr.w	r3, r3, #16
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4b58      	ldr	r3, [pc, #352]	; (800198c <MX_GPIO_Init+0x214>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f003 0310 	and.w	r3, r3, #16
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	60bb      	str	r3, [r7, #8]
 800183a:	4b54      	ldr	r3, [pc, #336]	; (800198c <MX_GPIO_Init+0x214>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a53      	ldr	r2, [pc, #332]	; (800198c <MX_GPIO_Init+0x214>)
 8001840:	f043 0308 	orr.w	r3, r3, #8
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b51      	ldr	r3, [pc, #324]	; (800198c <MX_GPIO_Init+0x214>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	607b      	str	r3, [r7, #4]
 8001856:	4b4d      	ldr	r3, [pc, #308]	; (800198c <MX_GPIO_Init+0x214>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a4c      	ldr	r2, [pc, #304]	; (800198c <MX_GPIO_Init+0x214>)
 800185c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b4a      	ldr	r3, [pc, #296]	; (800198c <MX_GPIO_Init+0x214>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 800186e:	2200      	movs	r2, #0
 8001870:	2101      	movs	r1, #1
 8001872:	4847      	ldr	r0, [pc, #284]	; (8001990 <MX_GPIO_Init+0x218>)
 8001874:	f001 fef0 	bl	8003658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001878:	2200      	movs	r2, #0
 800187a:	f244 0181 	movw	r1, #16513	; 0x4081
 800187e:	4845      	ldr	r0, [pc, #276]	; (8001994 <MX_GPIO_Init+0x21c>)
 8001880:	f001 feea 	bl	8003658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, GPIO_PIN_RESET);
 8001884:	2200      	movs	r2, #0
 8001886:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800188a:	4843      	ldr	r0, [pc, #268]	; (8001998 <MX_GPIO_Init+0x220>)
 800188c:	f001 fee4 	bl	8003658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001890:	2200      	movs	r2, #0
 8001892:	2140      	movs	r1, #64	; 0x40
 8001894:	4841      	ldr	r0, [pc, #260]	; (800199c <MX_GPIO_Init+0x224>)
 8001896:	f001 fedf 	bl	8003658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800189a:	2200      	movs	r2, #0
 800189c:	21ff      	movs	r1, #255	; 0xff
 800189e:	4840      	ldr	r0, [pc, #256]	; (80019a0 <MX_GPIO_Init+0x228>)
 80018a0:	f001 feda 	bl	8003658 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80018a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80018b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b8:	4619      	mov	r1, r3
 80018ba:	483a      	ldr	r0, [pc, #232]	; (80019a4 <MX_GPIO_Init+0x22c>)
 80018bc:	f001 fd08 	bl	80032d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 80018c0:	2301      	movs	r3, #1
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c4:	2301      	movs	r3, #1
 80018c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018cc:	2300      	movs	r3, #0
 80018ce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80018d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d4:	4619      	mov	r1, r3
 80018d6:	482e      	ldr	r0, [pc, #184]	; (8001990 <MX_GPIO_Init+0x218>)
 80018d8:	f001 fcfa 	bl	80032d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80018dc:	f244 0381 	movw	r3, #16513	; 0x4081
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e2:	2301      	movs	r3, #1
 80018e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ea:	2300      	movs	r3, #0
 80018ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f2:	4619      	mov	r1, r3
 80018f4:	4827      	ldr	r0, [pc, #156]	; (8001994 <MX_GPIO_Init+0x21c>)
 80018f6:	f001 fceb 	bl	80032d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULTRASONIC_TRIGGER_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIGGER_Pin;
 80018fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001900:	2301      	movs	r3, #1
 8001902:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001908:	2300      	movs	r3, #0
 800190a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ULTRASONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 800190c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001910:	4619      	mov	r1, r3
 8001912:	4821      	ldr	r0, [pc, #132]	; (8001998 <MX_GPIO_Init+0x220>)
 8001914:	f001 fcdc 	bl	80032d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin|BUTTON0_Pin;
 8001918:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800191e:	2300      	movs	r3, #0
 8001920:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800192a:	4619      	mov	r1, r3
 800192c:	481e      	ldr	r0, [pc, #120]	; (80019a8 <MX_GPIO_Init+0x230>)
 800192e:	f001 fccf 	bl	80032d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001932:	2340      	movs	r3, #64	; 0x40
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001936:	2301      	movs	r3, #1
 8001938:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193e:	2300      	movs	r3, #0
 8001940:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001946:	4619      	mov	r1, r3
 8001948:	4814      	ldr	r0, [pc, #80]	; (800199c <MX_GPIO_Init+0x224>)
 800194a:	f001 fcc1 	bl	80032d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800194e:	2380      	movs	r3, #128	; 0x80
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001952:	2300      	movs	r3, #0
 8001954:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800195a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800195e:	4619      	mov	r1, r3
 8001960:	480e      	ldr	r0, [pc, #56]	; (800199c <MX_GPIO_Init+0x224>)
 8001962:	f001 fcb5 	bl	80032d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001966:	23ff      	movs	r3, #255	; 0xff
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196a:	2301      	movs	r3, #1
 800196c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001972:	2300      	movs	r3, #0
 8001974:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001976:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800197a:	4619      	mov	r1, r3
 800197c:	4808      	ldr	r0, [pc, #32]	; (80019a0 <MX_GPIO_Init+0x228>)
 800197e:	f001 fca7 	bl	80032d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001982:	bf00      	nop
 8001984:	3738      	adds	r7, #56	; 0x38
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40023800 	.word	0x40023800
 8001990:	40020000 	.word	0x40020000
 8001994:	40020400 	.word	0x40020400
 8001998:	40021400 	.word	0x40021400
 800199c:	40021800 	.word	0x40021800
 80019a0:	40020c00 	.word	0x40020c00
 80019a4:	40020800 	.word	0x40020800
 80019a8:	40021000 	.word	0x40021000

080019ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019b0:	b672      	cpsid	i
}
 80019b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019b4:	e7fe      	b.n	80019b4 <Error_Handler+0x8>
	...

080019b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	607b      	str	r3, [r7, #4]
 80019c2:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <HAL_MspInit+0x4c>)
 80019c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c6:	4a0f      	ldr	r2, [pc, #60]	; (8001a04 <HAL_MspInit+0x4c>)
 80019c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019cc:	6453      	str	r3, [r2, #68]	; 0x44
 80019ce:	4b0d      	ldr	r3, [pc, #52]	; (8001a04 <HAL_MspInit+0x4c>)
 80019d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019d6:	607b      	str	r3, [r7, #4]
 80019d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	603b      	str	r3, [r7, #0]
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <HAL_MspInit+0x4c>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	4a08      	ldr	r2, [pc, #32]	; (8001a04 <HAL_MspInit+0x4c>)
 80019e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <HAL_MspInit+0x4c>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f2:	603b      	str	r3, [r7, #0]
 80019f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	40023800 	.word	0x40023800

08001a08 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08e      	sub	sp, #56	; 0x38
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a55      	ldr	r2, [pc, #340]	; (8001b7c <HAL_ETH_MspInit+0x174>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	f040 80a4 	bne.w	8001b74 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	623b      	str	r3, [r7, #32]
 8001a30:	4b53      	ldr	r3, [pc, #332]	; (8001b80 <HAL_ETH_MspInit+0x178>)
 8001a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a34:	4a52      	ldr	r2, [pc, #328]	; (8001b80 <HAL_ETH_MspInit+0x178>)
 8001a36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3c:	4b50      	ldr	r3, [pc, #320]	; (8001b80 <HAL_ETH_MspInit+0x178>)
 8001a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a44:	623b      	str	r3, [r7, #32]
 8001a46:	6a3b      	ldr	r3, [r7, #32]
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61fb      	str	r3, [r7, #28]
 8001a4c:	4b4c      	ldr	r3, [pc, #304]	; (8001b80 <HAL_ETH_MspInit+0x178>)
 8001a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a50:	4a4b      	ldr	r2, [pc, #300]	; (8001b80 <HAL_ETH_MspInit+0x178>)
 8001a52:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a56:	6313      	str	r3, [r2, #48]	; 0x30
 8001a58:	4b49      	ldr	r3, [pc, #292]	; (8001b80 <HAL_ETH_MspInit+0x178>)
 8001a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a60:	61fb      	str	r3, [r7, #28]
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	2300      	movs	r3, #0
 8001a66:	61bb      	str	r3, [r7, #24]
 8001a68:	4b45      	ldr	r3, [pc, #276]	; (8001b80 <HAL_ETH_MspInit+0x178>)
 8001a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6c:	4a44      	ldr	r2, [pc, #272]	; (8001b80 <HAL_ETH_MspInit+0x178>)
 8001a6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a72:	6313      	str	r3, [r2, #48]	; 0x30
 8001a74:	4b42      	ldr	r3, [pc, #264]	; (8001b80 <HAL_ETH_MspInit+0x178>)
 8001a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a7c:	61bb      	str	r3, [r7, #24]
 8001a7e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	4b3e      	ldr	r3, [pc, #248]	; (8001b80 <HAL_ETH_MspInit+0x178>)
 8001a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a88:	4a3d      	ldr	r2, [pc, #244]	; (8001b80 <HAL_ETH_MspInit+0x178>)
 8001a8a:	f043 0304 	orr.w	r3, r3, #4
 8001a8e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a90:	4b3b      	ldr	r3, [pc, #236]	; (8001b80 <HAL_ETH_MspInit+0x178>)
 8001a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	4b37      	ldr	r3, [pc, #220]	; (8001b80 <HAL_ETH_MspInit+0x178>)
 8001aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa4:	4a36      	ldr	r2, [pc, #216]	; (8001b80 <HAL_ETH_MspInit+0x178>)
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	6313      	str	r3, [r2, #48]	; 0x30
 8001aac:	4b34      	ldr	r3, [pc, #208]	; (8001b80 <HAL_ETH_MspInit+0x178>)
 8001aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	4b30      	ldr	r3, [pc, #192]	; (8001b80 <HAL_ETH_MspInit+0x178>)
 8001abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac0:	4a2f      	ldr	r2, [pc, #188]	; (8001b80 <HAL_ETH_MspInit+0x178>)
 8001ac2:	f043 0302 	orr.w	r3, r3, #2
 8001ac6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac8:	4b2d      	ldr	r3, [pc, #180]	; (8001b80 <HAL_ETH_MspInit+0x178>)
 8001aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60bb      	str	r3, [r7, #8]
 8001ad8:	4b29      	ldr	r3, [pc, #164]	; (8001b80 <HAL_ETH_MspInit+0x178>)
 8001ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001adc:	4a28      	ldr	r2, [pc, #160]	; (8001b80 <HAL_ETH_MspInit+0x178>)
 8001ade:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ae2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae4:	4b26      	ldr	r3, [pc, #152]	; (8001b80 <HAL_ETH_MspInit+0x178>)
 8001ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001af0:	2332      	movs	r3, #50	; 0x32
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af4:	2302      	movs	r3, #2
 8001af6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afc:	2303      	movs	r3, #3
 8001afe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b00:	230b      	movs	r3, #11
 8001b02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b08:	4619      	mov	r1, r3
 8001b0a:	481e      	ldr	r0, [pc, #120]	; (8001b84 <HAL_ETH_MspInit+0x17c>)
 8001b0c:	f001 fbe0 	bl	80032d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001b10:	2386      	movs	r3, #134	; 0x86
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b14:	2302      	movs	r3, #2
 8001b16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b20:	230b      	movs	r3, #11
 8001b22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4817      	ldr	r0, [pc, #92]	; (8001b88 <HAL_ETH_MspInit+0x180>)
 8001b2c:	f001 fbd0 	bl	80032d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001b30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b36:	2302      	movs	r3, #2
 8001b38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b42:	230b      	movs	r3, #11
 8001b44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001b46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	480f      	ldr	r0, [pc, #60]	; (8001b8c <HAL_ETH_MspInit+0x184>)
 8001b4e:	f001 fbbf 	bl	80032d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001b52:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b60:	2303      	movs	r3, #3
 8001b62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b64:	230b      	movs	r3, #11
 8001b66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4808      	ldr	r0, [pc, #32]	; (8001b90 <HAL_ETH_MspInit+0x188>)
 8001b70:	f001 fbae 	bl	80032d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001b74:	bf00      	nop
 8001b76:	3738      	adds	r7, #56	; 0x38
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40028000 	.word	0x40028000
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40020800 	.word	0x40020800
 8001b88:	40020000 	.word	0x40020000
 8001b8c:	40020400 	.word	0x40020400
 8001b90:	40021800 	.word	0x40021800

08001b94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08a      	sub	sp, #40	; 0x28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a19      	ldr	r2, [pc, #100]	; (8001c18 <HAL_I2C_MspInit+0x84>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d12c      	bne.n	8001c10 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	4b18      	ldr	r3, [pc, #96]	; (8001c1c <HAL_I2C_MspInit+0x88>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a17      	ldr	r2, [pc, #92]	; (8001c1c <HAL_I2C_MspInit+0x88>)
 8001bc0:	f043 0302 	orr.w	r3, r3, #2
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <HAL_I2C_MspInit+0x88>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	613b      	str	r3, [r7, #16]
 8001bd0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bd2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bd8:	2312      	movs	r3, #18
 8001bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be0:	2303      	movs	r3, #3
 8001be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001be4:	2304      	movs	r3, #4
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	4619      	mov	r1, r3
 8001bee:	480c      	ldr	r0, [pc, #48]	; (8001c20 <HAL_I2C_MspInit+0x8c>)
 8001bf0:	f001 fb6e 	bl	80032d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <HAL_I2C_MspInit+0x88>)
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	4a07      	ldr	r2, [pc, #28]	; (8001c1c <HAL_I2C_MspInit+0x88>)
 8001bfe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c02:	6413      	str	r3, [r2, #64]	; 0x40
 8001c04:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <HAL_I2C_MspInit+0x88>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c10:	bf00      	nop
 8001c12:	3728      	adds	r7, #40	; 0x28
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40005400 	.word	0x40005400
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	40020400 	.word	0x40020400

08001c24 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08a      	sub	sp, #40	; 0x28
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a1d      	ldr	r2, [pc, #116]	; (8001cb8 <HAL_TIM_IC_MspInit+0x94>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d133      	bne.n	8001cae <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	4b1c      	ldr	r3, [pc, #112]	; (8001cbc <HAL_TIM_IC_MspInit+0x98>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	4a1b      	ldr	r2, [pc, #108]	; (8001cbc <HAL_TIM_IC_MspInit+0x98>)
 8001c50:	f043 0302 	orr.w	r3, r3, #2
 8001c54:	6413      	str	r3, [r2, #64]	; 0x40
 8001c56:	4b19      	ldr	r3, [pc, #100]	; (8001cbc <HAL_TIM_IC_MspInit+0x98>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	4b15      	ldr	r3, [pc, #84]	; (8001cbc <HAL_TIM_IC_MspInit+0x98>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	4a14      	ldr	r2, [pc, #80]	; (8001cbc <HAL_TIM_IC_MspInit+0x98>)
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	6313      	str	r3, [r2, #48]	; 0x30
 8001c72:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <HAL_TIM_IC_MspInit+0x98>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ULTRASONIC_TIM3_CH1_Pin;
 8001c7e:	2340      	movs	r3, #64	; 0x40
 8001c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c82:	2302      	movs	r3, #2
 8001c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULTRASONIC_TIM3_CH1_GPIO_Port, &GPIO_InitStruct);
 8001c92:	f107 0314 	add.w	r3, r7, #20
 8001c96:	4619      	mov	r1, r3
 8001c98:	4809      	ldr	r0, [pc, #36]	; (8001cc0 <HAL_TIM_IC_MspInit+0x9c>)
 8001c9a:	f001 fb19 	bl	80032d0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	201d      	movs	r0, #29
 8001ca4:	f000 ff23 	bl	8002aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ca8:	201d      	movs	r0, #29
 8001caa:	f000 ff3c 	bl	8002b26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001cae:	bf00      	nop
 8001cb0:	3728      	adds	r7, #40	; 0x28
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40000400 	.word	0x40000400
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	40020000 	.word	0x40020000

08001cc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a1c      	ldr	r2, [pc, #112]	; (8001d44 <HAL_TIM_Base_MspInit+0x80>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d116      	bne.n	8001d04 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	4b1b      	ldr	r3, [pc, #108]	; (8001d48 <HAL_TIM_Base_MspInit+0x84>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cde:	4a1a      	ldr	r2, [pc, #104]	; (8001d48 <HAL_TIM_Base_MspInit+0x84>)
 8001ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ce6:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <HAL_TIM_Base_MspInit+0x84>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	2019      	movs	r0, #25
 8001cf8:	f000 fef9 	bl	8002aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001cfc:	2019      	movs	r0, #25
 8001cfe:	f000 ff12 	bl	8002b26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001d02:	e01a      	b.n	8001d3a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a10      	ldr	r2, [pc, #64]	; (8001d4c <HAL_TIM_Base_MspInit+0x88>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d115      	bne.n	8001d3a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	4b0d      	ldr	r3, [pc, #52]	; (8001d48 <HAL_TIM_Base_MspInit+0x84>)
 8001d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d16:	4a0c      	ldr	r2, [pc, #48]	; (8001d48 <HAL_TIM_Base_MspInit+0x84>)
 8001d18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d1e:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <HAL_TIM_Base_MspInit+0x84>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d26:	60bb      	str	r3, [r7, #8]
 8001d28:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	201a      	movs	r0, #26
 8001d30:	f000 fedd 	bl	8002aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001d34:	201a      	movs	r0, #26
 8001d36:	f000 fef6 	bl	8002b26 <HAL_NVIC_EnableIRQ>
}
 8001d3a:	bf00      	nop
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40014400 	.word	0x40014400
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40014800 	.word	0x40014800

08001d50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08c      	sub	sp, #48	; 0x30
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 031c 	add.w	r3, r7, #28
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a3a      	ldr	r2, [pc, #232]	; (8001e58 <HAL_UART_MspInit+0x108>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d135      	bne.n	8001dde <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
 8001d76:	4b39      	ldr	r3, [pc, #228]	; (8001e5c <HAL_UART_MspInit+0x10c>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	4a38      	ldr	r2, [pc, #224]	; (8001e5c <HAL_UART_MspInit+0x10c>)
 8001d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d80:	6413      	str	r3, [r2, #64]	; 0x40
 8001d82:	4b36      	ldr	r3, [pc, #216]	; (8001e5c <HAL_UART_MspInit+0x10c>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d8a:	61bb      	str	r3, [r7, #24]
 8001d8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	4b32      	ldr	r3, [pc, #200]	; (8001e5c <HAL_UART_MspInit+0x10c>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a31      	ldr	r2, [pc, #196]	; (8001e5c <HAL_UART_MspInit+0x10c>)
 8001d98:	f043 0308 	orr.w	r3, r3, #8
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b2f      	ldr	r3, [pc, #188]	; (8001e5c <HAL_UART_MspInit+0x10c>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001daa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db0:	2302      	movs	r3, #2
 8001db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db8:	2303      	movs	r3, #3
 8001dba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001dbc:	2307      	movs	r3, #7
 8001dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dc0:	f107 031c 	add.w	r3, r7, #28
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4826      	ldr	r0, [pc, #152]	; (8001e60 <HAL_UART_MspInit+0x110>)
 8001dc8:	f001 fa82 	bl	80032d0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	2100      	movs	r1, #0
 8001dd0:	2027      	movs	r0, #39	; 0x27
 8001dd2:	f000 fe8c 	bl	8002aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001dd6:	2027      	movs	r0, #39	; 0x27
 8001dd8:	f000 fea5 	bl	8002b26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001ddc:	e038      	b.n	8001e50 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART6)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a20      	ldr	r2, [pc, #128]	; (8001e64 <HAL_UART_MspInit+0x114>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d133      	bne.n	8001e50 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001de8:	2300      	movs	r3, #0
 8001dea:	613b      	str	r3, [r7, #16]
 8001dec:	4b1b      	ldr	r3, [pc, #108]	; (8001e5c <HAL_UART_MspInit+0x10c>)
 8001dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df0:	4a1a      	ldr	r2, [pc, #104]	; (8001e5c <HAL_UART_MspInit+0x10c>)
 8001df2:	f043 0320 	orr.w	r3, r3, #32
 8001df6:	6453      	str	r3, [r2, #68]	; 0x44
 8001df8:	4b18      	ldr	r3, [pc, #96]	; (8001e5c <HAL_UART_MspInit+0x10c>)
 8001dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfc:	f003 0320 	and.w	r3, r3, #32
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e04:	2300      	movs	r3, #0
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <HAL_UART_MspInit+0x10c>)
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	4a13      	ldr	r2, [pc, #76]	; (8001e5c <HAL_UART_MspInit+0x10c>)
 8001e0e:	f043 0304 	orr.w	r3, r3, #4
 8001e12:	6313      	str	r3, [r2, #48]	; 0x30
 8001e14:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <HAL_UART_MspInit+0x10c>)
 8001e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e20:	23c0      	movs	r3, #192	; 0xc0
 8001e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e24:	2302      	movs	r3, #2
 8001e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001e30:	2308      	movs	r3, #8
 8001e32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e34:	f107 031c 	add.w	r3, r7, #28
 8001e38:	4619      	mov	r1, r3
 8001e3a:	480b      	ldr	r0, [pc, #44]	; (8001e68 <HAL_UART_MspInit+0x118>)
 8001e3c:	f001 fa48 	bl	80032d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001e40:	2200      	movs	r2, #0
 8001e42:	2100      	movs	r1, #0
 8001e44:	2047      	movs	r0, #71	; 0x47
 8001e46:	f000 fe52 	bl	8002aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001e4a:	2047      	movs	r0, #71	; 0x47
 8001e4c:	f000 fe6b 	bl	8002b26 <HAL_NVIC_EnableIRQ>
}
 8001e50:	bf00      	nop
 8001e52:	3730      	adds	r7, #48	; 0x30
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40004800 	.word	0x40004800
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40020c00 	.word	0x40020c00
 8001e64:	40011400 	.word	0x40011400
 8001e68:	40020800 	.word	0x40020800

08001e6c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08a      	sub	sp, #40	; 0x28
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e8c:	d13f      	bne.n	8001f0e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	613b      	str	r3, [r7, #16]
 8001e92:	4b21      	ldr	r3, [pc, #132]	; (8001f18 <HAL_PCD_MspInit+0xac>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	4a20      	ldr	r2, [pc, #128]	; (8001f18 <HAL_PCD_MspInit+0xac>)
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9e:	4b1e      	ldr	r3, [pc, #120]	; (8001f18 <HAL_PCD_MspInit+0xac>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001eaa:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ebc:	230a      	movs	r3, #10
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec0:	f107 0314 	add.w	r3, r7, #20
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4815      	ldr	r0, [pc, #84]	; (8001f1c <HAL_PCD_MspInit+0xb0>)
 8001ec8:	f001 fa02 	bl	80032d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001ecc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001eda:	f107 0314 	add.w	r3, r7, #20
 8001ede:	4619      	mov	r1, r3
 8001ee0:	480e      	ldr	r0, [pc, #56]	; (8001f1c <HAL_PCD_MspInit+0xb0>)
 8001ee2:	f001 f9f5 	bl	80032d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001ee6:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <HAL_PCD_MspInit+0xac>)
 8001ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eea:	4a0b      	ldr	r2, [pc, #44]	; (8001f18 <HAL_PCD_MspInit+0xac>)
 8001eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ef0:	6353      	str	r3, [r2, #52]	; 0x34
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <HAL_PCD_MspInit+0xac>)
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efa:	4a07      	ldr	r2, [pc, #28]	; (8001f18 <HAL_PCD_MspInit+0xac>)
 8001efc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f00:	6453      	str	r3, [r2, #68]	; 0x44
 8001f02:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <HAL_PCD_MspInit+0xac>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001f0e:	bf00      	nop
 8001f10:	3728      	adds	r7, #40	; 0x28
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40020000 	.word	0x40020000

08001f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f24:	e7fe      	b.n	8001f24 <NMI_Handler+0x4>

08001f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f2a:	e7fe      	b.n	8001f2a <HardFault_Handler+0x4>

08001f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f30:	e7fe      	b.n	8001f30 <MemManage_Handler+0x4>

08001f32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f32:	b480      	push	{r7}
 8001f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f36:	e7fe      	b.n	8001f36 <BusFault_Handler+0x4>

08001f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f3c:	e7fe      	b.n	8001f3c <UsageFault_Handler+0x4>

08001f3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f6c:	f000 fca0 	bl	80028b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_STSTICK_Handler(); // ADD_kenGwon_231006
 8001f70:	f7ff f944 	bl	80011fc <HAL_STSTICK_Handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001f74:	bf00      	nop
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001f7c:	4802      	ldr	r0, [pc, #8]	; (8001f88 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001f7e:	f002 fd31 	bl	80049e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000358 	.word	0x20000358

08001f8c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001f90:	4802      	ldr	r0, [pc, #8]	; (8001f9c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001f92:	f002 fd27 	bl	80049e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	200003a0 	.word	0x200003a0

08001fa0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001fa4:	4802      	ldr	r0, [pc, #8]	; (8001fb0 <TIM3_IRQHandler+0x10>)
 8001fa6:	f002 fd1d 	bl	80049e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000310 	.word	0x20000310

08001fb4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001fb8:	4802      	ldr	r0, [pc, #8]	; (8001fc4 <USART3_IRQHandler+0x10>)
 8001fba:	f003 faa9 	bl	8005510 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	200003e8 	.word	0x200003e8

08001fc8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001fcc:	4802      	ldr	r0, [pc, #8]	; (8001fd8 <USART6_IRQHandler+0x10>)
 8001fce:	f003 fa9f 	bl	8005510 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	2000042c 	.word	0x2000042c

08001fdc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]
 8001fec:	e00a      	b.n	8002004 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fee:	f3af 8000 	nop.w
 8001ff2:	4601      	mov	r1, r0
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	1c5a      	adds	r2, r3, #1
 8001ff8:	60ba      	str	r2, [r7, #8]
 8001ffa:	b2ca      	uxtb	r2, r1
 8001ffc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	3301      	adds	r3, #1
 8002002:	617b      	str	r3, [r7, #20]
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	429a      	cmp	r2, r3
 800200a:	dbf0      	blt.n	8001fee <_read+0x12>
  }

  return len;
 800200c:	687b      	ldr	r3, [r7, #4]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b086      	sub	sp, #24
 800201a:	af00      	add	r7, sp, #0
 800201c:	60f8      	str	r0, [r7, #12]
 800201e:	60b9      	str	r1, [r7, #8]
 8002020:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
 8002026:	e009      	b.n	800203c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	1c5a      	adds	r2, r3, #1
 800202c:	60ba      	str	r2, [r7, #8]
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff f929 	bl	8001288 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	3301      	adds	r3, #1
 800203a:	617b      	str	r3, [r7, #20]
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	429a      	cmp	r2, r3
 8002042:	dbf1      	blt.n	8002028 <_write+0x12>
  }
  return len;
 8002044:	687b      	ldr	r3, [r7, #4]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <_close>:

int _close(int file)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002056:	f04f 33ff 	mov.w	r3, #4294967295
}
 800205a:	4618      	mov	r0, r3
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002076:	605a      	str	r2, [r3, #4]
  return 0;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <_isatty>:

int _isatty(int file)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800208e:	2301      	movs	r3, #1
}
 8002090:	4618      	mov	r0, r3
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3714      	adds	r7, #20
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
	...

080020b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020c0:	4a14      	ldr	r2, [pc, #80]	; (8002114 <_sbrk+0x5c>)
 80020c2:	4b15      	ldr	r3, [pc, #84]	; (8002118 <_sbrk+0x60>)
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020cc:	4b13      	ldr	r3, [pc, #76]	; (800211c <_sbrk+0x64>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d102      	bne.n	80020da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020d4:	4b11      	ldr	r3, [pc, #68]	; (800211c <_sbrk+0x64>)
 80020d6:	4a12      	ldr	r2, [pc, #72]	; (8002120 <_sbrk+0x68>)
 80020d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020da:	4b10      	ldr	r3, [pc, #64]	; (800211c <_sbrk+0x64>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d207      	bcs.n	80020f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020e8:	f004 fc80 	bl	80069ec <__errno>
 80020ec:	4603      	mov	r3, r0
 80020ee:	220c      	movs	r2, #12
 80020f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020f2:	f04f 33ff 	mov.w	r3, #4294967295
 80020f6:	e009      	b.n	800210c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020f8:	4b08      	ldr	r3, [pc, #32]	; (800211c <_sbrk+0x64>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020fe:	4b07      	ldr	r3, [pc, #28]	; (800211c <_sbrk+0x64>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4413      	add	r3, r2
 8002106:	4a05      	ldr	r2, [pc, #20]	; (800211c <_sbrk+0x64>)
 8002108:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800210a:	68fb      	ldr	r3, [r7, #12]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20030000 	.word	0x20030000
 8002118:	00000400 	.word	0x00000400
 800211c:	20000994 	.word	0x20000994
 8002120:	20000d18 	.word	0x20000d18

08002124 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002128:	4b06      	ldr	r3, [pc, #24]	; (8002144 <SystemInit+0x20>)
 800212a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800212e:	4a05      	ldr	r2, [pc, #20]	; (8002144 <SystemInit+0x20>)
 8002130:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002134:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <HAL_UART_RxCpltCallback>:
volatile int bt_rx_index = 0; // bt_rx_buff의 save위치
volatile int bt_newline_detect_flag = 0; // \n을 만났다는 것을 알려주는 플래그변수..


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002148:	b590      	push	{r4, r7, lr}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]

#if 1

	if (huart == &huart3)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a4c      	ldr	r2, [pc, #304]	; (8002284 <HAL_UART_RxCpltCallback+0x13c>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d160      	bne.n	800221a <HAL_UART_RxCpltCallback+0xd2>
	{
		if ((queue_rear+1)%QUEUE_MAX != queue_front)
 8002158:	4b4b      	ldr	r3, [pc, #300]	; (8002288 <HAL_UART_RxCpltCallback+0x140>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	1c59      	adds	r1, r3, #1
 800215e:	4b4b      	ldr	r3, [pc, #300]	; (800228c <HAL_UART_RxCpltCallback+0x144>)
 8002160:	fb83 2301 	smull	r2, r3, r3, r1
 8002164:	10da      	asrs	r2, r3, #3
 8002166:	17cb      	asrs	r3, r1, #31
 8002168:	1ad2      	subs	r2, r2, r3
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	1aca      	subs	r2, r1, r3
 8002174:	4b46      	ldr	r3, [pc, #280]	; (8002290 <HAL_UART_RxCpltCallback+0x148>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	d049      	beq.n	8002210 <HAL_UART_RxCpltCallback+0xc8>
		{
			if (rx_index < COMMAND_LENGTH)
 800217c:	4b45      	ldr	r3, [pc, #276]	; (8002294 <HAL_UART_RxCpltCallback+0x14c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2b27      	cmp	r3, #39	; 0x27
 8002182:	dc3f      	bgt.n	8002204 <HAL_UART_RxCpltCallback+0xbc>
			{
				if (rx_data == '\n' || rx_data == '\r')
 8002184:	4b44      	ldr	r3, [pc, #272]	; (8002298 <HAL_UART_RxCpltCallback+0x150>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b0a      	cmp	r3, #10
 800218a:	d003      	beq.n	8002194 <HAL_UART_RxCpltCallback+0x4c>
 800218c:	4b42      	ldr	r3, [pc, #264]	; (8002298 <HAL_UART_RxCpltCallback+0x150>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b0d      	cmp	r3, #13
 8002192:	d124      	bne.n	80021de <HAL_UART_RxCpltCallback+0x96>
				{
					rx_buff[queue_rear][rx_index] = '\0';
 8002194:	4b3c      	ldr	r3, [pc, #240]	; (8002288 <HAL_UART_RxCpltCallback+0x140>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	4b3e      	ldr	r3, [pc, #248]	; (8002294 <HAL_UART_RxCpltCallback+0x14c>)
 800219a:	6819      	ldr	r1, [r3, #0]
 800219c:	483f      	ldr	r0, [pc, #252]	; (800229c <HAL_UART_RxCpltCallback+0x154>)
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	4403      	add	r3, r0
 80021a8:	440b      	add	r3, r1
 80021aa:	2200      	movs	r2, #0
 80021ac:	701a      	strb	r2, [r3, #0]
					rx_index = 0;
 80021ae:	4b39      	ldr	r3, [pc, #228]	; (8002294 <HAL_UART_RxCpltCallback+0x14c>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
					queue_rear++;
 80021b4:	4b34      	ldr	r3, [pc, #208]	; (8002288 <HAL_UART_RxCpltCallback+0x140>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	3301      	adds	r3, #1
 80021ba:	4a33      	ldr	r2, [pc, #204]	; (8002288 <HAL_UART_RxCpltCallback+0x140>)
 80021bc:	6013      	str	r3, [r2, #0]
					queue_rear %= QUEUE_MAX;
 80021be:	4b32      	ldr	r3, [pc, #200]	; (8002288 <HAL_UART_RxCpltCallback+0x140>)
 80021c0:	6819      	ldr	r1, [r3, #0]
 80021c2:	4b32      	ldr	r3, [pc, #200]	; (800228c <HAL_UART_RxCpltCallback+0x144>)
 80021c4:	fb83 2301 	smull	r2, r3, r3, r1
 80021c8:	10da      	asrs	r2, r3, #3
 80021ca:	17cb      	asrs	r3, r1, #31
 80021cc:	1ad2      	subs	r2, r2, r3
 80021ce:	4613      	mov	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	1aca      	subs	r2, r1, r3
 80021d8:	4b2b      	ldr	r3, [pc, #172]	; (8002288 <HAL_UART_RxCpltCallback+0x140>)
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	e018      	b.n	8002210 <HAL_UART_RxCpltCallback+0xc8>
				}
				else
				{
					rx_buff[queue_rear][rx_index++] = rx_data;
 80021de:	4b2a      	ldr	r3, [pc, #168]	; (8002288 <HAL_UART_RxCpltCallback+0x140>)
 80021e0:	6819      	ldr	r1, [r3, #0]
 80021e2:	4b2c      	ldr	r3, [pc, #176]	; (8002294 <HAL_UART_RxCpltCallback+0x14c>)
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	1c53      	adds	r3, r2, #1
 80021e8:	482a      	ldr	r0, [pc, #168]	; (8002294 <HAL_UART_RxCpltCallback+0x14c>)
 80021ea:	6003      	str	r3, [r0, #0]
 80021ec:	4b2a      	ldr	r3, [pc, #168]	; (8002298 <HAL_UART_RxCpltCallback+0x150>)
 80021ee:	781c      	ldrb	r4, [r3, #0]
 80021f0:	482a      	ldr	r0, [pc, #168]	; (800229c <HAL_UART_RxCpltCallback+0x154>)
 80021f2:	460b      	mov	r3, r1
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	440b      	add	r3, r1
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	4403      	add	r3, r0
 80021fc:	4413      	add	r3, r2
 80021fe:	4622      	mov	r2, r4
 8002200:	701a      	strb	r2, [r3, #0]
 8002202:	e005      	b.n	8002210 <HAL_UART_RxCpltCallback+0xc8>
				}
			}
			else
			{
				rx_index = 0;
 8002204:	4b23      	ldr	r3, [pc, #140]	; (8002294 <HAL_UART_RxCpltCallback+0x14c>)
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
				printf("Message Overflow !!!\n");
 800220a:	4825      	ldr	r0, [pc, #148]	; (80022a0 <HAL_UART_RxCpltCallback+0x158>)
 800220c:	f004 fca6 	bl	8006b5c <puts>
		{

		}

		// 주의: 반드시 HAL_UART_Receive_IT() 함수를 call 해줘야 다음 인터럽트가 이어서 발생이 가능해진다.
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8002210:	2201      	movs	r2, #1
 8002212:	4921      	ldr	r1, [pc, #132]	; (8002298 <HAL_UART_RxCpltCallback+0x150>)
 8002214:	481b      	ldr	r0, [pc, #108]	; (8002284 <HAL_UART_RxCpltCallback+0x13c>)
 8002216:	f003 f94a 	bl	80054ae <HAL_UART_Receive_IT>
		// 주의: 반드시 HAL_UART_Receive_IT() 함수를 call 해줘야 다음 인터럽트가 이어서 발생이 가능해진다.
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);
	}
#endif

	if (huart == &huart6) // Bluetooth와 연결된 uart
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a21      	ldr	r2, [pc, #132]	; (80022a4 <HAL_UART_RxCpltCallback+0x15c>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d12c      	bne.n	800227c <HAL_UART_RxCpltCallback+0x134>
	{
		if (bt_rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 8002222:	4b21      	ldr	r3, [pc, #132]	; (80022a8 <HAL_UART_RxCpltCallback+0x160>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2b27      	cmp	r3, #39	; 0x27
 8002228:	dc1d      	bgt.n	8002266 <HAL_UART_RxCpltCallback+0x11e>
		{
			if(bt_rx_data == '\n' || bt_rx_data == '\r')
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_UART_RxCpltCallback+0x164>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b0a      	cmp	r3, #10
 8002230:	d003      	beq.n	800223a <HAL_UART_RxCpltCallback+0xf2>
 8002232:	4b1e      	ldr	r3, [pc, #120]	; (80022ac <HAL_UART_RxCpltCallback+0x164>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b0d      	cmp	r3, #13
 8002238:	d10b      	bne.n	8002252 <HAL_UART_RxCpltCallback+0x10a>
			{
				bt_rx_buff[bt_rx_index] = 0; // '\0'
 800223a:	4b1b      	ldr	r3, [pc, #108]	; (80022a8 <HAL_UART_RxCpltCallback+0x160>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a1c      	ldr	r2, [pc, #112]	; (80022b0 <HAL_UART_RxCpltCallback+0x168>)
 8002240:	2100      	movs	r1, #0
 8002242:	54d1      	strb	r1, [r2, r3]
				bt_newline_detect_flag = 1;
 8002244:	4b1b      	ldr	r3, [pc, #108]	; (80022b4 <HAL_UART_RxCpltCallback+0x16c>)
 8002246:	2201      	movs	r2, #1
 8002248:	601a      	str	r2, [r3, #0]
				bt_rx_index = 0; // 다음 메시지 저장을 위해서 rx_index값을 0으로 한다.
 800224a:	4b17      	ldr	r3, [pc, #92]	; (80022a8 <HAL_UART_RxCpltCallback+0x160>)
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	e00f      	b.n	8002272 <HAL_UART_RxCpltCallback+0x12a>
			}
			else
			{
				bt_rx_buff[bt_rx_index++] = bt_rx_data;
 8002252:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <HAL_UART_RxCpltCallback+0x160>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	1c5a      	adds	r2, r3, #1
 8002258:	4913      	ldr	r1, [pc, #76]	; (80022a8 <HAL_UART_RxCpltCallback+0x160>)
 800225a:	600a      	str	r2, [r1, #0]
 800225c:	4a13      	ldr	r2, [pc, #76]	; (80022ac <HAL_UART_RxCpltCallback+0x164>)
 800225e:	7811      	ldrb	r1, [r2, #0]
 8002260:	4a13      	ldr	r2, [pc, #76]	; (80022b0 <HAL_UART_RxCpltCallback+0x168>)
 8002262:	54d1      	strb	r1, [r2, r3]
 8002264:	e005      	b.n	8002272 <HAL_UART_RxCpltCallback+0x12a>
			}
		}
		else
		{
			bt_rx_index = 0;
 8002266:	4b10      	ldr	r3, [pc, #64]	; (80022a8 <HAL_UART_RxCpltCallback+0x160>)
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
			printf("Message Overflow !!!\n");
 800226c:	480c      	ldr	r0, [pc, #48]	; (80022a0 <HAL_UART_RxCpltCallback+0x158>)
 800226e:	f004 fc75 	bl	8006b5c <puts>
		}

		// 주의: 반드시 HAL_UART_Receive_IT() 함수를 call 해줘야 다음 인터럽트가 이어서 발생이 가능해진다.
		HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);
 8002272:	2201      	movs	r2, #1
 8002274:	490d      	ldr	r1, [pc, #52]	; (80022ac <HAL_UART_RxCpltCallback+0x164>)
 8002276:	480b      	ldr	r0, [pc, #44]	; (80022a4 <HAL_UART_RxCpltCallback+0x15c>)
 8002278:	f003 f919 	bl	80054ae <HAL_UART_Receive_IT>
	}
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	bd90      	pop	{r4, r7, pc}
 8002284:	200003e8 	.word	0x200003e8
 8002288:	20000cbc 	.word	0x20000cbc
 800228c:	66666667 	.word	0x66666667
 8002290:	20000cb8 	.word	0x20000cb8
 8002294:	20000cc0 	.word	0x20000cc0
 8002298:	2000097c 	.word	0x2000097c
 800229c:	20000998 	.word	0x20000998
 80022a0:	08007bd8 	.word	0x08007bd8
 80022a4:	2000042c 	.word	0x2000042c
 80022a8:	20000cec 	.word	0x20000cec
 80022ac:	2000097d 	.word	0x2000097d
 80022b0:	20000cc4 	.word	0x20000cc4
 80022b4:	20000cf0 	.word	0x20000cf0

080022b8 <pc_command_processing>:

void pc_command_processing(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
	if (queue_front != queue_rear) // 원형쿠로 구성한게 아니기 때무네, 뉴라인 플래그가 서 있을 때만 완전한 문장이 들어왔다고 판단하고 함수가 진해오디어야 하낟.
 80022bc:	4b9e      	ldr	r3, [pc, #632]	; (8002538 <pc_command_processing+0x280>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	4b9e      	ldr	r3, [pc, #632]	; (800253c <pc_command_processing+0x284>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	f000 8136 	beq.w	8002536 <pc_command_processing+0x27e>
	{
		queue_front++;
 80022ca:	4b9b      	ldr	r3, [pc, #620]	; (8002538 <pc_command_processing+0x280>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	3301      	adds	r3, #1
 80022d0:	4a99      	ldr	r2, [pc, #612]	; (8002538 <pc_command_processing+0x280>)
 80022d2:	6013      	str	r3, [r2, #0]
		queue_front %= QUEUE_MAX;
 80022d4:	4b98      	ldr	r3, [pc, #608]	; (8002538 <pc_command_processing+0x280>)
 80022d6:	6819      	ldr	r1, [r3, #0]
 80022d8:	4b99      	ldr	r3, [pc, #612]	; (8002540 <pc_command_processing+0x288>)
 80022da:	fb83 2301 	smull	r2, r3, r3, r1
 80022de:	10da      	asrs	r2, r3, #3
 80022e0:	17cb      	asrs	r3, r1, #31
 80022e2:	1ad2      	subs	r2, r2, r3
 80022e4:	4613      	mov	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	1aca      	subs	r2, r1, r3
 80022ee:	4b92      	ldr	r3, [pc, #584]	; (8002538 <pc_command_processing+0x280>)
 80022f0:	601a      	str	r2, [r3, #0]
//		newline_detect_flag = 0;

		printf("%s\n", rx_buff[queue_front - 1]);
 80022f2:	4b91      	ldr	r3, [pc, #580]	; (8002538 <pc_command_processing+0x280>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	1e5a      	subs	r2, r3, #1
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	4a90      	ldr	r2, [pc, #576]	; (8002544 <pc_command_processing+0x28c>)
 8002302:	4413      	add	r3, r2
 8002304:	4618      	mov	r0, r3
 8002306:	f004 fc29 	bl	8006b5c <puts>

		if (!strncmp(rx_buff[queue_front - 1], "led_all_on", strlen("led_all_on"))) // 느낌표가 들어갔다!! strcmp는 같으면 0을 리턴하기 때문에 if문에 진입하려먼 !not을 통해서 1(true)로 뒤집어 줘야 한다.
 800230a:	4b8b      	ldr	r3, [pc, #556]	; (8002538 <pc_command_processing+0x280>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	1e5a      	subs	r2, r3, #1
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	4a8a      	ldr	r2, [pc, #552]	; (8002544 <pc_command_processing+0x28c>)
 800231a:	4413      	add	r3, r2
 800231c:	220a      	movs	r2, #10
 800231e:	498a      	ldr	r1, [pc, #552]	; (8002548 <pc_command_processing+0x290>)
 8002320:	4618      	mov	r0, r3
 8002322:	f004 fc23 	bl	8006b6c <strncmp>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d102      	bne.n	8002332 <pc_command_processing+0x7a>
		{
			led_all_on();
 800232c:	f7fe fe24 	bl	8000f78 <led_all_on>
			return;
 8002330:	e101      	b.n	8002536 <pc_command_processing+0x27e>
		}
		if (!strncmp(rx_buff[queue_front - 1], "led_all_off", strlen("led_all_off")))
 8002332:	4b81      	ldr	r3, [pc, #516]	; (8002538 <pc_command_processing+0x280>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	1e5a      	subs	r2, r3, #1
 8002338:	4613      	mov	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4413      	add	r3, r2
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	4a80      	ldr	r2, [pc, #512]	; (8002544 <pc_command_processing+0x28c>)
 8002342:	4413      	add	r3, r2
 8002344:	220b      	movs	r2, #11
 8002346:	4981      	ldr	r1, [pc, #516]	; (800254c <pc_command_processing+0x294>)
 8002348:	4618      	mov	r0, r3
 800234a:	f004 fc0f 	bl	8006b6c <strncmp>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d102      	bne.n	800235a <pc_command_processing+0xa2>
		{
			led_all_off();
 8002354:	f7fe fe1c 	bl	8000f90 <led_all_off>
			return;
 8002358:	e0ed      	b.n	8002536 <pc_command_processing+0x27e>
		}
		if (!strncmp(rx_buff[queue_front - 1], "led_on_up", strlen("led_on_up")))
 800235a:	4b77      	ldr	r3, [pc, #476]	; (8002538 <pc_command_processing+0x280>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	1e5a      	subs	r2, r3, #1
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	4a76      	ldr	r2, [pc, #472]	; (8002544 <pc_command_processing+0x28c>)
 800236a:	4413      	add	r3, r2
 800236c:	2209      	movs	r2, #9
 800236e:	4978      	ldr	r1, [pc, #480]	; (8002550 <pc_command_processing+0x298>)
 8002370:	4618      	mov	r0, r3
 8002372:	f004 fbfb 	bl	8006b6c <strncmp>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d102      	bne.n	8002382 <pc_command_processing+0xca>
		{
			led_on_up();
 800237c:	f7fe fe14 	bl	8000fa8 <led_on_up>
			return;
 8002380:	e0d9      	b.n	8002536 <pc_command_processing+0x27e>
		}
		if (!strncmp(rx_buff[queue_front - 1], "led_on_down", strlen("led_on_down")))
 8002382:	4b6d      	ldr	r3, [pc, #436]	; (8002538 <pc_command_processing+0x280>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	1e5a      	subs	r2, r3, #1
 8002388:	4613      	mov	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	4a6c      	ldr	r2, [pc, #432]	; (8002544 <pc_command_processing+0x28c>)
 8002392:	4413      	add	r3, r2
 8002394:	220b      	movs	r2, #11
 8002396:	496f      	ldr	r1, [pc, #444]	; (8002554 <pc_command_processing+0x29c>)
 8002398:	4618      	mov	r0, r3
 800239a:	f004 fbe7 	bl	8006b6c <strncmp>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d102      	bne.n	80023aa <pc_command_processing+0xf2>
		{
			led_on_down();
 80023a4:	f7fe fe2c 	bl	8001000 <led_on_down>
			return;
 80023a8:	e0c5      	b.n	8002536 <pc_command_processing+0x27e>
		}
		if (!strncmp(rx_buff[queue_front - 1], "led_keepon_up", strlen("led_keepon_up")))
 80023aa:	4b63      	ldr	r3, [pc, #396]	; (8002538 <pc_command_processing+0x280>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	1e5a      	subs	r2, r3, #1
 80023b0:	4613      	mov	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	4a62      	ldr	r2, [pc, #392]	; (8002544 <pc_command_processing+0x28c>)
 80023ba:	4413      	add	r3, r2
 80023bc:	220d      	movs	r2, #13
 80023be:	4966      	ldr	r1, [pc, #408]	; (8002558 <pc_command_processing+0x2a0>)
 80023c0:	4618      	mov	r0, r3
 80023c2:	f004 fbd3 	bl	8006b6c <strncmp>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d102      	bne.n	80023d2 <pc_command_processing+0x11a>
		{
			led_keepon_up();
 80023cc:	f7fe fe44 	bl	8001058 <led_keepon_up>
			return;
 80023d0:	e0b1      	b.n	8002536 <pc_command_processing+0x27e>
		}
		if (!strncmp(rx_buff[queue_front - 1], "led_keepon_down", strlen("led_keepon_down")))
 80023d2:	4b59      	ldr	r3, [pc, #356]	; (8002538 <pc_command_processing+0x280>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	1e5a      	subs	r2, r3, #1
 80023d8:	4613      	mov	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4413      	add	r3, r2
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	4a58      	ldr	r2, [pc, #352]	; (8002544 <pc_command_processing+0x28c>)
 80023e2:	4413      	add	r3, r2
 80023e4:	220f      	movs	r2, #15
 80023e6:	495d      	ldr	r1, [pc, #372]	; (800255c <pc_command_processing+0x2a4>)
 80023e8:	4618      	mov	r0, r3
 80023ea:	f004 fbbf 	bl	8006b6c <strncmp>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d102      	bne.n	80023fa <pc_command_processing+0x142>
		{
			led_keepon_down();
 80023f4:	f7fe fe5a 	bl	80010ac <led_keepon_down>
			return;
 80023f8:	e09d      	b.n	8002536 <pc_command_processing+0x27e>
		}
		if (!strncmp(rx_buff[queue_front - 1], "led_flower_on", strlen("led_flower_on")))
 80023fa:	4b4f      	ldr	r3, [pc, #316]	; (8002538 <pc_command_processing+0x280>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	1e5a      	subs	r2, r3, #1
 8002400:	4613      	mov	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	4a4e      	ldr	r2, [pc, #312]	; (8002544 <pc_command_processing+0x28c>)
 800240a:	4413      	add	r3, r2
 800240c:	220d      	movs	r2, #13
 800240e:	4954      	ldr	r1, [pc, #336]	; (8002560 <pc_command_processing+0x2a8>)
 8002410:	4618      	mov	r0, r3
 8002412:	f004 fbab 	bl	8006b6c <strncmp>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d102      	bne.n	8002422 <pc_command_processing+0x16a>
		{
			led_flower_on();
 800241c:	f7fe fe70 	bl	8001100 <led_flower_on>
			return;
 8002420:	e089      	b.n	8002536 <pc_command_processing+0x27e>
		}
		if (!strncmp(rx_buff[queue_front - 1], "led_flower_off", strlen("led_flower_off")))
 8002422:	4b45      	ldr	r3, [pc, #276]	; (8002538 <pc_command_processing+0x280>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	1e5a      	subs	r2, r3, #1
 8002428:	4613      	mov	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	4a44      	ldr	r2, [pc, #272]	; (8002544 <pc_command_processing+0x28c>)
 8002432:	4413      	add	r3, r2
 8002434:	220e      	movs	r2, #14
 8002436:	494b      	ldr	r1, [pc, #300]	; (8002564 <pc_command_processing+0x2ac>)
 8002438:	4618      	mov	r0, r3
 800243a:	f004 fb97 	bl	8006b6c <strncmp>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d102      	bne.n	800244a <pc_command_processing+0x192>
		{
			led_flower_off();
 8002444:	f7fe fe9c 	bl	8001180 <led_flower_off>
			return;
 8002448:	e075      	b.n	8002536 <pc_command_processing+0x27e>
		}


		if (!strncmp(rx_buff[queue_front - 1], "dht11time", strlen("dht11time")))
 800244a:	4b3b      	ldr	r3, [pc, #236]	; (8002538 <pc_command_processing+0x280>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	1e5a      	subs	r2, r3, #1
 8002450:	4613      	mov	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	4a3a      	ldr	r2, [pc, #232]	; (8002544 <pc_command_processing+0x28c>)
 800245a:	4413      	add	r3, r2
 800245c:	2209      	movs	r2, #9
 800245e:	4942      	ldr	r1, [pc, #264]	; (8002568 <pc_command_processing+0x2b0>)
 8002460:	4618      	mov	r0, r3
 8002462:	f004 fb83 	bl	8006b6c <strncmp>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d110      	bne.n	800248e <pc_command_processing+0x1d6>
		{
			dht11time = atoi(rx_buff[queue_front - 1] + 9);
 800246c:	4b32      	ldr	r3, [pc, #200]	; (8002538 <pc_command_processing+0x280>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	1e5a      	subs	r2, r3, #1
 8002472:	4613      	mov	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	4a32      	ldr	r2, [pc, #200]	; (8002544 <pc_command_processing+0x28c>)
 800247c:	4413      	add	r3, r2
 800247e:	3309      	adds	r3, #9
 8002480:	4618      	mov	r0, r3
 8002482:	f004 faaf 	bl	80069e4 <atoi>
 8002486:	4603      	mov	r3, r0
 8002488:	4a38      	ldr	r2, [pc, #224]	; (800256c <pc_command_processing+0x2b4>)
 800248a:	6013      	str	r3, [r2, #0]
			return;
 800248c:	e053      	b.n	8002536 <pc_command_processing+0x27e>
		}

		if (!strncmp(rx_buff[queue_front - 1], "dht11_on", strlen("dht11_on")))
 800248e:	4b2a      	ldr	r3, [pc, #168]	; (8002538 <pc_command_processing+0x280>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	1e5a      	subs	r2, r3, #1
 8002494:	4613      	mov	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	4a29      	ldr	r2, [pc, #164]	; (8002544 <pc_command_processing+0x28c>)
 800249e:	4413      	add	r3, r2
 80024a0:	2208      	movs	r2, #8
 80024a2:	4933      	ldr	r1, [pc, #204]	; (8002570 <pc_command_processing+0x2b8>)
 80024a4:	4618      	mov	r0, r3
 80024a6:	f004 fb61 	bl	8006b6c <strncmp>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d103      	bne.n	80024b8 <pc_command_processing+0x200>
		{
			DHT11_print_flag = 1;
 80024b0:	4b30      	ldr	r3, [pc, #192]	; (8002574 <pc_command_processing+0x2bc>)
 80024b2:	2201      	movs	r2, #1
 80024b4:	601a      	str	r2, [r3, #0]
			return;
 80024b6:	e03e      	b.n	8002536 <pc_command_processing+0x27e>
		}
		if (!strncmp(rx_buff[queue_front - 1], "dht11_off", strlen("dht11_off")))
 80024b8:	4b1f      	ldr	r3, [pc, #124]	; (8002538 <pc_command_processing+0x280>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	1e5a      	subs	r2, r3, #1
 80024be:	4613      	mov	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4a1f      	ldr	r2, [pc, #124]	; (8002544 <pc_command_processing+0x28c>)
 80024c8:	4413      	add	r3, r2
 80024ca:	2209      	movs	r2, #9
 80024cc:	492a      	ldr	r1, [pc, #168]	; (8002578 <pc_command_processing+0x2c0>)
 80024ce:	4618      	mov	r0, r3
 80024d0:	f004 fb4c 	bl	8006b6c <strncmp>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d103      	bne.n	80024e2 <pc_command_processing+0x22a>
		{
			DHT11_print_flag = 0;
 80024da:	4b26      	ldr	r3, [pc, #152]	; (8002574 <pc_command_processing+0x2bc>)
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
			return;
 80024e0:	e029      	b.n	8002536 <pc_command_processing+0x27e>
		}
		if (!strncmp(rx_buff[queue_front - 1], "ultra_on", strlen("ultra_on")))
 80024e2:	4b15      	ldr	r3, [pc, #84]	; (8002538 <pc_command_processing+0x280>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	1e5a      	subs	r2, r3, #1
 80024e8:	4613      	mov	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	4a14      	ldr	r2, [pc, #80]	; (8002544 <pc_command_processing+0x28c>)
 80024f2:	4413      	add	r3, r2
 80024f4:	2208      	movs	r2, #8
 80024f6:	4921      	ldr	r1, [pc, #132]	; (800257c <pc_command_processing+0x2c4>)
 80024f8:	4618      	mov	r0, r3
 80024fa:	f004 fb37 	bl	8006b6c <strncmp>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d103      	bne.n	800250c <pc_command_processing+0x254>
		{
			ultrasonic_print_flag = 1;
 8002504:	4b1e      	ldr	r3, [pc, #120]	; (8002580 <pc_command_processing+0x2c8>)
 8002506:	2201      	movs	r2, #1
 8002508:	601a      	str	r2, [r3, #0]
			return;
 800250a:	e014      	b.n	8002536 <pc_command_processing+0x27e>
		}
		if (!strncmp(rx_buff[queue_front - 1], "ultra_off", strlen("ultra_off")))
 800250c:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <pc_command_processing+0x280>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	1e5a      	subs	r2, r3, #1
 8002512:	4613      	mov	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4413      	add	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4a0a      	ldr	r2, [pc, #40]	; (8002544 <pc_command_processing+0x28c>)
 800251c:	4413      	add	r3, r2
 800251e:	2209      	movs	r2, #9
 8002520:	4918      	ldr	r1, [pc, #96]	; (8002584 <pc_command_processing+0x2cc>)
 8002522:	4618      	mov	r0, r3
 8002524:	f004 fb22 	bl	8006b6c <strncmp>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d103      	bne.n	8002536 <pc_command_processing+0x27e>
		{
			ultrasonic_print_flag = 0;
 800252e:	4b14      	ldr	r3, [pc, #80]	; (8002580 <pc_command_processing+0x2c8>)
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
			return;
 8002534:	bf00      	nop
		}


	}
}
 8002536:	bd80      	pop	{r7, pc}
 8002538:	20000cb8 	.word	0x20000cb8
 800253c:	20000cbc 	.word	0x20000cbc
 8002540:	66666667 	.word	0x66666667
 8002544:	20000998 	.word	0x20000998
 8002548:	08007bf0 	.word	0x08007bf0
 800254c:	08007bfc 	.word	0x08007bfc
 8002550:	08007c08 	.word	0x08007c08
 8002554:	08007c14 	.word	0x08007c14
 8002558:	08007c20 	.word	0x08007c20
 800255c:	08007c30 	.word	0x08007c30
 8002560:	08007c40 	.word	0x08007c40
 8002564:	08007c50 	.word	0x08007c50
 8002568:	08007c60 	.word	0x08007c60
 800256c:	20000000 	.word	0x20000000
 8002570:	08007c6c 	.word	0x08007c6c
 8002574:	20000090 	.word	0x20000090
 8002578:	08007c78 	.word	0x08007c78
 800257c:	08007c84 	.word	0x08007c84
 8002580:	20000d00 	.word	0x20000d00
 8002584:	08007c90 	.word	0x08007c90

08002588 <bt_command_processing>:

void bt_command_processing(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
	if (bt_newline_detect_flag) // 원형쿠로 구성한게 아니기 때무네, 뉴라인 플래그가 서 있을 때만 완전한 문장이 들어왔다고 판단하고 함수가 진해오디어야 하낟.
 800258c:	4b31      	ldr	r3, [pc, #196]	; (8002654 <bt_command_processing+0xcc>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d05d      	beq.n	8002650 <bt_command_processing+0xc8>
	{
		bt_newline_detect_flag = 0;
 8002594:	4b2f      	ldr	r3, [pc, #188]	; (8002654 <bt_command_processing+0xcc>)
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
		printf("%s\n", bt_rx_buff);
 800259a:	482f      	ldr	r0, [pc, #188]	; (8002658 <bt_command_processing+0xd0>)
 800259c:	f004 fade 	bl	8006b5c <puts>
		if (!strncmp(bt_rx_buff, "ledallon", strlen("ledallon"))) // 느낌표가 들어갔다!! strcmp는 같으면 0을 리턴하기 때문에 if문에 진입하려먼 !not을 통해서 1(true)로 뒤집어 줘야 한다.
 80025a0:	2208      	movs	r2, #8
 80025a2:	492e      	ldr	r1, [pc, #184]	; (800265c <bt_command_processing+0xd4>)
 80025a4:	482c      	ldr	r0, [pc, #176]	; (8002658 <bt_command_processing+0xd0>)
 80025a6:	f004 fae1 	bl	8006b6c <strncmp>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d102      	bne.n	80025b6 <bt_command_processing+0x2e>
		{
			led_all_on();
 80025b0:	f7fe fce2 	bl	8000f78 <led_all_on>
			return;
 80025b4:	e04c      	b.n	8002650 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "ledalloff", strlen("ledalloff")))
 80025b6:	2209      	movs	r2, #9
 80025b8:	4929      	ldr	r1, [pc, #164]	; (8002660 <bt_command_processing+0xd8>)
 80025ba:	4827      	ldr	r0, [pc, #156]	; (8002658 <bt_command_processing+0xd0>)
 80025bc:	f004 fad6 	bl	8006b6c <strncmp>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d102      	bne.n	80025cc <bt_command_processing+0x44>
		{
			led_all_off();
 80025c6:	f7fe fce3 	bl	8000f90 <led_all_off>
			return;
 80025ca:	e041      	b.n	8002650 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_on_up", strlen("led_on_up")))
 80025cc:	2209      	movs	r2, #9
 80025ce:	4925      	ldr	r1, [pc, #148]	; (8002664 <bt_command_processing+0xdc>)
 80025d0:	4821      	ldr	r0, [pc, #132]	; (8002658 <bt_command_processing+0xd0>)
 80025d2:	f004 facb 	bl	8006b6c <strncmp>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d102      	bne.n	80025e2 <bt_command_processing+0x5a>
		{
			led_on_up();
 80025dc:	f7fe fce4 	bl	8000fa8 <led_on_up>
			return;
 80025e0:	e036      	b.n	8002650 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_on_down", strlen("led_on_down")))
 80025e2:	220b      	movs	r2, #11
 80025e4:	4920      	ldr	r1, [pc, #128]	; (8002668 <bt_command_processing+0xe0>)
 80025e6:	481c      	ldr	r0, [pc, #112]	; (8002658 <bt_command_processing+0xd0>)
 80025e8:	f004 fac0 	bl	8006b6c <strncmp>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d102      	bne.n	80025f8 <bt_command_processing+0x70>
		{
			led_on_down();
 80025f2:	f7fe fd05 	bl	8001000 <led_on_down>
			return;
 80025f6:	e02b      	b.n	8002650 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_keepon_up", strlen("led_keepon_up")))
 80025f8:	220d      	movs	r2, #13
 80025fa:	491c      	ldr	r1, [pc, #112]	; (800266c <bt_command_processing+0xe4>)
 80025fc:	4816      	ldr	r0, [pc, #88]	; (8002658 <bt_command_processing+0xd0>)
 80025fe:	f004 fab5 	bl	8006b6c <strncmp>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d102      	bne.n	800260e <bt_command_processing+0x86>
		{
			led_keepon_up();
 8002608:	f7fe fd26 	bl	8001058 <led_keepon_up>
			return;
 800260c:	e020      	b.n	8002650 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_keepon_down", strlen("led_keepon_down")))
 800260e:	220f      	movs	r2, #15
 8002610:	4917      	ldr	r1, [pc, #92]	; (8002670 <bt_command_processing+0xe8>)
 8002612:	4811      	ldr	r0, [pc, #68]	; (8002658 <bt_command_processing+0xd0>)
 8002614:	f004 faaa 	bl	8006b6c <strncmp>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d102      	bne.n	8002624 <bt_command_processing+0x9c>
		{
			led_keepon_down();
 800261e:	f7fe fd45 	bl	80010ac <led_keepon_down>
			return;
 8002622:	e015      	b.n	8002650 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_flower_on", strlen("led_flower_on")))
 8002624:	220d      	movs	r2, #13
 8002626:	4913      	ldr	r1, [pc, #76]	; (8002674 <bt_command_processing+0xec>)
 8002628:	480b      	ldr	r0, [pc, #44]	; (8002658 <bt_command_processing+0xd0>)
 800262a:	f004 fa9f 	bl	8006b6c <strncmp>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d102      	bne.n	800263a <bt_command_processing+0xb2>
		{
			led_flower_on();
 8002634:	f7fe fd64 	bl	8001100 <led_flower_on>
			return;
 8002638:	e00a      	b.n	8002650 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_flower_off", strlen("led_flower_off")))
 800263a:	220e      	movs	r2, #14
 800263c:	490e      	ldr	r1, [pc, #56]	; (8002678 <bt_command_processing+0xf0>)
 800263e:	4806      	ldr	r0, [pc, #24]	; (8002658 <bt_command_processing+0xd0>)
 8002640:	f004 fa94 	bl	8006b6c <strncmp>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d102      	bne.n	8002650 <bt_command_processing+0xc8>
		{
			led_flower_off();
 800264a:	f7fe fd99 	bl	8001180 <led_flower_off>
			return;
 800264e:	bf00      	nop
		}
	}
}
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20000cf0 	.word	0x20000cf0
 8002658:	20000cc4 	.word	0x20000cc4
 800265c:	08007c9c 	.word	0x08007c9c
 8002660:	08007ca8 	.word	0x08007ca8
 8002664:	08007c08 	.word	0x08007c08
 8002668:	08007c14 	.word	0x08007c14
 800266c:	08007c20 	.word	0x08007c20
 8002670:	08007c30 	.word	0x08007c30
 8002674:	08007c40 	.word	0x08007c40
 8002678:	08007c50 	.word	0x08007c50

0800267c <HAL_TIM_IC_CaptureCallback>:
volatile int ultrasonic_print_flag = 0;

// 1. Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c에 가서 가져온 call-back function
// 2. 초음파 센서의 ECHO핀의 상승edge와 하강edge 발생 시 이 함수로 들어온다!!!
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a13      	ldr	r2, [pc, #76]	; (80026d8 <HAL_TIM_IC_CaptureCallback+0x5c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d11f      	bne.n	80026ce <HAL_TIM_IC_CaptureCallback+0x52>
	{
		if (is_first_capture == 0) // 상승엣지 때문에 콜백 펑션에 들어온 경우
 800268e:	4b13      	ldr	r3, [pc, #76]	; (80026dc <HAL_TIM_IC_CaptureCallback+0x60>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	d107      	bne.n	80026a8 <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			__HAL_TIM_SET_COUNTER(htim, 0); // 펄스를 셀 카운터를 초기화 하고 세기 시작하는 것이다.
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2200      	movs	r2, #0
 800269e:	625a      	str	r2, [r3, #36]	; 0x24
			is_first_capture = 1; // 다음에 콜백 펑선이 불릴 때는 당연히 하강 엣지일 때 일 것이므로 플래그변수를 1로 셋팅해준다.
 80026a0:	4b0e      	ldr	r3, [pc, #56]	; (80026dc <HAL_TIM_IC_CaptureCallback+0x60>)
 80026a2:	2201      	movs	r2, #1
 80026a4:	701a      	strb	r2, [r3, #0]
			is_first_capture = 0; // 이제 다음 펄스를 또 카운트 하기 위해서 플래그 변수를 초기화 해준다.
			distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // 상승엣지부터 하강엣지까지 펄스가 몇번 카운트 되었는지 그 값을 읽어온다.
			ic_cpt_finish_flag = 1; // 초음파 측정완료
		}
	}
}
 80026a6:	e012      	b.n	80026ce <HAL_TIM_IC_CaptureCallback+0x52>
		else if (is_first_capture == 1) // 하강 엣지 때문에 콜백 펑션에 들어온 경우
 80026a8:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <HAL_TIM_IC_CaptureCallback+0x60>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d10d      	bne.n	80026ce <HAL_TIM_IC_CaptureCallback+0x52>
			is_first_capture = 0; // 이제 다음 펄스를 또 카운트 하기 위해서 플래그 변수를 초기화 해준다.
 80026b2:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <HAL_TIM_IC_CaptureCallback+0x60>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]
			distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // 상승엣지부터 하강엣지까지 펄스가 몇번 카운트 되었는지 그 값을 읽어온다.
 80026b8:	2100      	movs	r1, #0
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f002 fb36 	bl	8004d2c <HAL_TIM_ReadCapturedValue>
 80026c0:	4603      	mov	r3, r0
 80026c2:	461a      	mov	r2, r3
 80026c4:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <HAL_TIM_IC_CaptureCallback+0x64>)
 80026c6:	601a      	str	r2, [r3, #0]
			ic_cpt_finish_flag = 1; // 초음파 측정완료
 80026c8:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <HAL_TIM_IC_CaptureCallback+0x68>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	601a      	str	r2, [r3, #0]
}
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40000400 	.word	0x40000400
 80026dc:	20000cfc 	.word	0x20000cfc
 80026e0:	20000cf4 	.word	0x20000cf4
 80026e4:	20000cf8 	.word	0x20000cf8

080026e8 <ultrasonic_processing>:

void ultrasonic_processing(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
	int distance_lv; // 전역변수 값을 바로 쓰지 않고 지역변수에 복사하여 사용하는 것이 안전하기 때문에 별도의 지역변수를 선언함
	if (TIM10_10ms_ultrasonic >= 100) // 10ms가 100개면 1초
 80026ee:	4b1e      	ldr	r3, [pc, #120]	; (8002768 <ultrasonic_processing+0x80>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2b63      	cmp	r3, #99	; 0x63
 80026f4:	dd30      	ble.n	8002758 <ultrasonic_processing+0x70>
	{
		TIM10_10ms_ultrasonic = 0;
 80026f6:	4b1c      	ldr	r3, [pc, #112]	; (8002768 <ultrasonic_processing+0x80>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
		make_trigger();
 80026fc:	f000 f83e 	bl	800277c <make_trigger>
		if (ic_cpt_finish_flag) // 초음파 측정이 완료 되었다면..
 8002700:	4b1a      	ldr	r3, [pc, #104]	; (800276c <ultrasonic_processing+0x84>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d027      	beq.n	8002758 <ultrasonic_processing+0x70>
		{
			ic_cpt_finish_flag = 0;
 8002708:	4b18      	ldr	r3, [pc, #96]	; (800276c <ultrasonic_processing+0x84>)
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
			distance_lv = distance; // 전역변수 값을 바로 쓰지 않고 지역변수에 복사하여 사용하는 것임
 800270e:	4b18      	ldr	r3, [pc, #96]	; (8002770 <ultrasonic_processing+0x88>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	607b      	str	r3, [r7, #4]
			distance_lv = distance_lv * 0.034 / 2; // 1us마다 0.034cm를 이동한다. 그리고 초음파 센서가 리턴한 distance값은 왕복 거리이기 때문에 /2를 해서 편도 거리를 얻어낸다.
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7fd ff0d 	bl	8000534 <__aeabi_i2d>
 800271a:	a311      	add	r3, pc, #68	; (adr r3, 8002760 <ultrasonic_processing+0x78>)
 800271c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002720:	f7fd ff72 	bl	8000608 <__aeabi_dmul>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	4610      	mov	r0, r2
 800272a:	4619      	mov	r1, r3
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002734:	f7fe f892 	bl	800085c <__aeabi_ddiv>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	4610      	mov	r0, r2
 800273e:	4619      	mov	r1, r3
 8002740:	f7fe f974 	bl	8000a2c <__aeabi_d2iz>
 8002744:	4603      	mov	r3, r0
 8002746:	607b      	str	r3, [r7, #4]

			if (ultrasonic_print_flag)
 8002748:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <ultrasonic_processing+0x8c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d003      	beq.n	8002758 <ultrasonic_processing+0x70>
			{
				printf("distance_lv: %dcm\n", distance_lv);
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	4809      	ldr	r0, [pc, #36]	; (8002778 <ultrasonic_processing+0x90>)
 8002754:	f004 f97c 	bl	8006a50 <iprintf>
			}
		}
	}
}
 8002758:	bf00      	nop
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	b020c49c 	.word	0xb020c49c
 8002764:	3fa16872 	.word	0x3fa16872
 8002768:	20000988 	.word	0x20000988
 800276c:	20000cf8 	.word	0x20000cf8
 8002770:	20000cf4 	.word	0x20000cf4
 8002774:	20000d00 	.word	0x20000d00
 8002778:	08007cb4 	.word	0x08007cb4

0800277c <make_trigger>:

void make_trigger(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, 0);
 8002780:	2200      	movs	r2, #0
 8002782:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002786:	480b      	ldr	r0, [pc, #44]	; (80027b4 <make_trigger+0x38>)
 8002788:	f000 ff66 	bl	8003658 <HAL_GPIO_WritePin>
	delay_us(2);
 800278c:	2002      	movs	r0, #2
 800278e:	f7fe fd63 	bl	8001258 <delay_us>
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, 1);
 8002792:	2201      	movs	r2, #1
 8002794:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002798:	4806      	ldr	r0, [pc, #24]	; (80027b4 <make_trigger+0x38>)
 800279a:	f000 ff5d 	bl	8003658 <HAL_GPIO_WritePin>
	delay_us(10);
 800279e:	200a      	movs	r0, #10
 80027a0:	f7fe fd5a 	bl	8001258 <delay_us>
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, 0);
 80027a4:	2200      	movs	r2, #0
 80027a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027aa:	4802      	ldr	r0, [pc, #8]	; (80027b4 <make_trigger+0x38>)
 80027ac:	f000 ff54 	bl	8003658 <HAL_GPIO_WritePin>
	// 위 5줄의 코드 라인을 통해 초음파 센서에서 요구하는 트리거 신호의 전기적 파형을 MCU가 날릴 수 있도록 구현했다.

}
 80027b0:	bf00      	nop
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40021400 	.word	0x40021400

080027b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80027b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027f0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027bc:	480d      	ldr	r0, [pc, #52]	; (80027f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80027be:	490e      	ldr	r1, [pc, #56]	; (80027f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027c0:	4a0e      	ldr	r2, [pc, #56]	; (80027fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027c4:	e002      	b.n	80027cc <LoopCopyDataInit>

080027c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ca:	3304      	adds	r3, #4

080027cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027d0:	d3f9      	bcc.n	80027c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027d2:	4a0b      	ldr	r2, [pc, #44]	; (8002800 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027d4:	4c0b      	ldr	r4, [pc, #44]	; (8002804 <LoopFillZerobss+0x26>)
  movs r3, #0
 80027d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027d8:	e001      	b.n	80027de <LoopFillZerobss>

080027da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027dc:	3204      	adds	r2, #4

080027de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027e0:	d3fb      	bcc.n	80027da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027e2:	f7ff fc9f 	bl	8002124 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027e6:	f004 f907 	bl	80069f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027ea:	f7fe fd5f 	bl	80012ac <main>
  bx  lr    
 80027ee:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80027f0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80027f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027f8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80027fc:	08007e8c 	.word	0x08007e8c
  ldr r2, =_sbss
 8002800:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002804:	20000d18 	.word	0x20000d18

08002808 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002808:	e7fe      	b.n	8002808 <ADC_IRQHandler>
	...

0800280c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002810:	4b0e      	ldr	r3, [pc, #56]	; (800284c <HAL_Init+0x40>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a0d      	ldr	r2, [pc, #52]	; (800284c <HAL_Init+0x40>)
 8002816:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800281a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800281c:	4b0b      	ldr	r3, [pc, #44]	; (800284c <HAL_Init+0x40>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a0a      	ldr	r2, [pc, #40]	; (800284c <HAL_Init+0x40>)
 8002822:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002826:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002828:	4b08      	ldr	r3, [pc, #32]	; (800284c <HAL_Init+0x40>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a07      	ldr	r2, [pc, #28]	; (800284c <HAL_Init+0x40>)
 800282e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002832:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002834:	2003      	movs	r0, #3
 8002836:	f000 f94f 	bl	8002ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800283a:	2000      	movs	r0, #0
 800283c:	f000 f808 	bl	8002850 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002840:	f7ff f8ba 	bl	80019b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40023c00 	.word	0x40023c00

08002850 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002858:	4b12      	ldr	r3, [pc, #72]	; (80028a4 <HAL_InitTick+0x54>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	4b12      	ldr	r3, [pc, #72]	; (80028a8 <HAL_InitTick+0x58>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	4619      	mov	r1, r3
 8002862:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002866:	fbb3 f3f1 	udiv	r3, r3, r1
 800286a:	fbb2 f3f3 	udiv	r3, r2, r3
 800286e:	4618      	mov	r0, r3
 8002870:	f000 f967 	bl	8002b42 <HAL_SYSTICK_Config>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e00e      	b.n	800289c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b0f      	cmp	r3, #15
 8002882:	d80a      	bhi.n	800289a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002884:	2200      	movs	r2, #0
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	f04f 30ff 	mov.w	r0, #4294967295
 800288c:	f000 f92f 	bl	8002aee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002890:	4a06      	ldr	r2, [pc, #24]	; (80028ac <HAL_InitTick+0x5c>)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002896:	2300      	movs	r3, #0
 8002898:	e000      	b.n	800289c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
}
 800289c:	4618      	mov	r0, r3
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	20000004 	.word	0x20000004
 80028a8:	2000000c 	.word	0x2000000c
 80028ac:	20000008 	.word	0x20000008

080028b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028b4:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <HAL_IncTick+0x20>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	461a      	mov	r2, r3
 80028ba:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <HAL_IncTick+0x24>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4413      	add	r3, r2
 80028c0:	4a04      	ldr	r2, [pc, #16]	; (80028d4 <HAL_IncTick+0x24>)
 80028c2:	6013      	str	r3, [r2, #0]
}
 80028c4:	bf00      	nop
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	2000000c 	.word	0x2000000c
 80028d4:	20000d04 	.word	0x20000d04

080028d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  return uwTick;
 80028dc:	4b03      	ldr	r3, [pc, #12]	; (80028ec <HAL_GetTick+0x14>)
 80028de:	681b      	ldr	r3, [r3, #0]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	20000d04 	.word	0x20000d04

080028f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028f8:	f7ff ffee 	bl	80028d8 <HAL_GetTick>
 80028fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002908:	d005      	beq.n	8002916 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800290a:	4b0a      	ldr	r3, [pc, #40]	; (8002934 <HAL_Delay+0x44>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	461a      	mov	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4413      	add	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002916:	bf00      	nop
 8002918:	f7ff ffde 	bl	80028d8 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	429a      	cmp	r2, r3
 8002926:	d8f7      	bhi.n	8002918 <HAL_Delay+0x28>
  {
  }
}
 8002928:	bf00      	nop
 800292a:	bf00      	nop
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	2000000c 	.word	0x2000000c

08002938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002948:	4b0c      	ldr	r3, [pc, #48]	; (800297c <__NVIC_SetPriorityGrouping+0x44>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800294e:	68ba      	ldr	r2, [r7, #8]
 8002950:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002954:	4013      	ands	r3, r2
 8002956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002960:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800296a:	4a04      	ldr	r2, [pc, #16]	; (800297c <__NVIC_SetPriorityGrouping+0x44>)
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	60d3      	str	r3, [r2, #12]
}
 8002970:	bf00      	nop
 8002972:	3714      	adds	r7, #20
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002984:	4b04      	ldr	r3, [pc, #16]	; (8002998 <__NVIC_GetPriorityGrouping+0x18>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	0a1b      	lsrs	r3, r3, #8
 800298a:	f003 0307 	and.w	r3, r3, #7
}
 800298e:	4618      	mov	r0, r3
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	db0b      	blt.n	80029c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ae:	79fb      	ldrb	r3, [r7, #7]
 80029b0:	f003 021f 	and.w	r2, r3, #31
 80029b4:	4907      	ldr	r1, [pc, #28]	; (80029d4 <__NVIC_EnableIRQ+0x38>)
 80029b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ba:	095b      	lsrs	r3, r3, #5
 80029bc:	2001      	movs	r0, #1
 80029be:	fa00 f202 	lsl.w	r2, r0, r2
 80029c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	e000e100 	.word	0xe000e100

080029d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	6039      	str	r1, [r7, #0]
 80029e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	db0a      	blt.n	8002a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	490c      	ldr	r1, [pc, #48]	; (8002a24 <__NVIC_SetPriority+0x4c>)
 80029f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f6:	0112      	lsls	r2, r2, #4
 80029f8:	b2d2      	uxtb	r2, r2
 80029fa:	440b      	add	r3, r1
 80029fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a00:	e00a      	b.n	8002a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	4908      	ldr	r1, [pc, #32]	; (8002a28 <__NVIC_SetPriority+0x50>)
 8002a08:	79fb      	ldrb	r3, [r7, #7]
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	3b04      	subs	r3, #4
 8002a10:	0112      	lsls	r2, r2, #4
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	440b      	add	r3, r1
 8002a16:	761a      	strb	r2, [r3, #24]
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	e000e100 	.word	0xe000e100
 8002a28:	e000ed00 	.word	0xe000ed00

08002a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b089      	sub	sp, #36	; 0x24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	f1c3 0307 	rsb	r3, r3, #7
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	bf28      	it	cs
 8002a4a:	2304      	movcs	r3, #4
 8002a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	3304      	adds	r3, #4
 8002a52:	2b06      	cmp	r3, #6
 8002a54:	d902      	bls.n	8002a5c <NVIC_EncodePriority+0x30>
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	3b03      	subs	r3, #3
 8002a5a:	e000      	b.n	8002a5e <NVIC_EncodePriority+0x32>
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a60:	f04f 32ff 	mov.w	r2, #4294967295
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	43da      	mvns	r2, r3
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	401a      	ands	r2, r3
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a74:	f04f 31ff 	mov.w	r1, #4294967295
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7e:	43d9      	mvns	r1, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a84:	4313      	orrs	r3, r2
         );
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3724      	adds	r7, #36	; 0x24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
	...

08002a94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aa4:	d301      	bcc.n	8002aaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e00f      	b.n	8002aca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aaa:	4a0a      	ldr	r2, [pc, #40]	; (8002ad4 <SysTick_Config+0x40>)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ab2:	210f      	movs	r1, #15
 8002ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab8:	f7ff ff8e 	bl	80029d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002abc:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <SysTick_Config+0x40>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ac2:	4b04      	ldr	r3, [pc, #16]	; (8002ad4 <SysTick_Config+0x40>)
 8002ac4:	2207      	movs	r2, #7
 8002ac6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	e000e010 	.word	0xe000e010

08002ad8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f7ff ff29 	bl	8002938 <__NVIC_SetPriorityGrouping>
}
 8002ae6:	bf00      	nop
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b086      	sub	sp, #24
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	4603      	mov	r3, r0
 8002af6:	60b9      	str	r1, [r7, #8]
 8002af8:	607a      	str	r2, [r7, #4]
 8002afa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b00:	f7ff ff3e 	bl	8002980 <__NVIC_GetPriorityGrouping>
 8002b04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	68b9      	ldr	r1, [r7, #8]
 8002b0a:	6978      	ldr	r0, [r7, #20]
 8002b0c:	f7ff ff8e 	bl	8002a2c <NVIC_EncodePriority>
 8002b10:	4602      	mov	r2, r0
 8002b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b16:	4611      	mov	r1, r2
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff ff5d 	bl	80029d8 <__NVIC_SetPriority>
}
 8002b1e:	bf00      	nop
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b082      	sub	sp, #8
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff ff31 	bl	800299c <__NVIC_EnableIRQ>
}
 8002b3a:	bf00      	nop
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b082      	sub	sp, #8
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7ff ffa2 	bl	8002a94 <SysTick_Config>
 8002b50:	4603      	mov	r3, r0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b084      	sub	sp, #16
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b66:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b68:	f7ff feb6 	bl	80028d8 <HAL_GetTick>
 8002b6c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d008      	beq.n	8002b8c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2280      	movs	r2, #128	; 0x80
 8002b7e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e052      	b.n	8002c32 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0216 	bic.w	r2, r2, #22
 8002b9a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	695a      	ldr	r2, [r3, #20]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002baa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d103      	bne.n	8002bbc <HAL_DMA_Abort+0x62>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d007      	beq.n	8002bcc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0208 	bic.w	r2, r2, #8
 8002bca:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0201 	bic.w	r2, r2, #1
 8002bda:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bdc:	e013      	b.n	8002c06 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bde:	f7ff fe7b 	bl	80028d8 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b05      	cmp	r3, #5
 8002bea:	d90c      	bls.n	8002c06 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2203      	movs	r2, #3
 8002bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e015      	b.n	8002c32 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1e4      	bne.n	8002bde <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c18:	223f      	movs	r2, #63	; 0x3f
 8002c1a:	409a      	lsls	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b083      	sub	sp, #12
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d004      	beq.n	8002c58 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2280      	movs	r2, #128	; 0x80
 8002c52:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e00c      	b.n	8002c72 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2205      	movs	r2, #5
 8002c5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 0201 	bic.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
	...

08002c80 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e06c      	b.n	8002d6c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d106      	bne.n	8002caa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2223      	movs	r2, #35	; 0x23
 8002ca0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f7fe feaf 	bl	8001a08 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002caa:	2300      	movs	r3, #0
 8002cac:	60bb      	str	r3, [r7, #8]
 8002cae:	4b31      	ldr	r3, [pc, #196]	; (8002d74 <HAL_ETH_Init+0xf4>)
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb2:	4a30      	ldr	r2, [pc, #192]	; (8002d74 <HAL_ETH_Init+0xf4>)
 8002cb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8002cba:	4b2e      	ldr	r3, [pc, #184]	; (8002d74 <HAL_ETH_Init+0xf4>)
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cc2:	60bb      	str	r3, [r7, #8]
 8002cc4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002cc6:	4b2c      	ldr	r3, [pc, #176]	; (8002d78 <HAL_ETH_Init+0xf8>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	4a2b      	ldr	r2, [pc, #172]	; (8002d78 <HAL_ETH_Init+0xf8>)
 8002ccc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002cd0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002cd2:	4b29      	ldr	r3, [pc, #164]	; (8002d78 <HAL_ETH_Init+0xf8>)
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	4927      	ldr	r1, [pc, #156]	; (8002d78 <HAL_ETH_Init+0xf8>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002ce0:	4b25      	ldr	r3, [pc, #148]	; (8002d78 <HAL_ETH_Init+0xf8>)
 8002ce2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6812      	ldr	r2, [r2, #0]
 8002cf2:	f043 0301 	orr.w	r3, r3, #1
 8002cf6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002cfa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cfc:	f7ff fdec 	bl	80028d8 <HAL_GetTick>
 8002d00:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002d02:	e011      	b.n	8002d28 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002d04:	f7ff fde8 	bl	80028d8 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d12:	d909      	bls.n	8002d28 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2204      	movs	r2, #4
 8002d18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	22e0      	movs	r2, #224	; 0xe0
 8002d20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e021      	b.n	8002d6c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1e4      	bne.n	8002d04 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f958 	bl	8002ff0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f9ff 	bl	8003144 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 fa55 	bl	80031f6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	461a      	mov	r2, r3
 8002d52:	2100      	movs	r1, #0
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 f9bd 	bl	80030d4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2210      	movs	r2, #16
 8002d66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40023800 	.word	0x40023800
 8002d78:	40013800 	.word	0x40013800

08002d7c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	4b51      	ldr	r3, [pc, #324]	; (8002ed8 <ETH_SetMACConfig+0x15c>)
 8002d92:	4013      	ands	r3, r2
 8002d94:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	7c1b      	ldrb	r3, [r3, #16]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d102      	bne.n	8002da4 <ETH_SetMACConfig+0x28>
 8002d9e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002da2:	e000      	b.n	8002da6 <ETH_SetMACConfig+0x2a>
 8002da4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	7c5b      	ldrb	r3, [r3, #17]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d102      	bne.n	8002db4 <ETH_SetMACConfig+0x38>
 8002dae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002db2:	e000      	b.n	8002db6 <ETH_SetMACConfig+0x3a>
 8002db4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002db6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002dbc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	7fdb      	ldrb	r3, [r3, #31]
 8002dc2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002dc4:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002dca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	7f92      	ldrb	r2, [r2, #30]
 8002dd0:	2a00      	cmp	r2, #0
 8002dd2:	d102      	bne.n	8002dda <ETH_SetMACConfig+0x5e>
 8002dd4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dd8:	e000      	b.n	8002ddc <ETH_SetMACConfig+0x60>
 8002dda:	2200      	movs	r2, #0
                        macconf->Speed |
 8002ddc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	7f1b      	ldrb	r3, [r3, #28]
 8002de2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002de4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002dea:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	791b      	ldrb	r3, [r3, #4]
 8002df0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002df2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002dfa:	2a00      	cmp	r2, #0
 8002dfc:	d102      	bne.n	8002e04 <ETH_SetMACConfig+0x88>
 8002dfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e02:	e000      	b.n	8002e06 <ETH_SetMACConfig+0x8a>
 8002e04:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002e06:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	7bdb      	ldrb	r3, [r3, #15]
 8002e0c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002e0e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002e14:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002e1c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e36:	2001      	movs	r0, #1
 8002e38:	f7ff fd5a 	bl	80028f0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002e52:	4013      	ands	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e5a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002e62:	2a00      	cmp	r2, #0
 8002e64:	d101      	bne.n	8002e6a <ETH_SetMACConfig+0xee>
 8002e66:	2280      	movs	r2, #128	; 0x80
 8002e68:	e000      	b.n	8002e6c <ETH_SetMACConfig+0xf0>
 8002e6a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002e6c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002e72:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002e7a:	2a01      	cmp	r2, #1
 8002e7c:	d101      	bne.n	8002e82 <ETH_SetMACConfig+0x106>
 8002e7e:	2208      	movs	r2, #8
 8002e80:	e000      	b.n	8002e84 <ETH_SetMACConfig+0x108>
 8002e82:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002e84:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002e8c:	2a01      	cmp	r2, #1
 8002e8e:	d101      	bne.n	8002e94 <ETH_SetMACConfig+0x118>
 8002e90:	2204      	movs	r2, #4
 8002e92:	e000      	b.n	8002e96 <ETH_SetMACConfig+0x11a>
 8002e94:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002e96:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002e9e:	2a01      	cmp	r2, #1
 8002ea0:	d101      	bne.n	8002ea6 <ETH_SetMACConfig+0x12a>
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	e000      	b.n	8002ea8 <ETH_SetMACConfig+0x12c>
 8002ea6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ec0:	2001      	movs	r0, #1
 8002ec2:	f7ff fd15 	bl	80028f0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	619a      	str	r2, [r3, #24]
}
 8002ece:	bf00      	nop
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	ff20810f 	.word	0xff20810f

08002edc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	4b3d      	ldr	r3, [pc, #244]	; (8002fec <ETH_SetDMAConfig+0x110>)
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	7b1b      	ldrb	r3, [r3, #12]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d102      	bne.n	8002f08 <ETH_SetDMAConfig+0x2c>
 8002f02:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002f06:	e000      	b.n	8002f0a <ETH_SetDMAConfig+0x2e>
 8002f08:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	7b5b      	ldrb	r3, [r3, #13]
 8002f0e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002f10:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	7f52      	ldrb	r2, [r2, #29]
 8002f16:	2a00      	cmp	r2, #0
 8002f18:	d102      	bne.n	8002f20 <ETH_SetDMAConfig+0x44>
 8002f1a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002f1e:	e000      	b.n	8002f22 <ETH_SetDMAConfig+0x46>
 8002f20:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002f22:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	7b9b      	ldrb	r3, [r3, #14]
 8002f28:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002f2a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002f30:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	7f1b      	ldrb	r3, [r3, #28]
 8002f36:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002f38:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	7f9b      	ldrb	r3, [r3, #30]
 8002f3e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002f40:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002f46:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f4e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002f50:	4313      	orrs	r3, r2
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f60:	461a      	mov	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f72:	2001      	movs	r0, #1
 8002f74:	f7ff fcbc 	bl	80028f0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f80:	461a      	mov	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	791b      	ldrb	r3, [r3, #4]
 8002f8a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002f90:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002f96:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002f9c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002fa4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002fa6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fac:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002fae:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002fb4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	6812      	ldr	r2, [r2, #0]
 8002fba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fbe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002fc2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fd0:	2001      	movs	r0, #1
 8002fd2:	f7ff fc8d 	bl	80028f0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fde:	461a      	mov	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6013      	str	r3, [r2, #0]
}
 8002fe4:	bf00      	nop
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	f8de3f23 	.word	0xf8de3f23

08002ff0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b0a6      	sub	sp, #152	; 0x98
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002ffe:	2301      	movs	r3, #1
 8003000:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003004:	2300      	movs	r3, #0
 8003006:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003008:	2300      	movs	r3, #0
 800300a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800300e:	2301      	movs	r3, #1
 8003010:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003014:	2300      	movs	r3, #0
 8003016:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800301a:	2301      	movs	r3, #1
 800301c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003020:	2300      	movs	r3, #0
 8003022:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003026:	2300      	movs	r3, #0
 8003028:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800302c:	2300      	movs	r3, #0
 800302e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003030:	2300      	movs	r3, #0
 8003032:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003036:	2300      	movs	r3, #0
 8003038:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800303a:	2300      	movs	r3, #0
 800303c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003040:	2300      	movs	r3, #0
 8003042:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003046:	2300      	movs	r3, #0
 8003048:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800304c:	2300      	movs	r3, #0
 800304e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003052:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003056:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003058:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800305c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800305e:	2300      	movs	r3, #0
 8003060:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003064:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003068:	4619      	mov	r1, r3
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7ff fe86 	bl	8002d7c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003070:	2301      	movs	r3, #1
 8003072:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003074:	2301      	movs	r3, #1
 8003076:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003078:	2301      	movs	r3, #1
 800307a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800307e:	2301      	movs	r3, #1
 8003080:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003082:	2300      	movs	r3, #0
 8003084:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003086:	2300      	movs	r3, #0
 8003088:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800308c:	2300      	movs	r3, #0
 800308e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003092:	2300      	movs	r3, #0
 8003094:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003096:	2301      	movs	r3, #1
 8003098:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800309c:	2301      	movs	r3, #1
 800309e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80030a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030a4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80030a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80030aa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80030ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030b0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80030b2:	2301      	movs	r3, #1
 80030b4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80030b8:	2300      	movs	r3, #0
 80030ba:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80030bc:	2300      	movs	r3, #0
 80030be:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80030c0:	f107 0308 	add.w	r3, r7, #8
 80030c4:	4619      	mov	r1, r3
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7ff ff08 	bl	8002edc <ETH_SetDMAConfig>
}
 80030cc:	bf00      	nop
 80030ce:	3798      	adds	r7, #152	; 0x98
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3305      	adds	r3, #5
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	021b      	lsls	r3, r3, #8
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	3204      	adds	r2, #4
 80030ec:	7812      	ldrb	r2, [r2, #0]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	4b11      	ldr	r3, [pc, #68]	; (800313c <ETH_MACAddressConfig+0x68>)
 80030f6:	4413      	add	r3, r2
 80030f8:	461a      	mov	r2, r3
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	3303      	adds	r3, #3
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	061a      	lsls	r2, r3, #24
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	3302      	adds	r3, #2
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	041b      	lsls	r3, r3, #16
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3301      	adds	r3, #1
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	021b      	lsls	r3, r3, #8
 8003118:	4313      	orrs	r3, r2
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	7812      	ldrb	r2, [r2, #0]
 800311e:	4313      	orrs	r3, r2
 8003120:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	4b06      	ldr	r3, [pc, #24]	; (8003140 <ETH_MACAddressConfig+0x6c>)
 8003126:	4413      	add	r3, r2
 8003128:	461a      	mov	r2, r3
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	6013      	str	r3, [r2, #0]
}
 800312e:	bf00      	nop
 8003130:	371c      	adds	r7, #28
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	40028040 	.word	0x40028040
 8003140:	40028044 	.word	0x40028044

08003144 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800314c:	2300      	movs	r3, #0
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	e03e      	b.n	80031d0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68d9      	ldr	r1, [r3, #12]
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	4613      	mov	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	440b      	add	r3, r1
 8003162:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	2200      	movs	r2, #0
 8003168:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	2200      	movs	r2, #0
 800316e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	2200      	movs	r2, #0
 8003174:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	2200      	movs	r2, #0
 800317a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800317c:	68b9      	ldr	r1, [r7, #8]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	3206      	adds	r2, #6
 8003184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2b02      	cmp	r3, #2
 8003198:	d80c      	bhi.n	80031b4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68d9      	ldr	r1, [r3, #12]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	1c5a      	adds	r2, r3, #1
 80031a2:	4613      	mov	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4413      	add	r3, r2
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	440b      	add	r3, r1
 80031ac:	461a      	mov	r2, r3
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	60da      	str	r2, [r3, #12]
 80031b2:	e004      	b.n	80031be <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	461a      	mov	r2, r3
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	3301      	adds	r3, #1
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2b03      	cmp	r3, #3
 80031d4:	d9bd      	bls.n	8003152 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031e8:	611a      	str	r2, [r3, #16]
}
 80031ea:	bf00      	nop
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b085      	sub	sp, #20
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80031fe:	2300      	movs	r3, #0
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	e046      	b.n	8003292 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6919      	ldr	r1, [r3, #16]
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	4613      	mov	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4413      	add	r3, r2
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	440b      	add	r3, r1
 8003214:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	2200      	movs	r2, #0
 8003220:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	2200      	movs	r2, #0
 8003226:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	2200      	movs	r2, #0
 800322c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	2200      	movs	r2, #0
 8003232:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	2200      	movs	r2, #0
 8003238:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003240:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003248:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003256:	68b9      	ldr	r1, [r7, #8]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	3212      	adds	r2, #18
 800325e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2b02      	cmp	r3, #2
 8003266:	d80c      	bhi.n	8003282 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6919      	ldr	r1, [r3, #16]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	1c5a      	adds	r2, r3, #1
 8003270:	4613      	mov	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4413      	add	r3, r2
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	440b      	add	r3, r1
 800327a:	461a      	mov	r2, r3
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	60da      	str	r2, [r3, #12]
 8003280:	e004      	b.n	800328c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	461a      	mov	r2, r3
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	3301      	adds	r3, #1
 8003290:	60fb      	str	r3, [r7, #12]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2b03      	cmp	r3, #3
 8003296:	d9b5      	bls.n	8003204 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	691a      	ldr	r2, [r3, #16]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032c2:	60da      	str	r2, [r3, #12]
}
 80032c4:	bf00      	nop
 80032c6:	3714      	adds	r7, #20
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b089      	sub	sp, #36	; 0x24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032da:	2300      	movs	r3, #0
 80032dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032de:	2300      	movs	r3, #0
 80032e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032e6:	2300      	movs	r3, #0
 80032e8:	61fb      	str	r3, [r7, #28]
 80032ea:	e177      	b.n	80035dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032ec:	2201      	movs	r2, #1
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	4013      	ands	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	429a      	cmp	r2, r3
 8003306:	f040 8166 	bne.w	80035d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f003 0303 	and.w	r3, r3, #3
 8003312:	2b01      	cmp	r3, #1
 8003314:	d005      	beq.n	8003322 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800331e:	2b02      	cmp	r3, #2
 8003320:	d130      	bne.n	8003384 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	2203      	movs	r2, #3
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	43db      	mvns	r3, r3
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	4013      	ands	r3, r2
 8003338:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	68da      	ldr	r2, [r3, #12]
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	4313      	orrs	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003358:	2201      	movs	r2, #1
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	43db      	mvns	r3, r3
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	4013      	ands	r3, r2
 8003366:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	091b      	lsrs	r3, r3, #4
 800336e:	f003 0201 	and.w	r2, r3, #1
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	4313      	orrs	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f003 0303 	and.w	r3, r3, #3
 800338c:	2b03      	cmp	r3, #3
 800338e:	d017      	beq.n	80033c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	2203      	movs	r2, #3
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	43db      	mvns	r3, r3
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	4013      	ands	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f003 0303 	and.w	r3, r3, #3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d123      	bne.n	8003414 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	08da      	lsrs	r2, r3, #3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3208      	adds	r2, #8
 80033d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	220f      	movs	r2, #15
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	43db      	mvns	r3, r3
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	4013      	ands	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	691a      	ldr	r2, [r3, #16]
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	4313      	orrs	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	08da      	lsrs	r2, r3, #3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	3208      	adds	r2, #8
 800340e:	69b9      	ldr	r1, [r7, #24]
 8003410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	2203      	movs	r2, #3
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	43db      	mvns	r3, r3
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	4013      	ands	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f003 0203 	and.w	r2, r3, #3
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	4313      	orrs	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 80c0 	beq.w	80035d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003456:	2300      	movs	r3, #0
 8003458:	60fb      	str	r3, [r7, #12]
 800345a:	4b66      	ldr	r3, [pc, #408]	; (80035f4 <HAL_GPIO_Init+0x324>)
 800345c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345e:	4a65      	ldr	r2, [pc, #404]	; (80035f4 <HAL_GPIO_Init+0x324>)
 8003460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003464:	6453      	str	r3, [r2, #68]	; 0x44
 8003466:	4b63      	ldr	r3, [pc, #396]	; (80035f4 <HAL_GPIO_Init+0x324>)
 8003468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003472:	4a61      	ldr	r2, [pc, #388]	; (80035f8 <HAL_GPIO_Init+0x328>)
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	089b      	lsrs	r3, r3, #2
 8003478:	3302      	adds	r3, #2
 800347a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800347e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	220f      	movs	r2, #15
 800348a:	fa02 f303 	lsl.w	r3, r2, r3
 800348e:	43db      	mvns	r3, r3
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	4013      	ands	r3, r2
 8003494:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a58      	ldr	r2, [pc, #352]	; (80035fc <HAL_GPIO_Init+0x32c>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d037      	beq.n	800350e <HAL_GPIO_Init+0x23e>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a57      	ldr	r2, [pc, #348]	; (8003600 <HAL_GPIO_Init+0x330>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d031      	beq.n	800350a <HAL_GPIO_Init+0x23a>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a56      	ldr	r2, [pc, #344]	; (8003604 <HAL_GPIO_Init+0x334>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d02b      	beq.n	8003506 <HAL_GPIO_Init+0x236>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a55      	ldr	r2, [pc, #340]	; (8003608 <HAL_GPIO_Init+0x338>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d025      	beq.n	8003502 <HAL_GPIO_Init+0x232>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a54      	ldr	r2, [pc, #336]	; (800360c <HAL_GPIO_Init+0x33c>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d01f      	beq.n	80034fe <HAL_GPIO_Init+0x22e>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a53      	ldr	r2, [pc, #332]	; (8003610 <HAL_GPIO_Init+0x340>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d019      	beq.n	80034fa <HAL_GPIO_Init+0x22a>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a52      	ldr	r2, [pc, #328]	; (8003614 <HAL_GPIO_Init+0x344>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d013      	beq.n	80034f6 <HAL_GPIO_Init+0x226>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a51      	ldr	r2, [pc, #324]	; (8003618 <HAL_GPIO_Init+0x348>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d00d      	beq.n	80034f2 <HAL_GPIO_Init+0x222>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a50      	ldr	r2, [pc, #320]	; (800361c <HAL_GPIO_Init+0x34c>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d007      	beq.n	80034ee <HAL_GPIO_Init+0x21e>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a4f      	ldr	r2, [pc, #316]	; (8003620 <HAL_GPIO_Init+0x350>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d101      	bne.n	80034ea <HAL_GPIO_Init+0x21a>
 80034e6:	2309      	movs	r3, #9
 80034e8:	e012      	b.n	8003510 <HAL_GPIO_Init+0x240>
 80034ea:	230a      	movs	r3, #10
 80034ec:	e010      	b.n	8003510 <HAL_GPIO_Init+0x240>
 80034ee:	2308      	movs	r3, #8
 80034f0:	e00e      	b.n	8003510 <HAL_GPIO_Init+0x240>
 80034f2:	2307      	movs	r3, #7
 80034f4:	e00c      	b.n	8003510 <HAL_GPIO_Init+0x240>
 80034f6:	2306      	movs	r3, #6
 80034f8:	e00a      	b.n	8003510 <HAL_GPIO_Init+0x240>
 80034fa:	2305      	movs	r3, #5
 80034fc:	e008      	b.n	8003510 <HAL_GPIO_Init+0x240>
 80034fe:	2304      	movs	r3, #4
 8003500:	e006      	b.n	8003510 <HAL_GPIO_Init+0x240>
 8003502:	2303      	movs	r3, #3
 8003504:	e004      	b.n	8003510 <HAL_GPIO_Init+0x240>
 8003506:	2302      	movs	r3, #2
 8003508:	e002      	b.n	8003510 <HAL_GPIO_Init+0x240>
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <HAL_GPIO_Init+0x240>
 800350e:	2300      	movs	r3, #0
 8003510:	69fa      	ldr	r2, [r7, #28]
 8003512:	f002 0203 	and.w	r2, r2, #3
 8003516:	0092      	lsls	r2, r2, #2
 8003518:	4093      	lsls	r3, r2
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	4313      	orrs	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003520:	4935      	ldr	r1, [pc, #212]	; (80035f8 <HAL_GPIO_Init+0x328>)
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	089b      	lsrs	r3, r3, #2
 8003526:	3302      	adds	r3, #2
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800352e:	4b3d      	ldr	r3, [pc, #244]	; (8003624 <HAL_GPIO_Init+0x354>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	43db      	mvns	r3, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4013      	ands	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	4313      	orrs	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003552:	4a34      	ldr	r2, [pc, #208]	; (8003624 <HAL_GPIO_Init+0x354>)
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003558:	4b32      	ldr	r3, [pc, #200]	; (8003624 <HAL_GPIO_Init+0x354>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	43db      	mvns	r3, r3
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	4013      	ands	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	4313      	orrs	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800357c:	4a29      	ldr	r2, [pc, #164]	; (8003624 <HAL_GPIO_Init+0x354>)
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003582:	4b28      	ldr	r3, [pc, #160]	; (8003624 <HAL_GPIO_Init+0x354>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	43db      	mvns	r3, r3
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	4013      	ands	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035a6:	4a1f      	ldr	r2, [pc, #124]	; (8003624 <HAL_GPIO_Init+0x354>)
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035ac:	4b1d      	ldr	r3, [pc, #116]	; (8003624 <HAL_GPIO_Init+0x354>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	43db      	mvns	r3, r3
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	4013      	ands	r3, r2
 80035ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035d0:	4a14      	ldr	r2, [pc, #80]	; (8003624 <HAL_GPIO_Init+0x354>)
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	3301      	adds	r3, #1
 80035da:	61fb      	str	r3, [r7, #28]
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	2b0f      	cmp	r3, #15
 80035e0:	f67f ae84 	bls.w	80032ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035e4:	bf00      	nop
 80035e6:	bf00      	nop
 80035e8:	3724      	adds	r7, #36	; 0x24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	40023800 	.word	0x40023800
 80035f8:	40013800 	.word	0x40013800
 80035fc:	40020000 	.word	0x40020000
 8003600:	40020400 	.word	0x40020400
 8003604:	40020800 	.word	0x40020800
 8003608:	40020c00 	.word	0x40020c00
 800360c:	40021000 	.word	0x40021000
 8003610:	40021400 	.word	0x40021400
 8003614:	40021800 	.word	0x40021800
 8003618:	40021c00 	.word	0x40021c00
 800361c:	40022000 	.word	0x40022000
 8003620:	40022400 	.word	0x40022400
 8003624:	40013c00 	.word	0x40013c00

08003628 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	460b      	mov	r3, r1
 8003632:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	691a      	ldr	r2, [r3, #16]
 8003638:	887b      	ldrh	r3, [r7, #2]
 800363a:	4013      	ands	r3, r2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d002      	beq.n	8003646 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003640:	2301      	movs	r3, #1
 8003642:	73fb      	strb	r3, [r7, #15]
 8003644:	e001      	b.n	800364a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003646:	2300      	movs	r3, #0
 8003648:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800364a:	7bfb      	ldrb	r3, [r7, #15]
}
 800364c:	4618      	mov	r0, r3
 800364e:	3714      	adds	r7, #20
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	460b      	mov	r3, r1
 8003662:	807b      	strh	r3, [r7, #2]
 8003664:	4613      	mov	r3, r2
 8003666:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003668:	787b      	ldrb	r3, [r7, #1]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800366e:	887a      	ldrh	r2, [r7, #2]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003674:	e003      	b.n	800367e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003676:	887b      	ldrh	r3, [r7, #2]
 8003678:	041a      	lsls	r2, r3, #16
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	619a      	str	r2, [r3, #24]
}
 800367e:	bf00      	nop
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
	...

0800368c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e12b      	b.n	80038f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d106      	bne.n	80036b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7fe fa6e 	bl	8001b94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2224      	movs	r2, #36	; 0x24
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0201 	bic.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036f0:	f000 ff18 	bl	8004524 <HAL_RCC_GetPCLK1Freq>
 80036f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	4a81      	ldr	r2, [pc, #516]	; (8003900 <HAL_I2C_Init+0x274>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d807      	bhi.n	8003710 <HAL_I2C_Init+0x84>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4a80      	ldr	r2, [pc, #512]	; (8003904 <HAL_I2C_Init+0x278>)
 8003704:	4293      	cmp	r3, r2
 8003706:	bf94      	ite	ls
 8003708:	2301      	movls	r3, #1
 800370a:	2300      	movhi	r3, #0
 800370c:	b2db      	uxtb	r3, r3
 800370e:	e006      	b.n	800371e <HAL_I2C_Init+0x92>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	4a7d      	ldr	r2, [pc, #500]	; (8003908 <HAL_I2C_Init+0x27c>)
 8003714:	4293      	cmp	r3, r2
 8003716:	bf94      	ite	ls
 8003718:	2301      	movls	r3, #1
 800371a:	2300      	movhi	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e0e7      	b.n	80038f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	4a78      	ldr	r2, [pc, #480]	; (800390c <HAL_I2C_Init+0x280>)
 800372a:	fba2 2303 	umull	r2, r3, r2, r3
 800372e:	0c9b      	lsrs	r3, r3, #18
 8003730:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	430a      	orrs	r2, r1
 8003744:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	4a6a      	ldr	r2, [pc, #424]	; (8003900 <HAL_I2C_Init+0x274>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d802      	bhi.n	8003760 <HAL_I2C_Init+0xd4>
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	3301      	adds	r3, #1
 800375e:	e009      	b.n	8003774 <HAL_I2C_Init+0xe8>
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003766:	fb02 f303 	mul.w	r3, r2, r3
 800376a:	4a69      	ldr	r2, [pc, #420]	; (8003910 <HAL_I2C_Init+0x284>)
 800376c:	fba2 2303 	umull	r2, r3, r2, r3
 8003770:	099b      	lsrs	r3, r3, #6
 8003772:	3301      	adds	r3, #1
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	6812      	ldr	r2, [r2, #0]
 8003778:	430b      	orrs	r3, r1
 800377a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003786:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	495c      	ldr	r1, [pc, #368]	; (8003900 <HAL_I2C_Init+0x274>)
 8003790:	428b      	cmp	r3, r1
 8003792:	d819      	bhi.n	80037c8 <HAL_I2C_Init+0x13c>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	1e59      	subs	r1, r3, #1
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	fbb1 f3f3 	udiv	r3, r1, r3
 80037a2:	1c59      	adds	r1, r3, #1
 80037a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80037a8:	400b      	ands	r3, r1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00a      	beq.n	80037c4 <HAL_I2C_Init+0x138>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	1e59      	subs	r1, r3, #1
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80037bc:	3301      	adds	r3, #1
 80037be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037c2:	e051      	b.n	8003868 <HAL_I2C_Init+0x1dc>
 80037c4:	2304      	movs	r3, #4
 80037c6:	e04f      	b.n	8003868 <HAL_I2C_Init+0x1dc>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d111      	bne.n	80037f4 <HAL_I2C_Init+0x168>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	1e58      	subs	r0, r3, #1
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6859      	ldr	r1, [r3, #4]
 80037d8:	460b      	mov	r3, r1
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	440b      	add	r3, r1
 80037de:	fbb0 f3f3 	udiv	r3, r0, r3
 80037e2:	3301      	adds	r3, #1
 80037e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	bf0c      	ite	eq
 80037ec:	2301      	moveq	r3, #1
 80037ee:	2300      	movne	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	e012      	b.n	800381a <HAL_I2C_Init+0x18e>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	1e58      	subs	r0, r3, #1
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6859      	ldr	r1, [r3, #4]
 80037fc:	460b      	mov	r3, r1
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	440b      	add	r3, r1
 8003802:	0099      	lsls	r1, r3, #2
 8003804:	440b      	add	r3, r1
 8003806:	fbb0 f3f3 	udiv	r3, r0, r3
 800380a:	3301      	adds	r3, #1
 800380c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003810:	2b00      	cmp	r3, #0
 8003812:	bf0c      	ite	eq
 8003814:	2301      	moveq	r3, #1
 8003816:	2300      	movne	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <HAL_I2C_Init+0x196>
 800381e:	2301      	movs	r3, #1
 8003820:	e022      	b.n	8003868 <HAL_I2C_Init+0x1dc>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10e      	bne.n	8003848 <HAL_I2C_Init+0x1bc>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	1e58      	subs	r0, r3, #1
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6859      	ldr	r1, [r3, #4]
 8003832:	460b      	mov	r3, r1
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	440b      	add	r3, r1
 8003838:	fbb0 f3f3 	udiv	r3, r0, r3
 800383c:	3301      	adds	r3, #1
 800383e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003846:	e00f      	b.n	8003868 <HAL_I2C_Init+0x1dc>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	1e58      	subs	r0, r3, #1
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6859      	ldr	r1, [r3, #4]
 8003850:	460b      	mov	r3, r1
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	440b      	add	r3, r1
 8003856:	0099      	lsls	r1, r3, #2
 8003858:	440b      	add	r3, r1
 800385a:	fbb0 f3f3 	udiv	r3, r0, r3
 800385e:	3301      	adds	r3, #1
 8003860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003864:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	6809      	ldr	r1, [r1, #0]
 800386c:	4313      	orrs	r3, r2
 800386e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	69da      	ldr	r2, [r3, #28]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003896:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	6911      	ldr	r1, [r2, #16]
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	68d2      	ldr	r2, [r2, #12]
 80038a2:	4311      	orrs	r1, r2
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6812      	ldr	r2, [r2, #0]
 80038a8:	430b      	orrs	r3, r1
 80038aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	695a      	ldr	r2, [r3, #20]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f042 0201 	orr.w	r2, r2, #1
 80038d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	000186a0 	.word	0x000186a0
 8003904:	001e847f 	.word	0x001e847f
 8003908:	003d08ff 	.word	0x003d08ff
 800390c:	431bde83 	.word	0x431bde83
 8003910:	10624dd3 	.word	0x10624dd3

08003914 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b20      	cmp	r3, #32
 8003928:	d129      	bne.n	800397e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2224      	movs	r2, #36	; 0x24
 800392e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0201 	bic.w	r2, r2, #1
 8003940:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0210 	bic.w	r2, r2, #16
 8003950:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f042 0201 	orr.w	r2, r2, #1
 8003970:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800397a:	2300      	movs	r3, #0
 800397c:	e000      	b.n	8003980 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800397e:	2302      	movs	r3, #2
  }
}
 8003980:	4618      	mov	r0, r3
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003996:	2300      	movs	r3, #0
 8003998:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b20      	cmp	r3, #32
 80039a4:	d12a      	bne.n	80039fc <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2224      	movs	r2, #36	; 0x24
 80039aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 0201 	bic.w	r2, r2, #1
 80039bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80039c6:	89fb      	ldrh	r3, [r7, #14]
 80039c8:	f023 030f 	bic.w	r3, r3, #15
 80039cc:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	89fb      	ldrh	r3, [r7, #14]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	89fa      	ldrh	r2, [r7, #14]
 80039de:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f042 0201 	orr.w	r2, r2, #1
 80039ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2220      	movs	r2, #32
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80039f8:	2300      	movs	r3, #0
 80039fa:	e000      	b.n	80039fe <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80039fc:	2302      	movs	r3, #2
  }
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a0c:	b08f      	sub	sp, #60	; 0x3c
 8003a0e:	af0a      	add	r7, sp, #40	; 0x28
 8003a10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e10f      	b.n	8003c3c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d106      	bne.n	8003a3c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7fe fa18 	bl	8001e6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2203      	movs	r2, #3
 8003a40:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d102      	bne.n	8003a56 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f002 fd21 	bl	80064a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	603b      	str	r3, [r7, #0]
 8003a66:	687e      	ldr	r6, [r7, #4]
 8003a68:	466d      	mov	r5, sp
 8003a6a:	f106 0410 	add.w	r4, r6, #16
 8003a6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a76:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a7a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a7e:	1d33      	adds	r3, r6, #4
 8003a80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a82:	6838      	ldr	r0, [r7, #0]
 8003a84:	f002 fcac 	bl	80063e0 <USB_CoreInit>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d005      	beq.n	8003a9a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2202      	movs	r2, #2
 8003a92:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e0d0      	b.n	8003c3c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f002 fd0f 	bl	80064c4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	73fb      	strb	r3, [r7, #15]
 8003aaa:	e04a      	b.n	8003b42 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003aac:	7bfa      	ldrb	r2, [r7, #15]
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	4413      	add	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	440b      	add	r3, r1
 8003aba:	333d      	adds	r3, #61	; 0x3d
 8003abc:	2201      	movs	r2, #1
 8003abe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ac0:	7bfa      	ldrb	r2, [r7, #15]
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	4413      	add	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	333c      	adds	r3, #60	; 0x3c
 8003ad0:	7bfa      	ldrb	r2, [r7, #15]
 8003ad2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ad4:	7bfa      	ldrb	r2, [r7, #15]
 8003ad6:	7bfb      	ldrb	r3, [r7, #15]
 8003ad8:	b298      	uxth	r0, r3
 8003ada:	6879      	ldr	r1, [r7, #4]
 8003adc:	4613      	mov	r3, r2
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	4413      	add	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	3344      	adds	r3, #68	; 0x44
 8003ae8:	4602      	mov	r2, r0
 8003aea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003aec:	7bfa      	ldrb	r2, [r7, #15]
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	4613      	mov	r3, r2
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	4413      	add	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	440b      	add	r3, r1
 8003afa:	3340      	adds	r3, #64	; 0x40
 8003afc:	2200      	movs	r2, #0
 8003afe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b00:	7bfa      	ldrb	r2, [r7, #15]
 8003b02:	6879      	ldr	r1, [r7, #4]
 8003b04:	4613      	mov	r3, r2
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	4413      	add	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	3348      	adds	r3, #72	; 0x48
 8003b10:	2200      	movs	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b14:	7bfa      	ldrb	r2, [r7, #15]
 8003b16:	6879      	ldr	r1, [r7, #4]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	4413      	add	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	440b      	add	r3, r1
 8003b22:	334c      	adds	r3, #76	; 0x4c
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b28:	7bfa      	ldrb	r2, [r7, #15]
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	4413      	add	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	3354      	adds	r3, #84	; 0x54
 8003b38:	2200      	movs	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b3c:	7bfb      	ldrb	r3, [r7, #15]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	73fb      	strb	r3, [r7, #15]
 8003b42:	7bfa      	ldrb	r2, [r7, #15]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d3af      	bcc.n	8003aac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	73fb      	strb	r3, [r7, #15]
 8003b50:	e044      	b.n	8003bdc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b52:	7bfa      	ldrb	r2, [r7, #15]
 8003b54:	6879      	ldr	r1, [r7, #4]
 8003b56:	4613      	mov	r3, r2
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	4413      	add	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	440b      	add	r3, r1
 8003b60:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003b64:	2200      	movs	r2, #0
 8003b66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b68:	7bfa      	ldrb	r2, [r7, #15]
 8003b6a:	6879      	ldr	r1, [r7, #4]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	4413      	add	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	440b      	add	r3, r1
 8003b76:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003b7a:	7bfa      	ldrb	r2, [r7, #15]
 8003b7c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b7e:	7bfa      	ldrb	r2, [r7, #15]
 8003b80:	6879      	ldr	r1, [r7, #4]
 8003b82:	4613      	mov	r3, r2
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	4413      	add	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003b90:	2200      	movs	r2, #0
 8003b92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b94:	7bfa      	ldrb	r2, [r7, #15]
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	4413      	add	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003baa:	7bfa      	ldrb	r2, [r7, #15]
 8003bac:	6879      	ldr	r1, [r7, #4]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	4413      	add	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	440b      	add	r3, r1
 8003bb8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003bc0:	7bfa      	ldrb	r2, [r7, #15]
 8003bc2:	6879      	ldr	r1, [r7, #4]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	4413      	add	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bd6:	7bfb      	ldrb	r3, [r7, #15]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	73fb      	strb	r3, [r7, #15]
 8003bdc:	7bfa      	ldrb	r2, [r7, #15]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d3b5      	bcc.n	8003b52 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	603b      	str	r3, [r7, #0]
 8003bec:	687e      	ldr	r6, [r7, #4]
 8003bee:	466d      	mov	r5, sp
 8003bf0:	f106 0410 	add.w	r4, r6, #16
 8003bf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bfc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c00:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c04:	1d33      	adds	r3, r6, #4
 8003c06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c08:	6838      	ldr	r0, [r7, #0]
 8003c0a:	f002 fca7 	bl	800655c <USB_DevInit>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d005      	beq.n	8003c20 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2202      	movs	r2, #2
 8003c18:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e00d      	b.n	8003c3c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f002 fe72 	bl	800691e <USB_DevDisconnect>

  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e267      	b.n	8004126 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d075      	beq.n	8003d4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c62:	4b88      	ldr	r3, [pc, #544]	; (8003e84 <HAL_RCC_OscConfig+0x240>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 030c 	and.w	r3, r3, #12
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d00c      	beq.n	8003c88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c6e:	4b85      	ldr	r3, [pc, #532]	; (8003e84 <HAL_RCC_OscConfig+0x240>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c76:	2b08      	cmp	r3, #8
 8003c78:	d112      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c7a:	4b82      	ldr	r3, [pc, #520]	; (8003e84 <HAL_RCC_OscConfig+0x240>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c86:	d10b      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c88:	4b7e      	ldr	r3, [pc, #504]	; (8003e84 <HAL_RCC_OscConfig+0x240>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d05b      	beq.n	8003d4c <HAL_RCC_OscConfig+0x108>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d157      	bne.n	8003d4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e242      	b.n	8004126 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ca8:	d106      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x74>
 8003caa:	4b76      	ldr	r3, [pc, #472]	; (8003e84 <HAL_RCC_OscConfig+0x240>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a75      	ldr	r2, [pc, #468]	; (8003e84 <HAL_RCC_OscConfig+0x240>)
 8003cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cb4:	6013      	str	r3, [r2, #0]
 8003cb6:	e01d      	b.n	8003cf4 <HAL_RCC_OscConfig+0xb0>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cc0:	d10c      	bne.n	8003cdc <HAL_RCC_OscConfig+0x98>
 8003cc2:	4b70      	ldr	r3, [pc, #448]	; (8003e84 <HAL_RCC_OscConfig+0x240>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a6f      	ldr	r2, [pc, #444]	; (8003e84 <HAL_RCC_OscConfig+0x240>)
 8003cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ccc:	6013      	str	r3, [r2, #0]
 8003cce:	4b6d      	ldr	r3, [pc, #436]	; (8003e84 <HAL_RCC_OscConfig+0x240>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a6c      	ldr	r2, [pc, #432]	; (8003e84 <HAL_RCC_OscConfig+0x240>)
 8003cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd8:	6013      	str	r3, [r2, #0]
 8003cda:	e00b      	b.n	8003cf4 <HAL_RCC_OscConfig+0xb0>
 8003cdc:	4b69      	ldr	r3, [pc, #420]	; (8003e84 <HAL_RCC_OscConfig+0x240>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a68      	ldr	r2, [pc, #416]	; (8003e84 <HAL_RCC_OscConfig+0x240>)
 8003ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ce6:	6013      	str	r3, [r2, #0]
 8003ce8:	4b66      	ldr	r3, [pc, #408]	; (8003e84 <HAL_RCC_OscConfig+0x240>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a65      	ldr	r2, [pc, #404]	; (8003e84 <HAL_RCC_OscConfig+0x240>)
 8003cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d013      	beq.n	8003d24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cfc:	f7fe fdec 	bl	80028d8 <HAL_GetTick>
 8003d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d02:	e008      	b.n	8003d16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d04:	f7fe fde8 	bl	80028d8 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b64      	cmp	r3, #100	; 0x64
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e207      	b.n	8004126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d16:	4b5b      	ldr	r3, [pc, #364]	; (8003e84 <HAL_RCC_OscConfig+0x240>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0f0      	beq.n	8003d04 <HAL_RCC_OscConfig+0xc0>
 8003d22:	e014      	b.n	8003d4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d24:	f7fe fdd8 	bl	80028d8 <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d2c:	f7fe fdd4 	bl	80028d8 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b64      	cmp	r3, #100	; 0x64
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e1f3      	b.n	8004126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d3e:	4b51      	ldr	r3, [pc, #324]	; (8003e84 <HAL_RCC_OscConfig+0x240>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1f0      	bne.n	8003d2c <HAL_RCC_OscConfig+0xe8>
 8003d4a:	e000      	b.n	8003d4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d063      	beq.n	8003e22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d5a:	4b4a      	ldr	r3, [pc, #296]	; (8003e84 <HAL_RCC_OscConfig+0x240>)
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f003 030c 	and.w	r3, r3, #12
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00b      	beq.n	8003d7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d66:	4b47      	ldr	r3, [pc, #284]	; (8003e84 <HAL_RCC_OscConfig+0x240>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d6e:	2b08      	cmp	r3, #8
 8003d70:	d11c      	bne.n	8003dac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d72:	4b44      	ldr	r3, [pc, #272]	; (8003e84 <HAL_RCC_OscConfig+0x240>)
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d116      	bne.n	8003dac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d7e:	4b41      	ldr	r3, [pc, #260]	; (8003e84 <HAL_RCC_OscConfig+0x240>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d005      	beq.n	8003d96 <HAL_RCC_OscConfig+0x152>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d001      	beq.n	8003d96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e1c7      	b.n	8004126 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d96:	4b3b      	ldr	r3, [pc, #236]	; (8003e84 <HAL_RCC_OscConfig+0x240>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	4937      	ldr	r1, [pc, #220]	; (8003e84 <HAL_RCC_OscConfig+0x240>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003daa:	e03a      	b.n	8003e22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d020      	beq.n	8003df6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003db4:	4b34      	ldr	r3, [pc, #208]	; (8003e88 <HAL_RCC_OscConfig+0x244>)
 8003db6:	2201      	movs	r2, #1
 8003db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dba:	f7fe fd8d 	bl	80028d8 <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dc2:	f7fe fd89 	bl	80028d8 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e1a8      	b.n	8004126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd4:	4b2b      	ldr	r3, [pc, #172]	; (8003e84 <HAL_RCC_OscConfig+0x240>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d0f0      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de0:	4b28      	ldr	r3, [pc, #160]	; (8003e84 <HAL_RCC_OscConfig+0x240>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	4925      	ldr	r1, [pc, #148]	; (8003e84 <HAL_RCC_OscConfig+0x240>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	600b      	str	r3, [r1, #0]
 8003df4:	e015      	b.n	8003e22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003df6:	4b24      	ldr	r3, [pc, #144]	; (8003e88 <HAL_RCC_OscConfig+0x244>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfc:	f7fe fd6c 	bl	80028d8 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e04:	f7fe fd68 	bl	80028d8 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e187      	b.n	8004126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e16:	4b1b      	ldr	r3, [pc, #108]	; (8003e84 <HAL_RCC_OscConfig+0x240>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1f0      	bne.n	8003e04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0308 	and.w	r3, r3, #8
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d036      	beq.n	8003e9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d016      	beq.n	8003e64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e36:	4b15      	ldr	r3, [pc, #84]	; (8003e8c <HAL_RCC_OscConfig+0x248>)
 8003e38:	2201      	movs	r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e3c:	f7fe fd4c 	bl	80028d8 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e44:	f7fe fd48 	bl	80028d8 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e167      	b.n	8004126 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e56:	4b0b      	ldr	r3, [pc, #44]	; (8003e84 <HAL_RCC_OscConfig+0x240>)
 8003e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0f0      	beq.n	8003e44 <HAL_RCC_OscConfig+0x200>
 8003e62:	e01b      	b.n	8003e9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e64:	4b09      	ldr	r3, [pc, #36]	; (8003e8c <HAL_RCC_OscConfig+0x248>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e6a:	f7fe fd35 	bl	80028d8 <HAL_GetTick>
 8003e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e70:	e00e      	b.n	8003e90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e72:	f7fe fd31 	bl	80028d8 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d907      	bls.n	8003e90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e150      	b.n	8004126 <HAL_RCC_OscConfig+0x4e2>
 8003e84:	40023800 	.word	0x40023800
 8003e88:	42470000 	.word	0x42470000
 8003e8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e90:	4b88      	ldr	r3, [pc, #544]	; (80040b4 <HAL_RCC_OscConfig+0x470>)
 8003e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1ea      	bne.n	8003e72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 8097 	beq.w	8003fd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eae:	4b81      	ldr	r3, [pc, #516]	; (80040b4 <HAL_RCC_OscConfig+0x470>)
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10f      	bne.n	8003eda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eba:	2300      	movs	r3, #0
 8003ebc:	60bb      	str	r3, [r7, #8]
 8003ebe:	4b7d      	ldr	r3, [pc, #500]	; (80040b4 <HAL_RCC_OscConfig+0x470>)
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	4a7c      	ldr	r2, [pc, #496]	; (80040b4 <HAL_RCC_OscConfig+0x470>)
 8003ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8003eca:	4b7a      	ldr	r3, [pc, #488]	; (80040b4 <HAL_RCC_OscConfig+0x470>)
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed2:	60bb      	str	r3, [r7, #8]
 8003ed4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eda:	4b77      	ldr	r3, [pc, #476]	; (80040b8 <HAL_RCC_OscConfig+0x474>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d118      	bne.n	8003f18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ee6:	4b74      	ldr	r3, [pc, #464]	; (80040b8 <HAL_RCC_OscConfig+0x474>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a73      	ldr	r2, [pc, #460]	; (80040b8 <HAL_RCC_OscConfig+0x474>)
 8003eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ef2:	f7fe fcf1 	bl	80028d8 <HAL_GetTick>
 8003ef6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef8:	e008      	b.n	8003f0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003efa:	f7fe fced 	bl	80028d8 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e10c      	b.n	8004126 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f0c:	4b6a      	ldr	r3, [pc, #424]	; (80040b8 <HAL_RCC_OscConfig+0x474>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d0f0      	beq.n	8003efa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d106      	bne.n	8003f2e <HAL_RCC_OscConfig+0x2ea>
 8003f20:	4b64      	ldr	r3, [pc, #400]	; (80040b4 <HAL_RCC_OscConfig+0x470>)
 8003f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f24:	4a63      	ldr	r2, [pc, #396]	; (80040b4 <HAL_RCC_OscConfig+0x470>)
 8003f26:	f043 0301 	orr.w	r3, r3, #1
 8003f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f2c:	e01c      	b.n	8003f68 <HAL_RCC_OscConfig+0x324>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	2b05      	cmp	r3, #5
 8003f34:	d10c      	bne.n	8003f50 <HAL_RCC_OscConfig+0x30c>
 8003f36:	4b5f      	ldr	r3, [pc, #380]	; (80040b4 <HAL_RCC_OscConfig+0x470>)
 8003f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3a:	4a5e      	ldr	r2, [pc, #376]	; (80040b4 <HAL_RCC_OscConfig+0x470>)
 8003f3c:	f043 0304 	orr.w	r3, r3, #4
 8003f40:	6713      	str	r3, [r2, #112]	; 0x70
 8003f42:	4b5c      	ldr	r3, [pc, #368]	; (80040b4 <HAL_RCC_OscConfig+0x470>)
 8003f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f46:	4a5b      	ldr	r2, [pc, #364]	; (80040b4 <HAL_RCC_OscConfig+0x470>)
 8003f48:	f043 0301 	orr.w	r3, r3, #1
 8003f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f4e:	e00b      	b.n	8003f68 <HAL_RCC_OscConfig+0x324>
 8003f50:	4b58      	ldr	r3, [pc, #352]	; (80040b4 <HAL_RCC_OscConfig+0x470>)
 8003f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f54:	4a57      	ldr	r2, [pc, #348]	; (80040b4 <HAL_RCC_OscConfig+0x470>)
 8003f56:	f023 0301 	bic.w	r3, r3, #1
 8003f5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f5c:	4b55      	ldr	r3, [pc, #340]	; (80040b4 <HAL_RCC_OscConfig+0x470>)
 8003f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f60:	4a54      	ldr	r2, [pc, #336]	; (80040b4 <HAL_RCC_OscConfig+0x470>)
 8003f62:	f023 0304 	bic.w	r3, r3, #4
 8003f66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d015      	beq.n	8003f9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f70:	f7fe fcb2 	bl	80028d8 <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f76:	e00a      	b.n	8003f8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f78:	f7fe fcae 	bl	80028d8 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e0cb      	b.n	8004126 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f8e:	4b49      	ldr	r3, [pc, #292]	; (80040b4 <HAL_RCC_OscConfig+0x470>)
 8003f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d0ee      	beq.n	8003f78 <HAL_RCC_OscConfig+0x334>
 8003f9a:	e014      	b.n	8003fc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f9c:	f7fe fc9c 	bl	80028d8 <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fa2:	e00a      	b.n	8003fba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fa4:	f7fe fc98 	bl	80028d8 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e0b5      	b.n	8004126 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fba:	4b3e      	ldr	r3, [pc, #248]	; (80040b4 <HAL_RCC_OscConfig+0x470>)
 8003fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1ee      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fc6:	7dfb      	ldrb	r3, [r7, #23]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d105      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fcc:	4b39      	ldr	r3, [pc, #228]	; (80040b4 <HAL_RCC_OscConfig+0x470>)
 8003fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd0:	4a38      	ldr	r2, [pc, #224]	; (80040b4 <HAL_RCC_OscConfig+0x470>)
 8003fd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fd6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 80a1 	beq.w	8004124 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fe2:	4b34      	ldr	r3, [pc, #208]	; (80040b4 <HAL_RCC_OscConfig+0x470>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 030c 	and.w	r3, r3, #12
 8003fea:	2b08      	cmp	r3, #8
 8003fec:	d05c      	beq.n	80040a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d141      	bne.n	800407a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ff6:	4b31      	ldr	r3, [pc, #196]	; (80040bc <HAL_RCC_OscConfig+0x478>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ffc:	f7fe fc6c 	bl	80028d8 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004004:	f7fe fc68 	bl	80028d8 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e087      	b.n	8004126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004016:	4b27      	ldr	r3, [pc, #156]	; (80040b4 <HAL_RCC_OscConfig+0x470>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1f0      	bne.n	8004004 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	69da      	ldr	r2, [r3, #28]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	431a      	orrs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	019b      	lsls	r3, r3, #6
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004038:	085b      	lsrs	r3, r3, #1
 800403a:	3b01      	subs	r3, #1
 800403c:	041b      	lsls	r3, r3, #16
 800403e:	431a      	orrs	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004044:	061b      	lsls	r3, r3, #24
 8004046:	491b      	ldr	r1, [pc, #108]	; (80040b4 <HAL_RCC_OscConfig+0x470>)
 8004048:	4313      	orrs	r3, r2
 800404a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800404c:	4b1b      	ldr	r3, [pc, #108]	; (80040bc <HAL_RCC_OscConfig+0x478>)
 800404e:	2201      	movs	r2, #1
 8004050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004052:	f7fe fc41 	bl	80028d8 <HAL_GetTick>
 8004056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004058:	e008      	b.n	800406c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800405a:	f7fe fc3d 	bl	80028d8 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d901      	bls.n	800406c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e05c      	b.n	8004126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800406c:	4b11      	ldr	r3, [pc, #68]	; (80040b4 <HAL_RCC_OscConfig+0x470>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d0f0      	beq.n	800405a <HAL_RCC_OscConfig+0x416>
 8004078:	e054      	b.n	8004124 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800407a:	4b10      	ldr	r3, [pc, #64]	; (80040bc <HAL_RCC_OscConfig+0x478>)
 800407c:	2200      	movs	r2, #0
 800407e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004080:	f7fe fc2a 	bl	80028d8 <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004086:	e008      	b.n	800409a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004088:	f7fe fc26 	bl	80028d8 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e045      	b.n	8004126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800409a:	4b06      	ldr	r3, [pc, #24]	; (80040b4 <HAL_RCC_OscConfig+0x470>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1f0      	bne.n	8004088 <HAL_RCC_OscConfig+0x444>
 80040a6:	e03d      	b.n	8004124 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d107      	bne.n	80040c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e038      	b.n	8004126 <HAL_RCC_OscConfig+0x4e2>
 80040b4:	40023800 	.word	0x40023800
 80040b8:	40007000 	.word	0x40007000
 80040bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040c0:	4b1b      	ldr	r3, [pc, #108]	; (8004130 <HAL_RCC_OscConfig+0x4ec>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d028      	beq.n	8004120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040d8:	429a      	cmp	r2, r3
 80040da:	d121      	bne.n	8004120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d11a      	bne.n	8004120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040f0:	4013      	ands	r3, r2
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d111      	bne.n	8004120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004106:	085b      	lsrs	r3, r3, #1
 8004108:	3b01      	subs	r3, #1
 800410a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800410c:	429a      	cmp	r2, r3
 800410e:	d107      	bne.n	8004120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800411c:	429a      	cmp	r2, r3
 800411e:	d001      	beq.n	8004124 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e000      	b.n	8004126 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3718      	adds	r7, #24
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	40023800 	.word	0x40023800

08004134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e0cc      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004148:	4b68      	ldr	r3, [pc, #416]	; (80042ec <HAL_RCC_ClockConfig+0x1b8>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 030f 	and.w	r3, r3, #15
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d90c      	bls.n	8004170 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004156:	4b65      	ldr	r3, [pc, #404]	; (80042ec <HAL_RCC_ClockConfig+0x1b8>)
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	b2d2      	uxtb	r2, r2
 800415c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800415e:	4b63      	ldr	r3, [pc, #396]	; (80042ec <HAL_RCC_ClockConfig+0x1b8>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	429a      	cmp	r2, r3
 800416a:	d001      	beq.n	8004170 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e0b8      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d020      	beq.n	80041be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b00      	cmp	r3, #0
 8004186:	d005      	beq.n	8004194 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004188:	4b59      	ldr	r3, [pc, #356]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	4a58      	ldr	r2, [pc, #352]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 800418e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004192:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0308 	and.w	r3, r3, #8
 800419c:	2b00      	cmp	r3, #0
 800419e:	d005      	beq.n	80041ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041a0:	4b53      	ldr	r3, [pc, #332]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	4a52      	ldr	r2, [pc, #328]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 80041a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041ac:	4b50      	ldr	r3, [pc, #320]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	494d      	ldr	r1, [pc, #308]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d044      	beq.n	8004254 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d107      	bne.n	80041e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d2:	4b47      	ldr	r3, [pc, #284]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d119      	bne.n	8004212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e07f      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d003      	beq.n	80041f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ee:	2b03      	cmp	r3, #3
 80041f0:	d107      	bne.n	8004202 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041f2:	4b3f      	ldr	r3, [pc, #252]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d109      	bne.n	8004212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e06f      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004202:	4b3b      	ldr	r3, [pc, #236]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e067      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004212:	4b37      	ldr	r3, [pc, #220]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f023 0203 	bic.w	r2, r3, #3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	4934      	ldr	r1, [pc, #208]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004220:	4313      	orrs	r3, r2
 8004222:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004224:	f7fe fb58 	bl	80028d8 <HAL_GetTick>
 8004228:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800422a:	e00a      	b.n	8004242 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800422c:	f7fe fb54 	bl	80028d8 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	f241 3288 	movw	r2, #5000	; 0x1388
 800423a:	4293      	cmp	r3, r2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e04f      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004242:	4b2b      	ldr	r3, [pc, #172]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f003 020c 	and.w	r2, r3, #12
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	429a      	cmp	r2, r3
 8004252:	d1eb      	bne.n	800422c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004254:	4b25      	ldr	r3, [pc, #148]	; (80042ec <HAL_RCC_ClockConfig+0x1b8>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 030f 	and.w	r3, r3, #15
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d20c      	bcs.n	800427c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004262:	4b22      	ldr	r3, [pc, #136]	; (80042ec <HAL_RCC_ClockConfig+0x1b8>)
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	b2d2      	uxtb	r2, r2
 8004268:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800426a:	4b20      	ldr	r3, [pc, #128]	; (80042ec <HAL_RCC_ClockConfig+0x1b8>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 030f 	and.w	r3, r3, #15
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	429a      	cmp	r2, r3
 8004276:	d001      	beq.n	800427c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e032      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b00      	cmp	r3, #0
 8004286:	d008      	beq.n	800429a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004288:	4b19      	ldr	r3, [pc, #100]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	4916      	ldr	r1, [pc, #88]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004296:	4313      	orrs	r3, r2
 8004298:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0308 	and.w	r3, r3, #8
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d009      	beq.n	80042ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042a6:	4b12      	ldr	r3, [pc, #72]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	490e      	ldr	r1, [pc, #56]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042ba:	f000 f821 	bl	8004300 <HAL_RCC_GetSysClockFreq>
 80042be:	4602      	mov	r2, r0
 80042c0:	4b0b      	ldr	r3, [pc, #44]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	091b      	lsrs	r3, r3, #4
 80042c6:	f003 030f 	and.w	r3, r3, #15
 80042ca:	490a      	ldr	r1, [pc, #40]	; (80042f4 <HAL_RCC_ClockConfig+0x1c0>)
 80042cc:	5ccb      	ldrb	r3, [r1, r3]
 80042ce:	fa22 f303 	lsr.w	r3, r2, r3
 80042d2:	4a09      	ldr	r2, [pc, #36]	; (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 80042d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042d6:	4b09      	ldr	r3, [pc, #36]	; (80042fc <HAL_RCC_ClockConfig+0x1c8>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4618      	mov	r0, r3
 80042dc:	f7fe fab8 	bl	8002850 <HAL_InitTick>

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	40023c00 	.word	0x40023c00
 80042f0:	40023800 	.word	0x40023800
 80042f4:	08007cc8 	.word	0x08007cc8
 80042f8:	20000004 	.word	0x20000004
 80042fc:	20000008 	.word	0x20000008

08004300 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004304:	b094      	sub	sp, #80	; 0x50
 8004306:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	647b      	str	r3, [r7, #68]	; 0x44
 800430c:	2300      	movs	r3, #0
 800430e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004310:	2300      	movs	r3, #0
 8004312:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004314:	2300      	movs	r3, #0
 8004316:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004318:	4b79      	ldr	r3, [pc, #484]	; (8004500 <HAL_RCC_GetSysClockFreq+0x200>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f003 030c 	and.w	r3, r3, #12
 8004320:	2b08      	cmp	r3, #8
 8004322:	d00d      	beq.n	8004340 <HAL_RCC_GetSysClockFreq+0x40>
 8004324:	2b08      	cmp	r3, #8
 8004326:	f200 80e1 	bhi.w	80044ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800432a:	2b00      	cmp	r3, #0
 800432c:	d002      	beq.n	8004334 <HAL_RCC_GetSysClockFreq+0x34>
 800432e:	2b04      	cmp	r3, #4
 8004330:	d003      	beq.n	800433a <HAL_RCC_GetSysClockFreq+0x3a>
 8004332:	e0db      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004334:	4b73      	ldr	r3, [pc, #460]	; (8004504 <HAL_RCC_GetSysClockFreq+0x204>)
 8004336:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004338:	e0db      	b.n	80044f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800433a:	4b73      	ldr	r3, [pc, #460]	; (8004508 <HAL_RCC_GetSysClockFreq+0x208>)
 800433c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800433e:	e0d8      	b.n	80044f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004340:	4b6f      	ldr	r3, [pc, #444]	; (8004500 <HAL_RCC_GetSysClockFreq+0x200>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004348:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800434a:	4b6d      	ldr	r3, [pc, #436]	; (8004500 <HAL_RCC_GetSysClockFreq+0x200>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d063      	beq.n	800441e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004356:	4b6a      	ldr	r3, [pc, #424]	; (8004500 <HAL_RCC_GetSysClockFreq+0x200>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	099b      	lsrs	r3, r3, #6
 800435c:	2200      	movs	r2, #0
 800435e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004360:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004368:	633b      	str	r3, [r7, #48]	; 0x30
 800436a:	2300      	movs	r3, #0
 800436c:	637b      	str	r3, [r7, #52]	; 0x34
 800436e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004372:	4622      	mov	r2, r4
 8004374:	462b      	mov	r3, r5
 8004376:	f04f 0000 	mov.w	r0, #0
 800437a:	f04f 0100 	mov.w	r1, #0
 800437e:	0159      	lsls	r1, r3, #5
 8004380:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004384:	0150      	lsls	r0, r2, #5
 8004386:	4602      	mov	r2, r0
 8004388:	460b      	mov	r3, r1
 800438a:	4621      	mov	r1, r4
 800438c:	1a51      	subs	r1, r2, r1
 800438e:	6139      	str	r1, [r7, #16]
 8004390:	4629      	mov	r1, r5
 8004392:	eb63 0301 	sbc.w	r3, r3, r1
 8004396:	617b      	str	r3, [r7, #20]
 8004398:	f04f 0200 	mov.w	r2, #0
 800439c:	f04f 0300 	mov.w	r3, #0
 80043a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043a4:	4659      	mov	r1, fp
 80043a6:	018b      	lsls	r3, r1, #6
 80043a8:	4651      	mov	r1, sl
 80043aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043ae:	4651      	mov	r1, sl
 80043b0:	018a      	lsls	r2, r1, #6
 80043b2:	4651      	mov	r1, sl
 80043b4:	ebb2 0801 	subs.w	r8, r2, r1
 80043b8:	4659      	mov	r1, fp
 80043ba:	eb63 0901 	sbc.w	r9, r3, r1
 80043be:	f04f 0200 	mov.w	r2, #0
 80043c2:	f04f 0300 	mov.w	r3, #0
 80043c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043d2:	4690      	mov	r8, r2
 80043d4:	4699      	mov	r9, r3
 80043d6:	4623      	mov	r3, r4
 80043d8:	eb18 0303 	adds.w	r3, r8, r3
 80043dc:	60bb      	str	r3, [r7, #8]
 80043de:	462b      	mov	r3, r5
 80043e0:	eb49 0303 	adc.w	r3, r9, r3
 80043e4:	60fb      	str	r3, [r7, #12]
 80043e6:	f04f 0200 	mov.w	r2, #0
 80043ea:	f04f 0300 	mov.w	r3, #0
 80043ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80043f2:	4629      	mov	r1, r5
 80043f4:	024b      	lsls	r3, r1, #9
 80043f6:	4621      	mov	r1, r4
 80043f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043fc:	4621      	mov	r1, r4
 80043fe:	024a      	lsls	r2, r1, #9
 8004400:	4610      	mov	r0, r2
 8004402:	4619      	mov	r1, r3
 8004404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004406:	2200      	movs	r2, #0
 8004408:	62bb      	str	r3, [r7, #40]	; 0x28
 800440a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800440c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004410:	f7fc fb34 	bl	8000a7c <__aeabi_uldivmod>
 8004414:	4602      	mov	r2, r0
 8004416:	460b      	mov	r3, r1
 8004418:	4613      	mov	r3, r2
 800441a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800441c:	e058      	b.n	80044d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800441e:	4b38      	ldr	r3, [pc, #224]	; (8004500 <HAL_RCC_GetSysClockFreq+0x200>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	099b      	lsrs	r3, r3, #6
 8004424:	2200      	movs	r2, #0
 8004426:	4618      	mov	r0, r3
 8004428:	4611      	mov	r1, r2
 800442a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800442e:	623b      	str	r3, [r7, #32]
 8004430:	2300      	movs	r3, #0
 8004432:	627b      	str	r3, [r7, #36]	; 0x24
 8004434:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004438:	4642      	mov	r2, r8
 800443a:	464b      	mov	r3, r9
 800443c:	f04f 0000 	mov.w	r0, #0
 8004440:	f04f 0100 	mov.w	r1, #0
 8004444:	0159      	lsls	r1, r3, #5
 8004446:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800444a:	0150      	lsls	r0, r2, #5
 800444c:	4602      	mov	r2, r0
 800444e:	460b      	mov	r3, r1
 8004450:	4641      	mov	r1, r8
 8004452:	ebb2 0a01 	subs.w	sl, r2, r1
 8004456:	4649      	mov	r1, r9
 8004458:	eb63 0b01 	sbc.w	fp, r3, r1
 800445c:	f04f 0200 	mov.w	r2, #0
 8004460:	f04f 0300 	mov.w	r3, #0
 8004464:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004468:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800446c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004470:	ebb2 040a 	subs.w	r4, r2, sl
 8004474:	eb63 050b 	sbc.w	r5, r3, fp
 8004478:	f04f 0200 	mov.w	r2, #0
 800447c:	f04f 0300 	mov.w	r3, #0
 8004480:	00eb      	lsls	r3, r5, #3
 8004482:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004486:	00e2      	lsls	r2, r4, #3
 8004488:	4614      	mov	r4, r2
 800448a:	461d      	mov	r5, r3
 800448c:	4643      	mov	r3, r8
 800448e:	18e3      	adds	r3, r4, r3
 8004490:	603b      	str	r3, [r7, #0]
 8004492:	464b      	mov	r3, r9
 8004494:	eb45 0303 	adc.w	r3, r5, r3
 8004498:	607b      	str	r3, [r7, #4]
 800449a:	f04f 0200 	mov.w	r2, #0
 800449e:	f04f 0300 	mov.w	r3, #0
 80044a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044a6:	4629      	mov	r1, r5
 80044a8:	028b      	lsls	r3, r1, #10
 80044aa:	4621      	mov	r1, r4
 80044ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044b0:	4621      	mov	r1, r4
 80044b2:	028a      	lsls	r2, r1, #10
 80044b4:	4610      	mov	r0, r2
 80044b6:	4619      	mov	r1, r3
 80044b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ba:	2200      	movs	r2, #0
 80044bc:	61bb      	str	r3, [r7, #24]
 80044be:	61fa      	str	r2, [r7, #28]
 80044c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044c4:	f7fc fada 	bl	8000a7c <__aeabi_uldivmod>
 80044c8:	4602      	mov	r2, r0
 80044ca:	460b      	mov	r3, r1
 80044cc:	4613      	mov	r3, r2
 80044ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044d0:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <HAL_RCC_GetSysClockFreq+0x200>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	0c1b      	lsrs	r3, r3, #16
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	3301      	adds	r3, #1
 80044dc:	005b      	lsls	r3, r3, #1
 80044de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80044e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044ea:	e002      	b.n	80044f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044ec:	4b05      	ldr	r3, [pc, #20]	; (8004504 <HAL_RCC_GetSysClockFreq+0x204>)
 80044ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3750      	adds	r7, #80	; 0x50
 80044f8:	46bd      	mov	sp, r7
 80044fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044fe:	bf00      	nop
 8004500:	40023800 	.word	0x40023800
 8004504:	00f42400 	.word	0x00f42400
 8004508:	007a1200 	.word	0x007a1200

0800450c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004510:	4b03      	ldr	r3, [pc, #12]	; (8004520 <HAL_RCC_GetHCLKFreq+0x14>)
 8004512:	681b      	ldr	r3, [r3, #0]
}
 8004514:	4618      	mov	r0, r3
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	20000004 	.word	0x20000004

08004524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004528:	f7ff fff0 	bl	800450c <HAL_RCC_GetHCLKFreq>
 800452c:	4602      	mov	r2, r0
 800452e:	4b05      	ldr	r3, [pc, #20]	; (8004544 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	0a9b      	lsrs	r3, r3, #10
 8004534:	f003 0307 	and.w	r3, r3, #7
 8004538:	4903      	ldr	r1, [pc, #12]	; (8004548 <HAL_RCC_GetPCLK1Freq+0x24>)
 800453a:	5ccb      	ldrb	r3, [r1, r3]
 800453c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004540:	4618      	mov	r0, r3
 8004542:	bd80      	pop	{r7, pc}
 8004544:	40023800 	.word	0x40023800
 8004548:	08007cd8 	.word	0x08007cd8

0800454c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004550:	f7ff ffdc 	bl	800450c <HAL_RCC_GetHCLKFreq>
 8004554:	4602      	mov	r2, r0
 8004556:	4b05      	ldr	r3, [pc, #20]	; (800456c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	0b5b      	lsrs	r3, r3, #13
 800455c:	f003 0307 	and.w	r3, r3, #7
 8004560:	4903      	ldr	r1, [pc, #12]	; (8004570 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004562:	5ccb      	ldrb	r3, [r1, r3]
 8004564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004568:	4618      	mov	r0, r3
 800456a:	bd80      	pop	{r7, pc}
 800456c:	40023800 	.word	0x40023800
 8004570:	08007cd8 	.word	0x08007cd8

08004574 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e041      	b.n	800460a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d106      	bne.n	80045a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7fd fb92 	bl	8001cc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2202      	movs	r2, #2
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3304      	adds	r3, #4
 80045b0:	4619      	mov	r1, r3
 80045b2:	4610      	mov	r0, r2
 80045b4:	f000 fc1c 	bl	8004df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
	...

08004614 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004622:	b2db      	uxtb	r3, r3
 8004624:	2b01      	cmp	r3, #1
 8004626:	d001      	beq.n	800462c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e04e      	b.n	80046ca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2202      	movs	r2, #2
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68da      	ldr	r2, [r3, #12]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f042 0201 	orr.w	r2, r2, #1
 8004642:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a23      	ldr	r2, [pc, #140]	; (80046d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d022      	beq.n	8004694 <HAL_TIM_Base_Start_IT+0x80>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004656:	d01d      	beq.n	8004694 <HAL_TIM_Base_Start_IT+0x80>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a1f      	ldr	r2, [pc, #124]	; (80046dc <HAL_TIM_Base_Start_IT+0xc8>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d018      	beq.n	8004694 <HAL_TIM_Base_Start_IT+0x80>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a1e      	ldr	r2, [pc, #120]	; (80046e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d013      	beq.n	8004694 <HAL_TIM_Base_Start_IT+0x80>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a1c      	ldr	r2, [pc, #112]	; (80046e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d00e      	beq.n	8004694 <HAL_TIM_Base_Start_IT+0x80>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a1b      	ldr	r2, [pc, #108]	; (80046e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d009      	beq.n	8004694 <HAL_TIM_Base_Start_IT+0x80>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a19      	ldr	r2, [pc, #100]	; (80046ec <HAL_TIM_Base_Start_IT+0xd8>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d004      	beq.n	8004694 <HAL_TIM_Base_Start_IT+0x80>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a18      	ldr	r2, [pc, #96]	; (80046f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d111      	bne.n	80046b8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f003 0307 	and.w	r3, r3, #7
 800469e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2b06      	cmp	r3, #6
 80046a4:	d010      	beq.n	80046c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f042 0201 	orr.w	r2, r2, #1
 80046b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b6:	e007      	b.n	80046c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0201 	orr.w	r2, r2, #1
 80046c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3714      	adds	r7, #20
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	40010000 	.word	0x40010000
 80046dc:	40000400 	.word	0x40000400
 80046e0:	40000800 	.word	0x40000800
 80046e4:	40000c00 	.word	0x40000c00
 80046e8:	40010400 	.word	0x40010400
 80046ec:	40014000 	.word	0x40014000
 80046f0:	40001800 	.word	0x40001800

080046f4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e041      	b.n	800478a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d106      	bne.n	8004720 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7fd fa82 	bl	8001c24 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	3304      	adds	r3, #4
 8004730:	4619      	mov	r1, r3
 8004732:	4610      	mov	r0, r2
 8004734:	f000 fb5c 	bl	8004df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
	...

08004794 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800479e:	2300      	movs	r3, #0
 80047a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d104      	bne.n	80047b2 <HAL_TIM_IC_Start_IT+0x1e>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	e013      	b.n	80047da <HAL_TIM_IC_Start_IT+0x46>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b04      	cmp	r3, #4
 80047b6:	d104      	bne.n	80047c2 <HAL_TIM_IC_Start_IT+0x2e>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	e00b      	b.n	80047da <HAL_TIM_IC_Start_IT+0x46>
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	d104      	bne.n	80047d2 <HAL_TIM_IC_Start_IT+0x3e>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	e003      	b.n	80047da <HAL_TIM_IC_Start_IT+0x46>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d104      	bne.n	80047ec <HAL_TIM_IC_Start_IT+0x58>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	e013      	b.n	8004814 <HAL_TIM_IC_Start_IT+0x80>
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	2b04      	cmp	r3, #4
 80047f0:	d104      	bne.n	80047fc <HAL_TIM_IC_Start_IT+0x68>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	e00b      	b.n	8004814 <HAL_TIM_IC_Start_IT+0x80>
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	2b08      	cmp	r3, #8
 8004800:	d104      	bne.n	800480c <HAL_TIM_IC_Start_IT+0x78>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004808:	b2db      	uxtb	r3, r3
 800480a:	e003      	b.n	8004814 <HAL_TIM_IC_Start_IT+0x80>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004812:	b2db      	uxtb	r3, r3
 8004814:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004816:	7bbb      	ldrb	r3, [r7, #14]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d102      	bne.n	8004822 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800481c:	7b7b      	ldrb	r3, [r7, #13]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d001      	beq.n	8004826 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e0cc      	b.n	80049c0 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d104      	bne.n	8004836 <HAL_TIM_IC_Start_IT+0xa2>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2202      	movs	r2, #2
 8004830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004834:	e013      	b.n	800485e <HAL_TIM_IC_Start_IT+0xca>
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	2b04      	cmp	r3, #4
 800483a:	d104      	bne.n	8004846 <HAL_TIM_IC_Start_IT+0xb2>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2202      	movs	r2, #2
 8004840:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004844:	e00b      	b.n	800485e <HAL_TIM_IC_Start_IT+0xca>
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	2b08      	cmp	r3, #8
 800484a:	d104      	bne.n	8004856 <HAL_TIM_IC_Start_IT+0xc2>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2202      	movs	r2, #2
 8004850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004854:	e003      	b.n	800485e <HAL_TIM_IC_Start_IT+0xca>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2202      	movs	r2, #2
 800485a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d104      	bne.n	800486e <HAL_TIM_IC_Start_IT+0xda>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2202      	movs	r2, #2
 8004868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800486c:	e013      	b.n	8004896 <HAL_TIM_IC_Start_IT+0x102>
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b04      	cmp	r3, #4
 8004872:	d104      	bne.n	800487e <HAL_TIM_IC_Start_IT+0xea>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2202      	movs	r2, #2
 8004878:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800487c:	e00b      	b.n	8004896 <HAL_TIM_IC_Start_IT+0x102>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2b08      	cmp	r3, #8
 8004882:	d104      	bne.n	800488e <HAL_TIM_IC_Start_IT+0xfa>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2202      	movs	r2, #2
 8004888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800488c:	e003      	b.n	8004896 <HAL_TIM_IC_Start_IT+0x102>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2202      	movs	r2, #2
 8004892:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	2b0c      	cmp	r3, #12
 800489a:	d841      	bhi.n	8004920 <HAL_TIM_IC_Start_IT+0x18c>
 800489c:	a201      	add	r2, pc, #4	; (adr r2, 80048a4 <HAL_TIM_IC_Start_IT+0x110>)
 800489e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a2:	bf00      	nop
 80048a4:	080048d9 	.word	0x080048d9
 80048a8:	08004921 	.word	0x08004921
 80048ac:	08004921 	.word	0x08004921
 80048b0:	08004921 	.word	0x08004921
 80048b4:	080048eb 	.word	0x080048eb
 80048b8:	08004921 	.word	0x08004921
 80048bc:	08004921 	.word	0x08004921
 80048c0:	08004921 	.word	0x08004921
 80048c4:	080048fd 	.word	0x080048fd
 80048c8:	08004921 	.word	0x08004921
 80048cc:	08004921 	.word	0x08004921
 80048d0:	08004921 	.word	0x08004921
 80048d4:	0800490f 	.word	0x0800490f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68da      	ldr	r2, [r3, #12]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f042 0202 	orr.w	r2, r2, #2
 80048e6:	60da      	str	r2, [r3, #12]
      break;
 80048e8:	e01d      	b.n	8004926 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68da      	ldr	r2, [r3, #12]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f042 0204 	orr.w	r2, r2, #4
 80048f8:	60da      	str	r2, [r3, #12]
      break;
 80048fa:	e014      	b.n	8004926 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 0208 	orr.w	r2, r2, #8
 800490a:	60da      	str	r2, [r3, #12]
      break;
 800490c:	e00b      	b.n	8004926 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68da      	ldr	r2, [r3, #12]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f042 0210 	orr.w	r2, r2, #16
 800491c:	60da      	str	r2, [r3, #12]
      break;
 800491e:	e002      	b.n	8004926 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	73fb      	strb	r3, [r7, #15]
      break;
 8004924:	bf00      	nop
  }

  if (status == HAL_OK)
 8004926:	7bfb      	ldrb	r3, [r7, #15]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d148      	bne.n	80049be <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2201      	movs	r2, #1
 8004932:	6839      	ldr	r1, [r7, #0]
 8004934:	4618      	mov	r0, r3
 8004936:	f000 fc25 	bl	8005184 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a22      	ldr	r2, [pc, #136]	; (80049c8 <HAL_TIM_IC_Start_IT+0x234>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d022      	beq.n	800498a <HAL_TIM_IC_Start_IT+0x1f6>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800494c:	d01d      	beq.n	800498a <HAL_TIM_IC_Start_IT+0x1f6>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a1e      	ldr	r2, [pc, #120]	; (80049cc <HAL_TIM_IC_Start_IT+0x238>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d018      	beq.n	800498a <HAL_TIM_IC_Start_IT+0x1f6>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a1c      	ldr	r2, [pc, #112]	; (80049d0 <HAL_TIM_IC_Start_IT+0x23c>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d013      	beq.n	800498a <HAL_TIM_IC_Start_IT+0x1f6>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a1b      	ldr	r2, [pc, #108]	; (80049d4 <HAL_TIM_IC_Start_IT+0x240>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d00e      	beq.n	800498a <HAL_TIM_IC_Start_IT+0x1f6>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a19      	ldr	r2, [pc, #100]	; (80049d8 <HAL_TIM_IC_Start_IT+0x244>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d009      	beq.n	800498a <HAL_TIM_IC_Start_IT+0x1f6>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a18      	ldr	r2, [pc, #96]	; (80049dc <HAL_TIM_IC_Start_IT+0x248>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d004      	beq.n	800498a <HAL_TIM_IC_Start_IT+0x1f6>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a16      	ldr	r2, [pc, #88]	; (80049e0 <HAL_TIM_IC_Start_IT+0x24c>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d111      	bne.n	80049ae <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f003 0307 	and.w	r3, r3, #7
 8004994:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2b06      	cmp	r3, #6
 800499a:	d010      	beq.n	80049be <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f042 0201 	orr.w	r2, r2, #1
 80049aa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ac:	e007      	b.n	80049be <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f042 0201 	orr.w	r2, r2, #1
 80049bc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80049be:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	40010000 	.word	0x40010000
 80049cc:	40000400 	.word	0x40000400
 80049d0:	40000800 	.word	0x40000800
 80049d4:	40000c00 	.word	0x40000c00
 80049d8:	40010400 	.word	0x40010400
 80049dc:	40014000 	.word	0x40014000
 80049e0:	40001800 	.word	0x40001800

080049e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d122      	bne.n	8004a40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d11b      	bne.n	8004a40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f06f 0202 	mvn.w	r2, #2
 8004a10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	f003 0303 	and.w	r3, r3, #3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7fd fe28 	bl	800267c <HAL_TIM_IC_CaptureCallback>
 8004a2c:	e005      	b.n	8004a3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f9c0 	bl	8004db4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 f9c7 	bl	8004dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	f003 0304 	and.w	r3, r3, #4
 8004a4a:	2b04      	cmp	r3, #4
 8004a4c:	d122      	bne.n	8004a94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	f003 0304 	and.w	r3, r3, #4
 8004a58:	2b04      	cmp	r3, #4
 8004a5a:	d11b      	bne.n	8004a94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f06f 0204 	mvn.w	r2, #4
 8004a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2202      	movs	r2, #2
 8004a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7fd fdfe 	bl	800267c <HAL_TIM_IC_CaptureCallback>
 8004a80:	e005      	b.n	8004a8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f996 	bl	8004db4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 f99d 	bl	8004dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	f003 0308 	and.w	r3, r3, #8
 8004a9e:	2b08      	cmp	r3, #8
 8004aa0:	d122      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	f003 0308 	and.w	r3, r3, #8
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	d11b      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f06f 0208 	mvn.w	r2, #8
 8004ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2204      	movs	r2, #4
 8004abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	69db      	ldr	r3, [r3, #28]
 8004ac6:	f003 0303 	and.w	r3, r3, #3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d003      	beq.n	8004ad6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f7fd fdd4 	bl	800267c <HAL_TIM_IC_CaptureCallback>
 8004ad4:	e005      	b.n	8004ae2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f96c 	bl	8004db4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 f973 	bl	8004dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	f003 0310 	and.w	r3, r3, #16
 8004af2:	2b10      	cmp	r3, #16
 8004af4:	d122      	bne.n	8004b3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f003 0310 	and.w	r3, r3, #16
 8004b00:	2b10      	cmp	r3, #16
 8004b02:	d11b      	bne.n	8004b3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f06f 0210 	mvn.w	r2, #16
 8004b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2208      	movs	r2, #8
 8004b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d003      	beq.n	8004b2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f7fd fdaa 	bl	800267c <HAL_TIM_IC_CaptureCallback>
 8004b28:	e005      	b.n	8004b36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f942 	bl	8004db4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 f949 	bl	8004dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d10e      	bne.n	8004b68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d107      	bne.n	8004b68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f06f 0201 	mvn.w	r2, #1
 8004b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7fc fb58 	bl	8001218 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b72:	2b80      	cmp	r3, #128	; 0x80
 8004b74:	d10e      	bne.n	8004b94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b80:	2b80      	cmp	r3, #128	; 0x80
 8004b82:	d107      	bne.n	8004b94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 fba4 	bl	80052dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9e:	2b40      	cmp	r3, #64	; 0x40
 8004ba0:	d10e      	bne.n	8004bc0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bac:	2b40      	cmp	r3, #64	; 0x40
 8004bae:	d107      	bne.n	8004bc0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f90e 	bl	8004ddc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	f003 0320 	and.w	r3, r3, #32
 8004bca:	2b20      	cmp	r3, #32
 8004bcc:	d10e      	bne.n	8004bec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f003 0320 	and.w	r3, r3, #32
 8004bd8:	2b20      	cmp	r3, #32
 8004bda:	d107      	bne.n	8004bec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f06f 0220 	mvn.w	r2, #32
 8004be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 fb6e 	bl	80052c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bec:	bf00      	nop
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c00:	2300      	movs	r3, #0
 8004c02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d101      	bne.n	8004c12 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004c0e:	2302      	movs	r3, #2
 8004c10:	e088      	b.n	8004d24 <HAL_TIM_IC_ConfigChannel+0x130>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d11b      	bne.n	8004c58 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6818      	ldr	r0, [r3, #0]
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	6819      	ldr	r1, [r3, #0]
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f000 f97e 	bl	8004f30 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	699a      	ldr	r2, [r3, #24]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 020c 	bic.w	r2, r2, #12
 8004c42:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	6999      	ldr	r1, [r3, #24]
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	689a      	ldr	r2, [r3, #8]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	619a      	str	r2, [r3, #24]
 8004c56:	e060      	b.n	8004d1a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b04      	cmp	r3, #4
 8004c5c:	d11c      	bne.n	8004c98 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6818      	ldr	r0, [r3, #0]
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	6819      	ldr	r1, [r3, #0]
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	f000 f9d3 	bl	8005018 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	699a      	ldr	r2, [r3, #24]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004c80:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6999      	ldr	r1, [r3, #24]
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	021a      	lsls	r2, r3, #8
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	619a      	str	r2, [r3, #24]
 8004c96:	e040      	b.n	8004d1a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b08      	cmp	r3, #8
 8004c9c:	d11b      	bne.n	8004cd6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6818      	ldr	r0, [r3, #0]
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	6819      	ldr	r1, [r3, #0]
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	f000 f9f0 	bl	8005092 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	69da      	ldr	r2, [r3, #28]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 020c 	bic.w	r2, r2, #12
 8004cc0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	69d9      	ldr	r1, [r3, #28]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	61da      	str	r2, [r3, #28]
 8004cd4:	e021      	b.n	8004d1a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b0c      	cmp	r3, #12
 8004cda:	d11c      	bne.n	8004d16 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6818      	ldr	r0, [r3, #0]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	6819      	ldr	r1, [r3, #0]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	685a      	ldr	r2, [r3, #4]
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	f000 fa0d 	bl	800510a <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	69da      	ldr	r2, [r3, #28]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004cfe:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	69d9      	ldr	r1, [r3, #28]
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	021a      	lsls	r2, r3, #8
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	61da      	str	r2, [r3, #28]
 8004d14:	e001      	b.n	8004d1a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3718      	adds	r7, #24
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004d36:	2300      	movs	r3, #0
 8004d38:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	2b0c      	cmp	r3, #12
 8004d3e:	d831      	bhi.n	8004da4 <HAL_TIM_ReadCapturedValue+0x78>
 8004d40:	a201      	add	r2, pc, #4	; (adr r2, 8004d48 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d46:	bf00      	nop
 8004d48:	08004d7d 	.word	0x08004d7d
 8004d4c:	08004da5 	.word	0x08004da5
 8004d50:	08004da5 	.word	0x08004da5
 8004d54:	08004da5 	.word	0x08004da5
 8004d58:	08004d87 	.word	0x08004d87
 8004d5c:	08004da5 	.word	0x08004da5
 8004d60:	08004da5 	.word	0x08004da5
 8004d64:	08004da5 	.word	0x08004da5
 8004d68:	08004d91 	.word	0x08004d91
 8004d6c:	08004da5 	.word	0x08004da5
 8004d70:	08004da5 	.word	0x08004da5
 8004d74:	08004da5 	.word	0x08004da5
 8004d78:	08004d9b 	.word	0x08004d9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d82:	60fb      	str	r3, [r7, #12]

      break;
 8004d84:	e00f      	b.n	8004da6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	60fb      	str	r3, [r7, #12]

      break;
 8004d8e:	e00a      	b.n	8004da6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d96:	60fb      	str	r3, [r7, #12]

      break;
 8004d98:	e005      	b.n	8004da6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da0:	60fb      	str	r3, [r7, #12]

      break;
 8004da2:	e000      	b.n	8004da6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004da4:	bf00      	nop
  }

  return tmpreg;
 8004da6:	68fb      	ldr	r3, [r7, #12]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3714      	adds	r7, #20
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a40      	ldr	r2, [pc, #256]	; (8004f04 <TIM_Base_SetConfig+0x114>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d013      	beq.n	8004e30 <TIM_Base_SetConfig+0x40>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e0e:	d00f      	beq.n	8004e30 <TIM_Base_SetConfig+0x40>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a3d      	ldr	r2, [pc, #244]	; (8004f08 <TIM_Base_SetConfig+0x118>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d00b      	beq.n	8004e30 <TIM_Base_SetConfig+0x40>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a3c      	ldr	r2, [pc, #240]	; (8004f0c <TIM_Base_SetConfig+0x11c>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d007      	beq.n	8004e30 <TIM_Base_SetConfig+0x40>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a3b      	ldr	r2, [pc, #236]	; (8004f10 <TIM_Base_SetConfig+0x120>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d003      	beq.n	8004e30 <TIM_Base_SetConfig+0x40>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a3a      	ldr	r2, [pc, #232]	; (8004f14 <TIM_Base_SetConfig+0x124>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d108      	bne.n	8004e42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a2f      	ldr	r2, [pc, #188]	; (8004f04 <TIM_Base_SetConfig+0x114>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d02b      	beq.n	8004ea2 <TIM_Base_SetConfig+0xb2>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e50:	d027      	beq.n	8004ea2 <TIM_Base_SetConfig+0xb2>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a2c      	ldr	r2, [pc, #176]	; (8004f08 <TIM_Base_SetConfig+0x118>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d023      	beq.n	8004ea2 <TIM_Base_SetConfig+0xb2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a2b      	ldr	r2, [pc, #172]	; (8004f0c <TIM_Base_SetConfig+0x11c>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d01f      	beq.n	8004ea2 <TIM_Base_SetConfig+0xb2>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a2a      	ldr	r2, [pc, #168]	; (8004f10 <TIM_Base_SetConfig+0x120>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d01b      	beq.n	8004ea2 <TIM_Base_SetConfig+0xb2>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a29      	ldr	r2, [pc, #164]	; (8004f14 <TIM_Base_SetConfig+0x124>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d017      	beq.n	8004ea2 <TIM_Base_SetConfig+0xb2>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a28      	ldr	r2, [pc, #160]	; (8004f18 <TIM_Base_SetConfig+0x128>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d013      	beq.n	8004ea2 <TIM_Base_SetConfig+0xb2>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a27      	ldr	r2, [pc, #156]	; (8004f1c <TIM_Base_SetConfig+0x12c>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d00f      	beq.n	8004ea2 <TIM_Base_SetConfig+0xb2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a26      	ldr	r2, [pc, #152]	; (8004f20 <TIM_Base_SetConfig+0x130>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d00b      	beq.n	8004ea2 <TIM_Base_SetConfig+0xb2>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a25      	ldr	r2, [pc, #148]	; (8004f24 <TIM_Base_SetConfig+0x134>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d007      	beq.n	8004ea2 <TIM_Base_SetConfig+0xb2>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a24      	ldr	r2, [pc, #144]	; (8004f28 <TIM_Base_SetConfig+0x138>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d003      	beq.n	8004ea2 <TIM_Base_SetConfig+0xb2>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a23      	ldr	r2, [pc, #140]	; (8004f2c <TIM_Base_SetConfig+0x13c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d108      	bne.n	8004eb4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ea8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	689a      	ldr	r2, [r3, #8]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a0a      	ldr	r2, [pc, #40]	; (8004f04 <TIM_Base_SetConfig+0x114>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d003      	beq.n	8004ee8 <TIM_Base_SetConfig+0xf8>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a0c      	ldr	r2, [pc, #48]	; (8004f14 <TIM_Base_SetConfig+0x124>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d103      	bne.n	8004ef0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	691a      	ldr	r2, [r3, #16]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	615a      	str	r2, [r3, #20]
}
 8004ef6:	bf00      	nop
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	40010000 	.word	0x40010000
 8004f08:	40000400 	.word	0x40000400
 8004f0c:	40000800 	.word	0x40000800
 8004f10:	40000c00 	.word	0x40000c00
 8004f14:	40010400 	.word	0x40010400
 8004f18:	40014000 	.word	0x40014000
 8004f1c:	40014400 	.word	0x40014400
 8004f20:	40014800 	.word	0x40014800
 8004f24:	40001800 	.word	0x40001800
 8004f28:	40001c00 	.word	0x40001c00
 8004f2c:	40002000 	.word	0x40002000

08004f30 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b087      	sub	sp, #28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
 8004f3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	f023 0201 	bic.w	r2, r3, #1
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	4a28      	ldr	r2, [pc, #160]	; (8004ffc <TIM_TI1_SetConfig+0xcc>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d01b      	beq.n	8004f96 <TIM_TI1_SetConfig+0x66>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f64:	d017      	beq.n	8004f96 <TIM_TI1_SetConfig+0x66>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	4a25      	ldr	r2, [pc, #148]	; (8005000 <TIM_TI1_SetConfig+0xd0>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d013      	beq.n	8004f96 <TIM_TI1_SetConfig+0x66>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	4a24      	ldr	r2, [pc, #144]	; (8005004 <TIM_TI1_SetConfig+0xd4>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d00f      	beq.n	8004f96 <TIM_TI1_SetConfig+0x66>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	4a23      	ldr	r2, [pc, #140]	; (8005008 <TIM_TI1_SetConfig+0xd8>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d00b      	beq.n	8004f96 <TIM_TI1_SetConfig+0x66>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	4a22      	ldr	r2, [pc, #136]	; (800500c <TIM_TI1_SetConfig+0xdc>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d007      	beq.n	8004f96 <TIM_TI1_SetConfig+0x66>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	4a21      	ldr	r2, [pc, #132]	; (8005010 <TIM_TI1_SetConfig+0xe0>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d003      	beq.n	8004f96 <TIM_TI1_SetConfig+0x66>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	4a20      	ldr	r2, [pc, #128]	; (8005014 <TIM_TI1_SetConfig+0xe4>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d101      	bne.n	8004f9a <TIM_TI1_SetConfig+0x6a>
 8004f96:	2301      	movs	r3, #1
 8004f98:	e000      	b.n	8004f9c <TIM_TI1_SetConfig+0x6c>
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d008      	beq.n	8004fb2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	f023 0303 	bic.w	r3, r3, #3
 8004fa6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	617b      	str	r3, [r7, #20]
 8004fb0:	e003      	b.n	8004fba <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f043 0301 	orr.w	r3, r3, #1
 8004fb8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	011b      	lsls	r3, r3, #4
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	f023 030a 	bic.w	r3, r3, #10
 8004fd4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	f003 030a 	and.w	r3, r3, #10
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	621a      	str	r2, [r3, #32]
}
 8004fee:	bf00      	nop
 8004ff0:	371c      	adds	r7, #28
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	40010000 	.word	0x40010000
 8005000:	40000400 	.word	0x40000400
 8005004:	40000800 	.word	0x40000800
 8005008:	40000c00 	.word	0x40000c00
 800500c:	40010400 	.word	0x40010400
 8005010:	40014000 	.word	0x40014000
 8005014:	40001800 	.word	0x40001800

08005018 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005018:	b480      	push	{r7}
 800501a:	b087      	sub	sp, #28
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
 8005024:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	f023 0210 	bic.w	r2, r3, #16
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6a1b      	ldr	r3, [r3, #32]
 800503c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005044:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	021b      	lsls	r3, r3, #8
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	4313      	orrs	r3, r2
 800504e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005056:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	031b      	lsls	r3, r3, #12
 800505c:	b29b      	uxth	r3, r3
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	4313      	orrs	r3, r2
 8005062:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800506a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	011b      	lsls	r3, r3, #4
 8005070:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	4313      	orrs	r3, r2
 8005078:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	621a      	str	r2, [r3, #32]
}
 8005086:	bf00      	nop
 8005088:	371c      	adds	r7, #28
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr

08005092 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005092:	b480      	push	{r7}
 8005094:	b087      	sub	sp, #28
 8005096:	af00      	add	r7, sp, #0
 8005098:	60f8      	str	r0, [r7, #12]
 800509a:	60b9      	str	r1, [r7, #8]
 800509c:	607a      	str	r2, [r7, #4]
 800509e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	69db      	ldr	r3, [r3, #28]
 80050b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	f023 0303 	bic.w	r3, r3, #3
 80050be:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050ce:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	011b      	lsls	r3, r3, #4
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	4313      	orrs	r3, r2
 80050da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80050e2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	021b      	lsls	r3, r3, #8
 80050e8:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	621a      	str	r2, [r3, #32]
}
 80050fe:	bf00      	nop
 8005100:	371c      	adds	r7, #28
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800510a:	b480      	push	{r7}
 800510c:	b087      	sub	sp, #28
 800510e:	af00      	add	r7, sp, #0
 8005110:	60f8      	str	r0, [r7, #12]
 8005112:	60b9      	str	r1, [r7, #8]
 8005114:	607a      	str	r2, [r7, #4]
 8005116:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	69db      	ldr	r3, [r3, #28]
 8005128:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005136:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	021b      	lsls	r3, r3, #8
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	4313      	orrs	r3, r2
 8005140:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005148:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	031b      	lsls	r3, r3, #12
 800514e:	b29b      	uxth	r3, r3
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	4313      	orrs	r3, r2
 8005154:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800515c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	031b      	lsls	r3, r3, #12
 8005162:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	4313      	orrs	r3, r2
 800516a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	621a      	str	r2, [r3, #32]
}
 8005178:	bf00      	nop
 800517a:	371c      	adds	r7, #28
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005184:	b480      	push	{r7}
 8005186:	b087      	sub	sp, #28
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	f003 031f 	and.w	r3, r3, #31
 8005196:	2201      	movs	r2, #1
 8005198:	fa02 f303 	lsl.w	r3, r2, r3
 800519c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6a1a      	ldr	r2, [r3, #32]
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	43db      	mvns	r3, r3
 80051a6:	401a      	ands	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6a1a      	ldr	r2, [r3, #32]
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	f003 031f 	and.w	r3, r3, #31
 80051b6:	6879      	ldr	r1, [r7, #4]
 80051b8:	fa01 f303 	lsl.w	r3, r1, r3
 80051bc:	431a      	orrs	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	621a      	str	r2, [r3, #32]
}
 80051c2:	bf00      	nop
 80051c4:	371c      	adds	r7, #28
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
	...

080051d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d101      	bne.n	80051e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051e4:	2302      	movs	r3, #2
 80051e6:	e05a      	b.n	800529e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2202      	movs	r2, #2
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800520e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	4313      	orrs	r3, r2
 8005218:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a21      	ldr	r2, [pc, #132]	; (80052ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d022      	beq.n	8005272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005234:	d01d      	beq.n	8005272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a1d      	ldr	r2, [pc, #116]	; (80052b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d018      	beq.n	8005272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a1b      	ldr	r2, [pc, #108]	; (80052b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d013      	beq.n	8005272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a1a      	ldr	r2, [pc, #104]	; (80052b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d00e      	beq.n	8005272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a18      	ldr	r2, [pc, #96]	; (80052bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d009      	beq.n	8005272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a17      	ldr	r2, [pc, #92]	; (80052c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d004      	beq.n	8005272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a15      	ldr	r2, [pc, #84]	; (80052c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d10c      	bne.n	800528c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005278:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	68ba      	ldr	r2, [r7, #8]
 8005280:	4313      	orrs	r3, r2
 8005282:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68ba      	ldr	r2, [r7, #8]
 800528a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	40010000 	.word	0x40010000
 80052b0:	40000400 	.word	0x40000400
 80052b4:	40000800 	.word	0x40000800
 80052b8:	40000c00 	.word	0x40000c00
 80052bc:	40010400 	.word	0x40010400
 80052c0:	40014000 	.word	0x40014000
 80052c4:	40001800 	.word	0x40001800

080052c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e03f      	b.n	8005382 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d106      	bne.n	800531c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f7fc fd1a 	bl	8001d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2224      	movs	r2, #36	; 0x24
 8005320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68da      	ldr	r2, [r3, #12]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005332:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 fddf 	bl	8005ef8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	691a      	ldr	r2, [r3, #16]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005348:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	695a      	ldr	r2, [r3, #20]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005358:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68da      	ldr	r2, [r3, #12]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005368:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2220      	movs	r2, #32
 8005374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2220      	movs	r2, #32
 800537c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3708      	adds	r7, #8
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800538a:	b580      	push	{r7, lr}
 800538c:	b08a      	sub	sp, #40	; 0x28
 800538e:	af02      	add	r7, sp, #8
 8005390:	60f8      	str	r0, [r7, #12]
 8005392:	60b9      	str	r1, [r7, #8]
 8005394:	603b      	str	r3, [r7, #0]
 8005396:	4613      	mov	r3, r2
 8005398:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800539a:	2300      	movs	r3, #0
 800539c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b20      	cmp	r3, #32
 80053a8:	d17c      	bne.n	80054a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d002      	beq.n	80053b6 <HAL_UART_Transmit+0x2c>
 80053b0:	88fb      	ldrh	r3, [r7, #6]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e075      	b.n	80054a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d101      	bne.n	80053c8 <HAL_UART_Transmit+0x3e>
 80053c4:	2302      	movs	r3, #2
 80053c6:	e06e      	b.n	80054a6 <HAL_UART_Transmit+0x11c>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2221      	movs	r2, #33	; 0x21
 80053da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053de:	f7fd fa7b 	bl	80028d8 <HAL_GetTick>
 80053e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	88fa      	ldrh	r2, [r7, #6]
 80053e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	88fa      	ldrh	r2, [r7, #6]
 80053ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053f8:	d108      	bne.n	800540c <HAL_UART_Transmit+0x82>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d104      	bne.n	800540c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005402:	2300      	movs	r3, #0
 8005404:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	61bb      	str	r3, [r7, #24]
 800540a:	e003      	b.n	8005414 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005410:	2300      	movs	r3, #0
 8005412:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800541c:	e02a      	b.n	8005474 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	2200      	movs	r2, #0
 8005426:	2180      	movs	r1, #128	; 0x80
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f000 fb1f 	bl	8005a6c <UART_WaitOnFlagUntilTimeout>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d001      	beq.n	8005438 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e036      	b.n	80054a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10b      	bne.n	8005456 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	881b      	ldrh	r3, [r3, #0]
 8005442:	461a      	mov	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800544c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	3302      	adds	r3, #2
 8005452:	61bb      	str	r3, [r7, #24]
 8005454:	e007      	b.n	8005466 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	781a      	ldrb	r2, [r3, #0]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	3301      	adds	r3, #1
 8005464:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800546a:	b29b      	uxth	r3, r3
 800546c:	3b01      	subs	r3, #1
 800546e:	b29a      	uxth	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005478:	b29b      	uxth	r3, r3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1cf      	bne.n	800541e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	9300      	str	r3, [sp, #0]
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	2200      	movs	r2, #0
 8005486:	2140      	movs	r1, #64	; 0x40
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f000 faef 	bl	8005a6c <UART_WaitOnFlagUntilTimeout>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d001      	beq.n	8005498 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e006      	b.n	80054a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2220      	movs	r2, #32
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80054a0:	2300      	movs	r3, #0
 80054a2:	e000      	b.n	80054a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80054a4:	2302      	movs	r3, #2
  }
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3720      	adds	r7, #32
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b084      	sub	sp, #16
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	60f8      	str	r0, [r7, #12]
 80054b6:	60b9      	str	r1, [r7, #8]
 80054b8:	4613      	mov	r3, r2
 80054ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	2b20      	cmp	r3, #32
 80054c6:	d11d      	bne.n	8005504 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d002      	beq.n	80054d4 <HAL_UART_Receive_IT+0x26>
 80054ce:	88fb      	ldrh	r3, [r7, #6]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e016      	b.n	8005506 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d101      	bne.n	80054e6 <HAL_UART_Receive_IT+0x38>
 80054e2:	2302      	movs	r3, #2
 80054e4:	e00f      	b.n	8005506 <HAL_UART_Receive_IT+0x58>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80054f4:	88fb      	ldrh	r3, [r7, #6]
 80054f6:	461a      	mov	r2, r3
 80054f8:	68b9      	ldr	r1, [r7, #8]
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f000 fb24 	bl	8005b48 <UART_Start_Receive_IT>
 8005500:	4603      	mov	r3, r0
 8005502:	e000      	b.n	8005506 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005504:	2302      	movs	r3, #2
  }
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
	...

08005510 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b0ba      	sub	sp, #232	; 0xe8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005536:	2300      	movs	r3, #0
 8005538:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800553c:	2300      	movs	r3, #0
 800553e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005546:	f003 030f 	and.w	r3, r3, #15
 800554a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800554e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005552:	2b00      	cmp	r3, #0
 8005554:	d10f      	bne.n	8005576 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800555a:	f003 0320 	and.w	r3, r3, #32
 800555e:	2b00      	cmp	r3, #0
 8005560:	d009      	beq.n	8005576 <HAL_UART_IRQHandler+0x66>
 8005562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005566:	f003 0320 	and.w	r3, r3, #32
 800556a:	2b00      	cmp	r3, #0
 800556c:	d003      	beq.n	8005576 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 fc07 	bl	8005d82 <UART_Receive_IT>
      return;
 8005574:	e256      	b.n	8005a24 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005576:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800557a:	2b00      	cmp	r3, #0
 800557c:	f000 80de 	beq.w	800573c <HAL_UART_IRQHandler+0x22c>
 8005580:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b00      	cmp	r3, #0
 800558a:	d106      	bne.n	800559a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800558c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005590:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 80d1 	beq.w	800573c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800559a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00b      	beq.n	80055be <HAL_UART_IRQHandler+0xae>
 80055a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d005      	beq.n	80055be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b6:	f043 0201 	orr.w	r2, r3, #1
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055c2:	f003 0304 	and.w	r3, r3, #4
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00b      	beq.n	80055e2 <HAL_UART_IRQHandler+0xd2>
 80055ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d005      	beq.n	80055e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055da:	f043 0202 	orr.w	r2, r3, #2
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00b      	beq.n	8005606 <HAL_UART_IRQHandler+0xf6>
 80055ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d005      	beq.n	8005606 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fe:	f043 0204 	orr.w	r2, r3, #4
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800560a:	f003 0308 	and.w	r3, r3, #8
 800560e:	2b00      	cmp	r3, #0
 8005610:	d011      	beq.n	8005636 <HAL_UART_IRQHandler+0x126>
 8005612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005616:	f003 0320 	and.w	r3, r3, #32
 800561a:	2b00      	cmp	r3, #0
 800561c:	d105      	bne.n	800562a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800561e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	2b00      	cmp	r3, #0
 8005628:	d005      	beq.n	8005636 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562e:	f043 0208 	orr.w	r2, r3, #8
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563a:	2b00      	cmp	r3, #0
 800563c:	f000 81ed 	beq.w	8005a1a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005644:	f003 0320 	and.w	r3, r3, #32
 8005648:	2b00      	cmp	r3, #0
 800564a:	d008      	beq.n	800565e <HAL_UART_IRQHandler+0x14e>
 800564c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005650:	f003 0320 	and.w	r3, r3, #32
 8005654:	2b00      	cmp	r3, #0
 8005656:	d002      	beq.n	800565e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 fb92 	bl	8005d82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005668:	2b40      	cmp	r3, #64	; 0x40
 800566a:	bf0c      	ite	eq
 800566c:	2301      	moveq	r3, #1
 800566e:	2300      	movne	r3, #0
 8005670:	b2db      	uxtb	r3, r3
 8005672:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567a:	f003 0308 	and.w	r3, r3, #8
 800567e:	2b00      	cmp	r3, #0
 8005680:	d103      	bne.n	800568a <HAL_UART_IRQHandler+0x17a>
 8005682:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005686:	2b00      	cmp	r3, #0
 8005688:	d04f      	beq.n	800572a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 fa9a 	bl	8005bc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569a:	2b40      	cmp	r3, #64	; 0x40
 800569c:	d141      	bne.n	8005722 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	3314      	adds	r3, #20
 80056a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056ac:	e853 3f00 	ldrex	r3, [r3]
 80056b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80056b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	3314      	adds	r3, #20
 80056c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80056ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80056ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80056d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80056da:	e841 2300 	strex	r3, r2, [r1]
 80056de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80056e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1d9      	bne.n	800569e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d013      	beq.n	800571a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f6:	4a7d      	ldr	r2, [pc, #500]	; (80058ec <HAL_UART_IRQHandler+0x3dc>)
 80056f8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fd fa9b 	bl	8002c3a <HAL_DMA_Abort_IT>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d016      	beq.n	8005738 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005714:	4610      	mov	r0, r2
 8005716:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005718:	e00e      	b.n	8005738 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f990 	bl	8005a40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005720:	e00a      	b.n	8005738 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f98c 	bl	8005a40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005728:	e006      	b.n	8005738 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f988 	bl	8005a40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005736:	e170      	b.n	8005a1a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005738:	bf00      	nop
    return;
 800573a:	e16e      	b.n	8005a1a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005740:	2b01      	cmp	r3, #1
 8005742:	f040 814a 	bne.w	80059da <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800574a:	f003 0310 	and.w	r3, r3, #16
 800574e:	2b00      	cmp	r3, #0
 8005750:	f000 8143 	beq.w	80059da <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005758:	f003 0310 	and.w	r3, r3, #16
 800575c:	2b00      	cmp	r3, #0
 800575e:	f000 813c 	beq.w	80059da <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005762:	2300      	movs	r3, #0
 8005764:	60bb      	str	r3, [r7, #8]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	60bb      	str	r3, [r7, #8]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	60bb      	str	r3, [r7, #8]
 8005776:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005782:	2b40      	cmp	r3, #64	; 0x40
 8005784:	f040 80b4 	bne.w	80058f0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005794:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005798:	2b00      	cmp	r3, #0
 800579a:	f000 8140 	beq.w	8005a1e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057a6:	429a      	cmp	r2, r3
 80057a8:	f080 8139 	bcs.w	8005a1e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057b2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057be:	f000 8088 	beq.w	80058d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	330c      	adds	r3, #12
 80057c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057d0:	e853 3f00 	ldrex	r3, [r3]
 80057d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80057d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	330c      	adds	r3, #12
 80057ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80057ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80057f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80057fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80057fe:	e841 2300 	strex	r3, r2, [r1]
 8005802:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005806:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1d9      	bne.n	80057c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	3314      	adds	r3, #20
 8005814:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005818:	e853 3f00 	ldrex	r3, [r3]
 800581c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800581e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005820:	f023 0301 	bic.w	r3, r3, #1
 8005824:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3314      	adds	r3, #20
 800582e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005832:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005836:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005838:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800583a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800583e:	e841 2300 	strex	r3, r2, [r1]
 8005842:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005844:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1e1      	bne.n	800580e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	3314      	adds	r3, #20
 8005850:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005852:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005854:	e853 3f00 	ldrex	r3, [r3]
 8005858:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800585a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800585c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005860:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	3314      	adds	r3, #20
 800586a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800586e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005870:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005872:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005874:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005876:	e841 2300 	strex	r3, r2, [r1]
 800587a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800587c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1e3      	bne.n	800584a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2220      	movs	r2, #32
 8005886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	330c      	adds	r3, #12
 8005896:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800589a:	e853 3f00 	ldrex	r3, [r3]
 800589e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80058a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058a2:	f023 0310 	bic.w	r3, r3, #16
 80058a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	330c      	adds	r3, #12
 80058b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80058b4:	65ba      	str	r2, [r7, #88]	; 0x58
 80058b6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058bc:	e841 2300 	strex	r3, r2, [r1]
 80058c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80058c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1e3      	bne.n	8005890 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7fd f944 	bl	8002b5a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058da:	b29b      	uxth	r3, r3
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	b29b      	uxth	r3, r3
 80058e0:	4619      	mov	r1, r3
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f8b6 	bl	8005a54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058e8:	e099      	b.n	8005a1e <HAL_UART_IRQHandler+0x50e>
 80058ea:	bf00      	nop
 80058ec:	08005c8b 	.word	0x08005c8b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005904:	b29b      	uxth	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	f000 808b 	beq.w	8005a22 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800590c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005910:	2b00      	cmp	r3, #0
 8005912:	f000 8086 	beq.w	8005a22 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	330c      	adds	r3, #12
 800591c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005920:	e853 3f00 	ldrex	r3, [r3]
 8005924:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005928:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800592c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	330c      	adds	r3, #12
 8005936:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800593a:	647a      	str	r2, [r7, #68]	; 0x44
 800593c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005940:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005942:	e841 2300 	strex	r3, r2, [r1]
 8005946:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1e3      	bne.n	8005916 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	3314      	adds	r3, #20
 8005954:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005958:	e853 3f00 	ldrex	r3, [r3]
 800595c:	623b      	str	r3, [r7, #32]
   return(result);
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	f023 0301 	bic.w	r3, r3, #1
 8005964:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3314      	adds	r3, #20
 800596e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005972:	633a      	str	r2, [r7, #48]	; 0x30
 8005974:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005976:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800597a:	e841 2300 	strex	r3, r2, [r1]
 800597e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1e3      	bne.n	800594e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2220      	movs	r2, #32
 800598a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	330c      	adds	r3, #12
 800599a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	e853 3f00 	ldrex	r3, [r3]
 80059a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f023 0310 	bic.w	r3, r3, #16
 80059aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	330c      	adds	r3, #12
 80059b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80059b8:	61fa      	str	r2, [r7, #28]
 80059ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059bc:	69b9      	ldr	r1, [r7, #24]
 80059be:	69fa      	ldr	r2, [r7, #28]
 80059c0:	e841 2300 	strex	r3, r2, [r1]
 80059c4:	617b      	str	r3, [r7, #20]
   return(result);
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1e3      	bne.n	8005994 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059d0:	4619      	mov	r1, r3
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f83e 	bl	8005a54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059d8:	e023      	b.n	8005a22 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80059da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d009      	beq.n	80059fa <HAL_UART_IRQHandler+0x4ea>
 80059e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d003      	beq.n	80059fa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f95d 	bl	8005cb2 <UART_Transmit_IT>
    return;
 80059f8:	e014      	b.n	8005a24 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80059fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00e      	beq.n	8005a24 <HAL_UART_IRQHandler+0x514>
 8005a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d008      	beq.n	8005a24 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f99d 	bl	8005d52 <UART_EndTransmit_IT>
    return;
 8005a18:	e004      	b.n	8005a24 <HAL_UART_IRQHandler+0x514>
    return;
 8005a1a:	bf00      	nop
 8005a1c:	e002      	b.n	8005a24 <HAL_UART_IRQHandler+0x514>
      return;
 8005a1e:	bf00      	nop
 8005a20:	e000      	b.n	8005a24 <HAL_UART_IRQHandler+0x514>
      return;
 8005a22:	bf00      	nop
  }
}
 8005a24:	37e8      	adds	r7, #232	; 0xe8
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop

08005a2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b090      	sub	sp, #64	; 0x40
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	603b      	str	r3, [r7, #0]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a7c:	e050      	b.n	8005b20 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a84:	d04c      	beq.n	8005b20 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d007      	beq.n	8005a9c <UART_WaitOnFlagUntilTimeout+0x30>
 8005a8c:	f7fc ff24 	bl	80028d8 <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d241      	bcs.n	8005b20 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	330c      	adds	r3, #12
 8005aa2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa6:	e853 3f00 	ldrex	r3, [r3]
 8005aaa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	330c      	adds	r3, #12
 8005aba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005abc:	637a      	str	r2, [r7, #52]	; 0x34
 8005abe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ac2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ac4:	e841 2300 	strex	r3, r2, [r1]
 8005ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1e5      	bne.n	8005a9c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	3314      	adds	r3, #20
 8005ad6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	e853 3f00 	ldrex	r3, [r3]
 8005ade:	613b      	str	r3, [r7, #16]
   return(result);
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	f023 0301 	bic.w	r3, r3, #1
 8005ae6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	3314      	adds	r3, #20
 8005aee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005af0:	623a      	str	r2, [r7, #32]
 8005af2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af4:	69f9      	ldr	r1, [r7, #28]
 8005af6:	6a3a      	ldr	r2, [r7, #32]
 8005af8:	e841 2300 	strex	r3, r2, [r1]
 8005afc:	61bb      	str	r3, [r7, #24]
   return(result);
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1e5      	bne.n	8005ad0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2220      	movs	r2, #32
 8005b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e00f      	b.n	8005b40 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	4013      	ands	r3, r2
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	bf0c      	ite	eq
 8005b30:	2301      	moveq	r3, #1
 8005b32:	2300      	movne	r3, #0
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	461a      	mov	r2, r3
 8005b38:	79fb      	ldrb	r3, [r7, #7]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d09f      	beq.n	8005a7e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3740      	adds	r7, #64	; 0x40
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	4613      	mov	r3, r2
 8005b54:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	88fa      	ldrh	r2, [r7, #6]
 8005b60:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	88fa      	ldrh	r2, [r7, #6]
 8005b66:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2222      	movs	r2, #34	; 0x22
 8005b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d007      	beq.n	8005b96 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68da      	ldr	r2, [r3, #12]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b94:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	695a      	ldr	r2, [r3, #20]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f042 0201 	orr.w	r2, r2, #1
 8005ba4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68da      	ldr	r2, [r3, #12]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f042 0220 	orr.w	r2, r2, #32
 8005bb4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3714      	adds	r7, #20
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b095      	sub	sp, #84	; 0x54
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	330c      	adds	r3, #12
 8005bd2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd6:	e853 3f00 	ldrex	r3, [r3]
 8005bda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005be2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	330c      	adds	r3, #12
 8005bea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005bec:	643a      	str	r2, [r7, #64]	; 0x40
 8005bee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bf4:	e841 2300 	strex	r3, r2, [r1]
 8005bf8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1e5      	bne.n	8005bcc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	3314      	adds	r3, #20
 8005c06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	e853 3f00 	ldrex	r3, [r3]
 8005c0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	f023 0301 	bic.w	r3, r3, #1
 8005c16:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	3314      	adds	r3, #20
 8005c1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c28:	e841 2300 	strex	r3, r2, [r1]
 8005c2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d1e5      	bne.n	8005c00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d119      	bne.n	8005c70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	330c      	adds	r3, #12
 8005c42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	e853 3f00 	ldrex	r3, [r3]
 8005c4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	f023 0310 	bic.w	r3, r3, #16
 8005c52:	647b      	str	r3, [r7, #68]	; 0x44
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	330c      	adds	r3, #12
 8005c5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c5c:	61ba      	str	r2, [r7, #24]
 8005c5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c60:	6979      	ldr	r1, [r7, #20]
 8005c62:	69ba      	ldr	r2, [r7, #24]
 8005c64:	e841 2300 	strex	r3, r2, [r1]
 8005c68:	613b      	str	r3, [r7, #16]
   return(result);
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1e5      	bne.n	8005c3c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2220      	movs	r2, #32
 8005c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005c7e:	bf00      	nop
 8005c80:	3754      	adds	r7, #84	; 0x54
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	b084      	sub	sp, #16
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f7ff fecb 	bl	8005a40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005caa:	bf00      	nop
 8005cac:	3710      	adds	r7, #16
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	b085      	sub	sp, #20
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	2b21      	cmp	r3, #33	; 0x21
 8005cc4:	d13e      	bne.n	8005d44 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cce:	d114      	bne.n	8005cfa <UART_Transmit_IT+0x48>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d110      	bne.n	8005cfa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a1b      	ldr	r3, [r3, #32]
 8005cdc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	881b      	ldrh	r3, [r3, #0]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	1c9a      	adds	r2, r3, #2
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	621a      	str	r2, [r3, #32]
 8005cf8:	e008      	b.n	8005d0c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
 8005cfe:	1c59      	adds	r1, r3, #1
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	6211      	str	r1, [r2, #32]
 8005d04:	781a      	ldrb	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	3b01      	subs	r3, #1
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	4619      	mov	r1, r3
 8005d1a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10f      	bne.n	8005d40 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68da      	ldr	r2, [r3, #12]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68da      	ldr	r2, [r3, #12]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005d40:	2300      	movs	r3, #0
 8005d42:	e000      	b.n	8005d46 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005d44:	2302      	movs	r3, #2
  }
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3714      	adds	r7, #20
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b082      	sub	sp, #8
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68da      	ldr	r2, [r3, #12]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2220      	movs	r2, #32
 8005d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f7ff fe5a 	bl	8005a2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3708      	adds	r7, #8
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b08c      	sub	sp, #48	; 0x30
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b22      	cmp	r3, #34	; 0x22
 8005d94:	f040 80ab 	bne.w	8005eee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005da0:	d117      	bne.n	8005dd2 <UART_Receive_IT+0x50>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d113      	bne.n	8005dd2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005daa:	2300      	movs	r3, #0
 8005dac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dca:	1c9a      	adds	r2, r3, #2
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	629a      	str	r2, [r3, #40]	; 0x28
 8005dd0:	e026      	b.n	8005e20 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005de4:	d007      	beq.n	8005df6 <UART_Receive_IT+0x74>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10a      	bne.n	8005e04 <UART_Receive_IT+0x82>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d106      	bne.n	8005e04 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e00:	701a      	strb	r2, [r3, #0]
 8005e02:	e008      	b.n	8005e16 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e10:	b2da      	uxtb	r2, r3
 8005e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e14:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e1a:	1c5a      	adds	r2, r3, #1
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	3b01      	subs	r3, #1
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d15a      	bne.n	8005eea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68da      	ldr	r2, [r3, #12]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f022 0220 	bic.w	r2, r2, #32
 8005e42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68da      	ldr	r2, [r3, #12]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	695a      	ldr	r2, [r3, #20]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f022 0201 	bic.w	r2, r2, #1
 8005e62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2220      	movs	r2, #32
 8005e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d135      	bne.n	8005ee0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	330c      	adds	r3, #12
 8005e80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	e853 3f00 	ldrex	r3, [r3]
 8005e88:	613b      	str	r3, [r7, #16]
   return(result);
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	f023 0310 	bic.w	r3, r3, #16
 8005e90:	627b      	str	r3, [r7, #36]	; 0x24
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	330c      	adds	r3, #12
 8005e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e9a:	623a      	str	r2, [r7, #32]
 8005e9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9e:	69f9      	ldr	r1, [r7, #28]
 8005ea0:	6a3a      	ldr	r2, [r7, #32]
 8005ea2:	e841 2300 	strex	r3, r2, [r1]
 8005ea6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1e5      	bne.n	8005e7a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0310 	and.w	r3, r3, #16
 8005eb8:	2b10      	cmp	r3, #16
 8005eba:	d10a      	bne.n	8005ed2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	60fb      	str	r3, [r7, #12]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	60fb      	str	r3, [r7, #12]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	60fb      	str	r3, [r7, #12]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f7ff fdbb 	bl	8005a54 <HAL_UARTEx_RxEventCallback>
 8005ede:	e002      	b.n	8005ee6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f7fc f931 	bl	8002148 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	e002      	b.n	8005ef0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005eea:	2300      	movs	r3, #0
 8005eec:	e000      	b.n	8005ef0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005eee:	2302      	movs	r3, #2
  }
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3730      	adds	r7, #48	; 0x30
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005efc:	b0c0      	sub	sp, #256	; 0x100
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f14:	68d9      	ldr	r1, [r3, #12]
 8005f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	ea40 0301 	orr.w	r3, r0, r1
 8005f20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f26:	689a      	ldr	r2, [r3, #8]
 8005f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	431a      	orrs	r2, r3
 8005f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	431a      	orrs	r2, r3
 8005f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f3c:	69db      	ldr	r3, [r3, #28]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005f50:	f021 010c 	bic.w	r1, r1, #12
 8005f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f5e:	430b      	orrs	r3, r1
 8005f60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f72:	6999      	ldr	r1, [r3, #24]
 8005f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	ea40 0301 	orr.w	r3, r0, r1
 8005f7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	4b8f      	ldr	r3, [pc, #572]	; (80061c4 <UART_SetConfig+0x2cc>)
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d005      	beq.n	8005f98 <UART_SetConfig+0xa0>
 8005f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	4b8d      	ldr	r3, [pc, #564]	; (80061c8 <UART_SetConfig+0x2d0>)
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d104      	bne.n	8005fa2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f98:	f7fe fad8 	bl	800454c <HAL_RCC_GetPCLK2Freq>
 8005f9c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005fa0:	e003      	b.n	8005faa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005fa2:	f7fe fabf 	bl	8004524 <HAL_RCC_GetPCLK1Freq>
 8005fa6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fae:	69db      	ldr	r3, [r3, #28]
 8005fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fb4:	f040 810c 	bne.w	80061d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005fb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005fc2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005fc6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005fca:	4622      	mov	r2, r4
 8005fcc:	462b      	mov	r3, r5
 8005fce:	1891      	adds	r1, r2, r2
 8005fd0:	65b9      	str	r1, [r7, #88]	; 0x58
 8005fd2:	415b      	adcs	r3, r3
 8005fd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fd6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005fda:	4621      	mov	r1, r4
 8005fdc:	eb12 0801 	adds.w	r8, r2, r1
 8005fe0:	4629      	mov	r1, r5
 8005fe2:	eb43 0901 	adc.w	r9, r3, r1
 8005fe6:	f04f 0200 	mov.w	r2, #0
 8005fea:	f04f 0300 	mov.w	r3, #0
 8005fee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ff2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ff6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ffa:	4690      	mov	r8, r2
 8005ffc:	4699      	mov	r9, r3
 8005ffe:	4623      	mov	r3, r4
 8006000:	eb18 0303 	adds.w	r3, r8, r3
 8006004:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006008:	462b      	mov	r3, r5
 800600a:	eb49 0303 	adc.w	r3, r9, r3
 800600e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800601e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006022:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006026:	460b      	mov	r3, r1
 8006028:	18db      	adds	r3, r3, r3
 800602a:	653b      	str	r3, [r7, #80]	; 0x50
 800602c:	4613      	mov	r3, r2
 800602e:	eb42 0303 	adc.w	r3, r2, r3
 8006032:	657b      	str	r3, [r7, #84]	; 0x54
 8006034:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006038:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800603c:	f7fa fd1e 	bl	8000a7c <__aeabi_uldivmod>
 8006040:	4602      	mov	r2, r0
 8006042:	460b      	mov	r3, r1
 8006044:	4b61      	ldr	r3, [pc, #388]	; (80061cc <UART_SetConfig+0x2d4>)
 8006046:	fba3 2302 	umull	r2, r3, r3, r2
 800604a:	095b      	lsrs	r3, r3, #5
 800604c:	011c      	lsls	r4, r3, #4
 800604e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006052:	2200      	movs	r2, #0
 8006054:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006058:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800605c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006060:	4642      	mov	r2, r8
 8006062:	464b      	mov	r3, r9
 8006064:	1891      	adds	r1, r2, r2
 8006066:	64b9      	str	r1, [r7, #72]	; 0x48
 8006068:	415b      	adcs	r3, r3
 800606a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800606c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006070:	4641      	mov	r1, r8
 8006072:	eb12 0a01 	adds.w	sl, r2, r1
 8006076:	4649      	mov	r1, r9
 8006078:	eb43 0b01 	adc.w	fp, r3, r1
 800607c:	f04f 0200 	mov.w	r2, #0
 8006080:	f04f 0300 	mov.w	r3, #0
 8006084:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006088:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800608c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006090:	4692      	mov	sl, r2
 8006092:	469b      	mov	fp, r3
 8006094:	4643      	mov	r3, r8
 8006096:	eb1a 0303 	adds.w	r3, sl, r3
 800609a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800609e:	464b      	mov	r3, r9
 80060a0:	eb4b 0303 	adc.w	r3, fp, r3
 80060a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80060a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80060b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80060b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80060bc:	460b      	mov	r3, r1
 80060be:	18db      	adds	r3, r3, r3
 80060c0:	643b      	str	r3, [r7, #64]	; 0x40
 80060c2:	4613      	mov	r3, r2
 80060c4:	eb42 0303 	adc.w	r3, r2, r3
 80060c8:	647b      	str	r3, [r7, #68]	; 0x44
 80060ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80060ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80060d2:	f7fa fcd3 	bl	8000a7c <__aeabi_uldivmod>
 80060d6:	4602      	mov	r2, r0
 80060d8:	460b      	mov	r3, r1
 80060da:	4611      	mov	r1, r2
 80060dc:	4b3b      	ldr	r3, [pc, #236]	; (80061cc <UART_SetConfig+0x2d4>)
 80060de:	fba3 2301 	umull	r2, r3, r3, r1
 80060e2:	095b      	lsrs	r3, r3, #5
 80060e4:	2264      	movs	r2, #100	; 0x64
 80060e6:	fb02 f303 	mul.w	r3, r2, r3
 80060ea:	1acb      	subs	r3, r1, r3
 80060ec:	00db      	lsls	r3, r3, #3
 80060ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80060f2:	4b36      	ldr	r3, [pc, #216]	; (80061cc <UART_SetConfig+0x2d4>)
 80060f4:	fba3 2302 	umull	r2, r3, r3, r2
 80060f8:	095b      	lsrs	r3, r3, #5
 80060fa:	005b      	lsls	r3, r3, #1
 80060fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006100:	441c      	add	r4, r3
 8006102:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006106:	2200      	movs	r2, #0
 8006108:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800610c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006110:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006114:	4642      	mov	r2, r8
 8006116:	464b      	mov	r3, r9
 8006118:	1891      	adds	r1, r2, r2
 800611a:	63b9      	str	r1, [r7, #56]	; 0x38
 800611c:	415b      	adcs	r3, r3
 800611e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006120:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006124:	4641      	mov	r1, r8
 8006126:	1851      	adds	r1, r2, r1
 8006128:	6339      	str	r1, [r7, #48]	; 0x30
 800612a:	4649      	mov	r1, r9
 800612c:	414b      	adcs	r3, r1
 800612e:	637b      	str	r3, [r7, #52]	; 0x34
 8006130:	f04f 0200 	mov.w	r2, #0
 8006134:	f04f 0300 	mov.w	r3, #0
 8006138:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800613c:	4659      	mov	r1, fp
 800613e:	00cb      	lsls	r3, r1, #3
 8006140:	4651      	mov	r1, sl
 8006142:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006146:	4651      	mov	r1, sl
 8006148:	00ca      	lsls	r2, r1, #3
 800614a:	4610      	mov	r0, r2
 800614c:	4619      	mov	r1, r3
 800614e:	4603      	mov	r3, r0
 8006150:	4642      	mov	r2, r8
 8006152:	189b      	adds	r3, r3, r2
 8006154:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006158:	464b      	mov	r3, r9
 800615a:	460a      	mov	r2, r1
 800615c:	eb42 0303 	adc.w	r3, r2, r3
 8006160:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006170:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006174:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006178:	460b      	mov	r3, r1
 800617a:	18db      	adds	r3, r3, r3
 800617c:	62bb      	str	r3, [r7, #40]	; 0x28
 800617e:	4613      	mov	r3, r2
 8006180:	eb42 0303 	adc.w	r3, r2, r3
 8006184:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006186:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800618a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800618e:	f7fa fc75 	bl	8000a7c <__aeabi_uldivmod>
 8006192:	4602      	mov	r2, r0
 8006194:	460b      	mov	r3, r1
 8006196:	4b0d      	ldr	r3, [pc, #52]	; (80061cc <UART_SetConfig+0x2d4>)
 8006198:	fba3 1302 	umull	r1, r3, r3, r2
 800619c:	095b      	lsrs	r3, r3, #5
 800619e:	2164      	movs	r1, #100	; 0x64
 80061a0:	fb01 f303 	mul.w	r3, r1, r3
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	00db      	lsls	r3, r3, #3
 80061a8:	3332      	adds	r3, #50	; 0x32
 80061aa:	4a08      	ldr	r2, [pc, #32]	; (80061cc <UART_SetConfig+0x2d4>)
 80061ac:	fba2 2303 	umull	r2, r3, r2, r3
 80061b0:	095b      	lsrs	r3, r3, #5
 80061b2:	f003 0207 	and.w	r2, r3, #7
 80061b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4422      	add	r2, r4
 80061be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80061c0:	e105      	b.n	80063ce <UART_SetConfig+0x4d6>
 80061c2:	bf00      	nop
 80061c4:	40011000 	.word	0x40011000
 80061c8:	40011400 	.word	0x40011400
 80061cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061d4:	2200      	movs	r2, #0
 80061d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80061da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80061de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80061e2:	4642      	mov	r2, r8
 80061e4:	464b      	mov	r3, r9
 80061e6:	1891      	adds	r1, r2, r2
 80061e8:	6239      	str	r1, [r7, #32]
 80061ea:	415b      	adcs	r3, r3
 80061ec:	627b      	str	r3, [r7, #36]	; 0x24
 80061ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80061f2:	4641      	mov	r1, r8
 80061f4:	1854      	adds	r4, r2, r1
 80061f6:	4649      	mov	r1, r9
 80061f8:	eb43 0501 	adc.w	r5, r3, r1
 80061fc:	f04f 0200 	mov.w	r2, #0
 8006200:	f04f 0300 	mov.w	r3, #0
 8006204:	00eb      	lsls	r3, r5, #3
 8006206:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800620a:	00e2      	lsls	r2, r4, #3
 800620c:	4614      	mov	r4, r2
 800620e:	461d      	mov	r5, r3
 8006210:	4643      	mov	r3, r8
 8006212:	18e3      	adds	r3, r4, r3
 8006214:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006218:	464b      	mov	r3, r9
 800621a:	eb45 0303 	adc.w	r3, r5, r3
 800621e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800622e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006232:	f04f 0200 	mov.w	r2, #0
 8006236:	f04f 0300 	mov.w	r3, #0
 800623a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800623e:	4629      	mov	r1, r5
 8006240:	008b      	lsls	r3, r1, #2
 8006242:	4621      	mov	r1, r4
 8006244:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006248:	4621      	mov	r1, r4
 800624a:	008a      	lsls	r2, r1, #2
 800624c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006250:	f7fa fc14 	bl	8000a7c <__aeabi_uldivmod>
 8006254:	4602      	mov	r2, r0
 8006256:	460b      	mov	r3, r1
 8006258:	4b60      	ldr	r3, [pc, #384]	; (80063dc <UART_SetConfig+0x4e4>)
 800625a:	fba3 2302 	umull	r2, r3, r3, r2
 800625e:	095b      	lsrs	r3, r3, #5
 8006260:	011c      	lsls	r4, r3, #4
 8006262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006266:	2200      	movs	r2, #0
 8006268:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800626c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006270:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006274:	4642      	mov	r2, r8
 8006276:	464b      	mov	r3, r9
 8006278:	1891      	adds	r1, r2, r2
 800627a:	61b9      	str	r1, [r7, #24]
 800627c:	415b      	adcs	r3, r3
 800627e:	61fb      	str	r3, [r7, #28]
 8006280:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006284:	4641      	mov	r1, r8
 8006286:	1851      	adds	r1, r2, r1
 8006288:	6139      	str	r1, [r7, #16]
 800628a:	4649      	mov	r1, r9
 800628c:	414b      	adcs	r3, r1
 800628e:	617b      	str	r3, [r7, #20]
 8006290:	f04f 0200 	mov.w	r2, #0
 8006294:	f04f 0300 	mov.w	r3, #0
 8006298:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800629c:	4659      	mov	r1, fp
 800629e:	00cb      	lsls	r3, r1, #3
 80062a0:	4651      	mov	r1, sl
 80062a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062a6:	4651      	mov	r1, sl
 80062a8:	00ca      	lsls	r2, r1, #3
 80062aa:	4610      	mov	r0, r2
 80062ac:	4619      	mov	r1, r3
 80062ae:	4603      	mov	r3, r0
 80062b0:	4642      	mov	r2, r8
 80062b2:	189b      	adds	r3, r3, r2
 80062b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80062b8:	464b      	mov	r3, r9
 80062ba:	460a      	mov	r2, r1
 80062bc:	eb42 0303 	adc.w	r3, r2, r3
 80062c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80062c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80062ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80062d0:	f04f 0200 	mov.w	r2, #0
 80062d4:	f04f 0300 	mov.w	r3, #0
 80062d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80062dc:	4649      	mov	r1, r9
 80062de:	008b      	lsls	r3, r1, #2
 80062e0:	4641      	mov	r1, r8
 80062e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062e6:	4641      	mov	r1, r8
 80062e8:	008a      	lsls	r2, r1, #2
 80062ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80062ee:	f7fa fbc5 	bl	8000a7c <__aeabi_uldivmod>
 80062f2:	4602      	mov	r2, r0
 80062f4:	460b      	mov	r3, r1
 80062f6:	4b39      	ldr	r3, [pc, #228]	; (80063dc <UART_SetConfig+0x4e4>)
 80062f8:	fba3 1302 	umull	r1, r3, r3, r2
 80062fc:	095b      	lsrs	r3, r3, #5
 80062fe:	2164      	movs	r1, #100	; 0x64
 8006300:	fb01 f303 	mul.w	r3, r1, r3
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	011b      	lsls	r3, r3, #4
 8006308:	3332      	adds	r3, #50	; 0x32
 800630a:	4a34      	ldr	r2, [pc, #208]	; (80063dc <UART_SetConfig+0x4e4>)
 800630c:	fba2 2303 	umull	r2, r3, r2, r3
 8006310:	095b      	lsrs	r3, r3, #5
 8006312:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006316:	441c      	add	r4, r3
 8006318:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800631c:	2200      	movs	r2, #0
 800631e:	673b      	str	r3, [r7, #112]	; 0x70
 8006320:	677a      	str	r2, [r7, #116]	; 0x74
 8006322:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006326:	4642      	mov	r2, r8
 8006328:	464b      	mov	r3, r9
 800632a:	1891      	adds	r1, r2, r2
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	415b      	adcs	r3, r3
 8006330:	60fb      	str	r3, [r7, #12]
 8006332:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006336:	4641      	mov	r1, r8
 8006338:	1851      	adds	r1, r2, r1
 800633a:	6039      	str	r1, [r7, #0]
 800633c:	4649      	mov	r1, r9
 800633e:	414b      	adcs	r3, r1
 8006340:	607b      	str	r3, [r7, #4]
 8006342:	f04f 0200 	mov.w	r2, #0
 8006346:	f04f 0300 	mov.w	r3, #0
 800634a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800634e:	4659      	mov	r1, fp
 8006350:	00cb      	lsls	r3, r1, #3
 8006352:	4651      	mov	r1, sl
 8006354:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006358:	4651      	mov	r1, sl
 800635a:	00ca      	lsls	r2, r1, #3
 800635c:	4610      	mov	r0, r2
 800635e:	4619      	mov	r1, r3
 8006360:	4603      	mov	r3, r0
 8006362:	4642      	mov	r2, r8
 8006364:	189b      	adds	r3, r3, r2
 8006366:	66bb      	str	r3, [r7, #104]	; 0x68
 8006368:	464b      	mov	r3, r9
 800636a:	460a      	mov	r2, r1
 800636c:	eb42 0303 	adc.w	r3, r2, r3
 8006370:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	663b      	str	r3, [r7, #96]	; 0x60
 800637c:	667a      	str	r2, [r7, #100]	; 0x64
 800637e:	f04f 0200 	mov.w	r2, #0
 8006382:	f04f 0300 	mov.w	r3, #0
 8006386:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800638a:	4649      	mov	r1, r9
 800638c:	008b      	lsls	r3, r1, #2
 800638e:	4641      	mov	r1, r8
 8006390:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006394:	4641      	mov	r1, r8
 8006396:	008a      	lsls	r2, r1, #2
 8006398:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800639c:	f7fa fb6e 	bl	8000a7c <__aeabi_uldivmod>
 80063a0:	4602      	mov	r2, r0
 80063a2:	460b      	mov	r3, r1
 80063a4:	4b0d      	ldr	r3, [pc, #52]	; (80063dc <UART_SetConfig+0x4e4>)
 80063a6:	fba3 1302 	umull	r1, r3, r3, r2
 80063aa:	095b      	lsrs	r3, r3, #5
 80063ac:	2164      	movs	r1, #100	; 0x64
 80063ae:	fb01 f303 	mul.w	r3, r1, r3
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	011b      	lsls	r3, r3, #4
 80063b6:	3332      	adds	r3, #50	; 0x32
 80063b8:	4a08      	ldr	r2, [pc, #32]	; (80063dc <UART_SetConfig+0x4e4>)
 80063ba:	fba2 2303 	umull	r2, r3, r2, r3
 80063be:	095b      	lsrs	r3, r3, #5
 80063c0:	f003 020f 	and.w	r2, r3, #15
 80063c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4422      	add	r2, r4
 80063cc:	609a      	str	r2, [r3, #8]
}
 80063ce:	bf00      	nop
 80063d0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80063d4:	46bd      	mov	sp, r7
 80063d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063da:	bf00      	nop
 80063dc:	51eb851f 	.word	0x51eb851f

080063e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063e0:	b084      	sub	sp, #16
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b084      	sub	sp, #16
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
 80063ea:	f107 001c 	add.w	r0, r7, #28
 80063ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80063f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d122      	bne.n	800643e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800640c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006422:	2b01      	cmp	r3, #1
 8006424:	d105      	bne.n	8006432 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 faa2 	bl	800697c <USB_CoreReset>
 8006438:	4603      	mov	r3, r0
 800643a:	73fb      	strb	r3, [r7, #15]
 800643c:	e01a      	b.n	8006474 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 fa96 	bl	800697c <USB_CoreReset>
 8006450:	4603      	mov	r3, r0
 8006452:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006456:	2b00      	cmp	r3, #0
 8006458:	d106      	bne.n	8006468 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	639a      	str	r2, [r3, #56]	; 0x38
 8006466:	e005      	b.n	8006474 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006476:	2b01      	cmp	r3, #1
 8006478:	d10b      	bne.n	8006492 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f043 0206 	orr.w	r2, r3, #6
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f043 0220 	orr.w	r2, r3, #32
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006492:	7bfb      	ldrb	r3, [r7, #15]
}
 8006494:	4618      	mov	r0, r3
 8006496:	3710      	adds	r7, #16
 8006498:	46bd      	mov	sp, r7
 800649a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800649e:	b004      	add	sp, #16
 80064a0:	4770      	bx	lr

080064a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b083      	sub	sp, #12
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f023 0201 	bic.w	r2, r3, #1
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	460b      	mov	r3, r1
 80064ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80064d0:	2300      	movs	r3, #0
 80064d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80064e0:	78fb      	ldrb	r3, [r7, #3]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d115      	bne.n	8006512 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80064f2:	2001      	movs	r0, #1
 80064f4:	f7fc f9fc 	bl	80028f0 <HAL_Delay>
      ms++;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	3301      	adds	r3, #1
 80064fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 fa2e 	bl	8006960 <USB_GetMode>
 8006504:	4603      	mov	r3, r0
 8006506:	2b01      	cmp	r3, #1
 8006508:	d01e      	beq.n	8006548 <USB_SetCurrentMode+0x84>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2b31      	cmp	r3, #49	; 0x31
 800650e:	d9f0      	bls.n	80064f2 <USB_SetCurrentMode+0x2e>
 8006510:	e01a      	b.n	8006548 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006512:	78fb      	ldrb	r3, [r7, #3]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d115      	bne.n	8006544 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006524:	2001      	movs	r0, #1
 8006526:	f7fc f9e3 	bl	80028f0 <HAL_Delay>
      ms++;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	3301      	adds	r3, #1
 800652e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 fa15 	bl	8006960 <USB_GetMode>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d005      	beq.n	8006548 <USB_SetCurrentMode+0x84>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2b31      	cmp	r3, #49	; 0x31
 8006540:	d9f0      	bls.n	8006524 <USB_SetCurrentMode+0x60>
 8006542:	e001      	b.n	8006548 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e005      	b.n	8006554 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2b32      	cmp	r3, #50	; 0x32
 800654c:	d101      	bne.n	8006552 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e000      	b.n	8006554 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3710      	adds	r7, #16
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800655c:	b084      	sub	sp, #16
 800655e:	b580      	push	{r7, lr}
 8006560:	b086      	sub	sp, #24
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
 8006566:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800656a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800656e:	2300      	movs	r3, #0
 8006570:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006576:	2300      	movs	r3, #0
 8006578:	613b      	str	r3, [r7, #16]
 800657a:	e009      	b.n	8006590 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	3340      	adds	r3, #64	; 0x40
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4413      	add	r3, r2
 8006586:	2200      	movs	r2, #0
 8006588:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	3301      	adds	r3, #1
 800658e:	613b      	str	r3, [r7, #16]
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	2b0e      	cmp	r3, #14
 8006594:	d9f2      	bls.n	800657c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006598:	2b00      	cmp	r3, #0
 800659a:	d11c      	bne.n	80065d6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065aa:	f043 0302 	orr.w	r3, r3, #2
 80065ae:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065cc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	639a      	str	r2, [r3, #56]	; 0x38
 80065d4:	e00b      	b.n	80065ee <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065da:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065f4:	461a      	mov	r2, r3
 80065f6:	2300      	movs	r3, #0
 80065f8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006600:	4619      	mov	r1, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006608:	461a      	mov	r2, r3
 800660a:	680b      	ldr	r3, [r1, #0]
 800660c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800660e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006610:	2b01      	cmp	r3, #1
 8006612:	d10c      	bne.n	800662e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006616:	2b00      	cmp	r3, #0
 8006618:	d104      	bne.n	8006624 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800661a:	2100      	movs	r1, #0
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 f965 	bl	80068ec <USB_SetDevSpeed>
 8006622:	e008      	b.n	8006636 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006624:	2101      	movs	r1, #1
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f960 	bl	80068ec <USB_SetDevSpeed>
 800662c:	e003      	b.n	8006636 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800662e:	2103      	movs	r1, #3
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 f95b 	bl	80068ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006636:	2110      	movs	r1, #16
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f8f3 	bl	8006824 <USB_FlushTxFifo>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d001      	beq.n	8006648 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 f91f 	bl	800688c <USB_FlushRxFifo>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d001      	beq.n	8006658 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800665e:	461a      	mov	r2, r3
 8006660:	2300      	movs	r3, #0
 8006662:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800666a:	461a      	mov	r2, r3
 800666c:	2300      	movs	r3, #0
 800666e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006676:	461a      	mov	r2, r3
 8006678:	2300      	movs	r3, #0
 800667a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800667c:	2300      	movs	r3, #0
 800667e:	613b      	str	r3, [r7, #16]
 8006680:	e043      	b.n	800670a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	015a      	lsls	r2, r3, #5
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	4413      	add	r3, r2
 800668a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006694:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006698:	d118      	bne.n	80066cc <USB_DevInit+0x170>
    {
      if (i == 0U)
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10a      	bne.n	80066b6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ac:	461a      	mov	r2, r3
 80066ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80066b2:	6013      	str	r3, [r2, #0]
 80066b4:	e013      	b.n	80066de <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	015a      	lsls	r2, r3, #5
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	4413      	add	r3, r2
 80066be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c2:	461a      	mov	r2, r3
 80066c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80066c8:	6013      	str	r3, [r2, #0]
 80066ca:	e008      	b.n	80066de <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	015a      	lsls	r2, r3, #5
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d8:	461a      	mov	r2, r3
 80066da:	2300      	movs	r3, #0
 80066dc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	015a      	lsls	r2, r3, #5
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	4413      	add	r3, r2
 80066e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ea:	461a      	mov	r2, r3
 80066ec:	2300      	movs	r3, #0
 80066ee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066fc:	461a      	mov	r2, r3
 80066fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006702:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	3301      	adds	r3, #1
 8006708:	613b      	str	r3, [r7, #16]
 800670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	429a      	cmp	r2, r3
 8006710:	d3b7      	bcc.n	8006682 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006712:	2300      	movs	r3, #0
 8006714:	613b      	str	r3, [r7, #16]
 8006716:	e043      	b.n	80067a0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	4413      	add	r3, r2
 8006720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800672a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800672e:	d118      	bne.n	8006762 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d10a      	bne.n	800674c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	015a      	lsls	r2, r3, #5
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	4413      	add	r3, r2
 800673e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006742:	461a      	mov	r2, r3
 8006744:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006748:	6013      	str	r3, [r2, #0]
 800674a:	e013      	b.n	8006774 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	015a      	lsls	r2, r3, #5
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	4413      	add	r3, r2
 8006754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006758:	461a      	mov	r2, r3
 800675a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800675e:	6013      	str	r3, [r2, #0]
 8006760:	e008      	b.n	8006774 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	015a      	lsls	r2, r3, #5
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	4413      	add	r3, r2
 800676a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800676e:	461a      	mov	r2, r3
 8006770:	2300      	movs	r3, #0
 8006772:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	015a      	lsls	r2, r3, #5
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	4413      	add	r3, r2
 800677c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006780:	461a      	mov	r2, r3
 8006782:	2300      	movs	r3, #0
 8006784:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	015a      	lsls	r2, r3, #5
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	4413      	add	r3, r2
 800678e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006792:	461a      	mov	r2, r3
 8006794:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006798:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	3301      	adds	r3, #1
 800679e:	613b      	str	r3, [r7, #16]
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d3b7      	bcc.n	8006718 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067ba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80067c8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80067ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d105      	bne.n	80067dc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	699b      	ldr	r3, [r3, #24]
 80067d4:	f043 0210 	orr.w	r2, r3, #16
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	699a      	ldr	r2, [r3, #24]
 80067e0:	4b0f      	ldr	r3, [pc, #60]	; (8006820 <USB_DevInit+0x2c4>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80067e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d005      	beq.n	80067fa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	f043 0208 	orr.w	r2, r3, #8
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80067fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d107      	bne.n	8006810 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	699b      	ldr	r3, [r3, #24]
 8006804:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006808:	f043 0304 	orr.w	r3, r3, #4
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006810:	7dfb      	ldrb	r3, [r7, #23]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3718      	adds	r7, #24
 8006816:	46bd      	mov	sp, r7
 8006818:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800681c:	b004      	add	sp, #16
 800681e:	4770      	bx	lr
 8006820:	803c3800 	.word	0x803c3800

08006824 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800682e:	2300      	movs	r3, #0
 8006830:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	3301      	adds	r3, #1
 8006836:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	4a13      	ldr	r2, [pc, #76]	; (8006888 <USB_FlushTxFifo+0x64>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d901      	bls.n	8006844 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e01b      	b.n	800687c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	2b00      	cmp	r3, #0
 800684a:	daf2      	bge.n	8006832 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800684c:	2300      	movs	r3, #0
 800684e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	019b      	lsls	r3, r3, #6
 8006854:	f043 0220 	orr.w	r2, r3, #32
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	3301      	adds	r3, #1
 8006860:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	4a08      	ldr	r2, [pc, #32]	; (8006888 <USB_FlushTxFifo+0x64>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d901      	bls.n	800686e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e006      	b.n	800687c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	f003 0320 	and.w	r3, r3, #32
 8006876:	2b20      	cmp	r3, #32
 8006878:	d0f0      	beq.n	800685c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3714      	adds	r7, #20
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr
 8006888:	00030d40 	.word	0x00030d40

0800688c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006894:	2300      	movs	r3, #0
 8006896:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	3301      	adds	r3, #1
 800689c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	4a11      	ldr	r2, [pc, #68]	; (80068e8 <USB_FlushRxFifo+0x5c>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d901      	bls.n	80068aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e018      	b.n	80068dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	daf2      	bge.n	8006898 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80068b2:	2300      	movs	r3, #0
 80068b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2210      	movs	r2, #16
 80068ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	3301      	adds	r3, #1
 80068c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	4a08      	ldr	r2, [pc, #32]	; (80068e8 <USB_FlushRxFifo+0x5c>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d901      	bls.n	80068ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e006      	b.n	80068dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	f003 0310 	and.w	r3, r3, #16
 80068d6:	2b10      	cmp	r3, #16
 80068d8:	d0f0      	beq.n	80068bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3714      	adds	r7, #20
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr
 80068e8:	00030d40 	.word	0x00030d40

080068ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	460b      	mov	r3, r1
 80068f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	78fb      	ldrb	r3, [r7, #3]
 8006906:	68f9      	ldr	r1, [r7, #12]
 8006908:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800690c:	4313      	orrs	r3, r2
 800690e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3714      	adds	r7, #20
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr

0800691e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800691e:	b480      	push	{r7}
 8006920:	b085      	sub	sp, #20
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006938:	f023 0303 	bic.w	r3, r3, #3
 800693c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800694c:	f043 0302 	orr.w	r3, r3, #2
 8006950:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3714      	adds	r7, #20
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	695b      	ldr	r3, [r3, #20]
 800696c:	f003 0301 	and.w	r3, r3, #1
}
 8006970:	4618      	mov	r0, r3
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006984:	2300      	movs	r3, #0
 8006986:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	3301      	adds	r3, #1
 800698c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	4a13      	ldr	r2, [pc, #76]	; (80069e0 <USB_CoreReset+0x64>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d901      	bls.n	800699a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	e01b      	b.n	80069d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	daf2      	bge.n	8006988 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069a2:	2300      	movs	r3, #0
 80069a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	f043 0201 	orr.w	r2, r3, #1
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	3301      	adds	r3, #1
 80069b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	4a09      	ldr	r2, [pc, #36]	; (80069e0 <USB_CoreReset+0x64>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d901      	bls.n	80069c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80069c0:	2303      	movs	r3, #3
 80069c2:	e006      	b.n	80069d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	f003 0301 	and.w	r3, r3, #1
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d0f0      	beq.n	80069b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3714      	adds	r7, #20
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	00030d40 	.word	0x00030d40

080069e4 <atoi>:
 80069e4:	220a      	movs	r2, #10
 80069e6:	2100      	movs	r1, #0
 80069e8:	f000 b956 	b.w	8006c98 <strtol>

080069ec <__errno>:
 80069ec:	4b01      	ldr	r3, [pc, #4]	; (80069f4 <__errno+0x8>)
 80069ee:	6818      	ldr	r0, [r3, #0]
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	20000010 	.word	0x20000010

080069f8 <__libc_init_array>:
 80069f8:	b570      	push	{r4, r5, r6, lr}
 80069fa:	4d0d      	ldr	r5, [pc, #52]	; (8006a30 <__libc_init_array+0x38>)
 80069fc:	4c0d      	ldr	r4, [pc, #52]	; (8006a34 <__libc_init_array+0x3c>)
 80069fe:	1b64      	subs	r4, r4, r5
 8006a00:	10a4      	asrs	r4, r4, #2
 8006a02:	2600      	movs	r6, #0
 8006a04:	42a6      	cmp	r6, r4
 8006a06:	d109      	bne.n	8006a1c <__libc_init_array+0x24>
 8006a08:	4d0b      	ldr	r5, [pc, #44]	; (8006a38 <__libc_init_array+0x40>)
 8006a0a:	4c0c      	ldr	r4, [pc, #48]	; (8006a3c <__libc_init_array+0x44>)
 8006a0c:	f001 f8c4 	bl	8007b98 <_init>
 8006a10:	1b64      	subs	r4, r4, r5
 8006a12:	10a4      	asrs	r4, r4, #2
 8006a14:	2600      	movs	r6, #0
 8006a16:	42a6      	cmp	r6, r4
 8006a18:	d105      	bne.n	8006a26 <__libc_init_array+0x2e>
 8006a1a:	bd70      	pop	{r4, r5, r6, pc}
 8006a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a20:	4798      	blx	r3
 8006a22:	3601      	adds	r6, #1
 8006a24:	e7ee      	b.n	8006a04 <__libc_init_array+0xc>
 8006a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a2a:	4798      	blx	r3
 8006a2c:	3601      	adds	r6, #1
 8006a2e:	e7f2      	b.n	8006a16 <__libc_init_array+0x1e>
 8006a30:	08007e84 	.word	0x08007e84
 8006a34:	08007e84 	.word	0x08007e84
 8006a38:	08007e84 	.word	0x08007e84
 8006a3c:	08007e88 	.word	0x08007e88

08006a40 <memset>:
 8006a40:	4402      	add	r2, r0
 8006a42:	4603      	mov	r3, r0
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d100      	bne.n	8006a4a <memset+0xa>
 8006a48:	4770      	bx	lr
 8006a4a:	f803 1b01 	strb.w	r1, [r3], #1
 8006a4e:	e7f9      	b.n	8006a44 <memset+0x4>

08006a50 <iprintf>:
 8006a50:	b40f      	push	{r0, r1, r2, r3}
 8006a52:	4b0a      	ldr	r3, [pc, #40]	; (8006a7c <iprintf+0x2c>)
 8006a54:	b513      	push	{r0, r1, r4, lr}
 8006a56:	681c      	ldr	r4, [r3, #0]
 8006a58:	b124      	cbz	r4, 8006a64 <iprintf+0x14>
 8006a5a:	69a3      	ldr	r3, [r4, #24]
 8006a5c:	b913      	cbnz	r3, 8006a64 <iprintf+0x14>
 8006a5e:	4620      	mov	r0, r4
 8006a60:	f000 fafe 	bl	8007060 <__sinit>
 8006a64:	ab05      	add	r3, sp, #20
 8006a66:	9a04      	ldr	r2, [sp, #16]
 8006a68:	68a1      	ldr	r1, [r4, #8]
 8006a6a:	9301      	str	r3, [sp, #4]
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	f000 fd07 	bl	8007480 <_vfiprintf_r>
 8006a72:	b002      	add	sp, #8
 8006a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a78:	b004      	add	sp, #16
 8006a7a:	4770      	bx	lr
 8006a7c:	20000010 	.word	0x20000010

08006a80 <_puts_r>:
 8006a80:	b570      	push	{r4, r5, r6, lr}
 8006a82:	460e      	mov	r6, r1
 8006a84:	4605      	mov	r5, r0
 8006a86:	b118      	cbz	r0, 8006a90 <_puts_r+0x10>
 8006a88:	6983      	ldr	r3, [r0, #24]
 8006a8a:	b90b      	cbnz	r3, 8006a90 <_puts_r+0x10>
 8006a8c:	f000 fae8 	bl	8007060 <__sinit>
 8006a90:	69ab      	ldr	r3, [r5, #24]
 8006a92:	68ac      	ldr	r4, [r5, #8]
 8006a94:	b913      	cbnz	r3, 8006a9c <_puts_r+0x1c>
 8006a96:	4628      	mov	r0, r5
 8006a98:	f000 fae2 	bl	8007060 <__sinit>
 8006a9c:	4b2c      	ldr	r3, [pc, #176]	; (8006b50 <_puts_r+0xd0>)
 8006a9e:	429c      	cmp	r4, r3
 8006aa0:	d120      	bne.n	8006ae4 <_puts_r+0x64>
 8006aa2:	686c      	ldr	r4, [r5, #4]
 8006aa4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006aa6:	07db      	lsls	r3, r3, #31
 8006aa8:	d405      	bmi.n	8006ab6 <_puts_r+0x36>
 8006aaa:	89a3      	ldrh	r3, [r4, #12]
 8006aac:	0598      	lsls	r0, r3, #22
 8006aae:	d402      	bmi.n	8006ab6 <_puts_r+0x36>
 8006ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ab2:	f000 fb73 	bl	800719c <__retarget_lock_acquire_recursive>
 8006ab6:	89a3      	ldrh	r3, [r4, #12]
 8006ab8:	0719      	lsls	r1, r3, #28
 8006aba:	d51d      	bpl.n	8006af8 <_puts_r+0x78>
 8006abc:	6923      	ldr	r3, [r4, #16]
 8006abe:	b1db      	cbz	r3, 8006af8 <_puts_r+0x78>
 8006ac0:	3e01      	subs	r6, #1
 8006ac2:	68a3      	ldr	r3, [r4, #8]
 8006ac4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	60a3      	str	r3, [r4, #8]
 8006acc:	bb39      	cbnz	r1, 8006b1e <_puts_r+0x9e>
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	da38      	bge.n	8006b44 <_puts_r+0xc4>
 8006ad2:	4622      	mov	r2, r4
 8006ad4:	210a      	movs	r1, #10
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	f000 f8e8 	bl	8006cac <__swbuf_r>
 8006adc:	3001      	adds	r0, #1
 8006ade:	d011      	beq.n	8006b04 <_puts_r+0x84>
 8006ae0:	250a      	movs	r5, #10
 8006ae2:	e011      	b.n	8006b08 <_puts_r+0x88>
 8006ae4:	4b1b      	ldr	r3, [pc, #108]	; (8006b54 <_puts_r+0xd4>)
 8006ae6:	429c      	cmp	r4, r3
 8006ae8:	d101      	bne.n	8006aee <_puts_r+0x6e>
 8006aea:	68ac      	ldr	r4, [r5, #8]
 8006aec:	e7da      	b.n	8006aa4 <_puts_r+0x24>
 8006aee:	4b1a      	ldr	r3, [pc, #104]	; (8006b58 <_puts_r+0xd8>)
 8006af0:	429c      	cmp	r4, r3
 8006af2:	bf08      	it	eq
 8006af4:	68ec      	ldreq	r4, [r5, #12]
 8006af6:	e7d5      	b.n	8006aa4 <_puts_r+0x24>
 8006af8:	4621      	mov	r1, r4
 8006afa:	4628      	mov	r0, r5
 8006afc:	f000 f928 	bl	8006d50 <__swsetup_r>
 8006b00:	2800      	cmp	r0, #0
 8006b02:	d0dd      	beq.n	8006ac0 <_puts_r+0x40>
 8006b04:	f04f 35ff 	mov.w	r5, #4294967295
 8006b08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b0a:	07da      	lsls	r2, r3, #31
 8006b0c:	d405      	bmi.n	8006b1a <_puts_r+0x9a>
 8006b0e:	89a3      	ldrh	r3, [r4, #12]
 8006b10:	059b      	lsls	r3, r3, #22
 8006b12:	d402      	bmi.n	8006b1a <_puts_r+0x9a>
 8006b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b16:	f000 fb42 	bl	800719e <__retarget_lock_release_recursive>
 8006b1a:	4628      	mov	r0, r5
 8006b1c:	bd70      	pop	{r4, r5, r6, pc}
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	da04      	bge.n	8006b2c <_puts_r+0xac>
 8006b22:	69a2      	ldr	r2, [r4, #24]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	dc06      	bgt.n	8006b36 <_puts_r+0xb6>
 8006b28:	290a      	cmp	r1, #10
 8006b2a:	d004      	beq.n	8006b36 <_puts_r+0xb6>
 8006b2c:	6823      	ldr	r3, [r4, #0]
 8006b2e:	1c5a      	adds	r2, r3, #1
 8006b30:	6022      	str	r2, [r4, #0]
 8006b32:	7019      	strb	r1, [r3, #0]
 8006b34:	e7c5      	b.n	8006ac2 <_puts_r+0x42>
 8006b36:	4622      	mov	r2, r4
 8006b38:	4628      	mov	r0, r5
 8006b3a:	f000 f8b7 	bl	8006cac <__swbuf_r>
 8006b3e:	3001      	adds	r0, #1
 8006b40:	d1bf      	bne.n	8006ac2 <_puts_r+0x42>
 8006b42:	e7df      	b.n	8006b04 <_puts_r+0x84>
 8006b44:	6823      	ldr	r3, [r4, #0]
 8006b46:	250a      	movs	r5, #10
 8006b48:	1c5a      	adds	r2, r3, #1
 8006b4a:	6022      	str	r2, [r4, #0]
 8006b4c:	701d      	strb	r5, [r3, #0]
 8006b4e:	e7db      	b.n	8006b08 <_puts_r+0x88>
 8006b50:	08007e08 	.word	0x08007e08
 8006b54:	08007e28 	.word	0x08007e28
 8006b58:	08007de8 	.word	0x08007de8

08006b5c <puts>:
 8006b5c:	4b02      	ldr	r3, [pc, #8]	; (8006b68 <puts+0xc>)
 8006b5e:	4601      	mov	r1, r0
 8006b60:	6818      	ldr	r0, [r3, #0]
 8006b62:	f7ff bf8d 	b.w	8006a80 <_puts_r>
 8006b66:	bf00      	nop
 8006b68:	20000010 	.word	0x20000010

08006b6c <strncmp>:
 8006b6c:	b510      	push	{r4, lr}
 8006b6e:	b17a      	cbz	r2, 8006b90 <strncmp+0x24>
 8006b70:	4603      	mov	r3, r0
 8006b72:	3901      	subs	r1, #1
 8006b74:	1884      	adds	r4, r0, r2
 8006b76:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006b7a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006b7e:	4290      	cmp	r0, r2
 8006b80:	d101      	bne.n	8006b86 <strncmp+0x1a>
 8006b82:	42a3      	cmp	r3, r4
 8006b84:	d101      	bne.n	8006b8a <strncmp+0x1e>
 8006b86:	1a80      	subs	r0, r0, r2
 8006b88:	bd10      	pop	{r4, pc}
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	d1f3      	bne.n	8006b76 <strncmp+0xa>
 8006b8e:	e7fa      	b.n	8006b86 <strncmp+0x1a>
 8006b90:	4610      	mov	r0, r2
 8006b92:	e7f9      	b.n	8006b88 <strncmp+0x1c>

08006b94 <_strtol_l.constprop.0>:
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b9a:	d001      	beq.n	8006ba0 <_strtol_l.constprop.0+0xc>
 8006b9c:	2b24      	cmp	r3, #36	; 0x24
 8006b9e:	d906      	bls.n	8006bae <_strtol_l.constprop.0+0x1a>
 8006ba0:	f7ff ff24 	bl	80069ec <__errno>
 8006ba4:	2316      	movs	r3, #22
 8006ba6:	6003      	str	r3, [r0, #0]
 8006ba8:	2000      	movs	r0, #0
 8006baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bae:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006c94 <_strtol_l.constprop.0+0x100>
 8006bb2:	460d      	mov	r5, r1
 8006bb4:	462e      	mov	r6, r5
 8006bb6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006bba:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006bbe:	f017 0708 	ands.w	r7, r7, #8
 8006bc2:	d1f7      	bne.n	8006bb4 <_strtol_l.constprop.0+0x20>
 8006bc4:	2c2d      	cmp	r4, #45	; 0x2d
 8006bc6:	d132      	bne.n	8006c2e <_strtol_l.constprop.0+0x9a>
 8006bc8:	782c      	ldrb	r4, [r5, #0]
 8006bca:	2701      	movs	r7, #1
 8006bcc:	1cb5      	adds	r5, r6, #2
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d05b      	beq.n	8006c8a <_strtol_l.constprop.0+0xf6>
 8006bd2:	2b10      	cmp	r3, #16
 8006bd4:	d109      	bne.n	8006bea <_strtol_l.constprop.0+0x56>
 8006bd6:	2c30      	cmp	r4, #48	; 0x30
 8006bd8:	d107      	bne.n	8006bea <_strtol_l.constprop.0+0x56>
 8006bda:	782c      	ldrb	r4, [r5, #0]
 8006bdc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006be0:	2c58      	cmp	r4, #88	; 0x58
 8006be2:	d14d      	bne.n	8006c80 <_strtol_l.constprop.0+0xec>
 8006be4:	786c      	ldrb	r4, [r5, #1]
 8006be6:	2310      	movs	r3, #16
 8006be8:	3502      	adds	r5, #2
 8006bea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006bee:	f108 38ff 	add.w	r8, r8, #4294967295
 8006bf2:	f04f 0c00 	mov.w	ip, #0
 8006bf6:	fbb8 f9f3 	udiv	r9, r8, r3
 8006bfa:	4666      	mov	r6, ip
 8006bfc:	fb03 8a19 	mls	sl, r3, r9, r8
 8006c00:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006c04:	f1be 0f09 	cmp.w	lr, #9
 8006c08:	d816      	bhi.n	8006c38 <_strtol_l.constprop.0+0xa4>
 8006c0a:	4674      	mov	r4, lr
 8006c0c:	42a3      	cmp	r3, r4
 8006c0e:	dd24      	ble.n	8006c5a <_strtol_l.constprop.0+0xc6>
 8006c10:	f1bc 0f00 	cmp.w	ip, #0
 8006c14:	db1e      	blt.n	8006c54 <_strtol_l.constprop.0+0xc0>
 8006c16:	45b1      	cmp	r9, r6
 8006c18:	d31c      	bcc.n	8006c54 <_strtol_l.constprop.0+0xc0>
 8006c1a:	d101      	bne.n	8006c20 <_strtol_l.constprop.0+0x8c>
 8006c1c:	45a2      	cmp	sl, r4
 8006c1e:	db19      	blt.n	8006c54 <_strtol_l.constprop.0+0xc0>
 8006c20:	fb06 4603 	mla	r6, r6, r3, r4
 8006c24:	f04f 0c01 	mov.w	ip, #1
 8006c28:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c2c:	e7e8      	b.n	8006c00 <_strtol_l.constprop.0+0x6c>
 8006c2e:	2c2b      	cmp	r4, #43	; 0x2b
 8006c30:	bf04      	itt	eq
 8006c32:	782c      	ldrbeq	r4, [r5, #0]
 8006c34:	1cb5      	addeq	r5, r6, #2
 8006c36:	e7ca      	b.n	8006bce <_strtol_l.constprop.0+0x3a>
 8006c38:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006c3c:	f1be 0f19 	cmp.w	lr, #25
 8006c40:	d801      	bhi.n	8006c46 <_strtol_l.constprop.0+0xb2>
 8006c42:	3c37      	subs	r4, #55	; 0x37
 8006c44:	e7e2      	b.n	8006c0c <_strtol_l.constprop.0+0x78>
 8006c46:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006c4a:	f1be 0f19 	cmp.w	lr, #25
 8006c4e:	d804      	bhi.n	8006c5a <_strtol_l.constprop.0+0xc6>
 8006c50:	3c57      	subs	r4, #87	; 0x57
 8006c52:	e7db      	b.n	8006c0c <_strtol_l.constprop.0+0x78>
 8006c54:	f04f 3cff 	mov.w	ip, #4294967295
 8006c58:	e7e6      	b.n	8006c28 <_strtol_l.constprop.0+0x94>
 8006c5a:	f1bc 0f00 	cmp.w	ip, #0
 8006c5e:	da05      	bge.n	8006c6c <_strtol_l.constprop.0+0xd8>
 8006c60:	2322      	movs	r3, #34	; 0x22
 8006c62:	6003      	str	r3, [r0, #0]
 8006c64:	4646      	mov	r6, r8
 8006c66:	b942      	cbnz	r2, 8006c7a <_strtol_l.constprop.0+0xe6>
 8006c68:	4630      	mov	r0, r6
 8006c6a:	e79e      	b.n	8006baa <_strtol_l.constprop.0+0x16>
 8006c6c:	b107      	cbz	r7, 8006c70 <_strtol_l.constprop.0+0xdc>
 8006c6e:	4276      	negs	r6, r6
 8006c70:	2a00      	cmp	r2, #0
 8006c72:	d0f9      	beq.n	8006c68 <_strtol_l.constprop.0+0xd4>
 8006c74:	f1bc 0f00 	cmp.w	ip, #0
 8006c78:	d000      	beq.n	8006c7c <_strtol_l.constprop.0+0xe8>
 8006c7a:	1e69      	subs	r1, r5, #1
 8006c7c:	6011      	str	r1, [r2, #0]
 8006c7e:	e7f3      	b.n	8006c68 <_strtol_l.constprop.0+0xd4>
 8006c80:	2430      	movs	r4, #48	; 0x30
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1b1      	bne.n	8006bea <_strtol_l.constprop.0+0x56>
 8006c86:	2308      	movs	r3, #8
 8006c88:	e7af      	b.n	8006bea <_strtol_l.constprop.0+0x56>
 8006c8a:	2c30      	cmp	r4, #48	; 0x30
 8006c8c:	d0a5      	beq.n	8006bda <_strtol_l.constprop.0+0x46>
 8006c8e:	230a      	movs	r3, #10
 8006c90:	e7ab      	b.n	8006bea <_strtol_l.constprop.0+0x56>
 8006c92:	bf00      	nop
 8006c94:	08007ce5 	.word	0x08007ce5

08006c98 <strtol>:
 8006c98:	4613      	mov	r3, r2
 8006c9a:	460a      	mov	r2, r1
 8006c9c:	4601      	mov	r1, r0
 8006c9e:	4802      	ldr	r0, [pc, #8]	; (8006ca8 <strtol+0x10>)
 8006ca0:	6800      	ldr	r0, [r0, #0]
 8006ca2:	f7ff bf77 	b.w	8006b94 <_strtol_l.constprop.0>
 8006ca6:	bf00      	nop
 8006ca8:	20000010 	.word	0x20000010

08006cac <__swbuf_r>:
 8006cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cae:	460e      	mov	r6, r1
 8006cb0:	4614      	mov	r4, r2
 8006cb2:	4605      	mov	r5, r0
 8006cb4:	b118      	cbz	r0, 8006cbe <__swbuf_r+0x12>
 8006cb6:	6983      	ldr	r3, [r0, #24]
 8006cb8:	b90b      	cbnz	r3, 8006cbe <__swbuf_r+0x12>
 8006cba:	f000 f9d1 	bl	8007060 <__sinit>
 8006cbe:	4b21      	ldr	r3, [pc, #132]	; (8006d44 <__swbuf_r+0x98>)
 8006cc0:	429c      	cmp	r4, r3
 8006cc2:	d12b      	bne.n	8006d1c <__swbuf_r+0x70>
 8006cc4:	686c      	ldr	r4, [r5, #4]
 8006cc6:	69a3      	ldr	r3, [r4, #24]
 8006cc8:	60a3      	str	r3, [r4, #8]
 8006cca:	89a3      	ldrh	r3, [r4, #12]
 8006ccc:	071a      	lsls	r2, r3, #28
 8006cce:	d52f      	bpl.n	8006d30 <__swbuf_r+0x84>
 8006cd0:	6923      	ldr	r3, [r4, #16]
 8006cd2:	b36b      	cbz	r3, 8006d30 <__swbuf_r+0x84>
 8006cd4:	6923      	ldr	r3, [r4, #16]
 8006cd6:	6820      	ldr	r0, [r4, #0]
 8006cd8:	1ac0      	subs	r0, r0, r3
 8006cda:	6963      	ldr	r3, [r4, #20]
 8006cdc:	b2f6      	uxtb	r6, r6
 8006cde:	4283      	cmp	r3, r0
 8006ce0:	4637      	mov	r7, r6
 8006ce2:	dc04      	bgt.n	8006cee <__swbuf_r+0x42>
 8006ce4:	4621      	mov	r1, r4
 8006ce6:	4628      	mov	r0, r5
 8006ce8:	f000 f926 	bl	8006f38 <_fflush_r>
 8006cec:	bb30      	cbnz	r0, 8006d3c <__swbuf_r+0x90>
 8006cee:	68a3      	ldr	r3, [r4, #8]
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	60a3      	str	r3, [r4, #8]
 8006cf4:	6823      	ldr	r3, [r4, #0]
 8006cf6:	1c5a      	adds	r2, r3, #1
 8006cf8:	6022      	str	r2, [r4, #0]
 8006cfa:	701e      	strb	r6, [r3, #0]
 8006cfc:	6963      	ldr	r3, [r4, #20]
 8006cfe:	3001      	adds	r0, #1
 8006d00:	4283      	cmp	r3, r0
 8006d02:	d004      	beq.n	8006d0e <__swbuf_r+0x62>
 8006d04:	89a3      	ldrh	r3, [r4, #12]
 8006d06:	07db      	lsls	r3, r3, #31
 8006d08:	d506      	bpl.n	8006d18 <__swbuf_r+0x6c>
 8006d0a:	2e0a      	cmp	r6, #10
 8006d0c:	d104      	bne.n	8006d18 <__swbuf_r+0x6c>
 8006d0e:	4621      	mov	r1, r4
 8006d10:	4628      	mov	r0, r5
 8006d12:	f000 f911 	bl	8006f38 <_fflush_r>
 8006d16:	b988      	cbnz	r0, 8006d3c <__swbuf_r+0x90>
 8006d18:	4638      	mov	r0, r7
 8006d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d1c:	4b0a      	ldr	r3, [pc, #40]	; (8006d48 <__swbuf_r+0x9c>)
 8006d1e:	429c      	cmp	r4, r3
 8006d20:	d101      	bne.n	8006d26 <__swbuf_r+0x7a>
 8006d22:	68ac      	ldr	r4, [r5, #8]
 8006d24:	e7cf      	b.n	8006cc6 <__swbuf_r+0x1a>
 8006d26:	4b09      	ldr	r3, [pc, #36]	; (8006d4c <__swbuf_r+0xa0>)
 8006d28:	429c      	cmp	r4, r3
 8006d2a:	bf08      	it	eq
 8006d2c:	68ec      	ldreq	r4, [r5, #12]
 8006d2e:	e7ca      	b.n	8006cc6 <__swbuf_r+0x1a>
 8006d30:	4621      	mov	r1, r4
 8006d32:	4628      	mov	r0, r5
 8006d34:	f000 f80c 	bl	8006d50 <__swsetup_r>
 8006d38:	2800      	cmp	r0, #0
 8006d3a:	d0cb      	beq.n	8006cd4 <__swbuf_r+0x28>
 8006d3c:	f04f 37ff 	mov.w	r7, #4294967295
 8006d40:	e7ea      	b.n	8006d18 <__swbuf_r+0x6c>
 8006d42:	bf00      	nop
 8006d44:	08007e08 	.word	0x08007e08
 8006d48:	08007e28 	.word	0x08007e28
 8006d4c:	08007de8 	.word	0x08007de8

08006d50 <__swsetup_r>:
 8006d50:	4b32      	ldr	r3, [pc, #200]	; (8006e1c <__swsetup_r+0xcc>)
 8006d52:	b570      	push	{r4, r5, r6, lr}
 8006d54:	681d      	ldr	r5, [r3, #0]
 8006d56:	4606      	mov	r6, r0
 8006d58:	460c      	mov	r4, r1
 8006d5a:	b125      	cbz	r5, 8006d66 <__swsetup_r+0x16>
 8006d5c:	69ab      	ldr	r3, [r5, #24]
 8006d5e:	b913      	cbnz	r3, 8006d66 <__swsetup_r+0x16>
 8006d60:	4628      	mov	r0, r5
 8006d62:	f000 f97d 	bl	8007060 <__sinit>
 8006d66:	4b2e      	ldr	r3, [pc, #184]	; (8006e20 <__swsetup_r+0xd0>)
 8006d68:	429c      	cmp	r4, r3
 8006d6a:	d10f      	bne.n	8006d8c <__swsetup_r+0x3c>
 8006d6c:	686c      	ldr	r4, [r5, #4]
 8006d6e:	89a3      	ldrh	r3, [r4, #12]
 8006d70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d74:	0719      	lsls	r1, r3, #28
 8006d76:	d42c      	bmi.n	8006dd2 <__swsetup_r+0x82>
 8006d78:	06dd      	lsls	r5, r3, #27
 8006d7a:	d411      	bmi.n	8006da0 <__swsetup_r+0x50>
 8006d7c:	2309      	movs	r3, #9
 8006d7e:	6033      	str	r3, [r6, #0]
 8006d80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d84:	81a3      	strh	r3, [r4, #12]
 8006d86:	f04f 30ff 	mov.w	r0, #4294967295
 8006d8a:	e03e      	b.n	8006e0a <__swsetup_r+0xba>
 8006d8c:	4b25      	ldr	r3, [pc, #148]	; (8006e24 <__swsetup_r+0xd4>)
 8006d8e:	429c      	cmp	r4, r3
 8006d90:	d101      	bne.n	8006d96 <__swsetup_r+0x46>
 8006d92:	68ac      	ldr	r4, [r5, #8]
 8006d94:	e7eb      	b.n	8006d6e <__swsetup_r+0x1e>
 8006d96:	4b24      	ldr	r3, [pc, #144]	; (8006e28 <__swsetup_r+0xd8>)
 8006d98:	429c      	cmp	r4, r3
 8006d9a:	bf08      	it	eq
 8006d9c:	68ec      	ldreq	r4, [r5, #12]
 8006d9e:	e7e6      	b.n	8006d6e <__swsetup_r+0x1e>
 8006da0:	0758      	lsls	r0, r3, #29
 8006da2:	d512      	bpl.n	8006dca <__swsetup_r+0x7a>
 8006da4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006da6:	b141      	cbz	r1, 8006dba <__swsetup_r+0x6a>
 8006da8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006dac:	4299      	cmp	r1, r3
 8006dae:	d002      	beq.n	8006db6 <__swsetup_r+0x66>
 8006db0:	4630      	mov	r0, r6
 8006db2:	f000 fa5b 	bl	800726c <_free_r>
 8006db6:	2300      	movs	r3, #0
 8006db8:	6363      	str	r3, [r4, #52]	; 0x34
 8006dba:	89a3      	ldrh	r3, [r4, #12]
 8006dbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006dc0:	81a3      	strh	r3, [r4, #12]
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	6063      	str	r3, [r4, #4]
 8006dc6:	6923      	ldr	r3, [r4, #16]
 8006dc8:	6023      	str	r3, [r4, #0]
 8006dca:	89a3      	ldrh	r3, [r4, #12]
 8006dcc:	f043 0308 	orr.w	r3, r3, #8
 8006dd0:	81a3      	strh	r3, [r4, #12]
 8006dd2:	6923      	ldr	r3, [r4, #16]
 8006dd4:	b94b      	cbnz	r3, 8006dea <__swsetup_r+0x9a>
 8006dd6:	89a3      	ldrh	r3, [r4, #12]
 8006dd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006ddc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006de0:	d003      	beq.n	8006dea <__swsetup_r+0x9a>
 8006de2:	4621      	mov	r1, r4
 8006de4:	4630      	mov	r0, r6
 8006de6:	f000 fa01 	bl	80071ec <__smakebuf_r>
 8006dea:	89a0      	ldrh	r0, [r4, #12]
 8006dec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006df0:	f010 0301 	ands.w	r3, r0, #1
 8006df4:	d00a      	beq.n	8006e0c <__swsetup_r+0xbc>
 8006df6:	2300      	movs	r3, #0
 8006df8:	60a3      	str	r3, [r4, #8]
 8006dfa:	6963      	ldr	r3, [r4, #20]
 8006dfc:	425b      	negs	r3, r3
 8006dfe:	61a3      	str	r3, [r4, #24]
 8006e00:	6923      	ldr	r3, [r4, #16]
 8006e02:	b943      	cbnz	r3, 8006e16 <__swsetup_r+0xc6>
 8006e04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006e08:	d1ba      	bne.n	8006d80 <__swsetup_r+0x30>
 8006e0a:	bd70      	pop	{r4, r5, r6, pc}
 8006e0c:	0781      	lsls	r1, r0, #30
 8006e0e:	bf58      	it	pl
 8006e10:	6963      	ldrpl	r3, [r4, #20]
 8006e12:	60a3      	str	r3, [r4, #8]
 8006e14:	e7f4      	b.n	8006e00 <__swsetup_r+0xb0>
 8006e16:	2000      	movs	r0, #0
 8006e18:	e7f7      	b.n	8006e0a <__swsetup_r+0xba>
 8006e1a:	bf00      	nop
 8006e1c:	20000010 	.word	0x20000010
 8006e20:	08007e08 	.word	0x08007e08
 8006e24:	08007e28 	.word	0x08007e28
 8006e28:	08007de8 	.word	0x08007de8

08006e2c <__sflush_r>:
 8006e2c:	898a      	ldrh	r2, [r1, #12]
 8006e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e32:	4605      	mov	r5, r0
 8006e34:	0710      	lsls	r0, r2, #28
 8006e36:	460c      	mov	r4, r1
 8006e38:	d458      	bmi.n	8006eec <__sflush_r+0xc0>
 8006e3a:	684b      	ldr	r3, [r1, #4]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	dc05      	bgt.n	8006e4c <__sflush_r+0x20>
 8006e40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	dc02      	bgt.n	8006e4c <__sflush_r+0x20>
 8006e46:	2000      	movs	r0, #0
 8006e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e4e:	2e00      	cmp	r6, #0
 8006e50:	d0f9      	beq.n	8006e46 <__sflush_r+0x1a>
 8006e52:	2300      	movs	r3, #0
 8006e54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e58:	682f      	ldr	r7, [r5, #0]
 8006e5a:	602b      	str	r3, [r5, #0]
 8006e5c:	d032      	beq.n	8006ec4 <__sflush_r+0x98>
 8006e5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e60:	89a3      	ldrh	r3, [r4, #12]
 8006e62:	075a      	lsls	r2, r3, #29
 8006e64:	d505      	bpl.n	8006e72 <__sflush_r+0x46>
 8006e66:	6863      	ldr	r3, [r4, #4]
 8006e68:	1ac0      	subs	r0, r0, r3
 8006e6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e6c:	b10b      	cbz	r3, 8006e72 <__sflush_r+0x46>
 8006e6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e70:	1ac0      	subs	r0, r0, r3
 8006e72:	2300      	movs	r3, #0
 8006e74:	4602      	mov	r2, r0
 8006e76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e78:	6a21      	ldr	r1, [r4, #32]
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	47b0      	blx	r6
 8006e7e:	1c43      	adds	r3, r0, #1
 8006e80:	89a3      	ldrh	r3, [r4, #12]
 8006e82:	d106      	bne.n	8006e92 <__sflush_r+0x66>
 8006e84:	6829      	ldr	r1, [r5, #0]
 8006e86:	291d      	cmp	r1, #29
 8006e88:	d82c      	bhi.n	8006ee4 <__sflush_r+0xb8>
 8006e8a:	4a2a      	ldr	r2, [pc, #168]	; (8006f34 <__sflush_r+0x108>)
 8006e8c:	40ca      	lsrs	r2, r1
 8006e8e:	07d6      	lsls	r6, r2, #31
 8006e90:	d528      	bpl.n	8006ee4 <__sflush_r+0xb8>
 8006e92:	2200      	movs	r2, #0
 8006e94:	6062      	str	r2, [r4, #4]
 8006e96:	04d9      	lsls	r1, r3, #19
 8006e98:	6922      	ldr	r2, [r4, #16]
 8006e9a:	6022      	str	r2, [r4, #0]
 8006e9c:	d504      	bpl.n	8006ea8 <__sflush_r+0x7c>
 8006e9e:	1c42      	adds	r2, r0, #1
 8006ea0:	d101      	bne.n	8006ea6 <__sflush_r+0x7a>
 8006ea2:	682b      	ldr	r3, [r5, #0]
 8006ea4:	b903      	cbnz	r3, 8006ea8 <__sflush_r+0x7c>
 8006ea6:	6560      	str	r0, [r4, #84]	; 0x54
 8006ea8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006eaa:	602f      	str	r7, [r5, #0]
 8006eac:	2900      	cmp	r1, #0
 8006eae:	d0ca      	beq.n	8006e46 <__sflush_r+0x1a>
 8006eb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006eb4:	4299      	cmp	r1, r3
 8006eb6:	d002      	beq.n	8006ebe <__sflush_r+0x92>
 8006eb8:	4628      	mov	r0, r5
 8006eba:	f000 f9d7 	bl	800726c <_free_r>
 8006ebe:	2000      	movs	r0, #0
 8006ec0:	6360      	str	r0, [r4, #52]	; 0x34
 8006ec2:	e7c1      	b.n	8006e48 <__sflush_r+0x1c>
 8006ec4:	6a21      	ldr	r1, [r4, #32]
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	4628      	mov	r0, r5
 8006eca:	47b0      	blx	r6
 8006ecc:	1c41      	adds	r1, r0, #1
 8006ece:	d1c7      	bne.n	8006e60 <__sflush_r+0x34>
 8006ed0:	682b      	ldr	r3, [r5, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d0c4      	beq.n	8006e60 <__sflush_r+0x34>
 8006ed6:	2b1d      	cmp	r3, #29
 8006ed8:	d001      	beq.n	8006ede <__sflush_r+0xb2>
 8006eda:	2b16      	cmp	r3, #22
 8006edc:	d101      	bne.n	8006ee2 <__sflush_r+0xb6>
 8006ede:	602f      	str	r7, [r5, #0]
 8006ee0:	e7b1      	b.n	8006e46 <__sflush_r+0x1a>
 8006ee2:	89a3      	ldrh	r3, [r4, #12]
 8006ee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ee8:	81a3      	strh	r3, [r4, #12]
 8006eea:	e7ad      	b.n	8006e48 <__sflush_r+0x1c>
 8006eec:	690f      	ldr	r7, [r1, #16]
 8006eee:	2f00      	cmp	r7, #0
 8006ef0:	d0a9      	beq.n	8006e46 <__sflush_r+0x1a>
 8006ef2:	0793      	lsls	r3, r2, #30
 8006ef4:	680e      	ldr	r6, [r1, #0]
 8006ef6:	bf08      	it	eq
 8006ef8:	694b      	ldreq	r3, [r1, #20]
 8006efa:	600f      	str	r7, [r1, #0]
 8006efc:	bf18      	it	ne
 8006efe:	2300      	movne	r3, #0
 8006f00:	eba6 0807 	sub.w	r8, r6, r7
 8006f04:	608b      	str	r3, [r1, #8]
 8006f06:	f1b8 0f00 	cmp.w	r8, #0
 8006f0a:	dd9c      	ble.n	8006e46 <__sflush_r+0x1a>
 8006f0c:	6a21      	ldr	r1, [r4, #32]
 8006f0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006f10:	4643      	mov	r3, r8
 8006f12:	463a      	mov	r2, r7
 8006f14:	4628      	mov	r0, r5
 8006f16:	47b0      	blx	r6
 8006f18:	2800      	cmp	r0, #0
 8006f1a:	dc06      	bgt.n	8006f2a <__sflush_r+0xfe>
 8006f1c:	89a3      	ldrh	r3, [r4, #12]
 8006f1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f22:	81a3      	strh	r3, [r4, #12]
 8006f24:	f04f 30ff 	mov.w	r0, #4294967295
 8006f28:	e78e      	b.n	8006e48 <__sflush_r+0x1c>
 8006f2a:	4407      	add	r7, r0
 8006f2c:	eba8 0800 	sub.w	r8, r8, r0
 8006f30:	e7e9      	b.n	8006f06 <__sflush_r+0xda>
 8006f32:	bf00      	nop
 8006f34:	20400001 	.word	0x20400001

08006f38 <_fflush_r>:
 8006f38:	b538      	push	{r3, r4, r5, lr}
 8006f3a:	690b      	ldr	r3, [r1, #16]
 8006f3c:	4605      	mov	r5, r0
 8006f3e:	460c      	mov	r4, r1
 8006f40:	b913      	cbnz	r3, 8006f48 <_fflush_r+0x10>
 8006f42:	2500      	movs	r5, #0
 8006f44:	4628      	mov	r0, r5
 8006f46:	bd38      	pop	{r3, r4, r5, pc}
 8006f48:	b118      	cbz	r0, 8006f52 <_fflush_r+0x1a>
 8006f4a:	6983      	ldr	r3, [r0, #24]
 8006f4c:	b90b      	cbnz	r3, 8006f52 <_fflush_r+0x1a>
 8006f4e:	f000 f887 	bl	8007060 <__sinit>
 8006f52:	4b14      	ldr	r3, [pc, #80]	; (8006fa4 <_fflush_r+0x6c>)
 8006f54:	429c      	cmp	r4, r3
 8006f56:	d11b      	bne.n	8006f90 <_fflush_r+0x58>
 8006f58:	686c      	ldr	r4, [r5, #4]
 8006f5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d0ef      	beq.n	8006f42 <_fflush_r+0xa>
 8006f62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f64:	07d0      	lsls	r0, r2, #31
 8006f66:	d404      	bmi.n	8006f72 <_fflush_r+0x3a>
 8006f68:	0599      	lsls	r1, r3, #22
 8006f6a:	d402      	bmi.n	8006f72 <_fflush_r+0x3a>
 8006f6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f6e:	f000 f915 	bl	800719c <__retarget_lock_acquire_recursive>
 8006f72:	4628      	mov	r0, r5
 8006f74:	4621      	mov	r1, r4
 8006f76:	f7ff ff59 	bl	8006e2c <__sflush_r>
 8006f7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f7c:	07da      	lsls	r2, r3, #31
 8006f7e:	4605      	mov	r5, r0
 8006f80:	d4e0      	bmi.n	8006f44 <_fflush_r+0xc>
 8006f82:	89a3      	ldrh	r3, [r4, #12]
 8006f84:	059b      	lsls	r3, r3, #22
 8006f86:	d4dd      	bmi.n	8006f44 <_fflush_r+0xc>
 8006f88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f8a:	f000 f908 	bl	800719e <__retarget_lock_release_recursive>
 8006f8e:	e7d9      	b.n	8006f44 <_fflush_r+0xc>
 8006f90:	4b05      	ldr	r3, [pc, #20]	; (8006fa8 <_fflush_r+0x70>)
 8006f92:	429c      	cmp	r4, r3
 8006f94:	d101      	bne.n	8006f9a <_fflush_r+0x62>
 8006f96:	68ac      	ldr	r4, [r5, #8]
 8006f98:	e7df      	b.n	8006f5a <_fflush_r+0x22>
 8006f9a:	4b04      	ldr	r3, [pc, #16]	; (8006fac <_fflush_r+0x74>)
 8006f9c:	429c      	cmp	r4, r3
 8006f9e:	bf08      	it	eq
 8006fa0:	68ec      	ldreq	r4, [r5, #12]
 8006fa2:	e7da      	b.n	8006f5a <_fflush_r+0x22>
 8006fa4:	08007e08 	.word	0x08007e08
 8006fa8:	08007e28 	.word	0x08007e28
 8006fac:	08007de8 	.word	0x08007de8

08006fb0 <std>:
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	b510      	push	{r4, lr}
 8006fb4:	4604      	mov	r4, r0
 8006fb6:	e9c0 3300 	strd	r3, r3, [r0]
 8006fba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006fbe:	6083      	str	r3, [r0, #8]
 8006fc0:	8181      	strh	r1, [r0, #12]
 8006fc2:	6643      	str	r3, [r0, #100]	; 0x64
 8006fc4:	81c2      	strh	r2, [r0, #14]
 8006fc6:	6183      	str	r3, [r0, #24]
 8006fc8:	4619      	mov	r1, r3
 8006fca:	2208      	movs	r2, #8
 8006fcc:	305c      	adds	r0, #92	; 0x5c
 8006fce:	f7ff fd37 	bl	8006a40 <memset>
 8006fd2:	4b05      	ldr	r3, [pc, #20]	; (8006fe8 <std+0x38>)
 8006fd4:	6263      	str	r3, [r4, #36]	; 0x24
 8006fd6:	4b05      	ldr	r3, [pc, #20]	; (8006fec <std+0x3c>)
 8006fd8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006fda:	4b05      	ldr	r3, [pc, #20]	; (8006ff0 <std+0x40>)
 8006fdc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006fde:	4b05      	ldr	r3, [pc, #20]	; (8006ff4 <std+0x44>)
 8006fe0:	6224      	str	r4, [r4, #32]
 8006fe2:	6323      	str	r3, [r4, #48]	; 0x30
 8006fe4:	bd10      	pop	{r4, pc}
 8006fe6:	bf00      	nop
 8006fe8:	08007a29 	.word	0x08007a29
 8006fec:	08007a4b 	.word	0x08007a4b
 8006ff0:	08007a83 	.word	0x08007a83
 8006ff4:	08007aa7 	.word	0x08007aa7

08006ff8 <_cleanup_r>:
 8006ff8:	4901      	ldr	r1, [pc, #4]	; (8007000 <_cleanup_r+0x8>)
 8006ffa:	f000 b8af 	b.w	800715c <_fwalk_reent>
 8006ffe:	bf00      	nop
 8007000:	08006f39 	.word	0x08006f39

08007004 <__sfmoreglue>:
 8007004:	b570      	push	{r4, r5, r6, lr}
 8007006:	2268      	movs	r2, #104	; 0x68
 8007008:	1e4d      	subs	r5, r1, #1
 800700a:	4355      	muls	r5, r2
 800700c:	460e      	mov	r6, r1
 800700e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007012:	f000 f997 	bl	8007344 <_malloc_r>
 8007016:	4604      	mov	r4, r0
 8007018:	b140      	cbz	r0, 800702c <__sfmoreglue+0x28>
 800701a:	2100      	movs	r1, #0
 800701c:	e9c0 1600 	strd	r1, r6, [r0]
 8007020:	300c      	adds	r0, #12
 8007022:	60a0      	str	r0, [r4, #8]
 8007024:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007028:	f7ff fd0a 	bl	8006a40 <memset>
 800702c:	4620      	mov	r0, r4
 800702e:	bd70      	pop	{r4, r5, r6, pc}

08007030 <__sfp_lock_acquire>:
 8007030:	4801      	ldr	r0, [pc, #4]	; (8007038 <__sfp_lock_acquire+0x8>)
 8007032:	f000 b8b3 	b.w	800719c <__retarget_lock_acquire_recursive>
 8007036:	bf00      	nop
 8007038:	20000d09 	.word	0x20000d09

0800703c <__sfp_lock_release>:
 800703c:	4801      	ldr	r0, [pc, #4]	; (8007044 <__sfp_lock_release+0x8>)
 800703e:	f000 b8ae 	b.w	800719e <__retarget_lock_release_recursive>
 8007042:	bf00      	nop
 8007044:	20000d09 	.word	0x20000d09

08007048 <__sinit_lock_acquire>:
 8007048:	4801      	ldr	r0, [pc, #4]	; (8007050 <__sinit_lock_acquire+0x8>)
 800704a:	f000 b8a7 	b.w	800719c <__retarget_lock_acquire_recursive>
 800704e:	bf00      	nop
 8007050:	20000d0a 	.word	0x20000d0a

08007054 <__sinit_lock_release>:
 8007054:	4801      	ldr	r0, [pc, #4]	; (800705c <__sinit_lock_release+0x8>)
 8007056:	f000 b8a2 	b.w	800719e <__retarget_lock_release_recursive>
 800705a:	bf00      	nop
 800705c:	20000d0a 	.word	0x20000d0a

08007060 <__sinit>:
 8007060:	b510      	push	{r4, lr}
 8007062:	4604      	mov	r4, r0
 8007064:	f7ff fff0 	bl	8007048 <__sinit_lock_acquire>
 8007068:	69a3      	ldr	r3, [r4, #24]
 800706a:	b11b      	cbz	r3, 8007074 <__sinit+0x14>
 800706c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007070:	f7ff bff0 	b.w	8007054 <__sinit_lock_release>
 8007074:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007078:	6523      	str	r3, [r4, #80]	; 0x50
 800707a:	4b13      	ldr	r3, [pc, #76]	; (80070c8 <__sinit+0x68>)
 800707c:	4a13      	ldr	r2, [pc, #76]	; (80070cc <__sinit+0x6c>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	62a2      	str	r2, [r4, #40]	; 0x28
 8007082:	42a3      	cmp	r3, r4
 8007084:	bf04      	itt	eq
 8007086:	2301      	moveq	r3, #1
 8007088:	61a3      	streq	r3, [r4, #24]
 800708a:	4620      	mov	r0, r4
 800708c:	f000 f820 	bl	80070d0 <__sfp>
 8007090:	6060      	str	r0, [r4, #4]
 8007092:	4620      	mov	r0, r4
 8007094:	f000 f81c 	bl	80070d0 <__sfp>
 8007098:	60a0      	str	r0, [r4, #8]
 800709a:	4620      	mov	r0, r4
 800709c:	f000 f818 	bl	80070d0 <__sfp>
 80070a0:	2200      	movs	r2, #0
 80070a2:	60e0      	str	r0, [r4, #12]
 80070a4:	2104      	movs	r1, #4
 80070a6:	6860      	ldr	r0, [r4, #4]
 80070a8:	f7ff ff82 	bl	8006fb0 <std>
 80070ac:	68a0      	ldr	r0, [r4, #8]
 80070ae:	2201      	movs	r2, #1
 80070b0:	2109      	movs	r1, #9
 80070b2:	f7ff ff7d 	bl	8006fb0 <std>
 80070b6:	68e0      	ldr	r0, [r4, #12]
 80070b8:	2202      	movs	r2, #2
 80070ba:	2112      	movs	r1, #18
 80070bc:	f7ff ff78 	bl	8006fb0 <std>
 80070c0:	2301      	movs	r3, #1
 80070c2:	61a3      	str	r3, [r4, #24]
 80070c4:	e7d2      	b.n	800706c <__sinit+0xc>
 80070c6:	bf00      	nop
 80070c8:	08007ce0 	.word	0x08007ce0
 80070cc:	08006ff9 	.word	0x08006ff9

080070d0 <__sfp>:
 80070d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070d2:	4607      	mov	r7, r0
 80070d4:	f7ff ffac 	bl	8007030 <__sfp_lock_acquire>
 80070d8:	4b1e      	ldr	r3, [pc, #120]	; (8007154 <__sfp+0x84>)
 80070da:	681e      	ldr	r6, [r3, #0]
 80070dc:	69b3      	ldr	r3, [r6, #24]
 80070de:	b913      	cbnz	r3, 80070e6 <__sfp+0x16>
 80070e0:	4630      	mov	r0, r6
 80070e2:	f7ff ffbd 	bl	8007060 <__sinit>
 80070e6:	3648      	adds	r6, #72	; 0x48
 80070e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80070ec:	3b01      	subs	r3, #1
 80070ee:	d503      	bpl.n	80070f8 <__sfp+0x28>
 80070f0:	6833      	ldr	r3, [r6, #0]
 80070f2:	b30b      	cbz	r3, 8007138 <__sfp+0x68>
 80070f4:	6836      	ldr	r6, [r6, #0]
 80070f6:	e7f7      	b.n	80070e8 <__sfp+0x18>
 80070f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80070fc:	b9d5      	cbnz	r5, 8007134 <__sfp+0x64>
 80070fe:	4b16      	ldr	r3, [pc, #88]	; (8007158 <__sfp+0x88>)
 8007100:	60e3      	str	r3, [r4, #12]
 8007102:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007106:	6665      	str	r5, [r4, #100]	; 0x64
 8007108:	f000 f847 	bl	800719a <__retarget_lock_init_recursive>
 800710c:	f7ff ff96 	bl	800703c <__sfp_lock_release>
 8007110:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007114:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007118:	6025      	str	r5, [r4, #0]
 800711a:	61a5      	str	r5, [r4, #24]
 800711c:	2208      	movs	r2, #8
 800711e:	4629      	mov	r1, r5
 8007120:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007124:	f7ff fc8c 	bl	8006a40 <memset>
 8007128:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800712c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007130:	4620      	mov	r0, r4
 8007132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007134:	3468      	adds	r4, #104	; 0x68
 8007136:	e7d9      	b.n	80070ec <__sfp+0x1c>
 8007138:	2104      	movs	r1, #4
 800713a:	4638      	mov	r0, r7
 800713c:	f7ff ff62 	bl	8007004 <__sfmoreglue>
 8007140:	4604      	mov	r4, r0
 8007142:	6030      	str	r0, [r6, #0]
 8007144:	2800      	cmp	r0, #0
 8007146:	d1d5      	bne.n	80070f4 <__sfp+0x24>
 8007148:	f7ff ff78 	bl	800703c <__sfp_lock_release>
 800714c:	230c      	movs	r3, #12
 800714e:	603b      	str	r3, [r7, #0]
 8007150:	e7ee      	b.n	8007130 <__sfp+0x60>
 8007152:	bf00      	nop
 8007154:	08007ce0 	.word	0x08007ce0
 8007158:	ffff0001 	.word	0xffff0001

0800715c <_fwalk_reent>:
 800715c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007160:	4606      	mov	r6, r0
 8007162:	4688      	mov	r8, r1
 8007164:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007168:	2700      	movs	r7, #0
 800716a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800716e:	f1b9 0901 	subs.w	r9, r9, #1
 8007172:	d505      	bpl.n	8007180 <_fwalk_reent+0x24>
 8007174:	6824      	ldr	r4, [r4, #0]
 8007176:	2c00      	cmp	r4, #0
 8007178:	d1f7      	bne.n	800716a <_fwalk_reent+0xe>
 800717a:	4638      	mov	r0, r7
 800717c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007180:	89ab      	ldrh	r3, [r5, #12]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d907      	bls.n	8007196 <_fwalk_reent+0x3a>
 8007186:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800718a:	3301      	adds	r3, #1
 800718c:	d003      	beq.n	8007196 <_fwalk_reent+0x3a>
 800718e:	4629      	mov	r1, r5
 8007190:	4630      	mov	r0, r6
 8007192:	47c0      	blx	r8
 8007194:	4307      	orrs	r7, r0
 8007196:	3568      	adds	r5, #104	; 0x68
 8007198:	e7e9      	b.n	800716e <_fwalk_reent+0x12>

0800719a <__retarget_lock_init_recursive>:
 800719a:	4770      	bx	lr

0800719c <__retarget_lock_acquire_recursive>:
 800719c:	4770      	bx	lr

0800719e <__retarget_lock_release_recursive>:
 800719e:	4770      	bx	lr

080071a0 <__swhatbuf_r>:
 80071a0:	b570      	push	{r4, r5, r6, lr}
 80071a2:	460e      	mov	r6, r1
 80071a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071a8:	2900      	cmp	r1, #0
 80071aa:	b096      	sub	sp, #88	; 0x58
 80071ac:	4614      	mov	r4, r2
 80071ae:	461d      	mov	r5, r3
 80071b0:	da08      	bge.n	80071c4 <__swhatbuf_r+0x24>
 80071b2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80071b6:	2200      	movs	r2, #0
 80071b8:	602a      	str	r2, [r5, #0]
 80071ba:	061a      	lsls	r2, r3, #24
 80071bc:	d410      	bmi.n	80071e0 <__swhatbuf_r+0x40>
 80071be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071c2:	e00e      	b.n	80071e2 <__swhatbuf_r+0x42>
 80071c4:	466a      	mov	r2, sp
 80071c6:	f000 fc95 	bl	8007af4 <_fstat_r>
 80071ca:	2800      	cmp	r0, #0
 80071cc:	dbf1      	blt.n	80071b2 <__swhatbuf_r+0x12>
 80071ce:	9a01      	ldr	r2, [sp, #4]
 80071d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80071d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80071d8:	425a      	negs	r2, r3
 80071da:	415a      	adcs	r2, r3
 80071dc:	602a      	str	r2, [r5, #0]
 80071de:	e7ee      	b.n	80071be <__swhatbuf_r+0x1e>
 80071e0:	2340      	movs	r3, #64	; 0x40
 80071e2:	2000      	movs	r0, #0
 80071e4:	6023      	str	r3, [r4, #0]
 80071e6:	b016      	add	sp, #88	; 0x58
 80071e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080071ec <__smakebuf_r>:
 80071ec:	898b      	ldrh	r3, [r1, #12]
 80071ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80071f0:	079d      	lsls	r5, r3, #30
 80071f2:	4606      	mov	r6, r0
 80071f4:	460c      	mov	r4, r1
 80071f6:	d507      	bpl.n	8007208 <__smakebuf_r+0x1c>
 80071f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80071fc:	6023      	str	r3, [r4, #0]
 80071fe:	6123      	str	r3, [r4, #16]
 8007200:	2301      	movs	r3, #1
 8007202:	6163      	str	r3, [r4, #20]
 8007204:	b002      	add	sp, #8
 8007206:	bd70      	pop	{r4, r5, r6, pc}
 8007208:	ab01      	add	r3, sp, #4
 800720a:	466a      	mov	r2, sp
 800720c:	f7ff ffc8 	bl	80071a0 <__swhatbuf_r>
 8007210:	9900      	ldr	r1, [sp, #0]
 8007212:	4605      	mov	r5, r0
 8007214:	4630      	mov	r0, r6
 8007216:	f000 f895 	bl	8007344 <_malloc_r>
 800721a:	b948      	cbnz	r0, 8007230 <__smakebuf_r+0x44>
 800721c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007220:	059a      	lsls	r2, r3, #22
 8007222:	d4ef      	bmi.n	8007204 <__smakebuf_r+0x18>
 8007224:	f023 0303 	bic.w	r3, r3, #3
 8007228:	f043 0302 	orr.w	r3, r3, #2
 800722c:	81a3      	strh	r3, [r4, #12]
 800722e:	e7e3      	b.n	80071f8 <__smakebuf_r+0xc>
 8007230:	4b0d      	ldr	r3, [pc, #52]	; (8007268 <__smakebuf_r+0x7c>)
 8007232:	62b3      	str	r3, [r6, #40]	; 0x28
 8007234:	89a3      	ldrh	r3, [r4, #12]
 8007236:	6020      	str	r0, [r4, #0]
 8007238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800723c:	81a3      	strh	r3, [r4, #12]
 800723e:	9b00      	ldr	r3, [sp, #0]
 8007240:	6163      	str	r3, [r4, #20]
 8007242:	9b01      	ldr	r3, [sp, #4]
 8007244:	6120      	str	r0, [r4, #16]
 8007246:	b15b      	cbz	r3, 8007260 <__smakebuf_r+0x74>
 8007248:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800724c:	4630      	mov	r0, r6
 800724e:	f000 fc63 	bl	8007b18 <_isatty_r>
 8007252:	b128      	cbz	r0, 8007260 <__smakebuf_r+0x74>
 8007254:	89a3      	ldrh	r3, [r4, #12]
 8007256:	f023 0303 	bic.w	r3, r3, #3
 800725a:	f043 0301 	orr.w	r3, r3, #1
 800725e:	81a3      	strh	r3, [r4, #12]
 8007260:	89a0      	ldrh	r0, [r4, #12]
 8007262:	4305      	orrs	r5, r0
 8007264:	81a5      	strh	r5, [r4, #12]
 8007266:	e7cd      	b.n	8007204 <__smakebuf_r+0x18>
 8007268:	08006ff9 	.word	0x08006ff9

0800726c <_free_r>:
 800726c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800726e:	2900      	cmp	r1, #0
 8007270:	d044      	beq.n	80072fc <_free_r+0x90>
 8007272:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007276:	9001      	str	r0, [sp, #4]
 8007278:	2b00      	cmp	r3, #0
 800727a:	f1a1 0404 	sub.w	r4, r1, #4
 800727e:	bfb8      	it	lt
 8007280:	18e4      	addlt	r4, r4, r3
 8007282:	f000 fc6b 	bl	8007b5c <__malloc_lock>
 8007286:	4a1e      	ldr	r2, [pc, #120]	; (8007300 <_free_r+0x94>)
 8007288:	9801      	ldr	r0, [sp, #4]
 800728a:	6813      	ldr	r3, [r2, #0]
 800728c:	b933      	cbnz	r3, 800729c <_free_r+0x30>
 800728e:	6063      	str	r3, [r4, #4]
 8007290:	6014      	str	r4, [r2, #0]
 8007292:	b003      	add	sp, #12
 8007294:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007298:	f000 bc66 	b.w	8007b68 <__malloc_unlock>
 800729c:	42a3      	cmp	r3, r4
 800729e:	d908      	bls.n	80072b2 <_free_r+0x46>
 80072a0:	6825      	ldr	r5, [r4, #0]
 80072a2:	1961      	adds	r1, r4, r5
 80072a4:	428b      	cmp	r3, r1
 80072a6:	bf01      	itttt	eq
 80072a8:	6819      	ldreq	r1, [r3, #0]
 80072aa:	685b      	ldreq	r3, [r3, #4]
 80072ac:	1949      	addeq	r1, r1, r5
 80072ae:	6021      	streq	r1, [r4, #0]
 80072b0:	e7ed      	b.n	800728e <_free_r+0x22>
 80072b2:	461a      	mov	r2, r3
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	b10b      	cbz	r3, 80072bc <_free_r+0x50>
 80072b8:	42a3      	cmp	r3, r4
 80072ba:	d9fa      	bls.n	80072b2 <_free_r+0x46>
 80072bc:	6811      	ldr	r1, [r2, #0]
 80072be:	1855      	adds	r5, r2, r1
 80072c0:	42a5      	cmp	r5, r4
 80072c2:	d10b      	bne.n	80072dc <_free_r+0x70>
 80072c4:	6824      	ldr	r4, [r4, #0]
 80072c6:	4421      	add	r1, r4
 80072c8:	1854      	adds	r4, r2, r1
 80072ca:	42a3      	cmp	r3, r4
 80072cc:	6011      	str	r1, [r2, #0]
 80072ce:	d1e0      	bne.n	8007292 <_free_r+0x26>
 80072d0:	681c      	ldr	r4, [r3, #0]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	6053      	str	r3, [r2, #4]
 80072d6:	4421      	add	r1, r4
 80072d8:	6011      	str	r1, [r2, #0]
 80072da:	e7da      	b.n	8007292 <_free_r+0x26>
 80072dc:	d902      	bls.n	80072e4 <_free_r+0x78>
 80072de:	230c      	movs	r3, #12
 80072e0:	6003      	str	r3, [r0, #0]
 80072e2:	e7d6      	b.n	8007292 <_free_r+0x26>
 80072e4:	6825      	ldr	r5, [r4, #0]
 80072e6:	1961      	adds	r1, r4, r5
 80072e8:	428b      	cmp	r3, r1
 80072ea:	bf04      	itt	eq
 80072ec:	6819      	ldreq	r1, [r3, #0]
 80072ee:	685b      	ldreq	r3, [r3, #4]
 80072f0:	6063      	str	r3, [r4, #4]
 80072f2:	bf04      	itt	eq
 80072f4:	1949      	addeq	r1, r1, r5
 80072f6:	6021      	streq	r1, [r4, #0]
 80072f8:	6054      	str	r4, [r2, #4]
 80072fa:	e7ca      	b.n	8007292 <_free_r+0x26>
 80072fc:	b003      	add	sp, #12
 80072fe:	bd30      	pop	{r4, r5, pc}
 8007300:	20000d0c 	.word	0x20000d0c

08007304 <sbrk_aligned>:
 8007304:	b570      	push	{r4, r5, r6, lr}
 8007306:	4e0e      	ldr	r6, [pc, #56]	; (8007340 <sbrk_aligned+0x3c>)
 8007308:	460c      	mov	r4, r1
 800730a:	6831      	ldr	r1, [r6, #0]
 800730c:	4605      	mov	r5, r0
 800730e:	b911      	cbnz	r1, 8007316 <sbrk_aligned+0x12>
 8007310:	f000 fb7a 	bl	8007a08 <_sbrk_r>
 8007314:	6030      	str	r0, [r6, #0]
 8007316:	4621      	mov	r1, r4
 8007318:	4628      	mov	r0, r5
 800731a:	f000 fb75 	bl	8007a08 <_sbrk_r>
 800731e:	1c43      	adds	r3, r0, #1
 8007320:	d00a      	beq.n	8007338 <sbrk_aligned+0x34>
 8007322:	1cc4      	adds	r4, r0, #3
 8007324:	f024 0403 	bic.w	r4, r4, #3
 8007328:	42a0      	cmp	r0, r4
 800732a:	d007      	beq.n	800733c <sbrk_aligned+0x38>
 800732c:	1a21      	subs	r1, r4, r0
 800732e:	4628      	mov	r0, r5
 8007330:	f000 fb6a 	bl	8007a08 <_sbrk_r>
 8007334:	3001      	adds	r0, #1
 8007336:	d101      	bne.n	800733c <sbrk_aligned+0x38>
 8007338:	f04f 34ff 	mov.w	r4, #4294967295
 800733c:	4620      	mov	r0, r4
 800733e:	bd70      	pop	{r4, r5, r6, pc}
 8007340:	20000d10 	.word	0x20000d10

08007344 <_malloc_r>:
 8007344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007348:	1ccd      	adds	r5, r1, #3
 800734a:	f025 0503 	bic.w	r5, r5, #3
 800734e:	3508      	adds	r5, #8
 8007350:	2d0c      	cmp	r5, #12
 8007352:	bf38      	it	cc
 8007354:	250c      	movcc	r5, #12
 8007356:	2d00      	cmp	r5, #0
 8007358:	4607      	mov	r7, r0
 800735a:	db01      	blt.n	8007360 <_malloc_r+0x1c>
 800735c:	42a9      	cmp	r1, r5
 800735e:	d905      	bls.n	800736c <_malloc_r+0x28>
 8007360:	230c      	movs	r3, #12
 8007362:	603b      	str	r3, [r7, #0]
 8007364:	2600      	movs	r6, #0
 8007366:	4630      	mov	r0, r6
 8007368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800736c:	4e2e      	ldr	r6, [pc, #184]	; (8007428 <_malloc_r+0xe4>)
 800736e:	f000 fbf5 	bl	8007b5c <__malloc_lock>
 8007372:	6833      	ldr	r3, [r6, #0]
 8007374:	461c      	mov	r4, r3
 8007376:	bb34      	cbnz	r4, 80073c6 <_malloc_r+0x82>
 8007378:	4629      	mov	r1, r5
 800737a:	4638      	mov	r0, r7
 800737c:	f7ff ffc2 	bl	8007304 <sbrk_aligned>
 8007380:	1c43      	adds	r3, r0, #1
 8007382:	4604      	mov	r4, r0
 8007384:	d14d      	bne.n	8007422 <_malloc_r+0xde>
 8007386:	6834      	ldr	r4, [r6, #0]
 8007388:	4626      	mov	r6, r4
 800738a:	2e00      	cmp	r6, #0
 800738c:	d140      	bne.n	8007410 <_malloc_r+0xcc>
 800738e:	6823      	ldr	r3, [r4, #0]
 8007390:	4631      	mov	r1, r6
 8007392:	4638      	mov	r0, r7
 8007394:	eb04 0803 	add.w	r8, r4, r3
 8007398:	f000 fb36 	bl	8007a08 <_sbrk_r>
 800739c:	4580      	cmp	r8, r0
 800739e:	d13a      	bne.n	8007416 <_malloc_r+0xd2>
 80073a0:	6821      	ldr	r1, [r4, #0]
 80073a2:	3503      	adds	r5, #3
 80073a4:	1a6d      	subs	r5, r5, r1
 80073a6:	f025 0503 	bic.w	r5, r5, #3
 80073aa:	3508      	adds	r5, #8
 80073ac:	2d0c      	cmp	r5, #12
 80073ae:	bf38      	it	cc
 80073b0:	250c      	movcc	r5, #12
 80073b2:	4629      	mov	r1, r5
 80073b4:	4638      	mov	r0, r7
 80073b6:	f7ff ffa5 	bl	8007304 <sbrk_aligned>
 80073ba:	3001      	adds	r0, #1
 80073bc:	d02b      	beq.n	8007416 <_malloc_r+0xd2>
 80073be:	6823      	ldr	r3, [r4, #0]
 80073c0:	442b      	add	r3, r5
 80073c2:	6023      	str	r3, [r4, #0]
 80073c4:	e00e      	b.n	80073e4 <_malloc_r+0xa0>
 80073c6:	6822      	ldr	r2, [r4, #0]
 80073c8:	1b52      	subs	r2, r2, r5
 80073ca:	d41e      	bmi.n	800740a <_malloc_r+0xc6>
 80073cc:	2a0b      	cmp	r2, #11
 80073ce:	d916      	bls.n	80073fe <_malloc_r+0xba>
 80073d0:	1961      	adds	r1, r4, r5
 80073d2:	42a3      	cmp	r3, r4
 80073d4:	6025      	str	r5, [r4, #0]
 80073d6:	bf18      	it	ne
 80073d8:	6059      	strne	r1, [r3, #4]
 80073da:	6863      	ldr	r3, [r4, #4]
 80073dc:	bf08      	it	eq
 80073de:	6031      	streq	r1, [r6, #0]
 80073e0:	5162      	str	r2, [r4, r5]
 80073e2:	604b      	str	r3, [r1, #4]
 80073e4:	4638      	mov	r0, r7
 80073e6:	f104 060b 	add.w	r6, r4, #11
 80073ea:	f000 fbbd 	bl	8007b68 <__malloc_unlock>
 80073ee:	f026 0607 	bic.w	r6, r6, #7
 80073f2:	1d23      	adds	r3, r4, #4
 80073f4:	1af2      	subs	r2, r6, r3
 80073f6:	d0b6      	beq.n	8007366 <_malloc_r+0x22>
 80073f8:	1b9b      	subs	r3, r3, r6
 80073fa:	50a3      	str	r3, [r4, r2]
 80073fc:	e7b3      	b.n	8007366 <_malloc_r+0x22>
 80073fe:	6862      	ldr	r2, [r4, #4]
 8007400:	42a3      	cmp	r3, r4
 8007402:	bf0c      	ite	eq
 8007404:	6032      	streq	r2, [r6, #0]
 8007406:	605a      	strne	r2, [r3, #4]
 8007408:	e7ec      	b.n	80073e4 <_malloc_r+0xa0>
 800740a:	4623      	mov	r3, r4
 800740c:	6864      	ldr	r4, [r4, #4]
 800740e:	e7b2      	b.n	8007376 <_malloc_r+0x32>
 8007410:	4634      	mov	r4, r6
 8007412:	6876      	ldr	r6, [r6, #4]
 8007414:	e7b9      	b.n	800738a <_malloc_r+0x46>
 8007416:	230c      	movs	r3, #12
 8007418:	603b      	str	r3, [r7, #0]
 800741a:	4638      	mov	r0, r7
 800741c:	f000 fba4 	bl	8007b68 <__malloc_unlock>
 8007420:	e7a1      	b.n	8007366 <_malloc_r+0x22>
 8007422:	6025      	str	r5, [r4, #0]
 8007424:	e7de      	b.n	80073e4 <_malloc_r+0xa0>
 8007426:	bf00      	nop
 8007428:	20000d0c 	.word	0x20000d0c

0800742c <__sfputc_r>:
 800742c:	6893      	ldr	r3, [r2, #8]
 800742e:	3b01      	subs	r3, #1
 8007430:	2b00      	cmp	r3, #0
 8007432:	b410      	push	{r4}
 8007434:	6093      	str	r3, [r2, #8]
 8007436:	da08      	bge.n	800744a <__sfputc_r+0x1e>
 8007438:	6994      	ldr	r4, [r2, #24]
 800743a:	42a3      	cmp	r3, r4
 800743c:	db01      	blt.n	8007442 <__sfputc_r+0x16>
 800743e:	290a      	cmp	r1, #10
 8007440:	d103      	bne.n	800744a <__sfputc_r+0x1e>
 8007442:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007446:	f7ff bc31 	b.w	8006cac <__swbuf_r>
 800744a:	6813      	ldr	r3, [r2, #0]
 800744c:	1c58      	adds	r0, r3, #1
 800744e:	6010      	str	r0, [r2, #0]
 8007450:	7019      	strb	r1, [r3, #0]
 8007452:	4608      	mov	r0, r1
 8007454:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007458:	4770      	bx	lr

0800745a <__sfputs_r>:
 800745a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800745c:	4606      	mov	r6, r0
 800745e:	460f      	mov	r7, r1
 8007460:	4614      	mov	r4, r2
 8007462:	18d5      	adds	r5, r2, r3
 8007464:	42ac      	cmp	r4, r5
 8007466:	d101      	bne.n	800746c <__sfputs_r+0x12>
 8007468:	2000      	movs	r0, #0
 800746a:	e007      	b.n	800747c <__sfputs_r+0x22>
 800746c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007470:	463a      	mov	r2, r7
 8007472:	4630      	mov	r0, r6
 8007474:	f7ff ffda 	bl	800742c <__sfputc_r>
 8007478:	1c43      	adds	r3, r0, #1
 800747a:	d1f3      	bne.n	8007464 <__sfputs_r+0xa>
 800747c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007480 <_vfiprintf_r>:
 8007480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007484:	460d      	mov	r5, r1
 8007486:	b09d      	sub	sp, #116	; 0x74
 8007488:	4614      	mov	r4, r2
 800748a:	4698      	mov	r8, r3
 800748c:	4606      	mov	r6, r0
 800748e:	b118      	cbz	r0, 8007498 <_vfiprintf_r+0x18>
 8007490:	6983      	ldr	r3, [r0, #24]
 8007492:	b90b      	cbnz	r3, 8007498 <_vfiprintf_r+0x18>
 8007494:	f7ff fde4 	bl	8007060 <__sinit>
 8007498:	4b89      	ldr	r3, [pc, #548]	; (80076c0 <_vfiprintf_r+0x240>)
 800749a:	429d      	cmp	r5, r3
 800749c:	d11b      	bne.n	80074d6 <_vfiprintf_r+0x56>
 800749e:	6875      	ldr	r5, [r6, #4]
 80074a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074a2:	07d9      	lsls	r1, r3, #31
 80074a4:	d405      	bmi.n	80074b2 <_vfiprintf_r+0x32>
 80074a6:	89ab      	ldrh	r3, [r5, #12]
 80074a8:	059a      	lsls	r2, r3, #22
 80074aa:	d402      	bmi.n	80074b2 <_vfiprintf_r+0x32>
 80074ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074ae:	f7ff fe75 	bl	800719c <__retarget_lock_acquire_recursive>
 80074b2:	89ab      	ldrh	r3, [r5, #12]
 80074b4:	071b      	lsls	r3, r3, #28
 80074b6:	d501      	bpl.n	80074bc <_vfiprintf_r+0x3c>
 80074b8:	692b      	ldr	r3, [r5, #16]
 80074ba:	b9eb      	cbnz	r3, 80074f8 <_vfiprintf_r+0x78>
 80074bc:	4629      	mov	r1, r5
 80074be:	4630      	mov	r0, r6
 80074c0:	f7ff fc46 	bl	8006d50 <__swsetup_r>
 80074c4:	b1c0      	cbz	r0, 80074f8 <_vfiprintf_r+0x78>
 80074c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074c8:	07dc      	lsls	r4, r3, #31
 80074ca:	d50e      	bpl.n	80074ea <_vfiprintf_r+0x6a>
 80074cc:	f04f 30ff 	mov.w	r0, #4294967295
 80074d0:	b01d      	add	sp, #116	; 0x74
 80074d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074d6:	4b7b      	ldr	r3, [pc, #492]	; (80076c4 <_vfiprintf_r+0x244>)
 80074d8:	429d      	cmp	r5, r3
 80074da:	d101      	bne.n	80074e0 <_vfiprintf_r+0x60>
 80074dc:	68b5      	ldr	r5, [r6, #8]
 80074de:	e7df      	b.n	80074a0 <_vfiprintf_r+0x20>
 80074e0:	4b79      	ldr	r3, [pc, #484]	; (80076c8 <_vfiprintf_r+0x248>)
 80074e2:	429d      	cmp	r5, r3
 80074e4:	bf08      	it	eq
 80074e6:	68f5      	ldreq	r5, [r6, #12]
 80074e8:	e7da      	b.n	80074a0 <_vfiprintf_r+0x20>
 80074ea:	89ab      	ldrh	r3, [r5, #12]
 80074ec:	0598      	lsls	r0, r3, #22
 80074ee:	d4ed      	bmi.n	80074cc <_vfiprintf_r+0x4c>
 80074f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074f2:	f7ff fe54 	bl	800719e <__retarget_lock_release_recursive>
 80074f6:	e7e9      	b.n	80074cc <_vfiprintf_r+0x4c>
 80074f8:	2300      	movs	r3, #0
 80074fa:	9309      	str	r3, [sp, #36]	; 0x24
 80074fc:	2320      	movs	r3, #32
 80074fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007502:	f8cd 800c 	str.w	r8, [sp, #12]
 8007506:	2330      	movs	r3, #48	; 0x30
 8007508:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80076cc <_vfiprintf_r+0x24c>
 800750c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007510:	f04f 0901 	mov.w	r9, #1
 8007514:	4623      	mov	r3, r4
 8007516:	469a      	mov	sl, r3
 8007518:	f813 2b01 	ldrb.w	r2, [r3], #1
 800751c:	b10a      	cbz	r2, 8007522 <_vfiprintf_r+0xa2>
 800751e:	2a25      	cmp	r2, #37	; 0x25
 8007520:	d1f9      	bne.n	8007516 <_vfiprintf_r+0x96>
 8007522:	ebba 0b04 	subs.w	fp, sl, r4
 8007526:	d00b      	beq.n	8007540 <_vfiprintf_r+0xc0>
 8007528:	465b      	mov	r3, fp
 800752a:	4622      	mov	r2, r4
 800752c:	4629      	mov	r1, r5
 800752e:	4630      	mov	r0, r6
 8007530:	f7ff ff93 	bl	800745a <__sfputs_r>
 8007534:	3001      	adds	r0, #1
 8007536:	f000 80aa 	beq.w	800768e <_vfiprintf_r+0x20e>
 800753a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800753c:	445a      	add	r2, fp
 800753e:	9209      	str	r2, [sp, #36]	; 0x24
 8007540:	f89a 3000 	ldrb.w	r3, [sl]
 8007544:	2b00      	cmp	r3, #0
 8007546:	f000 80a2 	beq.w	800768e <_vfiprintf_r+0x20e>
 800754a:	2300      	movs	r3, #0
 800754c:	f04f 32ff 	mov.w	r2, #4294967295
 8007550:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007554:	f10a 0a01 	add.w	sl, sl, #1
 8007558:	9304      	str	r3, [sp, #16]
 800755a:	9307      	str	r3, [sp, #28]
 800755c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007560:	931a      	str	r3, [sp, #104]	; 0x68
 8007562:	4654      	mov	r4, sl
 8007564:	2205      	movs	r2, #5
 8007566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800756a:	4858      	ldr	r0, [pc, #352]	; (80076cc <_vfiprintf_r+0x24c>)
 800756c:	f7f8 fe40 	bl	80001f0 <memchr>
 8007570:	9a04      	ldr	r2, [sp, #16]
 8007572:	b9d8      	cbnz	r0, 80075ac <_vfiprintf_r+0x12c>
 8007574:	06d1      	lsls	r1, r2, #27
 8007576:	bf44      	itt	mi
 8007578:	2320      	movmi	r3, #32
 800757a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800757e:	0713      	lsls	r3, r2, #28
 8007580:	bf44      	itt	mi
 8007582:	232b      	movmi	r3, #43	; 0x2b
 8007584:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007588:	f89a 3000 	ldrb.w	r3, [sl]
 800758c:	2b2a      	cmp	r3, #42	; 0x2a
 800758e:	d015      	beq.n	80075bc <_vfiprintf_r+0x13c>
 8007590:	9a07      	ldr	r2, [sp, #28]
 8007592:	4654      	mov	r4, sl
 8007594:	2000      	movs	r0, #0
 8007596:	f04f 0c0a 	mov.w	ip, #10
 800759a:	4621      	mov	r1, r4
 800759c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075a0:	3b30      	subs	r3, #48	; 0x30
 80075a2:	2b09      	cmp	r3, #9
 80075a4:	d94e      	bls.n	8007644 <_vfiprintf_r+0x1c4>
 80075a6:	b1b0      	cbz	r0, 80075d6 <_vfiprintf_r+0x156>
 80075a8:	9207      	str	r2, [sp, #28]
 80075aa:	e014      	b.n	80075d6 <_vfiprintf_r+0x156>
 80075ac:	eba0 0308 	sub.w	r3, r0, r8
 80075b0:	fa09 f303 	lsl.w	r3, r9, r3
 80075b4:	4313      	orrs	r3, r2
 80075b6:	9304      	str	r3, [sp, #16]
 80075b8:	46a2      	mov	sl, r4
 80075ba:	e7d2      	b.n	8007562 <_vfiprintf_r+0xe2>
 80075bc:	9b03      	ldr	r3, [sp, #12]
 80075be:	1d19      	adds	r1, r3, #4
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	9103      	str	r1, [sp, #12]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	bfbb      	ittet	lt
 80075c8:	425b      	neglt	r3, r3
 80075ca:	f042 0202 	orrlt.w	r2, r2, #2
 80075ce:	9307      	strge	r3, [sp, #28]
 80075d0:	9307      	strlt	r3, [sp, #28]
 80075d2:	bfb8      	it	lt
 80075d4:	9204      	strlt	r2, [sp, #16]
 80075d6:	7823      	ldrb	r3, [r4, #0]
 80075d8:	2b2e      	cmp	r3, #46	; 0x2e
 80075da:	d10c      	bne.n	80075f6 <_vfiprintf_r+0x176>
 80075dc:	7863      	ldrb	r3, [r4, #1]
 80075de:	2b2a      	cmp	r3, #42	; 0x2a
 80075e0:	d135      	bne.n	800764e <_vfiprintf_r+0x1ce>
 80075e2:	9b03      	ldr	r3, [sp, #12]
 80075e4:	1d1a      	adds	r2, r3, #4
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	9203      	str	r2, [sp, #12]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	bfb8      	it	lt
 80075ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80075f2:	3402      	adds	r4, #2
 80075f4:	9305      	str	r3, [sp, #20]
 80075f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80076dc <_vfiprintf_r+0x25c>
 80075fa:	7821      	ldrb	r1, [r4, #0]
 80075fc:	2203      	movs	r2, #3
 80075fe:	4650      	mov	r0, sl
 8007600:	f7f8 fdf6 	bl	80001f0 <memchr>
 8007604:	b140      	cbz	r0, 8007618 <_vfiprintf_r+0x198>
 8007606:	2340      	movs	r3, #64	; 0x40
 8007608:	eba0 000a 	sub.w	r0, r0, sl
 800760c:	fa03 f000 	lsl.w	r0, r3, r0
 8007610:	9b04      	ldr	r3, [sp, #16]
 8007612:	4303      	orrs	r3, r0
 8007614:	3401      	adds	r4, #1
 8007616:	9304      	str	r3, [sp, #16]
 8007618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800761c:	482c      	ldr	r0, [pc, #176]	; (80076d0 <_vfiprintf_r+0x250>)
 800761e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007622:	2206      	movs	r2, #6
 8007624:	f7f8 fde4 	bl	80001f0 <memchr>
 8007628:	2800      	cmp	r0, #0
 800762a:	d03f      	beq.n	80076ac <_vfiprintf_r+0x22c>
 800762c:	4b29      	ldr	r3, [pc, #164]	; (80076d4 <_vfiprintf_r+0x254>)
 800762e:	bb1b      	cbnz	r3, 8007678 <_vfiprintf_r+0x1f8>
 8007630:	9b03      	ldr	r3, [sp, #12]
 8007632:	3307      	adds	r3, #7
 8007634:	f023 0307 	bic.w	r3, r3, #7
 8007638:	3308      	adds	r3, #8
 800763a:	9303      	str	r3, [sp, #12]
 800763c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800763e:	443b      	add	r3, r7
 8007640:	9309      	str	r3, [sp, #36]	; 0x24
 8007642:	e767      	b.n	8007514 <_vfiprintf_r+0x94>
 8007644:	fb0c 3202 	mla	r2, ip, r2, r3
 8007648:	460c      	mov	r4, r1
 800764a:	2001      	movs	r0, #1
 800764c:	e7a5      	b.n	800759a <_vfiprintf_r+0x11a>
 800764e:	2300      	movs	r3, #0
 8007650:	3401      	adds	r4, #1
 8007652:	9305      	str	r3, [sp, #20]
 8007654:	4619      	mov	r1, r3
 8007656:	f04f 0c0a 	mov.w	ip, #10
 800765a:	4620      	mov	r0, r4
 800765c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007660:	3a30      	subs	r2, #48	; 0x30
 8007662:	2a09      	cmp	r2, #9
 8007664:	d903      	bls.n	800766e <_vfiprintf_r+0x1ee>
 8007666:	2b00      	cmp	r3, #0
 8007668:	d0c5      	beq.n	80075f6 <_vfiprintf_r+0x176>
 800766a:	9105      	str	r1, [sp, #20]
 800766c:	e7c3      	b.n	80075f6 <_vfiprintf_r+0x176>
 800766e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007672:	4604      	mov	r4, r0
 8007674:	2301      	movs	r3, #1
 8007676:	e7f0      	b.n	800765a <_vfiprintf_r+0x1da>
 8007678:	ab03      	add	r3, sp, #12
 800767a:	9300      	str	r3, [sp, #0]
 800767c:	462a      	mov	r2, r5
 800767e:	4b16      	ldr	r3, [pc, #88]	; (80076d8 <_vfiprintf_r+0x258>)
 8007680:	a904      	add	r1, sp, #16
 8007682:	4630      	mov	r0, r6
 8007684:	f3af 8000 	nop.w
 8007688:	4607      	mov	r7, r0
 800768a:	1c78      	adds	r0, r7, #1
 800768c:	d1d6      	bne.n	800763c <_vfiprintf_r+0x1bc>
 800768e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007690:	07d9      	lsls	r1, r3, #31
 8007692:	d405      	bmi.n	80076a0 <_vfiprintf_r+0x220>
 8007694:	89ab      	ldrh	r3, [r5, #12]
 8007696:	059a      	lsls	r2, r3, #22
 8007698:	d402      	bmi.n	80076a0 <_vfiprintf_r+0x220>
 800769a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800769c:	f7ff fd7f 	bl	800719e <__retarget_lock_release_recursive>
 80076a0:	89ab      	ldrh	r3, [r5, #12]
 80076a2:	065b      	lsls	r3, r3, #25
 80076a4:	f53f af12 	bmi.w	80074cc <_vfiprintf_r+0x4c>
 80076a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076aa:	e711      	b.n	80074d0 <_vfiprintf_r+0x50>
 80076ac:	ab03      	add	r3, sp, #12
 80076ae:	9300      	str	r3, [sp, #0]
 80076b0:	462a      	mov	r2, r5
 80076b2:	4b09      	ldr	r3, [pc, #36]	; (80076d8 <_vfiprintf_r+0x258>)
 80076b4:	a904      	add	r1, sp, #16
 80076b6:	4630      	mov	r0, r6
 80076b8:	f000 f880 	bl	80077bc <_printf_i>
 80076bc:	e7e4      	b.n	8007688 <_vfiprintf_r+0x208>
 80076be:	bf00      	nop
 80076c0:	08007e08 	.word	0x08007e08
 80076c4:	08007e28 	.word	0x08007e28
 80076c8:	08007de8 	.word	0x08007de8
 80076cc:	08007e48 	.word	0x08007e48
 80076d0:	08007e52 	.word	0x08007e52
 80076d4:	00000000 	.word	0x00000000
 80076d8:	0800745b 	.word	0x0800745b
 80076dc:	08007e4e 	.word	0x08007e4e

080076e0 <_printf_common>:
 80076e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076e4:	4616      	mov	r6, r2
 80076e6:	4699      	mov	r9, r3
 80076e8:	688a      	ldr	r2, [r1, #8]
 80076ea:	690b      	ldr	r3, [r1, #16]
 80076ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80076f0:	4293      	cmp	r3, r2
 80076f2:	bfb8      	it	lt
 80076f4:	4613      	movlt	r3, r2
 80076f6:	6033      	str	r3, [r6, #0]
 80076f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80076fc:	4607      	mov	r7, r0
 80076fe:	460c      	mov	r4, r1
 8007700:	b10a      	cbz	r2, 8007706 <_printf_common+0x26>
 8007702:	3301      	adds	r3, #1
 8007704:	6033      	str	r3, [r6, #0]
 8007706:	6823      	ldr	r3, [r4, #0]
 8007708:	0699      	lsls	r1, r3, #26
 800770a:	bf42      	ittt	mi
 800770c:	6833      	ldrmi	r3, [r6, #0]
 800770e:	3302      	addmi	r3, #2
 8007710:	6033      	strmi	r3, [r6, #0]
 8007712:	6825      	ldr	r5, [r4, #0]
 8007714:	f015 0506 	ands.w	r5, r5, #6
 8007718:	d106      	bne.n	8007728 <_printf_common+0x48>
 800771a:	f104 0a19 	add.w	sl, r4, #25
 800771e:	68e3      	ldr	r3, [r4, #12]
 8007720:	6832      	ldr	r2, [r6, #0]
 8007722:	1a9b      	subs	r3, r3, r2
 8007724:	42ab      	cmp	r3, r5
 8007726:	dc26      	bgt.n	8007776 <_printf_common+0x96>
 8007728:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800772c:	1e13      	subs	r3, r2, #0
 800772e:	6822      	ldr	r2, [r4, #0]
 8007730:	bf18      	it	ne
 8007732:	2301      	movne	r3, #1
 8007734:	0692      	lsls	r2, r2, #26
 8007736:	d42b      	bmi.n	8007790 <_printf_common+0xb0>
 8007738:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800773c:	4649      	mov	r1, r9
 800773e:	4638      	mov	r0, r7
 8007740:	47c0      	blx	r8
 8007742:	3001      	adds	r0, #1
 8007744:	d01e      	beq.n	8007784 <_printf_common+0xa4>
 8007746:	6823      	ldr	r3, [r4, #0]
 8007748:	68e5      	ldr	r5, [r4, #12]
 800774a:	6832      	ldr	r2, [r6, #0]
 800774c:	f003 0306 	and.w	r3, r3, #6
 8007750:	2b04      	cmp	r3, #4
 8007752:	bf08      	it	eq
 8007754:	1aad      	subeq	r5, r5, r2
 8007756:	68a3      	ldr	r3, [r4, #8]
 8007758:	6922      	ldr	r2, [r4, #16]
 800775a:	bf0c      	ite	eq
 800775c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007760:	2500      	movne	r5, #0
 8007762:	4293      	cmp	r3, r2
 8007764:	bfc4      	itt	gt
 8007766:	1a9b      	subgt	r3, r3, r2
 8007768:	18ed      	addgt	r5, r5, r3
 800776a:	2600      	movs	r6, #0
 800776c:	341a      	adds	r4, #26
 800776e:	42b5      	cmp	r5, r6
 8007770:	d11a      	bne.n	80077a8 <_printf_common+0xc8>
 8007772:	2000      	movs	r0, #0
 8007774:	e008      	b.n	8007788 <_printf_common+0xa8>
 8007776:	2301      	movs	r3, #1
 8007778:	4652      	mov	r2, sl
 800777a:	4649      	mov	r1, r9
 800777c:	4638      	mov	r0, r7
 800777e:	47c0      	blx	r8
 8007780:	3001      	adds	r0, #1
 8007782:	d103      	bne.n	800778c <_printf_common+0xac>
 8007784:	f04f 30ff 	mov.w	r0, #4294967295
 8007788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800778c:	3501      	adds	r5, #1
 800778e:	e7c6      	b.n	800771e <_printf_common+0x3e>
 8007790:	18e1      	adds	r1, r4, r3
 8007792:	1c5a      	adds	r2, r3, #1
 8007794:	2030      	movs	r0, #48	; 0x30
 8007796:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800779a:	4422      	add	r2, r4
 800779c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80077a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80077a4:	3302      	adds	r3, #2
 80077a6:	e7c7      	b.n	8007738 <_printf_common+0x58>
 80077a8:	2301      	movs	r3, #1
 80077aa:	4622      	mov	r2, r4
 80077ac:	4649      	mov	r1, r9
 80077ae:	4638      	mov	r0, r7
 80077b0:	47c0      	blx	r8
 80077b2:	3001      	adds	r0, #1
 80077b4:	d0e6      	beq.n	8007784 <_printf_common+0xa4>
 80077b6:	3601      	adds	r6, #1
 80077b8:	e7d9      	b.n	800776e <_printf_common+0x8e>
	...

080077bc <_printf_i>:
 80077bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077c0:	7e0f      	ldrb	r7, [r1, #24]
 80077c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80077c4:	2f78      	cmp	r7, #120	; 0x78
 80077c6:	4691      	mov	r9, r2
 80077c8:	4680      	mov	r8, r0
 80077ca:	460c      	mov	r4, r1
 80077cc:	469a      	mov	sl, r3
 80077ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80077d2:	d807      	bhi.n	80077e4 <_printf_i+0x28>
 80077d4:	2f62      	cmp	r7, #98	; 0x62
 80077d6:	d80a      	bhi.n	80077ee <_printf_i+0x32>
 80077d8:	2f00      	cmp	r7, #0
 80077da:	f000 80d8 	beq.w	800798e <_printf_i+0x1d2>
 80077de:	2f58      	cmp	r7, #88	; 0x58
 80077e0:	f000 80a3 	beq.w	800792a <_printf_i+0x16e>
 80077e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80077ec:	e03a      	b.n	8007864 <_printf_i+0xa8>
 80077ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80077f2:	2b15      	cmp	r3, #21
 80077f4:	d8f6      	bhi.n	80077e4 <_printf_i+0x28>
 80077f6:	a101      	add	r1, pc, #4	; (adr r1, 80077fc <_printf_i+0x40>)
 80077f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80077fc:	08007855 	.word	0x08007855
 8007800:	08007869 	.word	0x08007869
 8007804:	080077e5 	.word	0x080077e5
 8007808:	080077e5 	.word	0x080077e5
 800780c:	080077e5 	.word	0x080077e5
 8007810:	080077e5 	.word	0x080077e5
 8007814:	08007869 	.word	0x08007869
 8007818:	080077e5 	.word	0x080077e5
 800781c:	080077e5 	.word	0x080077e5
 8007820:	080077e5 	.word	0x080077e5
 8007824:	080077e5 	.word	0x080077e5
 8007828:	08007975 	.word	0x08007975
 800782c:	08007899 	.word	0x08007899
 8007830:	08007957 	.word	0x08007957
 8007834:	080077e5 	.word	0x080077e5
 8007838:	080077e5 	.word	0x080077e5
 800783c:	08007997 	.word	0x08007997
 8007840:	080077e5 	.word	0x080077e5
 8007844:	08007899 	.word	0x08007899
 8007848:	080077e5 	.word	0x080077e5
 800784c:	080077e5 	.word	0x080077e5
 8007850:	0800795f 	.word	0x0800795f
 8007854:	682b      	ldr	r3, [r5, #0]
 8007856:	1d1a      	adds	r2, r3, #4
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	602a      	str	r2, [r5, #0]
 800785c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007860:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007864:	2301      	movs	r3, #1
 8007866:	e0a3      	b.n	80079b0 <_printf_i+0x1f4>
 8007868:	6820      	ldr	r0, [r4, #0]
 800786a:	6829      	ldr	r1, [r5, #0]
 800786c:	0606      	lsls	r6, r0, #24
 800786e:	f101 0304 	add.w	r3, r1, #4
 8007872:	d50a      	bpl.n	800788a <_printf_i+0xce>
 8007874:	680e      	ldr	r6, [r1, #0]
 8007876:	602b      	str	r3, [r5, #0]
 8007878:	2e00      	cmp	r6, #0
 800787a:	da03      	bge.n	8007884 <_printf_i+0xc8>
 800787c:	232d      	movs	r3, #45	; 0x2d
 800787e:	4276      	negs	r6, r6
 8007880:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007884:	485e      	ldr	r0, [pc, #376]	; (8007a00 <_printf_i+0x244>)
 8007886:	230a      	movs	r3, #10
 8007888:	e019      	b.n	80078be <_printf_i+0x102>
 800788a:	680e      	ldr	r6, [r1, #0]
 800788c:	602b      	str	r3, [r5, #0]
 800788e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007892:	bf18      	it	ne
 8007894:	b236      	sxthne	r6, r6
 8007896:	e7ef      	b.n	8007878 <_printf_i+0xbc>
 8007898:	682b      	ldr	r3, [r5, #0]
 800789a:	6820      	ldr	r0, [r4, #0]
 800789c:	1d19      	adds	r1, r3, #4
 800789e:	6029      	str	r1, [r5, #0]
 80078a0:	0601      	lsls	r1, r0, #24
 80078a2:	d501      	bpl.n	80078a8 <_printf_i+0xec>
 80078a4:	681e      	ldr	r6, [r3, #0]
 80078a6:	e002      	b.n	80078ae <_printf_i+0xf2>
 80078a8:	0646      	lsls	r6, r0, #25
 80078aa:	d5fb      	bpl.n	80078a4 <_printf_i+0xe8>
 80078ac:	881e      	ldrh	r6, [r3, #0]
 80078ae:	4854      	ldr	r0, [pc, #336]	; (8007a00 <_printf_i+0x244>)
 80078b0:	2f6f      	cmp	r7, #111	; 0x6f
 80078b2:	bf0c      	ite	eq
 80078b4:	2308      	moveq	r3, #8
 80078b6:	230a      	movne	r3, #10
 80078b8:	2100      	movs	r1, #0
 80078ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80078be:	6865      	ldr	r5, [r4, #4]
 80078c0:	60a5      	str	r5, [r4, #8]
 80078c2:	2d00      	cmp	r5, #0
 80078c4:	bfa2      	ittt	ge
 80078c6:	6821      	ldrge	r1, [r4, #0]
 80078c8:	f021 0104 	bicge.w	r1, r1, #4
 80078cc:	6021      	strge	r1, [r4, #0]
 80078ce:	b90e      	cbnz	r6, 80078d4 <_printf_i+0x118>
 80078d0:	2d00      	cmp	r5, #0
 80078d2:	d04d      	beq.n	8007970 <_printf_i+0x1b4>
 80078d4:	4615      	mov	r5, r2
 80078d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80078da:	fb03 6711 	mls	r7, r3, r1, r6
 80078de:	5dc7      	ldrb	r7, [r0, r7]
 80078e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80078e4:	4637      	mov	r7, r6
 80078e6:	42bb      	cmp	r3, r7
 80078e8:	460e      	mov	r6, r1
 80078ea:	d9f4      	bls.n	80078d6 <_printf_i+0x11a>
 80078ec:	2b08      	cmp	r3, #8
 80078ee:	d10b      	bne.n	8007908 <_printf_i+0x14c>
 80078f0:	6823      	ldr	r3, [r4, #0]
 80078f2:	07de      	lsls	r6, r3, #31
 80078f4:	d508      	bpl.n	8007908 <_printf_i+0x14c>
 80078f6:	6923      	ldr	r3, [r4, #16]
 80078f8:	6861      	ldr	r1, [r4, #4]
 80078fa:	4299      	cmp	r1, r3
 80078fc:	bfde      	ittt	le
 80078fe:	2330      	movle	r3, #48	; 0x30
 8007900:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007904:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007908:	1b52      	subs	r2, r2, r5
 800790a:	6122      	str	r2, [r4, #16]
 800790c:	f8cd a000 	str.w	sl, [sp]
 8007910:	464b      	mov	r3, r9
 8007912:	aa03      	add	r2, sp, #12
 8007914:	4621      	mov	r1, r4
 8007916:	4640      	mov	r0, r8
 8007918:	f7ff fee2 	bl	80076e0 <_printf_common>
 800791c:	3001      	adds	r0, #1
 800791e:	d14c      	bne.n	80079ba <_printf_i+0x1fe>
 8007920:	f04f 30ff 	mov.w	r0, #4294967295
 8007924:	b004      	add	sp, #16
 8007926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800792a:	4835      	ldr	r0, [pc, #212]	; (8007a00 <_printf_i+0x244>)
 800792c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007930:	6829      	ldr	r1, [r5, #0]
 8007932:	6823      	ldr	r3, [r4, #0]
 8007934:	f851 6b04 	ldr.w	r6, [r1], #4
 8007938:	6029      	str	r1, [r5, #0]
 800793a:	061d      	lsls	r5, r3, #24
 800793c:	d514      	bpl.n	8007968 <_printf_i+0x1ac>
 800793e:	07df      	lsls	r7, r3, #31
 8007940:	bf44      	itt	mi
 8007942:	f043 0320 	orrmi.w	r3, r3, #32
 8007946:	6023      	strmi	r3, [r4, #0]
 8007948:	b91e      	cbnz	r6, 8007952 <_printf_i+0x196>
 800794a:	6823      	ldr	r3, [r4, #0]
 800794c:	f023 0320 	bic.w	r3, r3, #32
 8007950:	6023      	str	r3, [r4, #0]
 8007952:	2310      	movs	r3, #16
 8007954:	e7b0      	b.n	80078b8 <_printf_i+0xfc>
 8007956:	6823      	ldr	r3, [r4, #0]
 8007958:	f043 0320 	orr.w	r3, r3, #32
 800795c:	6023      	str	r3, [r4, #0]
 800795e:	2378      	movs	r3, #120	; 0x78
 8007960:	4828      	ldr	r0, [pc, #160]	; (8007a04 <_printf_i+0x248>)
 8007962:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007966:	e7e3      	b.n	8007930 <_printf_i+0x174>
 8007968:	0659      	lsls	r1, r3, #25
 800796a:	bf48      	it	mi
 800796c:	b2b6      	uxthmi	r6, r6
 800796e:	e7e6      	b.n	800793e <_printf_i+0x182>
 8007970:	4615      	mov	r5, r2
 8007972:	e7bb      	b.n	80078ec <_printf_i+0x130>
 8007974:	682b      	ldr	r3, [r5, #0]
 8007976:	6826      	ldr	r6, [r4, #0]
 8007978:	6961      	ldr	r1, [r4, #20]
 800797a:	1d18      	adds	r0, r3, #4
 800797c:	6028      	str	r0, [r5, #0]
 800797e:	0635      	lsls	r5, r6, #24
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	d501      	bpl.n	8007988 <_printf_i+0x1cc>
 8007984:	6019      	str	r1, [r3, #0]
 8007986:	e002      	b.n	800798e <_printf_i+0x1d2>
 8007988:	0670      	lsls	r0, r6, #25
 800798a:	d5fb      	bpl.n	8007984 <_printf_i+0x1c8>
 800798c:	8019      	strh	r1, [r3, #0]
 800798e:	2300      	movs	r3, #0
 8007990:	6123      	str	r3, [r4, #16]
 8007992:	4615      	mov	r5, r2
 8007994:	e7ba      	b.n	800790c <_printf_i+0x150>
 8007996:	682b      	ldr	r3, [r5, #0]
 8007998:	1d1a      	adds	r2, r3, #4
 800799a:	602a      	str	r2, [r5, #0]
 800799c:	681d      	ldr	r5, [r3, #0]
 800799e:	6862      	ldr	r2, [r4, #4]
 80079a0:	2100      	movs	r1, #0
 80079a2:	4628      	mov	r0, r5
 80079a4:	f7f8 fc24 	bl	80001f0 <memchr>
 80079a8:	b108      	cbz	r0, 80079ae <_printf_i+0x1f2>
 80079aa:	1b40      	subs	r0, r0, r5
 80079ac:	6060      	str	r0, [r4, #4]
 80079ae:	6863      	ldr	r3, [r4, #4]
 80079b0:	6123      	str	r3, [r4, #16]
 80079b2:	2300      	movs	r3, #0
 80079b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079b8:	e7a8      	b.n	800790c <_printf_i+0x150>
 80079ba:	6923      	ldr	r3, [r4, #16]
 80079bc:	462a      	mov	r2, r5
 80079be:	4649      	mov	r1, r9
 80079c0:	4640      	mov	r0, r8
 80079c2:	47d0      	blx	sl
 80079c4:	3001      	adds	r0, #1
 80079c6:	d0ab      	beq.n	8007920 <_printf_i+0x164>
 80079c8:	6823      	ldr	r3, [r4, #0]
 80079ca:	079b      	lsls	r3, r3, #30
 80079cc:	d413      	bmi.n	80079f6 <_printf_i+0x23a>
 80079ce:	68e0      	ldr	r0, [r4, #12]
 80079d0:	9b03      	ldr	r3, [sp, #12]
 80079d2:	4298      	cmp	r0, r3
 80079d4:	bfb8      	it	lt
 80079d6:	4618      	movlt	r0, r3
 80079d8:	e7a4      	b.n	8007924 <_printf_i+0x168>
 80079da:	2301      	movs	r3, #1
 80079dc:	4632      	mov	r2, r6
 80079de:	4649      	mov	r1, r9
 80079e0:	4640      	mov	r0, r8
 80079e2:	47d0      	blx	sl
 80079e4:	3001      	adds	r0, #1
 80079e6:	d09b      	beq.n	8007920 <_printf_i+0x164>
 80079e8:	3501      	adds	r5, #1
 80079ea:	68e3      	ldr	r3, [r4, #12]
 80079ec:	9903      	ldr	r1, [sp, #12]
 80079ee:	1a5b      	subs	r3, r3, r1
 80079f0:	42ab      	cmp	r3, r5
 80079f2:	dcf2      	bgt.n	80079da <_printf_i+0x21e>
 80079f4:	e7eb      	b.n	80079ce <_printf_i+0x212>
 80079f6:	2500      	movs	r5, #0
 80079f8:	f104 0619 	add.w	r6, r4, #25
 80079fc:	e7f5      	b.n	80079ea <_printf_i+0x22e>
 80079fe:	bf00      	nop
 8007a00:	08007e59 	.word	0x08007e59
 8007a04:	08007e6a 	.word	0x08007e6a

08007a08 <_sbrk_r>:
 8007a08:	b538      	push	{r3, r4, r5, lr}
 8007a0a:	4d06      	ldr	r5, [pc, #24]	; (8007a24 <_sbrk_r+0x1c>)
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	4604      	mov	r4, r0
 8007a10:	4608      	mov	r0, r1
 8007a12:	602b      	str	r3, [r5, #0]
 8007a14:	f7fa fb50 	bl	80020b8 <_sbrk>
 8007a18:	1c43      	adds	r3, r0, #1
 8007a1a:	d102      	bne.n	8007a22 <_sbrk_r+0x1a>
 8007a1c:	682b      	ldr	r3, [r5, #0]
 8007a1e:	b103      	cbz	r3, 8007a22 <_sbrk_r+0x1a>
 8007a20:	6023      	str	r3, [r4, #0]
 8007a22:	bd38      	pop	{r3, r4, r5, pc}
 8007a24:	20000d14 	.word	0x20000d14

08007a28 <__sread>:
 8007a28:	b510      	push	{r4, lr}
 8007a2a:	460c      	mov	r4, r1
 8007a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a30:	f000 f8a0 	bl	8007b74 <_read_r>
 8007a34:	2800      	cmp	r0, #0
 8007a36:	bfab      	itete	ge
 8007a38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a3a:	89a3      	ldrhlt	r3, [r4, #12]
 8007a3c:	181b      	addge	r3, r3, r0
 8007a3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007a42:	bfac      	ite	ge
 8007a44:	6563      	strge	r3, [r4, #84]	; 0x54
 8007a46:	81a3      	strhlt	r3, [r4, #12]
 8007a48:	bd10      	pop	{r4, pc}

08007a4a <__swrite>:
 8007a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a4e:	461f      	mov	r7, r3
 8007a50:	898b      	ldrh	r3, [r1, #12]
 8007a52:	05db      	lsls	r3, r3, #23
 8007a54:	4605      	mov	r5, r0
 8007a56:	460c      	mov	r4, r1
 8007a58:	4616      	mov	r6, r2
 8007a5a:	d505      	bpl.n	8007a68 <__swrite+0x1e>
 8007a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a60:	2302      	movs	r3, #2
 8007a62:	2200      	movs	r2, #0
 8007a64:	f000 f868 	bl	8007b38 <_lseek_r>
 8007a68:	89a3      	ldrh	r3, [r4, #12]
 8007a6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a72:	81a3      	strh	r3, [r4, #12]
 8007a74:	4632      	mov	r2, r6
 8007a76:	463b      	mov	r3, r7
 8007a78:	4628      	mov	r0, r5
 8007a7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a7e:	f000 b817 	b.w	8007ab0 <_write_r>

08007a82 <__sseek>:
 8007a82:	b510      	push	{r4, lr}
 8007a84:	460c      	mov	r4, r1
 8007a86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a8a:	f000 f855 	bl	8007b38 <_lseek_r>
 8007a8e:	1c43      	adds	r3, r0, #1
 8007a90:	89a3      	ldrh	r3, [r4, #12]
 8007a92:	bf15      	itete	ne
 8007a94:	6560      	strne	r0, [r4, #84]	; 0x54
 8007a96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007a9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007a9e:	81a3      	strheq	r3, [r4, #12]
 8007aa0:	bf18      	it	ne
 8007aa2:	81a3      	strhne	r3, [r4, #12]
 8007aa4:	bd10      	pop	{r4, pc}

08007aa6 <__sclose>:
 8007aa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aaa:	f000 b813 	b.w	8007ad4 <_close_r>
	...

08007ab0 <_write_r>:
 8007ab0:	b538      	push	{r3, r4, r5, lr}
 8007ab2:	4d07      	ldr	r5, [pc, #28]	; (8007ad0 <_write_r+0x20>)
 8007ab4:	4604      	mov	r4, r0
 8007ab6:	4608      	mov	r0, r1
 8007ab8:	4611      	mov	r1, r2
 8007aba:	2200      	movs	r2, #0
 8007abc:	602a      	str	r2, [r5, #0]
 8007abe:	461a      	mov	r2, r3
 8007ac0:	f7fa faa9 	bl	8002016 <_write>
 8007ac4:	1c43      	adds	r3, r0, #1
 8007ac6:	d102      	bne.n	8007ace <_write_r+0x1e>
 8007ac8:	682b      	ldr	r3, [r5, #0]
 8007aca:	b103      	cbz	r3, 8007ace <_write_r+0x1e>
 8007acc:	6023      	str	r3, [r4, #0]
 8007ace:	bd38      	pop	{r3, r4, r5, pc}
 8007ad0:	20000d14 	.word	0x20000d14

08007ad4 <_close_r>:
 8007ad4:	b538      	push	{r3, r4, r5, lr}
 8007ad6:	4d06      	ldr	r5, [pc, #24]	; (8007af0 <_close_r+0x1c>)
 8007ad8:	2300      	movs	r3, #0
 8007ada:	4604      	mov	r4, r0
 8007adc:	4608      	mov	r0, r1
 8007ade:	602b      	str	r3, [r5, #0]
 8007ae0:	f7fa fab5 	bl	800204e <_close>
 8007ae4:	1c43      	adds	r3, r0, #1
 8007ae6:	d102      	bne.n	8007aee <_close_r+0x1a>
 8007ae8:	682b      	ldr	r3, [r5, #0]
 8007aea:	b103      	cbz	r3, 8007aee <_close_r+0x1a>
 8007aec:	6023      	str	r3, [r4, #0]
 8007aee:	bd38      	pop	{r3, r4, r5, pc}
 8007af0:	20000d14 	.word	0x20000d14

08007af4 <_fstat_r>:
 8007af4:	b538      	push	{r3, r4, r5, lr}
 8007af6:	4d07      	ldr	r5, [pc, #28]	; (8007b14 <_fstat_r+0x20>)
 8007af8:	2300      	movs	r3, #0
 8007afa:	4604      	mov	r4, r0
 8007afc:	4608      	mov	r0, r1
 8007afe:	4611      	mov	r1, r2
 8007b00:	602b      	str	r3, [r5, #0]
 8007b02:	f7fa fab0 	bl	8002066 <_fstat>
 8007b06:	1c43      	adds	r3, r0, #1
 8007b08:	d102      	bne.n	8007b10 <_fstat_r+0x1c>
 8007b0a:	682b      	ldr	r3, [r5, #0]
 8007b0c:	b103      	cbz	r3, 8007b10 <_fstat_r+0x1c>
 8007b0e:	6023      	str	r3, [r4, #0]
 8007b10:	bd38      	pop	{r3, r4, r5, pc}
 8007b12:	bf00      	nop
 8007b14:	20000d14 	.word	0x20000d14

08007b18 <_isatty_r>:
 8007b18:	b538      	push	{r3, r4, r5, lr}
 8007b1a:	4d06      	ldr	r5, [pc, #24]	; (8007b34 <_isatty_r+0x1c>)
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	4604      	mov	r4, r0
 8007b20:	4608      	mov	r0, r1
 8007b22:	602b      	str	r3, [r5, #0]
 8007b24:	f7fa faaf 	bl	8002086 <_isatty>
 8007b28:	1c43      	adds	r3, r0, #1
 8007b2a:	d102      	bne.n	8007b32 <_isatty_r+0x1a>
 8007b2c:	682b      	ldr	r3, [r5, #0]
 8007b2e:	b103      	cbz	r3, 8007b32 <_isatty_r+0x1a>
 8007b30:	6023      	str	r3, [r4, #0]
 8007b32:	bd38      	pop	{r3, r4, r5, pc}
 8007b34:	20000d14 	.word	0x20000d14

08007b38 <_lseek_r>:
 8007b38:	b538      	push	{r3, r4, r5, lr}
 8007b3a:	4d07      	ldr	r5, [pc, #28]	; (8007b58 <_lseek_r+0x20>)
 8007b3c:	4604      	mov	r4, r0
 8007b3e:	4608      	mov	r0, r1
 8007b40:	4611      	mov	r1, r2
 8007b42:	2200      	movs	r2, #0
 8007b44:	602a      	str	r2, [r5, #0]
 8007b46:	461a      	mov	r2, r3
 8007b48:	f7fa faa8 	bl	800209c <_lseek>
 8007b4c:	1c43      	adds	r3, r0, #1
 8007b4e:	d102      	bne.n	8007b56 <_lseek_r+0x1e>
 8007b50:	682b      	ldr	r3, [r5, #0]
 8007b52:	b103      	cbz	r3, 8007b56 <_lseek_r+0x1e>
 8007b54:	6023      	str	r3, [r4, #0]
 8007b56:	bd38      	pop	{r3, r4, r5, pc}
 8007b58:	20000d14 	.word	0x20000d14

08007b5c <__malloc_lock>:
 8007b5c:	4801      	ldr	r0, [pc, #4]	; (8007b64 <__malloc_lock+0x8>)
 8007b5e:	f7ff bb1d 	b.w	800719c <__retarget_lock_acquire_recursive>
 8007b62:	bf00      	nop
 8007b64:	20000d08 	.word	0x20000d08

08007b68 <__malloc_unlock>:
 8007b68:	4801      	ldr	r0, [pc, #4]	; (8007b70 <__malloc_unlock+0x8>)
 8007b6a:	f7ff bb18 	b.w	800719e <__retarget_lock_release_recursive>
 8007b6e:	bf00      	nop
 8007b70:	20000d08 	.word	0x20000d08

08007b74 <_read_r>:
 8007b74:	b538      	push	{r3, r4, r5, lr}
 8007b76:	4d07      	ldr	r5, [pc, #28]	; (8007b94 <_read_r+0x20>)
 8007b78:	4604      	mov	r4, r0
 8007b7a:	4608      	mov	r0, r1
 8007b7c:	4611      	mov	r1, r2
 8007b7e:	2200      	movs	r2, #0
 8007b80:	602a      	str	r2, [r5, #0]
 8007b82:	461a      	mov	r2, r3
 8007b84:	f7fa fa2a 	bl	8001fdc <_read>
 8007b88:	1c43      	adds	r3, r0, #1
 8007b8a:	d102      	bne.n	8007b92 <_read_r+0x1e>
 8007b8c:	682b      	ldr	r3, [r5, #0]
 8007b8e:	b103      	cbz	r3, 8007b92 <_read_r+0x1e>
 8007b90:	6023      	str	r3, [r4, #0]
 8007b92:	bd38      	pop	{r3, r4, r5, pc}
 8007b94:	20000d14 	.word	0x20000d14

08007b98 <_init>:
 8007b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b9a:	bf00      	nop
 8007b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b9e:	bc08      	pop	{r3}
 8007ba0:	469e      	mov	lr, r3
 8007ba2:	4770      	bx	lr

08007ba4 <_fini>:
 8007ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ba6:	bf00      	nop
 8007ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007baa:	bc08      	pop	{r3}
 8007bac:	469e      	mov	lr, r3
 8007bae:	4770      	bx	lr


04.TIMER_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005000  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  080051ac  080051ac  000151ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052d8  080052d8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080052d8  080052d8  000152d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052e0  080052e0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052e0  080052e0  000152e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052e4  080052e4  000152e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080052e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000b5c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000bcc  20000bcc  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010ffa  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002589  00000000  00000000  0003109a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d30  00000000  00000000  00033628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c48  00000000  00000000  00034358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000388f  00000000  00000000  00034fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f3e2  00000000  00000000  0003882f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc057  00000000  00000000  00047c11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00123c68  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d34  00000000  00000000  00123cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000070 	.word	0x20000070
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005194 	.word	0x08005194

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000074 	.word	0x20000074
 80001e8:	08005194 	.word	0x08005194

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <led_all_on>:

	fp[func_index]();
}

void led_all_on(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|
//			GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, 1);
	HAL_GPIO_WritePin(GPIOD, 0xff, 1);
 80004f4:	2201      	movs	r2, #1
 80004f6:	21ff      	movs	r1, #255	; 0xff
 80004f8:	4802      	ldr	r0, [pc, #8]	; (8000504 <led_all_on+0x14>)
 80004fa:	f001 ffbf 	bl	800247c <HAL_GPIO_WritePin>
}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40020c00 	.word	0x40020c00

08000508 <led_all_off>:

void led_all_off(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|
//				GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, 0);
	HAL_GPIO_WritePin(GPIOD, 0xff, 0);
 800050c:	2200      	movs	r2, #0
 800050e:	21ff      	movs	r1, #255	; 0xff
 8000510:	4802      	ldr	r0, [pc, #8]	; (800051c <led_all_off+0x14>)
 8000512:	f001 ffb3 	bl	800247c <HAL_GPIO_WritePin>
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40020c00 	.word	0x40020c00

08000520 <led_on_up>:

void led_on_up(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
	//	static int i = 0;
	int i = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	607b      	str	r3, [r7, #4]
	t1ms_counter = 0;
 800052a:	4b11      	ldr	r3, [pc, #68]	; (8000570 <led_on_up+0x50>)
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]

	led_all_off();
 8000530:	f7ff ffea 	bl	8000508 <led_all_off>

	while(i < 8)
 8000534:	e014      	b.n	8000560 <led_on_up+0x40>
	{
		if (t1ms_counter >= 200)
 8000536:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <led_on_up+0x50>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	2bc7      	cmp	r3, #199	; 0xc7
 800053c:	dd10      	ble.n	8000560 <led_on_up+0x40>
		{
			t1ms_counter = 0;
 800053e:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <led_on_up+0x50>)
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
			led_all_off();
 8000544:	f7ff ffe0 	bl	8000508 <led_all_off>
			HAL_GPIO_WritePin(GPIOD, 0x01 << i++, 1);
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	1c5a      	adds	r2, r3, #1
 800054c:	607a      	str	r2, [r7, #4]
 800054e:	2201      	movs	r2, #1
 8000550:	fa02 f303 	lsl.w	r3, r2, r3
 8000554:	b29b      	uxth	r3, r3
 8000556:	2201      	movs	r2, #1
 8000558:	4619      	mov	r1, r3
 800055a:	4806      	ldr	r0, [pc, #24]	; (8000574 <led_on_up+0x54>)
 800055c:	f001 ff8e 	bl	800247c <HAL_GPIO_WritePin>
	while(i < 8)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2b07      	cmp	r3, #7
 8000564:	dde7      	ble.n	8000536 <led_on_up+0x16>
		}
	}
}
 8000566:	bf00      	nop
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	2000084c 	.word	0x2000084c
 8000574:	40020c00 	.word	0x40020c00

08000578 <led_on_down>:

void led_on_down(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
	int i = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	607b      	str	r3, [r7, #4]
	t1ms_counter = 0;
 8000582:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <led_on_down+0x50>)
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]

	led_all_off();
 8000588:	f7ff ffbe 	bl	8000508 <led_all_off>

	while(i < 8)
 800058c:	e014      	b.n	80005b8 <led_on_down+0x40>
	{
		if (t1ms_counter >= 200)
 800058e:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <led_on_down+0x50>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2bc7      	cmp	r3, #199	; 0xc7
 8000594:	dd10      	ble.n	80005b8 <led_on_down+0x40>
		{
			t1ms_counter = 0;
 8000596:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <led_on_down+0x50>)
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
			led_all_off();
 800059c:	f7ff ffb4 	bl	8000508 <led_all_off>
			HAL_GPIO_WritePin(GPIOD, 0x80 >> i++, 1);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	1c5a      	adds	r2, r3, #1
 80005a4:	607a      	str	r2, [r7, #4]
 80005a6:	2280      	movs	r2, #128	; 0x80
 80005a8:	fa42 f303 	asr.w	r3, r2, r3
 80005ac:	b29b      	uxth	r3, r3
 80005ae:	2201      	movs	r2, #1
 80005b0:	4619      	mov	r1, r3
 80005b2:	4806      	ldr	r0, [pc, #24]	; (80005cc <led_on_down+0x54>)
 80005b4:	f001 ff62 	bl	800247c <HAL_GPIO_WritePin>
	while(i < 8)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2b07      	cmp	r3, #7
 80005bc:	dde7      	ble.n	800058e <led_on_down+0x16>
		}
	}
}
 80005be:	bf00      	nop
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	2000084c 	.word	0x2000084c
 80005cc:	40020c00 	.word	0x40020c00

080005d0 <led_keepon_up>:

void led_keepon_up(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
	int i = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	607b      	str	r3, [r7, #4]
	t1ms_counter = 0;
 80005da:	4b10      	ldr	r3, [pc, #64]	; (800061c <led_keepon_up+0x4c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]

	led_all_off();
 80005e0:	f7ff ff92 	bl	8000508 <led_all_off>

	while (i < 8)
 80005e4:	e012      	b.n	800060c <led_keepon_up+0x3c>
	{
		if (t1ms_counter >= 200)
 80005e6:	4b0d      	ldr	r3, [pc, #52]	; (800061c <led_keepon_up+0x4c>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2bc7      	cmp	r3, #199	; 0xc7
 80005ec:	dd0e      	ble.n	800060c <led_keepon_up+0x3c>
		{
			t1ms_counter = 0;
 80005ee:	4b0b      	ldr	r3, [pc, #44]	; (800061c <led_keepon_up+0x4c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, 0x01 << i++, 1);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	1c5a      	adds	r2, r3, #1
 80005f8:	607a      	str	r2, [r7, #4]
 80005fa:	2201      	movs	r2, #1
 80005fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000600:	b29b      	uxth	r3, r3
 8000602:	2201      	movs	r2, #1
 8000604:	4619      	mov	r1, r3
 8000606:	4806      	ldr	r0, [pc, #24]	; (8000620 <led_keepon_up+0x50>)
 8000608:	f001 ff38 	bl	800247c <HAL_GPIO_WritePin>
	while (i < 8)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2b07      	cmp	r3, #7
 8000610:	dde9      	ble.n	80005e6 <led_keepon_up+0x16>
		}
	}
}
 8000612:	bf00      	nop
 8000614:	bf00      	nop
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	2000084c 	.word	0x2000084c
 8000620:	40020c00 	.word	0x40020c00

08000624 <led_keepon_down>:

void led_keepon_down(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
	int i = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
	t1ms_counter = 0;
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <led_keepon_down+0x4c>)
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]

	led_all_off();
 8000634:	f7ff ff68 	bl	8000508 <led_all_off>

	while (i < 8)
 8000638:	e012      	b.n	8000660 <led_keepon_down+0x3c>
	{
		if (t1ms_counter >= 200)
 800063a:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <led_keepon_down+0x4c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2bc7      	cmp	r3, #199	; 0xc7
 8000640:	dd0e      	ble.n	8000660 <led_keepon_down+0x3c>
		{
			t1ms_counter = 0;
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <led_keepon_down+0x4c>)
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, 0x80 >> i++, 1);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	1c5a      	adds	r2, r3, #1
 800064c:	607a      	str	r2, [r7, #4]
 800064e:	2280      	movs	r2, #128	; 0x80
 8000650:	fa42 f303 	asr.w	r3, r2, r3
 8000654:	b29b      	uxth	r3, r3
 8000656:	2201      	movs	r2, #1
 8000658:	4619      	mov	r1, r3
 800065a:	4806      	ldr	r0, [pc, #24]	; (8000674 <led_keepon_down+0x50>)
 800065c:	f001 ff0e 	bl	800247c <HAL_GPIO_WritePin>
	while (i < 8)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2b07      	cmp	r3, #7
 8000664:	dde9      	ble.n	800063a <led_keepon_down+0x16>
		}
	}
}
 8000666:	bf00      	nop
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	2000084c 	.word	0x2000084c
 8000674:	40020c00 	.word	0x40020c00

08000678 <led_flower_on>:

void led_flower_on(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
	int i = 0, delay = 300;
 800067e:	2300      	movs	r3, #0
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000686:	603b      	str	r3, [r7, #0]
	t1ms_counter = 0;
 8000688:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <led_flower_on+0x78>)
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]

	led_all_off();
 800068e:	f7ff ff3b 	bl	8000508 <led_all_off>

	while(i < 4)
 8000692:	e024      	b.n	80006de <led_flower_on+0x66>
	{
		if (t1ms_counter >= delay)
 8000694:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <led_flower_on+0x78>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	683a      	ldr	r2, [r7, #0]
 800069a:	429a      	cmp	r2, r3
 800069c:	dc1f      	bgt.n	80006de <led_flower_on+0x66>
		{
			t1ms_counter = 0;
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <led_flower_on+0x78>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, 0x01 << (4 + i), 1);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	3304      	adds	r3, #4
 80006a8:	2201      	movs	r2, #1
 80006aa:	fa02 f303 	lsl.w	r3, r2, r3
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	2201      	movs	r2, #1
 80006b2:	4619      	mov	r1, r3
 80006b4:	480f      	ldr	r0, [pc, #60]	; (80006f4 <led_flower_on+0x7c>)
 80006b6:	f001 fee1 	bl	800247c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, 0x01 << (3 - i), 1);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	f1c3 0303 	rsb	r3, r3, #3
 80006c0:	2201      	movs	r2, #1
 80006c2:	fa02 f303 	lsl.w	r3, r2, r3
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	2201      	movs	r2, #1
 80006ca:	4619      	mov	r1, r3
 80006cc:	4809      	ldr	r0, [pc, #36]	; (80006f4 <led_flower_on+0x7c>)
 80006ce:	f001 fed5 	bl	800247c <HAL_GPIO_WritePin>
			i++;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	3301      	adds	r3, #1
 80006d6:	607b      	str	r3, [r7, #4]
			delay += 100;
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	3364      	adds	r3, #100	; 0x64
 80006dc:	603b      	str	r3, [r7, #0]
	while(i < 4)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2b03      	cmp	r3, #3
 80006e2:	ddd7      	ble.n	8000694 <led_flower_on+0x1c>
		}
	}
}
 80006e4:	bf00      	nop
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	2000084c 	.word	0x2000084c
 80006f4:	40020c00 	.word	0x40020c00

080006f8 <led_flower_off>:

void led_flower_off(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
	int i = 0, delay = 700;
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8000706:	603b      	str	r3, [r7, #0]
	t1ms_counter = 0;
 8000708:	4b18      	ldr	r3, [pc, #96]	; (800076c <led_flower_off+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]

	led_all_on();
 800070e:	f7ff feef 	bl	80004f0 <led_all_on>

	while(i < 4)
 8000712:	e023      	b.n	800075c <led_flower_off+0x64>
	{
		if (t1ms_counter >= delay)
 8000714:	4b15      	ldr	r3, [pc, #84]	; (800076c <led_flower_off+0x74>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	683a      	ldr	r2, [r7, #0]
 800071a:	429a      	cmp	r2, r3
 800071c:	dc1e      	bgt.n	800075c <led_flower_off+0x64>
		{
			t1ms_counter = 0;
 800071e:	4b13      	ldr	r3, [pc, #76]	; (800076c <led_flower_off+0x74>)
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, 0x01 << (0 + i), 0);
 8000724:	2201      	movs	r2, #1
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	fa02 f303 	lsl.w	r3, r2, r3
 800072c:	b29b      	uxth	r3, r3
 800072e:	2200      	movs	r2, #0
 8000730:	4619      	mov	r1, r3
 8000732:	480f      	ldr	r0, [pc, #60]	; (8000770 <led_flower_off+0x78>)
 8000734:	f001 fea2 	bl	800247c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, 0x01 << (7 - i), 0);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	f1c3 0307 	rsb	r3, r3, #7
 800073e:	2201      	movs	r2, #1
 8000740:	fa02 f303 	lsl.w	r3, r2, r3
 8000744:	b29b      	uxth	r3, r3
 8000746:	2200      	movs	r2, #0
 8000748:	4619      	mov	r1, r3
 800074a:	4809      	ldr	r0, [pc, #36]	; (8000770 <led_flower_off+0x78>)
 800074c:	f001 fe96 	bl	800247c <HAL_GPIO_WritePin>
			i++;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3301      	adds	r3, #1
 8000754:	607b      	str	r3, [r7, #4]
			delay -= 100;
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	3b64      	subs	r3, #100	; 0x64
 800075a:	603b      	str	r3, [r7, #0]
	while(i < 4)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2b03      	cmp	r3, #3
 8000760:	ddd8      	ble.n	8000714 <led_flower_off+0x1c>
		}
	}
}
 8000762:	bf00      	nop
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	2000084c 	.word	0x2000084c
 8000770:	40020c00 	.word	0x40020c00

08000774 <HAL_STSTICK_Handler>:
// call by SysTick_Handler of stm32f4xx_it.c
// ARM default timer
// enter here every 1ms
volatile int t1ms_counter = 0;
void HAL_STSTICK_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
	t1ms_counter++; // 1ms timer
 8000778:	4b04      	ldr	r3, [pc, #16]	; (800078c <HAL_STSTICK_Handler+0x18>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	3301      	adds	r3, #1
 800077e:	4a03      	ldr	r2, [pc, #12]	; (800078c <HAL_STSTICK_Handler+0x18>)
 8000780:	6013      	str	r3, [r2, #0]
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	2000084c 	.word	0x2000084c

08000790 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000798:	1d39      	adds	r1, r7, #4
 800079a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800079e:	2201      	movs	r2, #1
 80007a0:	4803      	ldr	r0, [pc, #12]	; (80007b0 <__io_putchar+0x20>)
 80007a2:	f002 fc86 	bl	80030b2 <HAL_UART_Transmit>

  return ch;
 80007a6:	687b      	ldr	r3, [r7, #4]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	200002b4 	.word	0x200002b4

080007b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b8:	f000 ff52 	bl	8001660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007bc:	f000 f826 	bl	800080c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c0:	f000 f95e 	bl	8000a80 <MX_GPIO_Init>
  MX_ETH_Init();
 80007c4:	f000 f88c 	bl	80008e0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80007c8:	f000 f8d8 	bl	800097c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007cc:	f000 f92a 	bl	8000a24 <MX_USB_OTG_FS_PCD_Init>
  MX_USART6_UART_Init();
 80007d0:	f000 f8fe 	bl	80009d0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("main() start!!\n");
 80007d4:	4808      	ldr	r0, [pc, #32]	; (80007f8 <main+0x44>)
 80007d6:	f004 f839 	bl	800484c <puts>
  //  led_main();
  HAL_UART_Receive_IT(&huart3, &rx_data, 1); // RX huart3로 들어오는 interrupt 활성화
 80007da:	2201      	movs	r2, #1
 80007dc:	4907      	ldr	r1, [pc, #28]	; (80007fc <main+0x48>)
 80007de:	4808      	ldr	r0, [pc, #32]	; (8000800 <main+0x4c>)
 80007e0:	f002 fcf9 	bl	80031d6 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1); // RX huart6로 들어오는 interrupt 활성화
 80007e4:	2201      	movs	r2, #1
 80007e6:	4907      	ldr	r1, [pc, #28]	; (8000804 <main+0x50>)
 80007e8:	4807      	ldr	r0, [pc, #28]	; (8000808 <main+0x54>)
 80007ea:	f002 fcf4 	bl	80031d6 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  printf("2936\n");
//	  HAL_Delay(100);
	  pc_command_processing();
 80007ee:	f000 fdb1 	bl	8001354 <pc_command_processing>
	  bt_command_processing();
 80007f2:	f000 fe91 	bl	8001518 <bt_command_processing>
	  pc_command_processing();
 80007f6:	e7fa      	b.n	80007ee <main+0x3a>
 80007f8:	080051ac 	.word	0x080051ac
 80007fc:	20000848 	.word	0x20000848
 8000800:	200002b4 	.word	0x200002b4
 8000804:	20000849 	.word	0x20000849
 8000808:	200002f8 	.word	0x200002f8

0800080c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b094      	sub	sp, #80	; 0x50
 8000810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000812:	f107 0320 	add.w	r3, r7, #32
 8000816:	2230      	movs	r2, #48	; 0x30
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f003 ffa0 	bl	8004760 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000830:	2300      	movs	r3, #0
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	4b28      	ldr	r3, [pc, #160]	; (80008d8 <SystemClock_Config+0xcc>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	4a27      	ldr	r2, [pc, #156]	; (80008d8 <SystemClock_Config+0xcc>)
 800083a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083e:	6413      	str	r3, [r2, #64]	; 0x40
 8000840:	4b25      	ldr	r3, [pc, #148]	; (80008d8 <SystemClock_Config+0xcc>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800084c:	2300      	movs	r3, #0
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	4b22      	ldr	r3, [pc, #136]	; (80008dc <SystemClock_Config+0xd0>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a21      	ldr	r2, [pc, #132]	; (80008dc <SystemClock_Config+0xd0>)
 8000856:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800085a:	6013      	str	r3, [r2, #0]
 800085c:	4b1f      	ldr	r3, [pc, #124]	; (80008dc <SystemClock_Config+0xd0>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000868:	2301      	movs	r3, #1
 800086a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800086c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000872:	2302      	movs	r3, #2
 8000874:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000876:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800087a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800087c:	2304      	movs	r3, #4
 800087e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000880:	23a8      	movs	r3, #168	; 0xa8
 8000882:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000884:	2302      	movs	r3, #2
 8000886:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000888:	2307      	movs	r3, #7
 800088a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088c:	f107 0320 	add.w	r3, r7, #32
 8000890:	4618      	mov	r0, r3
 8000892:	f001 ff29 	bl	80026e8 <HAL_RCC_OscConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800089c:	f000 f9d0 	bl	8000c40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a0:	230f      	movs	r3, #15
 80008a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a4:	2302      	movs	r3, #2
 80008a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	2105      	movs	r1, #5
 80008be:	4618      	mov	r0, r3
 80008c0:	f002 f98a 	bl	8002bd8 <HAL_RCC_ClockConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008ca:	f000 f9b9 	bl	8000c40 <Error_Handler>
  }
}
 80008ce:	bf00      	nop
 80008d0:	3750      	adds	r7, #80	; 0x50
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40007000 	.word	0x40007000

080008e0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008e4:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <MX_ETH_Init+0x84>)
 80008e6:	4a20      	ldr	r2, [pc, #128]	; (8000968 <MX_ETH_Init+0x88>)
 80008e8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008ea:	4b20      	ldr	r3, [pc, #128]	; (800096c <MX_ETH_Init+0x8c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008f0:	4b1e      	ldr	r3, [pc, #120]	; (800096c <MX_ETH_Init+0x8c>)
 80008f2:	2280      	movs	r2, #128	; 0x80
 80008f4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008f6:	4b1d      	ldr	r3, [pc, #116]	; (800096c <MX_ETH_Init+0x8c>)
 80008f8:	22e1      	movs	r2, #225	; 0xe1
 80008fa:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008fc:	4b1b      	ldr	r3, [pc, #108]	; (800096c <MX_ETH_Init+0x8c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000902:	4b1a      	ldr	r3, [pc, #104]	; (800096c <MX_ETH_Init+0x8c>)
 8000904:	2200      	movs	r2, #0
 8000906:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000908:	4b18      	ldr	r3, [pc, #96]	; (800096c <MX_ETH_Init+0x8c>)
 800090a:	2200      	movs	r2, #0
 800090c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800090e:	4b15      	ldr	r3, [pc, #84]	; (8000964 <MX_ETH_Init+0x84>)
 8000910:	4a16      	ldr	r2, [pc, #88]	; (800096c <MX_ETH_Init+0x8c>)
 8000912:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000914:	4b13      	ldr	r3, [pc, #76]	; (8000964 <MX_ETH_Init+0x84>)
 8000916:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800091a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800091c:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_ETH_Init+0x84>)
 800091e:	4a14      	ldr	r2, [pc, #80]	; (8000970 <MX_ETH_Init+0x90>)
 8000920:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000922:	4b10      	ldr	r3, [pc, #64]	; (8000964 <MX_ETH_Init+0x84>)
 8000924:	4a13      	ldr	r2, [pc, #76]	; (8000974 <MX_ETH_Init+0x94>)
 8000926:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000928:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_ETH_Init+0x84>)
 800092a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800092e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000930:	480c      	ldr	r0, [pc, #48]	; (8000964 <MX_ETH_Init+0x84>)
 8000932:	f001 f8cf 	bl	8001ad4 <HAL_ETH_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800093c:	f000 f980 	bl	8000c40 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000940:	2238      	movs	r2, #56	; 0x38
 8000942:	2100      	movs	r1, #0
 8000944:	480c      	ldr	r0, [pc, #48]	; (8000978 <MX_ETH_Init+0x98>)
 8000946:	f003 ff0b 	bl	8004760 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <MX_ETH_Init+0x98>)
 800094c:	2221      	movs	r2, #33	; 0x21
 800094e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_ETH_Init+0x98>)
 8000952:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000956:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <MX_ETH_Init+0x98>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000204 	.word	0x20000204
 8000968:	40028000 	.word	0x40028000
 800096c:	20000850 	.word	0x20000850
 8000970:	20000164 	.word	0x20000164
 8000974:	200000c4 	.word	0x200000c4
 8000978:	2000008c 	.word	0x2000008c

0800097c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000980:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <MX_USART3_UART_Init+0x4c>)
 8000982:	4a12      	ldr	r2, [pc, #72]	; (80009cc <MX_USART3_UART_Init+0x50>)
 8000984:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000986:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <MX_USART3_UART_Init+0x4c>)
 8000988:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800098c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_USART3_UART_Init+0x4c>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <MX_USART3_UART_Init+0x4c>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <MX_USART3_UART_Init+0x4c>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <MX_USART3_UART_Init+0x4c>)
 80009a2:	220c      	movs	r2, #12
 80009a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a6:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <MX_USART3_UART_Init+0x4c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <MX_USART3_UART_Init+0x4c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009b2:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_USART3_UART_Init+0x4c>)
 80009b4:	f002 fb30 	bl	8003018 <HAL_UART_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009be:	f000 f93f 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200002b4 	.word	0x200002b4
 80009cc:	40004800 	.word	0x40004800

080009d0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <MX_USART6_UART_Init+0x4c>)
 80009d6:	4a12      	ldr	r2, [pc, #72]	; (8000a20 <MX_USART6_UART_Init+0x50>)
 80009d8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <MX_USART6_UART_Init+0x4c>)
 80009dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009e0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_USART6_UART_Init+0x4c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_USART6_UART_Init+0x4c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <MX_USART6_UART_Init+0x4c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_USART6_UART_Init+0x4c>)
 80009f6:	220c      	movs	r2, #12
 80009f8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <MX_USART6_UART_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <MX_USART6_UART_Init+0x4c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000a06:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_USART6_UART_Init+0x4c>)
 8000a08:	f002 fb06 	bl	8003018 <HAL_UART_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000a12:	f000 f915 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200002f8 	.word	0x200002f8
 8000a20:	40011400 	.word	0x40011400

08000a24 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a28:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a2a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a2e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a32:	2204      	movs	r2, #4
 8000a34:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a38:	2202      	movs	r2, #2
 8000a3a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a44:	2202      	movs	r2, #2
 8000a46:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a48:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a54:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a5a:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a66:	4805      	ldr	r0, [pc, #20]	; (8000a7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a68:	f001 fd21 	bl	80024ae <HAL_PCD_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a72:	f000 f8e5 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	2000033c 	.word	0x2000033c

08000a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08c      	sub	sp, #48	; 0x30
 8000a84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
 8000a94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	61bb      	str	r3, [r7, #24]
 8000a9a:	4b63      	ldr	r3, [pc, #396]	; (8000c28 <MX_GPIO_Init+0x1a8>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a62      	ldr	r2, [pc, #392]	; (8000c28 <MX_GPIO_Init+0x1a8>)
 8000aa0:	f043 0304 	orr.w	r3, r3, #4
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b60      	ldr	r3, [pc, #384]	; (8000c28 <MX_GPIO_Init+0x1a8>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0304 	and.w	r3, r3, #4
 8000aae:	61bb      	str	r3, [r7, #24]
 8000ab0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	617b      	str	r3, [r7, #20]
 8000ab6:	4b5c      	ldr	r3, [pc, #368]	; (8000c28 <MX_GPIO_Init+0x1a8>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a5b      	ldr	r2, [pc, #364]	; (8000c28 <MX_GPIO_Init+0x1a8>)
 8000abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b59      	ldr	r3, [pc, #356]	; (8000c28 <MX_GPIO_Init+0x1a8>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aca:	617b      	str	r3, [r7, #20]
 8000acc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
 8000ad2:	4b55      	ldr	r3, [pc, #340]	; (8000c28 <MX_GPIO_Init+0x1a8>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a54      	ldr	r2, [pc, #336]	; (8000c28 <MX_GPIO_Init+0x1a8>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b52      	ldr	r3, [pc, #328]	; (8000c28 <MX_GPIO_Init+0x1a8>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	4b4e      	ldr	r3, [pc, #312]	; (8000c28 <MX_GPIO_Init+0x1a8>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a4d      	ldr	r2, [pc, #308]	; (8000c28 <MX_GPIO_Init+0x1a8>)
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b4b      	ldr	r3, [pc, #300]	; (8000c28 <MX_GPIO_Init+0x1a8>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	4b47      	ldr	r3, [pc, #284]	; (8000c28 <MX_GPIO_Init+0x1a8>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a46      	ldr	r2, [pc, #280]	; (8000c28 <MX_GPIO_Init+0x1a8>)
 8000b10:	f043 0310 	orr.w	r3, r3, #16
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b44      	ldr	r3, [pc, #272]	; (8000c28 <MX_GPIO_Init+0x1a8>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0310 	and.w	r3, r3, #16
 8000b1e:	60bb      	str	r3, [r7, #8]
 8000b20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	4b40      	ldr	r3, [pc, #256]	; (8000c28 <MX_GPIO_Init+0x1a8>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a3f      	ldr	r2, [pc, #252]	; (8000c28 <MX_GPIO_Init+0x1a8>)
 8000b2c:	f043 0308 	orr.w	r3, r3, #8
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b3d      	ldr	r3, [pc, #244]	; (8000c28 <MX_GPIO_Init+0x1a8>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0308 	and.w	r3, r3, #8
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	603b      	str	r3, [r7, #0]
 8000b42:	4b39      	ldr	r3, [pc, #228]	; (8000c28 <MX_GPIO_Init+0x1a8>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a38      	ldr	r2, [pc, #224]	; (8000c28 <MX_GPIO_Init+0x1a8>)
 8000b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b36      	ldr	r3, [pc, #216]	; (8000c28 <MX_GPIO_Init+0x1a8>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b60:	4832      	ldr	r0, [pc, #200]	; (8000c2c <MX_GPIO_Init+0x1ac>)
 8000b62:	f001 fc8b 	bl	800247c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2140      	movs	r1, #64	; 0x40
 8000b6a:	4831      	ldr	r0, [pc, #196]	; (8000c30 <MX_GPIO_Init+0x1b0>)
 8000b6c:	f001 fc86 	bl	800247c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000b70:	2200      	movs	r2, #0
 8000b72:	21ff      	movs	r1, #255	; 0xff
 8000b74:	482f      	ldr	r0, [pc, #188]	; (8000c34 <MX_GPIO_Init+0x1b4>)
 8000b76:	f001 fc81 	bl	800247c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b80:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b8a:	f107 031c 	add.w	r3, r7, #28
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4829      	ldr	r0, [pc, #164]	; (8000c38 <MX_GPIO_Init+0x1b8>)
 8000b92:	f001 fac7 	bl	8002124 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b96:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba8:	f107 031c 	add.w	r3, r7, #28
 8000bac:	4619      	mov	r1, r3
 8000bae:	481f      	ldr	r0, [pc, #124]	; (8000c2c <MX_GPIO_Init+0x1ac>)
 8000bb0:	f001 fab8 	bl	8002124 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin|BUTTON0_Pin;
 8000bb4:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 8000bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bc2:	f107 031c 	add.w	r3, r7, #28
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	481c      	ldr	r0, [pc, #112]	; (8000c3c <MX_GPIO_Init+0x1bc>)
 8000bca:	f001 faab 	bl	8002124 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bce:	2340      	movs	r3, #64	; 0x40
 8000bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	4619      	mov	r1, r3
 8000be4:	4812      	ldr	r0, [pc, #72]	; (8000c30 <MX_GPIO_Init+0x1b0>)
 8000be6:	f001 fa9d 	bl	8002124 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bea:	2380      	movs	r3, #128	; 0x80
 8000bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bf6:	f107 031c 	add.w	r3, r7, #28
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480c      	ldr	r0, [pc, #48]	; (8000c30 <MX_GPIO_Init+0x1b0>)
 8000bfe:	f001 fa91 	bl	8002124 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c02:	23ff      	movs	r3, #255	; 0xff
 8000c04:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c06:	2301      	movs	r3, #1
 8000c08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c12:	f107 031c 	add.w	r3, r7, #28
 8000c16:	4619      	mov	r1, r3
 8000c18:	4806      	ldr	r0, [pc, #24]	; (8000c34 <MX_GPIO_Init+0x1b4>)
 8000c1a:	f001 fa83 	bl	8002124 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c1e:	bf00      	nop
 8000c20:	3730      	adds	r7, #48	; 0x30
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40020400 	.word	0x40020400
 8000c30:	40021800 	.word	0x40021800
 8000c34:	40020c00 	.word	0x40020c00
 8000c38:	40020800 	.word	0x40020800
 8000c3c:	40021000 	.word	0x40021000

08000c40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c44:	b672      	cpsid	i
}
 8000c46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <Error_Handler+0x8>
	...

08000c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5a:	4a0f      	ldr	r2, [pc, #60]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c60:	6453      	str	r3, [r2, #68]	; 0x44
 8000c62:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	603b      	str	r3, [r7, #0]
 8000c72:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	4a08      	ldr	r2, [pc, #32]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c86:	603b      	str	r3, [r7, #0]
 8000c88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	40023800 	.word	0x40023800

08000c9c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08e      	sub	sp, #56	; 0x38
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a55      	ldr	r2, [pc, #340]	; (8000e10 <HAL_ETH_MspInit+0x174>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	f040 80a4 	bne.w	8000e08 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	623b      	str	r3, [r7, #32]
 8000cc4:	4b53      	ldr	r3, [pc, #332]	; (8000e14 <HAL_ETH_MspInit+0x178>)
 8000cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc8:	4a52      	ldr	r2, [pc, #328]	; (8000e14 <HAL_ETH_MspInit+0x178>)
 8000cca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cce:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd0:	4b50      	ldr	r3, [pc, #320]	; (8000e14 <HAL_ETH_MspInit+0x178>)
 8000cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cd8:	623b      	str	r3, [r7, #32]
 8000cda:	6a3b      	ldr	r3, [r7, #32]
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61fb      	str	r3, [r7, #28]
 8000ce0:	4b4c      	ldr	r3, [pc, #304]	; (8000e14 <HAL_ETH_MspInit+0x178>)
 8000ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce4:	4a4b      	ldr	r2, [pc, #300]	; (8000e14 <HAL_ETH_MspInit+0x178>)
 8000ce6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000cea:	6313      	str	r3, [r2, #48]	; 0x30
 8000cec:	4b49      	ldr	r3, [pc, #292]	; (8000e14 <HAL_ETH_MspInit+0x178>)
 8000cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000cf4:	61fb      	str	r3, [r7, #28]
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61bb      	str	r3, [r7, #24]
 8000cfc:	4b45      	ldr	r3, [pc, #276]	; (8000e14 <HAL_ETH_MspInit+0x178>)
 8000cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d00:	4a44      	ldr	r2, [pc, #272]	; (8000e14 <HAL_ETH_MspInit+0x178>)
 8000d02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000d06:	6313      	str	r3, [r2, #48]	; 0x30
 8000d08:	4b42      	ldr	r3, [pc, #264]	; (8000e14 <HAL_ETH_MspInit+0x178>)
 8000d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000d10:	61bb      	str	r3, [r7, #24]
 8000d12:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	4b3e      	ldr	r3, [pc, #248]	; (8000e14 <HAL_ETH_MspInit+0x178>)
 8000d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1c:	4a3d      	ldr	r2, [pc, #244]	; (8000e14 <HAL_ETH_MspInit+0x178>)
 8000d1e:	f043 0304 	orr.w	r3, r3, #4
 8000d22:	6313      	str	r3, [r2, #48]	; 0x30
 8000d24:	4b3b      	ldr	r3, [pc, #236]	; (8000e14 <HAL_ETH_MspInit+0x178>)
 8000d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d28:	f003 0304 	and.w	r3, r3, #4
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d30:	2300      	movs	r3, #0
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	4b37      	ldr	r3, [pc, #220]	; (8000e14 <HAL_ETH_MspInit+0x178>)
 8000d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d38:	4a36      	ldr	r2, [pc, #216]	; (8000e14 <HAL_ETH_MspInit+0x178>)
 8000d3a:	f043 0301 	orr.w	r3, r3, #1
 8000d3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d40:	4b34      	ldr	r3, [pc, #208]	; (8000e14 <HAL_ETH_MspInit+0x178>)
 8000d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	4b30      	ldr	r3, [pc, #192]	; (8000e14 <HAL_ETH_MspInit+0x178>)
 8000d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d54:	4a2f      	ldr	r2, [pc, #188]	; (8000e14 <HAL_ETH_MspInit+0x178>)
 8000d56:	f043 0302 	orr.w	r3, r3, #2
 8000d5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5c:	4b2d      	ldr	r3, [pc, #180]	; (8000e14 <HAL_ETH_MspInit+0x178>)
 8000d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d60:	f003 0302 	and.w	r3, r3, #2
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	4b29      	ldr	r3, [pc, #164]	; (8000e14 <HAL_ETH_MspInit+0x178>)
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d70:	4a28      	ldr	r2, [pc, #160]	; (8000e14 <HAL_ETH_MspInit+0x178>)
 8000d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d76:	6313      	str	r3, [r2, #48]	; 0x30
 8000d78:	4b26      	ldr	r3, [pc, #152]	; (8000e14 <HAL_ETH_MspInit+0x178>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d84:	2332      	movs	r3, #50	; 0x32
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d90:	2303      	movs	r3, #3
 8000d92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d94:	230b      	movs	r3, #11
 8000d96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	481e      	ldr	r0, [pc, #120]	; (8000e18 <HAL_ETH_MspInit+0x17c>)
 8000da0:	f001 f9c0 	bl	8002124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000da4:	2386      	movs	r3, #134	; 0x86
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db0:	2303      	movs	r3, #3
 8000db2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000db4:	230b      	movs	r3, #11
 8000db6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4817      	ldr	r0, [pc, #92]	; (8000e1c <HAL_ETH_MspInit+0x180>)
 8000dc0:	f001 f9b0 	bl	8002124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000dc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dd6:	230b      	movs	r3, #11
 8000dd8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dde:	4619      	mov	r1, r3
 8000de0:	480f      	ldr	r0, [pc, #60]	; (8000e20 <HAL_ETH_MspInit+0x184>)
 8000de2:	f001 f99f 	bl	8002124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000de6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df4:	2303      	movs	r3, #3
 8000df6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000df8:	230b      	movs	r3, #11
 8000dfa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e00:	4619      	mov	r1, r3
 8000e02:	4808      	ldr	r0, [pc, #32]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000e04:	f001 f98e 	bl	8002124 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000e08:	bf00      	nop
 8000e0a:	3738      	adds	r7, #56	; 0x38
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40028000 	.word	0x40028000
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40020800 	.word	0x40020800
 8000e1c:	40020000 	.word	0x40020000
 8000e20:	40020400 	.word	0x40020400
 8000e24:	40021800 	.word	0x40021800

08000e28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08c      	sub	sp, #48	; 0x30
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 031c 	add.w	r3, r7, #28
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a3a      	ldr	r2, [pc, #232]	; (8000f30 <HAL_UART_MspInit+0x108>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d135      	bne.n	8000eb6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61bb      	str	r3, [r7, #24]
 8000e4e:	4b39      	ldr	r3, [pc, #228]	; (8000f34 <HAL_UART_MspInit+0x10c>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	4a38      	ldr	r2, [pc, #224]	; (8000f34 <HAL_UART_MspInit+0x10c>)
 8000e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e58:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5a:	4b36      	ldr	r3, [pc, #216]	; (8000f34 <HAL_UART_MspInit+0x10c>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e62:	61bb      	str	r3, [r7, #24]
 8000e64:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
 8000e6a:	4b32      	ldr	r3, [pc, #200]	; (8000f34 <HAL_UART_MspInit+0x10c>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a31      	ldr	r2, [pc, #196]	; (8000f34 <HAL_UART_MspInit+0x10c>)
 8000e70:	f043 0308 	orr.w	r3, r3, #8
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b2f      	ldr	r3, [pc, #188]	; (8000f34 <HAL_UART_MspInit+0x10c>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0308 	and.w	r3, r3, #8
 8000e7e:	617b      	str	r3, [r7, #20]
 8000e80:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e90:	2303      	movs	r3, #3
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e94:	2307      	movs	r3, #7
 8000e96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e98:	f107 031c 	add.w	r3, r7, #28
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4826      	ldr	r0, [pc, #152]	; (8000f38 <HAL_UART_MspInit+0x110>)
 8000ea0:	f001 f940 	bl	8002124 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	2027      	movs	r0, #39	; 0x27
 8000eaa:	f000 fd4a 	bl	8001942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000eae:	2027      	movs	r0, #39	; 0x27
 8000eb0:	f000 fd63 	bl	800197a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000eb4:	e038      	b.n	8000f28 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART6)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a20      	ldr	r2, [pc, #128]	; (8000f3c <HAL_UART_MspInit+0x114>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d133      	bne.n	8000f28 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	4b1b      	ldr	r3, [pc, #108]	; (8000f34 <HAL_UART_MspInit+0x10c>)
 8000ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec8:	4a1a      	ldr	r2, [pc, #104]	; (8000f34 <HAL_UART_MspInit+0x10c>)
 8000eca:	f043 0320 	orr.w	r3, r3, #32
 8000ece:	6453      	str	r3, [r2, #68]	; 0x44
 8000ed0:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <HAL_UART_MspInit+0x10c>)
 8000ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed4:	f003 0320 	and.w	r3, r3, #32
 8000ed8:	613b      	str	r3, [r7, #16]
 8000eda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000edc:	2300      	movs	r3, #0
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <HAL_UART_MspInit+0x10c>)
 8000ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee4:	4a13      	ldr	r2, [pc, #76]	; (8000f34 <HAL_UART_MspInit+0x10c>)
 8000ee6:	f043 0304 	orr.w	r3, r3, #4
 8000eea:	6313      	str	r3, [r2, #48]	; 0x30
 8000eec:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <HAL_UART_MspInit+0x10c>)
 8000eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef0:	f003 0304 	and.w	r3, r3, #4
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ef8:	23c0      	movs	r3, #192	; 0xc0
 8000efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efc:	2302      	movs	r3, #2
 8000efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f04:	2303      	movs	r3, #3
 8000f06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000f08:	2308      	movs	r3, #8
 8000f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f0c:	f107 031c 	add.w	r3, r7, #28
 8000f10:	4619      	mov	r1, r3
 8000f12:	480b      	ldr	r0, [pc, #44]	; (8000f40 <HAL_UART_MspInit+0x118>)
 8000f14:	f001 f906 	bl	8002124 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	2047      	movs	r0, #71	; 0x47
 8000f1e:	f000 fd10 	bl	8001942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000f22:	2047      	movs	r0, #71	; 0x47
 8000f24:	f000 fd29 	bl	800197a <HAL_NVIC_EnableIRQ>
}
 8000f28:	bf00      	nop
 8000f2a:	3730      	adds	r7, #48	; 0x30
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40004800 	.word	0x40004800
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40020c00 	.word	0x40020c00
 8000f3c:	40011400 	.word	0x40011400
 8000f40:	40020800 	.word	0x40020800

08000f44 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	; 0x28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f64:	d13f      	bne.n	8000fe6 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	4b21      	ldr	r3, [pc, #132]	; (8000ff0 <HAL_PCD_MspInit+0xac>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a20      	ldr	r2, [pc, #128]	; (8000ff0 <HAL_PCD_MspInit+0xac>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
 8000f76:	4b1e      	ldr	r3, [pc, #120]	; (8000ff0 <HAL_PCD_MspInit+0xac>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f82:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f90:	2303      	movs	r3, #3
 8000f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f94:	230a      	movs	r3, #10
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4815      	ldr	r0, [pc, #84]	; (8000ff4 <HAL_PCD_MspInit+0xb0>)
 8000fa0:	f001 f8c0 	bl	8002124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000fa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	480e      	ldr	r0, [pc, #56]	; (8000ff4 <HAL_PCD_MspInit+0xb0>)
 8000fba:	f001 f8b3 	bl	8002124 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <HAL_PCD_MspInit+0xac>)
 8000fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fc2:	4a0b      	ldr	r2, [pc, #44]	; (8000ff0 <HAL_PCD_MspInit+0xac>)
 8000fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fc8:	6353      	str	r3, [r2, #52]	; 0x34
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <HAL_PCD_MspInit+0xac>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	4a07      	ldr	r2, [pc, #28]	; (8000ff0 <HAL_PCD_MspInit+0xac>)
 8000fd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fda:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <HAL_PCD_MspInit+0xac>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000fe6:	bf00      	nop
 8000fe8:	3728      	adds	r7, #40	; 0x28
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40020000 	.word	0x40020000

08000ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <NMI_Handler+0x4>

08000ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001002:	e7fe      	b.n	8001002 <HardFault_Handler+0x4>

08001004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001008:	e7fe      	b.n	8001008 <MemManage_Handler+0x4>

0800100a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800100e:	e7fe      	b.n	800100e <BusFault_Handler+0x4>

08001010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001014:	e7fe      	b.n	8001014 <UsageFault_Handler+0x4>

08001016 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001044:	f000 fb5e 	bl	8001704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_STSTICK_Handler(); // ADD_kenGwon_231006
 8001048:	f7ff fb94 	bl	8000774 <HAL_STSTICK_Handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}

08001050 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001054:	4802      	ldr	r0, [pc, #8]	; (8001060 <USART3_IRQHandler+0x10>)
 8001056:	f002 f8ef 	bl	8003238 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200002b4 	.word	0x200002b4

08001064 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001068:	4802      	ldr	r0, [pc, #8]	; (8001074 <USART6_IRQHandler+0x10>)
 800106a:	f002 f8e5 	bl	8003238 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	200002f8 	.word	0x200002f8

08001078 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
 8001088:	e00a      	b.n	80010a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800108a:	f3af 8000 	nop.w
 800108e:	4601      	mov	r1, r0
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	1c5a      	adds	r2, r3, #1
 8001094:	60ba      	str	r2, [r7, #8]
 8001096:	b2ca      	uxtb	r2, r1
 8001098:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	3301      	adds	r3, #1
 800109e:	617b      	str	r3, [r7, #20]
 80010a0:	697a      	ldr	r2, [r7, #20]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	dbf0      	blt.n	800108a <_read+0x12>
  }

  return len;
 80010a8:	687b      	ldr	r3, [r7, #4]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3718      	adds	r7, #24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b086      	sub	sp, #24
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	60f8      	str	r0, [r7, #12]
 80010ba:	60b9      	str	r1, [r7, #8]
 80010bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]
 80010c2:	e009      	b.n	80010d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	1c5a      	adds	r2, r3, #1
 80010c8:	60ba      	str	r2, [r7, #8]
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fb5f 	bl	8000790 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	3301      	adds	r3, #1
 80010d6:	617b      	str	r3, [r7, #20]
 80010d8:	697a      	ldr	r2, [r7, #20]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	429a      	cmp	r2, r3
 80010de:	dbf1      	blt.n	80010c4 <_write+0x12>
  }
  return len;
 80010e0:	687b      	ldr	r3, [r7, #4]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <_close>:

int _close(int file)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b083      	sub	sp, #12
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001102:	b480      	push	{r7}
 8001104:	b083      	sub	sp, #12
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
 800110a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001112:	605a      	str	r2, [r3, #4]
  return 0;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <_isatty>:

int _isatty(int file)
{
 8001122:	b480      	push	{r7}
 8001124:	b083      	sub	sp, #12
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800112a:	2301      	movs	r3, #1
}
 800112c:	4618      	mov	r0, r3
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
	...

08001154 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800115c:	4a14      	ldr	r2, [pc, #80]	; (80011b0 <_sbrk+0x5c>)
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <_sbrk+0x60>)
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001168:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <_sbrk+0x64>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d102      	bne.n	8001176 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001170:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <_sbrk+0x64>)
 8001172:	4a12      	ldr	r2, [pc, #72]	; (80011bc <_sbrk+0x68>)
 8001174:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001176:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <_sbrk+0x64>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4413      	add	r3, r2
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	429a      	cmp	r2, r3
 8001182:	d207      	bcs.n	8001194 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001184:	f003 fac2 	bl	800470c <__errno>
 8001188:	4603      	mov	r3, r0
 800118a:	220c      	movs	r2, #12
 800118c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800118e:	f04f 33ff 	mov.w	r3, #4294967295
 8001192:	e009      	b.n	80011a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <_sbrk+0x64>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800119a:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <_sbrk+0x64>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	4a05      	ldr	r2, [pc, #20]	; (80011b8 <_sbrk+0x64>)
 80011a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011a6:	68fb      	ldr	r3, [r7, #12]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3718      	adds	r7, #24
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20030000 	.word	0x20030000
 80011b4:	00000400 	.word	0x00000400
 80011b8:	20000858 	.word	0x20000858
 80011bc:	20000bd0 	.word	0x20000bd0

080011c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <SystemInit+0x20>)
 80011c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ca:	4a05      	ldr	r2, [pc, #20]	; (80011e0 <SystemInit+0x20>)
 80011cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <HAL_UART_RxCpltCallback>:
volatile int bt_rx_index = 0; // bt_rx_buff의 save위치
volatile int bt_newline_detect_flag = 0; // \n을 만났다는 것을 알려주는 플래그변수..


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011e4:	b590      	push	{r4, r7, lr}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]

#if 1

	if (huart == &huart3)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a4c      	ldr	r2, [pc, #304]	; (8001320 <HAL_UART_RxCpltCallback+0x13c>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d160      	bne.n	80012b6 <HAL_UART_RxCpltCallback+0xd2>
	{
		if ((queue_rear+1)%QUEUE_MAX != queue_front)
 80011f4:	4b4b      	ldr	r3, [pc, #300]	; (8001324 <HAL_UART_RxCpltCallback+0x140>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	1c59      	adds	r1, r3, #1
 80011fa:	4b4b      	ldr	r3, [pc, #300]	; (8001328 <HAL_UART_RxCpltCallback+0x144>)
 80011fc:	fb83 2301 	smull	r2, r3, r3, r1
 8001200:	10da      	asrs	r2, r3, #3
 8001202:	17cb      	asrs	r3, r1, #31
 8001204:	1ad2      	subs	r2, r2, r3
 8001206:	4613      	mov	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	1aca      	subs	r2, r1, r3
 8001210:	4b46      	ldr	r3, [pc, #280]	; (800132c <HAL_UART_RxCpltCallback+0x148>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	429a      	cmp	r2, r3
 8001216:	d049      	beq.n	80012ac <HAL_UART_RxCpltCallback+0xc8>
		{
			if (rx_index < COMMAND_LENGTH)
 8001218:	4b45      	ldr	r3, [pc, #276]	; (8001330 <HAL_UART_RxCpltCallback+0x14c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b27      	cmp	r3, #39	; 0x27
 800121e:	dc3f      	bgt.n	80012a0 <HAL_UART_RxCpltCallback+0xbc>
			{
				if (rx_data == '\n' || rx_data == '\r')
 8001220:	4b44      	ldr	r3, [pc, #272]	; (8001334 <HAL_UART_RxCpltCallback+0x150>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b0a      	cmp	r3, #10
 8001226:	d003      	beq.n	8001230 <HAL_UART_RxCpltCallback+0x4c>
 8001228:	4b42      	ldr	r3, [pc, #264]	; (8001334 <HAL_UART_RxCpltCallback+0x150>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b0d      	cmp	r3, #13
 800122e:	d124      	bne.n	800127a <HAL_UART_RxCpltCallback+0x96>
				{
					rx_buff[queue_rear][rx_index] = '\0';
 8001230:	4b3c      	ldr	r3, [pc, #240]	; (8001324 <HAL_UART_RxCpltCallback+0x140>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b3e      	ldr	r3, [pc, #248]	; (8001330 <HAL_UART_RxCpltCallback+0x14c>)
 8001236:	6819      	ldr	r1, [r3, #0]
 8001238:	483f      	ldr	r0, [pc, #252]	; (8001338 <HAL_UART_RxCpltCallback+0x154>)
 800123a:	4613      	mov	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4413      	add	r3, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	4403      	add	r3, r0
 8001244:	440b      	add	r3, r1
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]
					rx_index = 0;
 800124a:	4b39      	ldr	r3, [pc, #228]	; (8001330 <HAL_UART_RxCpltCallback+0x14c>)
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
					queue_rear++;
 8001250:	4b34      	ldr	r3, [pc, #208]	; (8001324 <HAL_UART_RxCpltCallback+0x140>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	3301      	adds	r3, #1
 8001256:	4a33      	ldr	r2, [pc, #204]	; (8001324 <HAL_UART_RxCpltCallback+0x140>)
 8001258:	6013      	str	r3, [r2, #0]
					queue_rear %= QUEUE_MAX;
 800125a:	4b32      	ldr	r3, [pc, #200]	; (8001324 <HAL_UART_RxCpltCallback+0x140>)
 800125c:	6819      	ldr	r1, [r3, #0]
 800125e:	4b32      	ldr	r3, [pc, #200]	; (8001328 <HAL_UART_RxCpltCallback+0x144>)
 8001260:	fb83 2301 	smull	r2, r3, r3, r1
 8001264:	10da      	asrs	r2, r3, #3
 8001266:	17cb      	asrs	r3, r1, #31
 8001268:	1ad2      	subs	r2, r2, r3
 800126a:	4613      	mov	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4413      	add	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	1aca      	subs	r2, r1, r3
 8001274:	4b2b      	ldr	r3, [pc, #172]	; (8001324 <HAL_UART_RxCpltCallback+0x140>)
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	e018      	b.n	80012ac <HAL_UART_RxCpltCallback+0xc8>
				}
				else
				{
					rx_buff[queue_rear][rx_index++] = rx_data;
 800127a:	4b2a      	ldr	r3, [pc, #168]	; (8001324 <HAL_UART_RxCpltCallback+0x140>)
 800127c:	6819      	ldr	r1, [r3, #0]
 800127e:	4b2c      	ldr	r3, [pc, #176]	; (8001330 <HAL_UART_RxCpltCallback+0x14c>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	1c53      	adds	r3, r2, #1
 8001284:	482a      	ldr	r0, [pc, #168]	; (8001330 <HAL_UART_RxCpltCallback+0x14c>)
 8001286:	6003      	str	r3, [r0, #0]
 8001288:	4b2a      	ldr	r3, [pc, #168]	; (8001334 <HAL_UART_RxCpltCallback+0x150>)
 800128a:	781c      	ldrb	r4, [r3, #0]
 800128c:	482a      	ldr	r0, [pc, #168]	; (8001338 <HAL_UART_RxCpltCallback+0x154>)
 800128e:	460b      	mov	r3, r1
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	440b      	add	r3, r1
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	4403      	add	r3, r0
 8001298:	4413      	add	r3, r2
 800129a:	4622      	mov	r2, r4
 800129c:	701a      	strb	r2, [r3, #0]
 800129e:	e005      	b.n	80012ac <HAL_UART_RxCpltCallback+0xc8>
				}
			}
			else
			{
				rx_index = 0;
 80012a0:	4b23      	ldr	r3, [pc, #140]	; (8001330 <HAL_UART_RxCpltCallback+0x14c>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
				printf("Message Overflow !!!\n");
 80012a6:	4825      	ldr	r0, [pc, #148]	; (800133c <HAL_UART_RxCpltCallback+0x158>)
 80012a8:	f003 fad0 	bl	800484c <puts>
		{

		}

		// 주의: 반드시 HAL_UART_Receive_IT() 함수를 call 해줘야 다음 인터럽트가 이어서 발생이 가능해진다.
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 80012ac:	2201      	movs	r2, #1
 80012ae:	4921      	ldr	r1, [pc, #132]	; (8001334 <HAL_UART_RxCpltCallback+0x150>)
 80012b0:	481b      	ldr	r0, [pc, #108]	; (8001320 <HAL_UART_RxCpltCallback+0x13c>)
 80012b2:	f001 ff90 	bl	80031d6 <HAL_UART_Receive_IT>
		// 주의: 반드시 HAL_UART_Receive_IT() 함수를 call 해줘야 다음 인터럽트가 이어서 발생이 가능해진다.
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);
	}
#endif

	if (huart == &huart6) // Bluetooth와 연결된 uart
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a21      	ldr	r2, [pc, #132]	; (8001340 <HAL_UART_RxCpltCallback+0x15c>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d12c      	bne.n	8001318 <HAL_UART_RxCpltCallback+0x134>
	{
		if (bt_rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 80012be:	4b21      	ldr	r3, [pc, #132]	; (8001344 <HAL_UART_RxCpltCallback+0x160>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b27      	cmp	r3, #39	; 0x27
 80012c4:	dc1d      	bgt.n	8001302 <HAL_UART_RxCpltCallback+0x11e>
		{
			if(bt_rx_data == '\n' || bt_rx_data == '\r')
 80012c6:	4b20      	ldr	r3, [pc, #128]	; (8001348 <HAL_UART_RxCpltCallback+0x164>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b0a      	cmp	r3, #10
 80012cc:	d003      	beq.n	80012d6 <HAL_UART_RxCpltCallback+0xf2>
 80012ce:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <HAL_UART_RxCpltCallback+0x164>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b0d      	cmp	r3, #13
 80012d4:	d10b      	bne.n	80012ee <HAL_UART_RxCpltCallback+0x10a>
			{
				bt_rx_buff[bt_rx_index] = 0; // '\0'
 80012d6:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <HAL_UART_RxCpltCallback+0x160>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a1c      	ldr	r2, [pc, #112]	; (800134c <HAL_UART_RxCpltCallback+0x168>)
 80012dc:	2100      	movs	r1, #0
 80012de:	54d1      	strb	r1, [r2, r3]
				bt_newline_detect_flag = 1;
 80012e0:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <HAL_UART_RxCpltCallback+0x16c>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	601a      	str	r2, [r3, #0]
				bt_rx_index = 0; // 다음 메시지 저장을 위해서 rx_index값을 0으로 한다.
 80012e6:	4b17      	ldr	r3, [pc, #92]	; (8001344 <HAL_UART_RxCpltCallback+0x160>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	e00f      	b.n	800130e <HAL_UART_RxCpltCallback+0x12a>
			}
			else
			{
				bt_rx_buff[bt_rx_index++] = bt_rx_data;
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <HAL_UART_RxCpltCallback+0x160>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	1c5a      	adds	r2, r3, #1
 80012f4:	4913      	ldr	r1, [pc, #76]	; (8001344 <HAL_UART_RxCpltCallback+0x160>)
 80012f6:	600a      	str	r2, [r1, #0]
 80012f8:	4a13      	ldr	r2, [pc, #76]	; (8001348 <HAL_UART_RxCpltCallback+0x164>)
 80012fa:	7811      	ldrb	r1, [r2, #0]
 80012fc:	4a13      	ldr	r2, [pc, #76]	; (800134c <HAL_UART_RxCpltCallback+0x168>)
 80012fe:	54d1      	strb	r1, [r2, r3]
 8001300:	e005      	b.n	800130e <HAL_UART_RxCpltCallback+0x12a>
			}
		}
		else
		{
			bt_rx_index = 0;
 8001302:	4b10      	ldr	r3, [pc, #64]	; (8001344 <HAL_UART_RxCpltCallback+0x160>)
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
			printf("Message Overflow !!!\n");
 8001308:	480c      	ldr	r0, [pc, #48]	; (800133c <HAL_UART_RxCpltCallback+0x158>)
 800130a:	f003 fa9f 	bl	800484c <puts>
		}

		// 주의: 반드시 HAL_UART_Receive_IT() 함수를 call 해줘야 다음 인터럽트가 이어서 발생이 가능해진다.
		HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);
 800130e:	2201      	movs	r2, #1
 8001310:	490d      	ldr	r1, [pc, #52]	; (8001348 <HAL_UART_RxCpltCallback+0x164>)
 8001312:	480b      	ldr	r0, [pc, #44]	; (8001340 <HAL_UART_RxCpltCallback+0x15c>)
 8001314:	f001 ff5f 	bl	80031d6 <HAL_UART_Receive_IT>
	}
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	bd90      	pop	{r4, r7, pc}
 8001320:	200002b4 	.word	0x200002b4
 8001324:	20000b80 	.word	0x20000b80
 8001328:	66666667 	.word	0x66666667
 800132c:	20000b7c 	.word	0x20000b7c
 8001330:	20000b84 	.word	0x20000b84
 8001334:	20000848 	.word	0x20000848
 8001338:	2000085c 	.word	0x2000085c
 800133c:	080051bc 	.word	0x080051bc
 8001340:	200002f8 	.word	0x200002f8
 8001344:	20000bb0 	.word	0x20000bb0
 8001348:	20000849 	.word	0x20000849
 800134c:	20000b88 	.word	0x20000b88
 8001350:	20000bb4 	.word	0x20000bb4

08001354 <pc_command_processing>:

void pc_command_processing(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	if (queue_front != queue_rear) // 원형쿠로 구성한게 아니기 때무네, 뉴라인 플래그가 서 있을 때만 완전한 문장이 들어왔다고 판단하고 함수가 진해오디어야 하낟.
 8001358:	4b63      	ldr	r3, [pc, #396]	; (80014e8 <pc_command_processing+0x194>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4b63      	ldr	r3, [pc, #396]	; (80014ec <pc_command_processing+0x198>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	429a      	cmp	r2, r3
 8001362:	f000 80c0 	beq.w	80014e6 <pc_command_processing+0x192>
	{
		queue_front++;
 8001366:	4b60      	ldr	r3, [pc, #384]	; (80014e8 <pc_command_processing+0x194>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	3301      	adds	r3, #1
 800136c:	4a5e      	ldr	r2, [pc, #376]	; (80014e8 <pc_command_processing+0x194>)
 800136e:	6013      	str	r3, [r2, #0]
		queue_front %= QUEUE_MAX;
 8001370:	4b5d      	ldr	r3, [pc, #372]	; (80014e8 <pc_command_processing+0x194>)
 8001372:	6819      	ldr	r1, [r3, #0]
 8001374:	4b5e      	ldr	r3, [pc, #376]	; (80014f0 <pc_command_processing+0x19c>)
 8001376:	fb83 2301 	smull	r2, r3, r3, r1
 800137a:	10da      	asrs	r2, r3, #3
 800137c:	17cb      	asrs	r3, r1, #31
 800137e:	1ad2      	subs	r2, r2, r3
 8001380:	4613      	mov	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4413      	add	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	1aca      	subs	r2, r1, r3
 800138a:	4b57      	ldr	r3, [pc, #348]	; (80014e8 <pc_command_processing+0x194>)
 800138c:	601a      	str	r2, [r3, #0]
//		newline_detect_flag = 0;

		printf("%s\n", rx_buff[queue_front - 1]);
 800138e:	4b56      	ldr	r3, [pc, #344]	; (80014e8 <pc_command_processing+0x194>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	1e5a      	subs	r2, r3, #1
 8001394:	4613      	mov	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	4413      	add	r3, r2
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	4a55      	ldr	r2, [pc, #340]	; (80014f4 <pc_command_processing+0x1a0>)
 800139e:	4413      	add	r3, r2
 80013a0:	4618      	mov	r0, r3
 80013a2:	f003 fa53 	bl	800484c <puts>

		if (!strncmp(rx_buff[queue_front - 1], "led_all_on", strlen("led_all_on"))) // 느낌표가 들어갔다!! strcmp는 같으면 0을 리턴하기 때문에 if문에 진입하려먼 !not을 통해서 1(true)로 뒤집어 줘야 한다.
 80013a6:	4b50      	ldr	r3, [pc, #320]	; (80014e8 <pc_command_processing+0x194>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	1e5a      	subs	r2, r3, #1
 80013ac:	4613      	mov	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	4a4f      	ldr	r2, [pc, #316]	; (80014f4 <pc_command_processing+0x1a0>)
 80013b6:	4413      	add	r3, r2
 80013b8:	220a      	movs	r2, #10
 80013ba:	494f      	ldr	r1, [pc, #316]	; (80014f8 <pc_command_processing+0x1a4>)
 80013bc:	4618      	mov	r0, r3
 80013be:	f003 fa4d 	bl	800485c <strncmp>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d102      	bne.n	80013ce <pc_command_processing+0x7a>
		{
			led_all_on();
 80013c8:	f7ff f892 	bl	80004f0 <led_all_on>
			return;
 80013cc:	e08b      	b.n	80014e6 <pc_command_processing+0x192>
		}
		if (!strncmp(rx_buff[queue_front - 1], "led_all_off", strlen("led_all_off")))
 80013ce:	4b46      	ldr	r3, [pc, #280]	; (80014e8 <pc_command_processing+0x194>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	1e5a      	subs	r2, r3, #1
 80013d4:	4613      	mov	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4413      	add	r3, r2
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	4a45      	ldr	r2, [pc, #276]	; (80014f4 <pc_command_processing+0x1a0>)
 80013de:	4413      	add	r3, r2
 80013e0:	220b      	movs	r2, #11
 80013e2:	4946      	ldr	r1, [pc, #280]	; (80014fc <pc_command_processing+0x1a8>)
 80013e4:	4618      	mov	r0, r3
 80013e6:	f003 fa39 	bl	800485c <strncmp>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d102      	bne.n	80013f6 <pc_command_processing+0xa2>
		{
			led_all_off();
 80013f0:	f7ff f88a 	bl	8000508 <led_all_off>
			return;
 80013f4:	e077      	b.n	80014e6 <pc_command_processing+0x192>
		}
		if (!strncmp(rx_buff[queue_front - 1], "led_on_up", strlen("led_on_up")))
 80013f6:	4b3c      	ldr	r3, [pc, #240]	; (80014e8 <pc_command_processing+0x194>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	1e5a      	subs	r2, r3, #1
 80013fc:	4613      	mov	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	4a3b      	ldr	r2, [pc, #236]	; (80014f4 <pc_command_processing+0x1a0>)
 8001406:	4413      	add	r3, r2
 8001408:	2209      	movs	r2, #9
 800140a:	493d      	ldr	r1, [pc, #244]	; (8001500 <pc_command_processing+0x1ac>)
 800140c:	4618      	mov	r0, r3
 800140e:	f003 fa25 	bl	800485c <strncmp>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d102      	bne.n	800141e <pc_command_processing+0xca>
		{
			led_on_up();
 8001418:	f7ff f882 	bl	8000520 <led_on_up>
			return;
 800141c:	e063      	b.n	80014e6 <pc_command_processing+0x192>
		}
		if (!strncmp(rx_buff[queue_front - 1], "led_on_down", strlen("led_on_down")))
 800141e:	4b32      	ldr	r3, [pc, #200]	; (80014e8 <pc_command_processing+0x194>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	1e5a      	subs	r2, r3, #1
 8001424:	4613      	mov	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4413      	add	r3, r2
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	4a31      	ldr	r2, [pc, #196]	; (80014f4 <pc_command_processing+0x1a0>)
 800142e:	4413      	add	r3, r2
 8001430:	220b      	movs	r2, #11
 8001432:	4934      	ldr	r1, [pc, #208]	; (8001504 <pc_command_processing+0x1b0>)
 8001434:	4618      	mov	r0, r3
 8001436:	f003 fa11 	bl	800485c <strncmp>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d102      	bne.n	8001446 <pc_command_processing+0xf2>
		{
			led_on_down();
 8001440:	f7ff f89a 	bl	8000578 <led_on_down>
			return;
 8001444:	e04f      	b.n	80014e6 <pc_command_processing+0x192>
		}
		if (!strncmp(rx_buff[queue_front - 1], "led_keepon_up", strlen("led_keepon_up")))
 8001446:	4b28      	ldr	r3, [pc, #160]	; (80014e8 <pc_command_processing+0x194>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	1e5a      	subs	r2, r3, #1
 800144c:	4613      	mov	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	4a27      	ldr	r2, [pc, #156]	; (80014f4 <pc_command_processing+0x1a0>)
 8001456:	4413      	add	r3, r2
 8001458:	220d      	movs	r2, #13
 800145a:	492b      	ldr	r1, [pc, #172]	; (8001508 <pc_command_processing+0x1b4>)
 800145c:	4618      	mov	r0, r3
 800145e:	f003 f9fd 	bl	800485c <strncmp>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d102      	bne.n	800146e <pc_command_processing+0x11a>
		{
			led_keepon_up();
 8001468:	f7ff f8b2 	bl	80005d0 <led_keepon_up>
			return;
 800146c:	e03b      	b.n	80014e6 <pc_command_processing+0x192>
		}
		if (!strncmp(rx_buff[queue_front - 1], "led_keepon_down", strlen("led_keepon_down")))
 800146e:	4b1e      	ldr	r3, [pc, #120]	; (80014e8 <pc_command_processing+0x194>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	1e5a      	subs	r2, r3, #1
 8001474:	4613      	mov	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	4a1d      	ldr	r2, [pc, #116]	; (80014f4 <pc_command_processing+0x1a0>)
 800147e:	4413      	add	r3, r2
 8001480:	220f      	movs	r2, #15
 8001482:	4922      	ldr	r1, [pc, #136]	; (800150c <pc_command_processing+0x1b8>)
 8001484:	4618      	mov	r0, r3
 8001486:	f003 f9e9 	bl	800485c <strncmp>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d102      	bne.n	8001496 <pc_command_processing+0x142>
		{
			led_keepon_down();
 8001490:	f7ff f8c8 	bl	8000624 <led_keepon_down>
			return;
 8001494:	e027      	b.n	80014e6 <pc_command_processing+0x192>
		}
		if (!strncmp(rx_buff[queue_front - 1], "led_flower_on", strlen("led_flower_on")))
 8001496:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <pc_command_processing+0x194>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	1e5a      	subs	r2, r3, #1
 800149c:	4613      	mov	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	4a13      	ldr	r2, [pc, #76]	; (80014f4 <pc_command_processing+0x1a0>)
 80014a6:	4413      	add	r3, r2
 80014a8:	220d      	movs	r2, #13
 80014aa:	4919      	ldr	r1, [pc, #100]	; (8001510 <pc_command_processing+0x1bc>)
 80014ac:	4618      	mov	r0, r3
 80014ae:	f003 f9d5 	bl	800485c <strncmp>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d102      	bne.n	80014be <pc_command_processing+0x16a>
		{
			led_flower_on();
 80014b8:	f7ff f8de 	bl	8000678 <led_flower_on>
			return;
 80014bc:	e013      	b.n	80014e6 <pc_command_processing+0x192>
		}
		if (!strncmp(rx_buff[queue_front - 1], "led_flower_off", strlen("led_flower_off")))
 80014be:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <pc_command_processing+0x194>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	1e5a      	subs	r2, r3, #1
 80014c4:	4613      	mov	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4413      	add	r3, r2
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	4a09      	ldr	r2, [pc, #36]	; (80014f4 <pc_command_processing+0x1a0>)
 80014ce:	4413      	add	r3, r2
 80014d0:	220e      	movs	r2, #14
 80014d2:	4910      	ldr	r1, [pc, #64]	; (8001514 <pc_command_processing+0x1c0>)
 80014d4:	4618      	mov	r0, r3
 80014d6:	f003 f9c1 	bl	800485c <strncmp>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d102      	bne.n	80014e6 <pc_command_processing+0x192>
		{
			led_flower_off();
 80014e0:	f7ff f90a 	bl	80006f8 <led_flower_off>
			return;
 80014e4:	bf00      	nop
		}
	}
}
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000b7c 	.word	0x20000b7c
 80014ec:	20000b80 	.word	0x20000b80
 80014f0:	66666667 	.word	0x66666667
 80014f4:	2000085c 	.word	0x2000085c
 80014f8:	080051d4 	.word	0x080051d4
 80014fc:	080051e0 	.word	0x080051e0
 8001500:	080051ec 	.word	0x080051ec
 8001504:	080051f8 	.word	0x080051f8
 8001508:	08005204 	.word	0x08005204
 800150c:	08005214 	.word	0x08005214
 8001510:	08005224 	.word	0x08005224
 8001514:	08005234 	.word	0x08005234

08001518 <bt_command_processing>:

void bt_command_processing(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
	if (bt_newline_detect_flag) // 원형쿠로 구성한게 아니기 때무네, 뉴라인 플래그가 서 있을 때만 완전한 문장이 들어왔다고 판단하고 함수가 진해오디어야 하낟.
 800151c:	4b31      	ldr	r3, [pc, #196]	; (80015e4 <bt_command_processing+0xcc>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d05d      	beq.n	80015e0 <bt_command_processing+0xc8>
	{
		bt_newline_detect_flag = 0;
 8001524:	4b2f      	ldr	r3, [pc, #188]	; (80015e4 <bt_command_processing+0xcc>)
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
		printf("%s\n", bt_rx_buff);
 800152a:	482f      	ldr	r0, [pc, #188]	; (80015e8 <bt_command_processing+0xd0>)
 800152c:	f003 f98e 	bl	800484c <puts>
		if (!strncmp(bt_rx_buff, "ledallon", strlen("ledallon"))) // 느낌표가 들어갔다!! strcmp는 같으면 0을 리턴하기 때문에 if문에 진입하려먼 !not을 통해서 1(true)로 뒤집어 줘야 한다.
 8001530:	2208      	movs	r2, #8
 8001532:	492e      	ldr	r1, [pc, #184]	; (80015ec <bt_command_processing+0xd4>)
 8001534:	482c      	ldr	r0, [pc, #176]	; (80015e8 <bt_command_processing+0xd0>)
 8001536:	f003 f991 	bl	800485c <strncmp>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d102      	bne.n	8001546 <bt_command_processing+0x2e>
		{
			led_all_on();
 8001540:	f7fe ffd6 	bl	80004f0 <led_all_on>
			return;
 8001544:	e04c      	b.n	80015e0 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "ledalloff", strlen("ledalloff")))
 8001546:	2209      	movs	r2, #9
 8001548:	4929      	ldr	r1, [pc, #164]	; (80015f0 <bt_command_processing+0xd8>)
 800154a:	4827      	ldr	r0, [pc, #156]	; (80015e8 <bt_command_processing+0xd0>)
 800154c:	f003 f986 	bl	800485c <strncmp>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d102      	bne.n	800155c <bt_command_processing+0x44>
		{
			led_all_off();
 8001556:	f7fe ffd7 	bl	8000508 <led_all_off>
			return;
 800155a:	e041      	b.n	80015e0 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_on_up", strlen("led_on_up")))
 800155c:	2209      	movs	r2, #9
 800155e:	4925      	ldr	r1, [pc, #148]	; (80015f4 <bt_command_processing+0xdc>)
 8001560:	4821      	ldr	r0, [pc, #132]	; (80015e8 <bt_command_processing+0xd0>)
 8001562:	f003 f97b 	bl	800485c <strncmp>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d102      	bne.n	8001572 <bt_command_processing+0x5a>
		{
			led_on_up();
 800156c:	f7fe ffd8 	bl	8000520 <led_on_up>
			return;
 8001570:	e036      	b.n	80015e0 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_on_down", strlen("led_on_down")))
 8001572:	220b      	movs	r2, #11
 8001574:	4920      	ldr	r1, [pc, #128]	; (80015f8 <bt_command_processing+0xe0>)
 8001576:	481c      	ldr	r0, [pc, #112]	; (80015e8 <bt_command_processing+0xd0>)
 8001578:	f003 f970 	bl	800485c <strncmp>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d102      	bne.n	8001588 <bt_command_processing+0x70>
		{
			led_on_down();
 8001582:	f7fe fff9 	bl	8000578 <led_on_down>
			return;
 8001586:	e02b      	b.n	80015e0 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_keepon_up", strlen("led_keepon_up")))
 8001588:	220d      	movs	r2, #13
 800158a:	491c      	ldr	r1, [pc, #112]	; (80015fc <bt_command_processing+0xe4>)
 800158c:	4816      	ldr	r0, [pc, #88]	; (80015e8 <bt_command_processing+0xd0>)
 800158e:	f003 f965 	bl	800485c <strncmp>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d102      	bne.n	800159e <bt_command_processing+0x86>
		{
			led_keepon_up();
 8001598:	f7ff f81a 	bl	80005d0 <led_keepon_up>
			return;
 800159c:	e020      	b.n	80015e0 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_keepon_down", strlen("led_keepon_down")))
 800159e:	220f      	movs	r2, #15
 80015a0:	4917      	ldr	r1, [pc, #92]	; (8001600 <bt_command_processing+0xe8>)
 80015a2:	4811      	ldr	r0, [pc, #68]	; (80015e8 <bt_command_processing+0xd0>)
 80015a4:	f003 f95a 	bl	800485c <strncmp>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d102      	bne.n	80015b4 <bt_command_processing+0x9c>
		{
			led_keepon_down();
 80015ae:	f7ff f839 	bl	8000624 <led_keepon_down>
			return;
 80015b2:	e015      	b.n	80015e0 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_flower_on", strlen("led_flower_on")))
 80015b4:	220d      	movs	r2, #13
 80015b6:	4913      	ldr	r1, [pc, #76]	; (8001604 <bt_command_processing+0xec>)
 80015b8:	480b      	ldr	r0, [pc, #44]	; (80015e8 <bt_command_processing+0xd0>)
 80015ba:	f003 f94f 	bl	800485c <strncmp>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d102      	bne.n	80015ca <bt_command_processing+0xb2>
		{
			led_flower_on();
 80015c4:	f7ff f858 	bl	8000678 <led_flower_on>
			return;
 80015c8:	e00a      	b.n	80015e0 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_flower_off", strlen("led_flower_off")))
 80015ca:	220e      	movs	r2, #14
 80015cc:	490e      	ldr	r1, [pc, #56]	; (8001608 <bt_command_processing+0xf0>)
 80015ce:	4806      	ldr	r0, [pc, #24]	; (80015e8 <bt_command_processing+0xd0>)
 80015d0:	f003 f944 	bl	800485c <strncmp>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d102      	bne.n	80015e0 <bt_command_processing+0xc8>
		{
			led_flower_off();
 80015da:	f7ff f88d 	bl	80006f8 <led_flower_off>
			return;
 80015de:	bf00      	nop
		}
	}
}
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000bb4 	.word	0x20000bb4
 80015e8:	20000b88 	.word	0x20000b88
 80015ec:	08005244 	.word	0x08005244
 80015f0:	08005250 	.word	0x08005250
 80015f4:	080051ec 	.word	0x080051ec
 80015f8:	080051f8 	.word	0x080051f8
 80015fc:	08005204 	.word	0x08005204
 8001600:	08005214 	.word	0x08005214
 8001604:	08005224 	.word	0x08005224
 8001608:	08005234 	.word	0x08005234

0800160c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800160c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001644 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001610:	480d      	ldr	r0, [pc, #52]	; (8001648 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001612:	490e      	ldr	r1, [pc, #56]	; (800164c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001614:	4a0e      	ldr	r2, [pc, #56]	; (8001650 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001618:	e002      	b.n	8001620 <LoopCopyDataInit>

0800161a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800161a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800161c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161e:	3304      	adds	r3, #4

08001620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001624:	d3f9      	bcc.n	800161a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001626:	4a0b      	ldr	r2, [pc, #44]	; (8001654 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001628:	4c0b      	ldr	r4, [pc, #44]	; (8001658 <LoopFillZerobss+0x26>)
  movs r3, #0
 800162a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800162c:	e001      	b.n	8001632 <LoopFillZerobss>

0800162e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001630:	3204      	adds	r2, #4

08001632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001634:	d3fb      	bcc.n	800162e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001636:	f7ff fdc3 	bl	80011c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800163a:	f003 f86d 	bl	8004718 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800163e:	f7ff f8b9 	bl	80007b4 <main>
  bx  lr    
 8001642:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001644:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800164c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001650:	080052e8 	.word	0x080052e8
  ldr r2, =_sbss
 8001654:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001658:	20000bcc 	.word	0x20000bcc

0800165c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800165c:	e7fe      	b.n	800165c <ADC_IRQHandler>
	...

08001660 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001664:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <HAL_Init+0x40>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0d      	ldr	r2, [pc, #52]	; (80016a0 <HAL_Init+0x40>)
 800166a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800166e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001670:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <HAL_Init+0x40>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <HAL_Init+0x40>)
 8001676:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800167a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <HAL_Init+0x40>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a07      	ldr	r2, [pc, #28]	; (80016a0 <HAL_Init+0x40>)
 8001682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001686:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001688:	2003      	movs	r0, #3
 800168a:	f000 f94f 	bl	800192c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800168e:	2000      	movs	r0, #0
 8001690:	f000 f808 	bl	80016a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001694:	f7ff fada 	bl	8000c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40023c00 	.word	0x40023c00

080016a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <HAL_InitTick+0x54>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <HAL_InitTick+0x58>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	4619      	mov	r1, r3
 80016b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80016be:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 f967 	bl	8001996 <HAL_SYSTICK_Config>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e00e      	b.n	80016f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2b0f      	cmp	r3, #15
 80016d6:	d80a      	bhi.n	80016ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d8:	2200      	movs	r2, #0
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	f04f 30ff 	mov.w	r0, #4294967295
 80016e0:	f000 f92f 	bl	8001942 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016e4:	4a06      	ldr	r2, [pc, #24]	; (8001700 <HAL_InitTick+0x5c>)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ea:	2300      	movs	r3, #0
 80016ec:	e000      	b.n	80016f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000000 	.word	0x20000000
 80016fc:	20000008 	.word	0x20000008
 8001700:	20000004 	.word	0x20000004

08001704 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_IncTick+0x20>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	461a      	mov	r2, r3
 800170e:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_IncTick+0x24>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4413      	add	r3, r2
 8001714:	4a04      	ldr	r2, [pc, #16]	; (8001728 <HAL_IncTick+0x24>)
 8001716:	6013      	str	r3, [r2, #0]
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	20000008 	.word	0x20000008
 8001728:	20000bb8 	.word	0x20000bb8

0800172c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return uwTick;
 8001730:	4b03      	ldr	r3, [pc, #12]	; (8001740 <HAL_GetTick+0x14>)
 8001732:	681b      	ldr	r3, [r3, #0]
}
 8001734:	4618      	mov	r0, r3
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	20000bb8 	.word	0x20000bb8

08001744 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800174c:	f7ff ffee 	bl	800172c <HAL_GetTick>
 8001750:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800175c:	d005      	beq.n	800176a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800175e:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <HAL_Delay+0x44>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	461a      	mov	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4413      	add	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800176a:	bf00      	nop
 800176c:	f7ff ffde 	bl	800172c <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	429a      	cmp	r2, r3
 800177a:	d8f7      	bhi.n	800176c <HAL_Delay+0x28>
  {
  }
}
 800177c:	bf00      	nop
 800177e:	bf00      	nop
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000008 	.word	0x20000008

0800178c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a8:	4013      	ands	r3, r2
 80017aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017be:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	60d3      	str	r3, [r2, #12]
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <__NVIC_GetPriorityGrouping+0x18>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	0a1b      	lsrs	r3, r3, #8
 80017de:	f003 0307 	and.w	r3, r3, #7
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	db0b      	blt.n	800181a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	f003 021f 	and.w	r2, r3, #31
 8001808:	4907      	ldr	r1, [pc, #28]	; (8001828 <__NVIC_EnableIRQ+0x38>)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	095b      	lsrs	r3, r3, #5
 8001810:	2001      	movs	r0, #1
 8001812:	fa00 f202 	lsl.w	r2, r0, r2
 8001816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	e000e100 	.word	0xe000e100

0800182c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	6039      	str	r1, [r7, #0]
 8001836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183c:	2b00      	cmp	r3, #0
 800183e:	db0a      	blt.n	8001856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	b2da      	uxtb	r2, r3
 8001844:	490c      	ldr	r1, [pc, #48]	; (8001878 <__NVIC_SetPriority+0x4c>)
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	0112      	lsls	r2, r2, #4
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	440b      	add	r3, r1
 8001850:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001854:	e00a      	b.n	800186c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	b2da      	uxtb	r2, r3
 800185a:	4908      	ldr	r1, [pc, #32]	; (800187c <__NVIC_SetPriority+0x50>)
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	3b04      	subs	r3, #4
 8001864:	0112      	lsls	r2, r2, #4
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	440b      	add	r3, r1
 800186a:	761a      	strb	r2, [r3, #24]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000e100 	.word	0xe000e100
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001880:	b480      	push	{r7}
 8001882:	b089      	sub	sp, #36	; 0x24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f1c3 0307 	rsb	r3, r3, #7
 800189a:	2b04      	cmp	r3, #4
 800189c:	bf28      	it	cs
 800189e:	2304      	movcs	r3, #4
 80018a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3304      	adds	r3, #4
 80018a6:	2b06      	cmp	r3, #6
 80018a8:	d902      	bls.n	80018b0 <NVIC_EncodePriority+0x30>
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3b03      	subs	r3, #3
 80018ae:	e000      	b.n	80018b2 <NVIC_EncodePriority+0x32>
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b4:	f04f 32ff 	mov.w	r2, #4294967295
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43da      	mvns	r2, r3
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	401a      	ands	r2, r3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c8:	f04f 31ff 	mov.w	r1, #4294967295
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	fa01 f303 	lsl.w	r3, r1, r3
 80018d2:	43d9      	mvns	r1, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d8:	4313      	orrs	r3, r2
         );
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3724      	adds	r7, #36	; 0x24
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
	...

080018e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f8:	d301      	bcc.n	80018fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018fa:	2301      	movs	r3, #1
 80018fc:	e00f      	b.n	800191e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fe:	4a0a      	ldr	r2, [pc, #40]	; (8001928 <SysTick_Config+0x40>)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3b01      	subs	r3, #1
 8001904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001906:	210f      	movs	r1, #15
 8001908:	f04f 30ff 	mov.w	r0, #4294967295
 800190c:	f7ff ff8e 	bl	800182c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <SysTick_Config+0x40>)
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001916:	4b04      	ldr	r3, [pc, #16]	; (8001928 <SysTick_Config+0x40>)
 8001918:	2207      	movs	r2, #7
 800191a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	e000e010 	.word	0xe000e010

0800192c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff ff29 	bl	800178c <__NVIC_SetPriorityGrouping>
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001942:	b580      	push	{r7, lr}
 8001944:	b086      	sub	sp, #24
 8001946:	af00      	add	r7, sp, #0
 8001948:	4603      	mov	r3, r0
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
 800194e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001954:	f7ff ff3e 	bl	80017d4 <__NVIC_GetPriorityGrouping>
 8001958:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	68b9      	ldr	r1, [r7, #8]
 800195e:	6978      	ldr	r0, [r7, #20]
 8001960:	f7ff ff8e 	bl	8001880 <NVIC_EncodePriority>
 8001964:	4602      	mov	r2, r0
 8001966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196a:	4611      	mov	r1, r2
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff5d 	bl	800182c <__NVIC_SetPriority>
}
 8001972:	bf00      	nop
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	4603      	mov	r3, r0
 8001982:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff ff31 	bl	80017f0 <__NVIC_EnableIRQ>
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff ffa2 	bl	80018e8 <SysTick_Config>
 80019a4:	4603      	mov	r3, r0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b084      	sub	sp, #16
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019bc:	f7ff feb6 	bl	800172c <HAL_GetTick>
 80019c0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d008      	beq.n	80019e0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2280      	movs	r2, #128	; 0x80
 80019d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e052      	b.n	8001a86 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0216 	bic.w	r2, r2, #22
 80019ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	695a      	ldr	r2, [r3, #20]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019fe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d103      	bne.n	8001a10 <HAL_DMA_Abort+0x62>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d007      	beq.n	8001a20 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f022 0208 	bic.w	r2, r2, #8
 8001a1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f022 0201 	bic.w	r2, r2, #1
 8001a2e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a30:	e013      	b.n	8001a5a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a32:	f7ff fe7b 	bl	800172c <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b05      	cmp	r3, #5
 8001a3e:	d90c      	bls.n	8001a5a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2220      	movs	r2, #32
 8001a44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2203      	movs	r2, #3
 8001a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e015      	b.n	8001a86 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1e4      	bne.n	8001a32 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a6c:	223f      	movs	r2, #63	; 0x3f
 8001a6e:	409a      	lsls	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d004      	beq.n	8001aac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2280      	movs	r2, #128	; 0x80
 8001aa6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e00c      	b.n	8001ac6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2205      	movs	r2, #5
 8001ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0201 	bic.w	r2, r2, #1
 8001ac2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
	...

08001ad4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e06c      	b.n	8001bc0 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d106      	bne.n	8001afe <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2223      	movs	r2, #35	; 0x23
 8001af4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff f8cf 	bl	8000c9c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	4b31      	ldr	r3, [pc, #196]	; (8001bc8 <HAL_ETH_Init+0xf4>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b06:	4a30      	ldr	r2, [pc, #192]	; (8001bc8 <HAL_ETH_Init+0xf4>)
 8001b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b0e:	4b2e      	ldr	r3, [pc, #184]	; (8001bc8 <HAL_ETH_Init+0xf4>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001b1a:	4b2c      	ldr	r3, [pc, #176]	; (8001bcc <HAL_ETH_Init+0xf8>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	4a2b      	ldr	r2, [pc, #172]	; (8001bcc <HAL_ETH_Init+0xf8>)
 8001b20:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001b24:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001b26:	4b29      	ldr	r3, [pc, #164]	; (8001bcc <HAL_ETH_Init+0xf8>)
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	4927      	ldr	r1, [pc, #156]	; (8001bcc <HAL_ETH_Init+0xf8>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001b34:	4b25      	ldr	r3, [pc, #148]	; (8001bcc <HAL_ETH_Init+0xf8>)
 8001b36:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6812      	ldr	r2, [r2, #0]
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b4e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b50:	f7ff fdec 	bl	800172c <HAL_GetTick>
 8001b54:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001b56:	e011      	b.n	8001b7c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001b58:	f7ff fde8 	bl	800172c <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001b66:	d909      	bls.n	8001b7c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2204      	movs	r2, #4
 8001b6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	22e0      	movs	r2, #224	; 0xe0
 8001b74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e021      	b.n	8001bc0 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1e4      	bne.n	8001b58 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f958 	bl	8001e44 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f9ff 	bl	8001f98 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 fa55 	bl	800204a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f9bd 	bl	8001f28 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2210      	movs	r2, #16
 8001bba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3710      	adds	r7, #16
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40013800 	.word	0x40013800

08001bd0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	4b51      	ldr	r3, [pc, #324]	; (8001d2c <ETH_SetMACConfig+0x15c>)
 8001be6:	4013      	ands	r3, r2
 8001be8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	7c1b      	ldrb	r3, [r3, #16]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d102      	bne.n	8001bf8 <ETH_SetMACConfig+0x28>
 8001bf2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001bf6:	e000      	b.n	8001bfa <ETH_SetMACConfig+0x2a>
 8001bf8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	7c5b      	ldrb	r3, [r3, #17]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d102      	bne.n	8001c08 <ETH_SetMACConfig+0x38>
 8001c02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c06:	e000      	b.n	8001c0a <ETH_SetMACConfig+0x3a>
 8001c08:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c0a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001c10:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	7fdb      	ldrb	r3, [r3, #31]
 8001c16:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001c18:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001c1e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	7f92      	ldrb	r2, [r2, #30]
 8001c24:	2a00      	cmp	r2, #0
 8001c26:	d102      	bne.n	8001c2e <ETH_SetMACConfig+0x5e>
 8001c28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c2c:	e000      	b.n	8001c30 <ETH_SetMACConfig+0x60>
 8001c2e:	2200      	movs	r2, #0
                        macconf->Speed |
 8001c30:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	7f1b      	ldrb	r3, [r3, #28]
 8001c36:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001c38:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001c3e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	791b      	ldrb	r3, [r3, #4]
 8001c44:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001c46:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001c4e:	2a00      	cmp	r2, #0
 8001c50:	d102      	bne.n	8001c58 <ETH_SetMACConfig+0x88>
 8001c52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c56:	e000      	b.n	8001c5a <ETH_SetMACConfig+0x8a>
 8001c58:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001c5a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	7bdb      	ldrb	r3, [r3, #15]
 8001c60:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001c62:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001c68:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c70:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c72:	4313      	orrs	r3, r2
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	f7ff fd5a 	bl	8001744 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cae:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001cb6:	2a00      	cmp	r2, #0
 8001cb8:	d101      	bne.n	8001cbe <ETH_SetMACConfig+0xee>
 8001cba:	2280      	movs	r2, #128	; 0x80
 8001cbc:	e000      	b.n	8001cc0 <ETH_SetMACConfig+0xf0>
 8001cbe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001cc0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001cc6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001cce:	2a01      	cmp	r2, #1
 8001cd0:	d101      	bne.n	8001cd6 <ETH_SetMACConfig+0x106>
 8001cd2:	2208      	movs	r2, #8
 8001cd4:	e000      	b.n	8001cd8 <ETH_SetMACConfig+0x108>
 8001cd6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001cd8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001ce0:	2a01      	cmp	r2, #1
 8001ce2:	d101      	bne.n	8001ce8 <ETH_SetMACConfig+0x118>
 8001ce4:	2204      	movs	r2, #4
 8001ce6:	e000      	b.n	8001cea <ETH_SetMACConfig+0x11a>
 8001ce8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001cea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001cf2:	2a01      	cmp	r2, #1
 8001cf4:	d101      	bne.n	8001cfa <ETH_SetMACConfig+0x12a>
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	e000      	b.n	8001cfc <ETH_SetMACConfig+0x12c>
 8001cfa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d14:	2001      	movs	r0, #1
 8001d16:	f7ff fd15 	bl	8001744 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	619a      	str	r2, [r3, #24]
}
 8001d22:	bf00      	nop
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	ff20810f 	.word	0xff20810f

08001d30 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	4b3d      	ldr	r3, [pc, #244]	; (8001e40 <ETH_SetDMAConfig+0x110>)
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	7b1b      	ldrb	r3, [r3, #12]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d102      	bne.n	8001d5c <ETH_SetDMAConfig+0x2c>
 8001d56:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d5a:	e000      	b.n	8001d5e <ETH_SetDMAConfig+0x2e>
 8001d5c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	7b5b      	ldrb	r3, [r3, #13]
 8001d62:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001d64:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	7f52      	ldrb	r2, [r2, #29]
 8001d6a:	2a00      	cmp	r2, #0
 8001d6c:	d102      	bne.n	8001d74 <ETH_SetDMAConfig+0x44>
 8001d6e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d72:	e000      	b.n	8001d76 <ETH_SetDMAConfig+0x46>
 8001d74:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001d76:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	7b9b      	ldrb	r3, [r3, #14]
 8001d7c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001d7e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001d84:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	7f1b      	ldrb	r3, [r3, #28]
 8001d8a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001d8c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	7f9b      	ldrb	r3, [r3, #30]
 8001d92:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001d94:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001d9a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001da2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001da4:	4313      	orrs	r3, r2
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001db4:	461a      	mov	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dc6:	2001      	movs	r0, #1
 8001dc8:	f7ff fcbc 	bl	8001744 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	791b      	ldrb	r3, [r3, #4]
 8001dde:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001de4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001dea:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001df0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001df8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001dfa:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e00:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001e02:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001e08:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6812      	ldr	r2, [r2, #0]
 8001e0e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e16:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e24:	2001      	movs	r0, #1
 8001e26:	f7ff fc8d 	bl	8001744 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e32:	461a      	mov	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6013      	str	r3, [r2, #0]
}
 8001e38:	bf00      	nop
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	f8de3f23 	.word	0xf8de3f23

08001e44 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b0a6      	sub	sp, #152	; 0x98
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001e52:	2301      	movs	r3, #1
 8001e54:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001e62:	2301      	movs	r3, #1
 8001e64:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001e74:	2300      	movs	r3, #0
 8001e76:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001e80:	2300      	movs	r3, #0
 8001e82:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001e84:	2300      	movs	r3, #0
 8001e86:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001e94:	2300      	movs	r3, #0
 8001e96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001ea6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001eaa:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001eac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001eb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001eb8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff fe86 	bl	8001bd0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001eda:	2300      	movs	r3, #0
 8001edc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001eea:	2301      	movs	r3, #1
 8001eec:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001ef4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ef8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001efa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001efe:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001f00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f04:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001f06:	2301      	movs	r3, #1
 8001f08:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001f10:	2300      	movs	r3, #0
 8001f12:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001f14:	f107 0308 	add.w	r3, r7, #8
 8001f18:	4619      	mov	r1, r3
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff ff08 	bl	8001d30 <ETH_SetDMAConfig>
}
 8001f20:	bf00      	nop
 8001f22:	3798      	adds	r7, #152	; 0x98
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b087      	sub	sp, #28
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3305      	adds	r3, #5
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	021b      	lsls	r3, r3, #8
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	3204      	adds	r2, #4
 8001f40:	7812      	ldrb	r2, [r2, #0]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <ETH_MACAddressConfig+0x68>)
 8001f4a:	4413      	add	r3, r2
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	3303      	adds	r3, #3
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	061a      	lsls	r2, r3, #24
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3302      	adds	r3, #2
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	431a      	orrs	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3301      	adds	r3, #1
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	021b      	lsls	r3, r3, #8
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	7812      	ldrb	r2, [r2, #0]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <ETH_MACAddressConfig+0x6c>)
 8001f7a:	4413      	add	r3, r2
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	6013      	str	r3, [r2, #0]
}
 8001f82:	bf00      	nop
 8001f84:	371c      	adds	r7, #28
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40028040 	.word	0x40028040
 8001f94:	40028044 	.word	0x40028044

08001f98 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	e03e      	b.n	8002024 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68d9      	ldr	r1, [r3, #12]
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	4613      	mov	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	440b      	add	r3, r1
 8001fb6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001fd0:	68b9      	ldr	r1, [r7, #8]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	3206      	adds	r2, #6
 8001fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d80c      	bhi.n	8002008 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68d9      	ldr	r1, [r3, #12]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	1c5a      	adds	r2, r3, #1
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	440b      	add	r3, r1
 8002000:	461a      	mov	r2, r3
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	e004      	b.n	8002012 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	461a      	mov	r2, r3
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	3301      	adds	r3, #1
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2b03      	cmp	r3, #3
 8002028:	d9bd      	bls.n	8001fa6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68da      	ldr	r2, [r3, #12]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800203c:	611a      	str	r2, [r3, #16]
}
 800203e:	bf00      	nop
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800204a:	b480      	push	{r7}
 800204c:	b085      	sub	sp, #20
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	e046      	b.n	80020e6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6919      	ldr	r1, [r3, #16]
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	4613      	mov	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	440b      	add	r3, r1
 8002068:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	2200      	movs	r2, #0
 8002074:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	2200      	movs	r2, #0
 800207a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	2200      	movs	r2, #0
 8002080:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	2200      	movs	r2, #0
 8002086:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	2200      	movs	r2, #0
 800208c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002094:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800209c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80020aa:	68b9      	ldr	r1, [r7, #8]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	3212      	adds	r2, #18
 80020b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d80c      	bhi.n	80020d6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6919      	ldr	r1, [r3, #16]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	1c5a      	adds	r2, r3, #1
 80020c4:	4613      	mov	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	440b      	add	r3, r1
 80020ce:	461a      	mov	r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	60da      	str	r2, [r3, #12]
 80020d4:	e004      	b.n	80020e0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	461a      	mov	r2, r3
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	3301      	adds	r3, #1
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2b03      	cmp	r3, #3
 80020ea:	d9b5      	bls.n	8002058 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691a      	ldr	r2, [r3, #16]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002116:	60da      	str	r2, [r3, #12]
}
 8002118:	bf00      	nop
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002124:	b480      	push	{r7}
 8002126:	b089      	sub	sp, #36	; 0x24
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800212e:	2300      	movs	r3, #0
 8002130:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002132:	2300      	movs	r3, #0
 8002134:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002136:	2300      	movs	r3, #0
 8002138:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800213a:	2300      	movs	r3, #0
 800213c:	61fb      	str	r3, [r7, #28]
 800213e:	e177      	b.n	8002430 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002140:	2201      	movs	r2, #1
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	4013      	ands	r3, r2
 8002152:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	429a      	cmp	r2, r3
 800215a:	f040 8166 	bne.w	800242a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f003 0303 	and.w	r3, r3, #3
 8002166:	2b01      	cmp	r3, #1
 8002168:	d005      	beq.n	8002176 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002172:	2b02      	cmp	r3, #2
 8002174:	d130      	bne.n	80021d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	2203      	movs	r2, #3
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43db      	mvns	r3, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4013      	ands	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	68da      	ldr	r2, [r3, #12]
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4313      	orrs	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021ac:	2201      	movs	r2, #1
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	091b      	lsrs	r3, r3, #4
 80021c2:	f003 0201 	and.w	r2, r3, #1
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 0303 	and.w	r3, r3, #3
 80021e0:	2b03      	cmp	r3, #3
 80021e2:	d017      	beq.n	8002214 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	2203      	movs	r2, #3
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	43db      	mvns	r3, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4013      	ands	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4313      	orrs	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 0303 	and.w	r3, r3, #3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d123      	bne.n	8002268 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	08da      	lsrs	r2, r3, #3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3208      	adds	r2, #8
 8002228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800222c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	220f      	movs	r2, #15
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4013      	ands	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	691a      	ldr	r2, [r3, #16]
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4313      	orrs	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	08da      	lsrs	r2, r3, #3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	3208      	adds	r2, #8
 8002262:	69b9      	ldr	r1, [r7, #24]
 8002264:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	2203      	movs	r2, #3
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	43db      	mvns	r3, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4013      	ands	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 0203 	and.w	r2, r3, #3
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f000 80c0 	beq.w	800242a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	4b66      	ldr	r3, [pc, #408]	; (8002448 <HAL_GPIO_Init+0x324>)
 80022b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b2:	4a65      	ldr	r2, [pc, #404]	; (8002448 <HAL_GPIO_Init+0x324>)
 80022b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022b8:	6453      	str	r3, [r2, #68]	; 0x44
 80022ba:	4b63      	ldr	r3, [pc, #396]	; (8002448 <HAL_GPIO_Init+0x324>)
 80022bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022c6:	4a61      	ldr	r2, [pc, #388]	; (800244c <HAL_GPIO_Init+0x328>)
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	089b      	lsrs	r3, r3, #2
 80022cc:	3302      	adds	r3, #2
 80022ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	220f      	movs	r2, #15
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43db      	mvns	r3, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4013      	ands	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a58      	ldr	r2, [pc, #352]	; (8002450 <HAL_GPIO_Init+0x32c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d037      	beq.n	8002362 <HAL_GPIO_Init+0x23e>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a57      	ldr	r2, [pc, #348]	; (8002454 <HAL_GPIO_Init+0x330>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d031      	beq.n	800235e <HAL_GPIO_Init+0x23a>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a56      	ldr	r2, [pc, #344]	; (8002458 <HAL_GPIO_Init+0x334>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d02b      	beq.n	800235a <HAL_GPIO_Init+0x236>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a55      	ldr	r2, [pc, #340]	; (800245c <HAL_GPIO_Init+0x338>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d025      	beq.n	8002356 <HAL_GPIO_Init+0x232>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a54      	ldr	r2, [pc, #336]	; (8002460 <HAL_GPIO_Init+0x33c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d01f      	beq.n	8002352 <HAL_GPIO_Init+0x22e>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a53      	ldr	r2, [pc, #332]	; (8002464 <HAL_GPIO_Init+0x340>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d019      	beq.n	800234e <HAL_GPIO_Init+0x22a>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a52      	ldr	r2, [pc, #328]	; (8002468 <HAL_GPIO_Init+0x344>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d013      	beq.n	800234a <HAL_GPIO_Init+0x226>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a51      	ldr	r2, [pc, #324]	; (800246c <HAL_GPIO_Init+0x348>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d00d      	beq.n	8002346 <HAL_GPIO_Init+0x222>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a50      	ldr	r2, [pc, #320]	; (8002470 <HAL_GPIO_Init+0x34c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d007      	beq.n	8002342 <HAL_GPIO_Init+0x21e>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a4f      	ldr	r2, [pc, #316]	; (8002474 <HAL_GPIO_Init+0x350>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d101      	bne.n	800233e <HAL_GPIO_Init+0x21a>
 800233a:	2309      	movs	r3, #9
 800233c:	e012      	b.n	8002364 <HAL_GPIO_Init+0x240>
 800233e:	230a      	movs	r3, #10
 8002340:	e010      	b.n	8002364 <HAL_GPIO_Init+0x240>
 8002342:	2308      	movs	r3, #8
 8002344:	e00e      	b.n	8002364 <HAL_GPIO_Init+0x240>
 8002346:	2307      	movs	r3, #7
 8002348:	e00c      	b.n	8002364 <HAL_GPIO_Init+0x240>
 800234a:	2306      	movs	r3, #6
 800234c:	e00a      	b.n	8002364 <HAL_GPIO_Init+0x240>
 800234e:	2305      	movs	r3, #5
 8002350:	e008      	b.n	8002364 <HAL_GPIO_Init+0x240>
 8002352:	2304      	movs	r3, #4
 8002354:	e006      	b.n	8002364 <HAL_GPIO_Init+0x240>
 8002356:	2303      	movs	r3, #3
 8002358:	e004      	b.n	8002364 <HAL_GPIO_Init+0x240>
 800235a:	2302      	movs	r3, #2
 800235c:	e002      	b.n	8002364 <HAL_GPIO_Init+0x240>
 800235e:	2301      	movs	r3, #1
 8002360:	e000      	b.n	8002364 <HAL_GPIO_Init+0x240>
 8002362:	2300      	movs	r3, #0
 8002364:	69fa      	ldr	r2, [r7, #28]
 8002366:	f002 0203 	and.w	r2, r2, #3
 800236a:	0092      	lsls	r2, r2, #2
 800236c:	4093      	lsls	r3, r2
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002374:	4935      	ldr	r1, [pc, #212]	; (800244c <HAL_GPIO_Init+0x328>)
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	089b      	lsrs	r3, r3, #2
 800237a:	3302      	adds	r3, #2
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002382:	4b3d      	ldr	r3, [pc, #244]	; (8002478 <HAL_GPIO_Init+0x354>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	43db      	mvns	r3, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4013      	ands	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023a6:	4a34      	ldr	r2, [pc, #208]	; (8002478 <HAL_GPIO_Init+0x354>)
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023ac:	4b32      	ldr	r3, [pc, #200]	; (8002478 <HAL_GPIO_Init+0x354>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023d0:	4a29      	ldr	r2, [pc, #164]	; (8002478 <HAL_GPIO_Init+0x354>)
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023d6:	4b28      	ldr	r3, [pc, #160]	; (8002478 <HAL_GPIO_Init+0x354>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	43db      	mvns	r3, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023fa:	4a1f      	ldr	r2, [pc, #124]	; (8002478 <HAL_GPIO_Init+0x354>)
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002400:	4b1d      	ldr	r3, [pc, #116]	; (8002478 <HAL_GPIO_Init+0x354>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	43db      	mvns	r3, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4013      	ands	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	4313      	orrs	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002424:	4a14      	ldr	r2, [pc, #80]	; (8002478 <HAL_GPIO_Init+0x354>)
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	3301      	adds	r3, #1
 800242e:	61fb      	str	r3, [r7, #28]
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	2b0f      	cmp	r3, #15
 8002434:	f67f ae84 	bls.w	8002140 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002438:	bf00      	nop
 800243a:	bf00      	nop
 800243c:	3724      	adds	r7, #36	; 0x24
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	40023800 	.word	0x40023800
 800244c:	40013800 	.word	0x40013800
 8002450:	40020000 	.word	0x40020000
 8002454:	40020400 	.word	0x40020400
 8002458:	40020800 	.word	0x40020800
 800245c:	40020c00 	.word	0x40020c00
 8002460:	40021000 	.word	0x40021000
 8002464:	40021400 	.word	0x40021400
 8002468:	40021800 	.word	0x40021800
 800246c:	40021c00 	.word	0x40021c00
 8002470:	40022000 	.word	0x40022000
 8002474:	40022400 	.word	0x40022400
 8002478:	40013c00 	.word	0x40013c00

0800247c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	460b      	mov	r3, r1
 8002486:	807b      	strh	r3, [r7, #2]
 8002488:	4613      	mov	r3, r2
 800248a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800248c:	787b      	ldrb	r3, [r7, #1]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002492:	887a      	ldrh	r2, [r7, #2]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002498:	e003      	b.n	80024a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800249a:	887b      	ldrh	r3, [r7, #2]
 800249c:	041a      	lsls	r2, r3, #16
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	619a      	str	r2, [r3, #24]
}
 80024a2:	bf00      	nop
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024b0:	b08f      	sub	sp, #60	; 0x3c
 80024b2:	af0a      	add	r7, sp, #40	; 0x28
 80024b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e10f      	b.n	80026e0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d106      	bne.n	80024e0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7fe fd32 	bl	8000f44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2203      	movs	r2, #3
 80024e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d102      	bne.n	80024fa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f001 fe63 	bl	80041ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	603b      	str	r3, [r7, #0]
 800250a:	687e      	ldr	r6, [r7, #4]
 800250c:	466d      	mov	r5, sp
 800250e:	f106 0410 	add.w	r4, r6, #16
 8002512:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002514:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002516:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002518:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800251a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800251e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002522:	1d33      	adds	r3, r6, #4
 8002524:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002526:	6838      	ldr	r0, [r7, #0]
 8002528:	f001 fdee 	bl	8004108 <USB_CoreInit>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d005      	beq.n	800253e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2202      	movs	r2, #2
 8002536:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e0d0      	b.n	80026e0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2100      	movs	r1, #0
 8002544:	4618      	mov	r0, r3
 8002546:	f001 fe51 	bl	80041ec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800254a:	2300      	movs	r3, #0
 800254c:	73fb      	strb	r3, [r7, #15]
 800254e:	e04a      	b.n	80025e6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002550:	7bfa      	ldrb	r2, [r7, #15]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4413      	add	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	333d      	adds	r3, #61	; 0x3d
 8002560:	2201      	movs	r2, #1
 8002562:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002564:	7bfa      	ldrb	r2, [r7, #15]
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	4413      	add	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	333c      	adds	r3, #60	; 0x3c
 8002574:	7bfa      	ldrb	r2, [r7, #15]
 8002576:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002578:	7bfa      	ldrb	r2, [r7, #15]
 800257a:	7bfb      	ldrb	r3, [r7, #15]
 800257c:	b298      	uxth	r0, r3
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	4413      	add	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	3344      	adds	r3, #68	; 0x44
 800258c:	4602      	mov	r2, r0
 800258e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002590:	7bfa      	ldrb	r2, [r7, #15]
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	4613      	mov	r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	4413      	add	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	440b      	add	r3, r1
 800259e:	3340      	adds	r3, #64	; 0x40
 80025a0:	2200      	movs	r2, #0
 80025a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025a4:	7bfa      	ldrb	r2, [r7, #15]
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	4613      	mov	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	4413      	add	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	3348      	adds	r3, #72	; 0x48
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025b8:	7bfa      	ldrb	r2, [r7, #15]
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	4413      	add	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	334c      	adds	r3, #76	; 0x4c
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025cc:	7bfa      	ldrb	r2, [r7, #15]
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	4413      	add	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	3354      	adds	r3, #84	; 0x54
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	3301      	adds	r3, #1
 80025e4:	73fb      	strb	r3, [r7, #15]
 80025e6:	7bfa      	ldrb	r2, [r7, #15]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d3af      	bcc.n	8002550 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025f0:	2300      	movs	r3, #0
 80025f2:	73fb      	strb	r3, [r7, #15]
 80025f4:	e044      	b.n	8002680 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025f6:	7bfa      	ldrb	r2, [r7, #15]
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	4413      	add	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	440b      	add	r3, r1
 8002604:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002608:	2200      	movs	r2, #0
 800260a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800260c:	7bfa      	ldrb	r2, [r7, #15]
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	4413      	add	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800261e:	7bfa      	ldrb	r2, [r7, #15]
 8002620:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002622:	7bfa      	ldrb	r2, [r7, #15]
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	4613      	mov	r3, r2
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	4413      	add	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	440b      	add	r3, r1
 8002630:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002634:	2200      	movs	r2, #0
 8002636:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002638:	7bfa      	ldrb	r2, [r7, #15]
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	4613      	mov	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4413      	add	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800264e:	7bfa      	ldrb	r2, [r7, #15]
 8002650:	6879      	ldr	r1, [r7, #4]
 8002652:	4613      	mov	r3, r2
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	4413      	add	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	440b      	add	r3, r1
 800265c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002664:	7bfa      	ldrb	r2, [r7, #15]
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4413      	add	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002676:	2200      	movs	r2, #0
 8002678:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800267a:	7bfb      	ldrb	r3, [r7, #15]
 800267c:	3301      	adds	r3, #1
 800267e:	73fb      	strb	r3, [r7, #15]
 8002680:	7bfa      	ldrb	r2, [r7, #15]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	429a      	cmp	r2, r3
 8002688:	d3b5      	bcc.n	80025f6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	603b      	str	r3, [r7, #0]
 8002690:	687e      	ldr	r6, [r7, #4]
 8002692:	466d      	mov	r5, sp
 8002694:	f106 0410 	add.w	r4, r6, #16
 8002698:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800269a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800269c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800269e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80026a8:	1d33      	adds	r3, r6, #4
 80026aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026ac:	6838      	ldr	r0, [r7, #0]
 80026ae:	f001 fde9 	bl	8004284 <USB_DevInit>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d005      	beq.n	80026c4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2202      	movs	r2, #2
 80026bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e00d      	b.n	80026e0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f001 ffb4 	bl	8004646 <USB_DevDisconnect>

  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e267      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d075      	beq.n	80027f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002706:	4b88      	ldr	r3, [pc, #544]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 030c 	and.w	r3, r3, #12
 800270e:	2b04      	cmp	r3, #4
 8002710:	d00c      	beq.n	800272c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002712:	4b85      	ldr	r3, [pc, #532]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800271a:	2b08      	cmp	r3, #8
 800271c:	d112      	bne.n	8002744 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800271e:	4b82      	ldr	r3, [pc, #520]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002726:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800272a:	d10b      	bne.n	8002744 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800272c:	4b7e      	ldr	r3, [pc, #504]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d05b      	beq.n	80027f0 <HAL_RCC_OscConfig+0x108>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d157      	bne.n	80027f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e242      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800274c:	d106      	bne.n	800275c <HAL_RCC_OscConfig+0x74>
 800274e:	4b76      	ldr	r3, [pc, #472]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a75      	ldr	r2, [pc, #468]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 8002754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	e01d      	b.n	8002798 <HAL_RCC_OscConfig+0xb0>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002764:	d10c      	bne.n	8002780 <HAL_RCC_OscConfig+0x98>
 8002766:	4b70      	ldr	r3, [pc, #448]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a6f      	ldr	r2, [pc, #444]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 800276c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	4b6d      	ldr	r3, [pc, #436]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a6c      	ldr	r2, [pc, #432]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 8002778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	e00b      	b.n	8002798 <HAL_RCC_OscConfig+0xb0>
 8002780:	4b69      	ldr	r3, [pc, #420]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a68      	ldr	r2, [pc, #416]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 8002786:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800278a:	6013      	str	r3, [r2, #0]
 800278c:	4b66      	ldr	r3, [pc, #408]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a65      	ldr	r2, [pc, #404]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 8002792:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002796:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d013      	beq.n	80027c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a0:	f7fe ffc4 	bl	800172c <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027a8:	f7fe ffc0 	bl	800172c <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b64      	cmp	r3, #100	; 0x64
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e207      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ba:	4b5b      	ldr	r3, [pc, #364]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0f0      	beq.n	80027a8 <HAL_RCC_OscConfig+0xc0>
 80027c6:	e014      	b.n	80027f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c8:	f7fe ffb0 	bl	800172c <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027d0:	f7fe ffac 	bl	800172c <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b64      	cmp	r3, #100	; 0x64
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e1f3      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027e2:	4b51      	ldr	r3, [pc, #324]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1f0      	bne.n	80027d0 <HAL_RCC_OscConfig+0xe8>
 80027ee:	e000      	b.n	80027f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d063      	beq.n	80028c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027fe:	4b4a      	ldr	r3, [pc, #296]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 030c 	and.w	r3, r3, #12
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00b      	beq.n	8002822 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800280a:	4b47      	ldr	r3, [pc, #284]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002812:	2b08      	cmp	r3, #8
 8002814:	d11c      	bne.n	8002850 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002816:	4b44      	ldr	r3, [pc, #272]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d116      	bne.n	8002850 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002822:	4b41      	ldr	r3, [pc, #260]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d005      	beq.n	800283a <HAL_RCC_OscConfig+0x152>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d001      	beq.n	800283a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e1c7      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283a:	4b3b      	ldr	r3, [pc, #236]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	4937      	ldr	r1, [pc, #220]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 800284a:	4313      	orrs	r3, r2
 800284c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800284e:	e03a      	b.n	80028c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d020      	beq.n	800289a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002858:	4b34      	ldr	r3, [pc, #208]	; (800292c <HAL_RCC_OscConfig+0x244>)
 800285a:	2201      	movs	r2, #1
 800285c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285e:	f7fe ff65 	bl	800172c <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002866:	f7fe ff61 	bl	800172c <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e1a8      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002878:	4b2b      	ldr	r3, [pc, #172]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0f0      	beq.n	8002866 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002884:	4b28      	ldr	r3, [pc, #160]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	4925      	ldr	r1, [pc, #148]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 8002894:	4313      	orrs	r3, r2
 8002896:	600b      	str	r3, [r1, #0]
 8002898:	e015      	b.n	80028c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800289a:	4b24      	ldr	r3, [pc, #144]	; (800292c <HAL_RCC_OscConfig+0x244>)
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a0:	f7fe ff44 	bl	800172c <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028a8:	f7fe ff40 	bl	800172c <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e187      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ba:	4b1b      	ldr	r3, [pc, #108]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f0      	bne.n	80028a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0308 	and.w	r3, r3, #8
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d036      	beq.n	8002940 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d016      	beq.n	8002908 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028da:	4b15      	ldr	r3, [pc, #84]	; (8002930 <HAL_RCC_OscConfig+0x248>)
 80028dc:	2201      	movs	r2, #1
 80028de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e0:	f7fe ff24 	bl	800172c <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028e8:	f7fe ff20 	bl	800172c <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e167      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028fa:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 80028fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0f0      	beq.n	80028e8 <HAL_RCC_OscConfig+0x200>
 8002906:	e01b      	b.n	8002940 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002908:	4b09      	ldr	r3, [pc, #36]	; (8002930 <HAL_RCC_OscConfig+0x248>)
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800290e:	f7fe ff0d 	bl	800172c <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002914:	e00e      	b.n	8002934 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002916:	f7fe ff09 	bl	800172c <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d907      	bls.n	8002934 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e150      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
 8002928:	40023800 	.word	0x40023800
 800292c:	42470000 	.word	0x42470000
 8002930:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002934:	4b88      	ldr	r3, [pc, #544]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1ea      	bne.n	8002916 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 8097 	beq.w	8002a7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800294e:	2300      	movs	r3, #0
 8002950:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002952:	4b81      	ldr	r3, [pc, #516]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10f      	bne.n	800297e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	60bb      	str	r3, [r7, #8]
 8002962:	4b7d      	ldr	r3, [pc, #500]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	4a7c      	ldr	r2, [pc, #496]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800296c:	6413      	str	r3, [r2, #64]	; 0x40
 800296e:	4b7a      	ldr	r3, [pc, #488]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002976:	60bb      	str	r3, [r7, #8]
 8002978:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800297a:	2301      	movs	r3, #1
 800297c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800297e:	4b77      	ldr	r3, [pc, #476]	; (8002b5c <HAL_RCC_OscConfig+0x474>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002986:	2b00      	cmp	r3, #0
 8002988:	d118      	bne.n	80029bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800298a:	4b74      	ldr	r3, [pc, #464]	; (8002b5c <HAL_RCC_OscConfig+0x474>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a73      	ldr	r2, [pc, #460]	; (8002b5c <HAL_RCC_OscConfig+0x474>)
 8002990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002994:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002996:	f7fe fec9 	bl	800172c <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800299e:	f7fe fec5 	bl	800172c <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e10c      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b0:	4b6a      	ldr	r3, [pc, #424]	; (8002b5c <HAL_RCC_OscConfig+0x474>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d0f0      	beq.n	800299e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d106      	bne.n	80029d2 <HAL_RCC_OscConfig+0x2ea>
 80029c4:	4b64      	ldr	r3, [pc, #400]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 80029c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c8:	4a63      	ldr	r2, [pc, #396]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 80029ca:	f043 0301 	orr.w	r3, r3, #1
 80029ce:	6713      	str	r3, [r2, #112]	; 0x70
 80029d0:	e01c      	b.n	8002a0c <HAL_RCC_OscConfig+0x324>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	2b05      	cmp	r3, #5
 80029d8:	d10c      	bne.n	80029f4 <HAL_RCC_OscConfig+0x30c>
 80029da:	4b5f      	ldr	r3, [pc, #380]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 80029dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029de:	4a5e      	ldr	r2, [pc, #376]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 80029e0:	f043 0304 	orr.w	r3, r3, #4
 80029e4:	6713      	str	r3, [r2, #112]	; 0x70
 80029e6:	4b5c      	ldr	r3, [pc, #368]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 80029e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ea:	4a5b      	ldr	r2, [pc, #364]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	6713      	str	r3, [r2, #112]	; 0x70
 80029f2:	e00b      	b.n	8002a0c <HAL_RCC_OscConfig+0x324>
 80029f4:	4b58      	ldr	r3, [pc, #352]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 80029f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f8:	4a57      	ldr	r2, [pc, #348]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 80029fa:	f023 0301 	bic.w	r3, r3, #1
 80029fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002a00:	4b55      	ldr	r3, [pc, #340]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a04:	4a54      	ldr	r2, [pc, #336]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002a06:	f023 0304 	bic.w	r3, r3, #4
 8002a0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d015      	beq.n	8002a40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a14:	f7fe fe8a 	bl	800172c <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a1a:	e00a      	b.n	8002a32 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a1c:	f7fe fe86 	bl	800172c <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e0cb      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a32:	4b49      	ldr	r3, [pc, #292]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0ee      	beq.n	8002a1c <HAL_RCC_OscConfig+0x334>
 8002a3e:	e014      	b.n	8002a6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a40:	f7fe fe74 	bl	800172c <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a46:	e00a      	b.n	8002a5e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a48:	f7fe fe70 	bl	800172c <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e0b5      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a5e:	4b3e      	ldr	r3, [pc, #248]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1ee      	bne.n	8002a48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a6a:	7dfb      	ldrb	r3, [r7, #23]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d105      	bne.n	8002a7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a70:	4b39      	ldr	r3, [pc, #228]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	4a38      	ldr	r2, [pc, #224]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002a76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 80a1 	beq.w	8002bc8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a86:	4b34      	ldr	r3, [pc, #208]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 030c 	and.w	r3, r3, #12
 8002a8e:	2b08      	cmp	r3, #8
 8002a90:	d05c      	beq.n	8002b4c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d141      	bne.n	8002b1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a9a:	4b31      	ldr	r3, [pc, #196]	; (8002b60 <HAL_RCC_OscConfig+0x478>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa0:	f7fe fe44 	bl	800172c <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aa8:	f7fe fe40 	bl	800172c <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e087      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aba:	4b27      	ldr	r3, [pc, #156]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1f0      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69da      	ldr	r2, [r3, #28]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	019b      	lsls	r3, r3, #6
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002adc:	085b      	lsrs	r3, r3, #1
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	041b      	lsls	r3, r3, #16
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae8:	061b      	lsls	r3, r3, #24
 8002aea:	491b      	ldr	r1, [pc, #108]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002af0:	4b1b      	ldr	r3, [pc, #108]	; (8002b60 <HAL_RCC_OscConfig+0x478>)
 8002af2:	2201      	movs	r2, #1
 8002af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af6:	f7fe fe19 	bl	800172c <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002afe:	f7fe fe15 	bl	800172c <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e05c      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b10:	4b11      	ldr	r3, [pc, #68]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0f0      	beq.n	8002afe <HAL_RCC_OscConfig+0x416>
 8002b1c:	e054      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b1e:	4b10      	ldr	r3, [pc, #64]	; (8002b60 <HAL_RCC_OscConfig+0x478>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b24:	f7fe fe02 	bl	800172c <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b2c:	f7fe fdfe 	bl	800172c <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e045      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b3e:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0x444>
 8002b4a:	e03d      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d107      	bne.n	8002b64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e038      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	40007000 	.word	0x40007000
 8002b60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b64:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <HAL_RCC_OscConfig+0x4ec>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d028      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d121      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d11a      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b94:	4013      	ands	r3, r2
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d111      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002baa:	085b      	lsrs	r3, r3, #1
 8002bac:	3b01      	subs	r3, #1
 8002bae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d107      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d001      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e000      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40023800 	.word	0x40023800

08002bd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e0cc      	b.n	8002d86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bec:	4b68      	ldr	r3, [pc, #416]	; (8002d90 <HAL_RCC_ClockConfig+0x1b8>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 030f 	and.w	r3, r3, #15
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d90c      	bls.n	8002c14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfa:	4b65      	ldr	r3, [pc, #404]	; (8002d90 <HAL_RCC_ClockConfig+0x1b8>)
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c02:	4b63      	ldr	r3, [pc, #396]	; (8002d90 <HAL_RCC_ClockConfig+0x1b8>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d001      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e0b8      	b.n	8002d86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d020      	beq.n	8002c62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d005      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c2c:	4b59      	ldr	r3, [pc, #356]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	4a58      	ldr	r2, [pc, #352]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0308 	and.w	r3, r3, #8
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d005      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c44:	4b53      	ldr	r3, [pc, #332]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	4a52      	ldr	r2, [pc, #328]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c50:	4b50      	ldr	r3, [pc, #320]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	494d      	ldr	r1, [pc, #308]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d044      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d107      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c76:	4b47      	ldr	r3, [pc, #284]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d119      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e07f      	b.n	8002d86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d003      	beq.n	8002c96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c92:	2b03      	cmp	r3, #3
 8002c94:	d107      	bne.n	8002ca6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c96:	4b3f      	ldr	r3, [pc, #252]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d109      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e06f      	b.n	8002d86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca6:	4b3b      	ldr	r3, [pc, #236]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e067      	b.n	8002d86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cb6:	4b37      	ldr	r3, [pc, #220]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f023 0203 	bic.w	r2, r3, #3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	4934      	ldr	r1, [pc, #208]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cc8:	f7fe fd30 	bl	800172c <HAL_GetTick>
 8002ccc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cce:	e00a      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cd0:	f7fe fd2c 	bl	800172c <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e04f      	b.n	8002d86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ce6:	4b2b      	ldr	r3, [pc, #172]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 020c 	and.w	r2, r3, #12
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d1eb      	bne.n	8002cd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cf8:	4b25      	ldr	r3, [pc, #148]	; (8002d90 <HAL_RCC_ClockConfig+0x1b8>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 030f 	and.w	r3, r3, #15
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d20c      	bcs.n	8002d20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d06:	4b22      	ldr	r3, [pc, #136]	; (8002d90 <HAL_RCC_ClockConfig+0x1b8>)
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0e:	4b20      	ldr	r3, [pc, #128]	; (8002d90 <HAL_RCC_ClockConfig+0x1b8>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d001      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e032      	b.n	8002d86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d008      	beq.n	8002d3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d2c:	4b19      	ldr	r3, [pc, #100]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	4916      	ldr	r1, [pc, #88]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0308 	and.w	r3, r3, #8
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d009      	beq.n	8002d5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d4a:	4b12      	ldr	r3, [pc, #72]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	490e      	ldr	r1, [pc, #56]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d5e:	f000 f821 	bl	8002da4 <HAL_RCC_GetSysClockFreq>
 8002d62:	4602      	mov	r2, r0
 8002d64:	4b0b      	ldr	r3, [pc, #44]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	091b      	lsrs	r3, r3, #4
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	490a      	ldr	r1, [pc, #40]	; (8002d98 <HAL_RCC_ClockConfig+0x1c0>)
 8002d70:	5ccb      	ldrb	r3, [r1, r3]
 8002d72:	fa22 f303 	lsr.w	r3, r2, r3
 8002d76:	4a09      	ldr	r2, [pc, #36]	; (8002d9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d7a:	4b09      	ldr	r3, [pc, #36]	; (8002da0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fe fc90 	bl	80016a4 <HAL_InitTick>

  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40023c00 	.word	0x40023c00
 8002d94:	40023800 	.word	0x40023800
 8002d98:	0800525c 	.word	0x0800525c
 8002d9c:	20000000 	.word	0x20000000
 8002da0:	20000004 	.word	0x20000004

08002da4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002da8:	b094      	sub	sp, #80	; 0x50
 8002daa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	647b      	str	r3, [r7, #68]	; 0x44
 8002db0:	2300      	movs	r3, #0
 8002db2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002db4:	2300      	movs	r3, #0
 8002db6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002db8:	2300      	movs	r3, #0
 8002dba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dbc:	4b79      	ldr	r3, [pc, #484]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f003 030c 	and.w	r3, r3, #12
 8002dc4:	2b08      	cmp	r3, #8
 8002dc6:	d00d      	beq.n	8002de4 <HAL_RCC_GetSysClockFreq+0x40>
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	f200 80e1 	bhi.w	8002f90 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d002      	beq.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x34>
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d003      	beq.n	8002dde <HAL_RCC_GetSysClockFreq+0x3a>
 8002dd6:	e0db      	b.n	8002f90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dd8:	4b73      	ldr	r3, [pc, #460]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002dda:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ddc:	e0db      	b.n	8002f96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dde:	4b73      	ldr	r3, [pc, #460]	; (8002fac <HAL_RCC_GetSysClockFreq+0x208>)
 8002de0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002de2:	e0d8      	b.n	8002f96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002de4:	4b6f      	ldr	r3, [pc, #444]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dee:	4b6d      	ldr	r3, [pc, #436]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d063      	beq.n	8002ec2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dfa:	4b6a      	ldr	r3, [pc, #424]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	099b      	lsrs	r3, r3, #6
 8002e00:	2200      	movs	r2, #0
 8002e02:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e04:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e0c:	633b      	str	r3, [r7, #48]	; 0x30
 8002e0e:	2300      	movs	r3, #0
 8002e10:	637b      	str	r3, [r7, #52]	; 0x34
 8002e12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e16:	4622      	mov	r2, r4
 8002e18:	462b      	mov	r3, r5
 8002e1a:	f04f 0000 	mov.w	r0, #0
 8002e1e:	f04f 0100 	mov.w	r1, #0
 8002e22:	0159      	lsls	r1, r3, #5
 8002e24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e28:	0150      	lsls	r0, r2, #5
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4621      	mov	r1, r4
 8002e30:	1a51      	subs	r1, r2, r1
 8002e32:	6139      	str	r1, [r7, #16]
 8002e34:	4629      	mov	r1, r5
 8002e36:	eb63 0301 	sbc.w	r3, r3, r1
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e48:	4659      	mov	r1, fp
 8002e4a:	018b      	lsls	r3, r1, #6
 8002e4c:	4651      	mov	r1, sl
 8002e4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e52:	4651      	mov	r1, sl
 8002e54:	018a      	lsls	r2, r1, #6
 8002e56:	4651      	mov	r1, sl
 8002e58:	ebb2 0801 	subs.w	r8, r2, r1
 8002e5c:	4659      	mov	r1, fp
 8002e5e:	eb63 0901 	sbc.w	r9, r3, r1
 8002e62:	f04f 0200 	mov.w	r2, #0
 8002e66:	f04f 0300 	mov.w	r3, #0
 8002e6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e76:	4690      	mov	r8, r2
 8002e78:	4699      	mov	r9, r3
 8002e7a:	4623      	mov	r3, r4
 8002e7c:	eb18 0303 	adds.w	r3, r8, r3
 8002e80:	60bb      	str	r3, [r7, #8]
 8002e82:	462b      	mov	r3, r5
 8002e84:	eb49 0303 	adc.w	r3, r9, r3
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	f04f 0200 	mov.w	r2, #0
 8002e8e:	f04f 0300 	mov.w	r3, #0
 8002e92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e96:	4629      	mov	r1, r5
 8002e98:	024b      	lsls	r3, r1, #9
 8002e9a:	4621      	mov	r1, r4
 8002e9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ea0:	4621      	mov	r1, r4
 8002ea2:	024a      	lsls	r2, r1, #9
 8002ea4:	4610      	mov	r0, r2
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eaa:	2200      	movs	r2, #0
 8002eac:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002eb0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002eb4:	f7fd f99a 	bl	80001ec <__aeabi_uldivmod>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ec0:	e058      	b.n	8002f74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ec2:	4b38      	ldr	r3, [pc, #224]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	099b      	lsrs	r3, r3, #6
 8002ec8:	2200      	movs	r2, #0
 8002eca:	4618      	mov	r0, r3
 8002ecc:	4611      	mov	r1, r2
 8002ece:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ed2:	623b      	str	r3, [r7, #32]
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ed8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002edc:	4642      	mov	r2, r8
 8002ede:	464b      	mov	r3, r9
 8002ee0:	f04f 0000 	mov.w	r0, #0
 8002ee4:	f04f 0100 	mov.w	r1, #0
 8002ee8:	0159      	lsls	r1, r3, #5
 8002eea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eee:	0150      	lsls	r0, r2, #5
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	4641      	mov	r1, r8
 8002ef6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002efa:	4649      	mov	r1, r9
 8002efc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f00:	f04f 0200 	mov.w	r2, #0
 8002f04:	f04f 0300 	mov.w	r3, #0
 8002f08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f14:	ebb2 040a 	subs.w	r4, r2, sl
 8002f18:	eb63 050b 	sbc.w	r5, r3, fp
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	f04f 0300 	mov.w	r3, #0
 8002f24:	00eb      	lsls	r3, r5, #3
 8002f26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f2a:	00e2      	lsls	r2, r4, #3
 8002f2c:	4614      	mov	r4, r2
 8002f2e:	461d      	mov	r5, r3
 8002f30:	4643      	mov	r3, r8
 8002f32:	18e3      	adds	r3, r4, r3
 8002f34:	603b      	str	r3, [r7, #0]
 8002f36:	464b      	mov	r3, r9
 8002f38:	eb45 0303 	adc.w	r3, r5, r3
 8002f3c:	607b      	str	r3, [r7, #4]
 8002f3e:	f04f 0200 	mov.w	r2, #0
 8002f42:	f04f 0300 	mov.w	r3, #0
 8002f46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f4a:	4629      	mov	r1, r5
 8002f4c:	028b      	lsls	r3, r1, #10
 8002f4e:	4621      	mov	r1, r4
 8002f50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f54:	4621      	mov	r1, r4
 8002f56:	028a      	lsls	r2, r1, #10
 8002f58:	4610      	mov	r0, r2
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f5e:	2200      	movs	r2, #0
 8002f60:	61bb      	str	r3, [r7, #24]
 8002f62:	61fa      	str	r2, [r7, #28]
 8002f64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f68:	f7fd f940 	bl	80001ec <__aeabi_uldivmod>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	4613      	mov	r3, r2
 8002f72:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f74:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	0c1b      	lsrs	r3, r3, #16
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	3301      	adds	r3, #1
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002f84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f8e:	e002      	b.n	8002f96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f90:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f92:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3750      	adds	r7, #80	; 0x50
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	00f42400 	.word	0x00f42400
 8002fac:	007a1200 	.word	0x007a1200

08002fb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fb4:	4b03      	ldr	r3, [pc, #12]	; (8002fc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	20000000 	.word	0x20000000

08002fc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002fcc:	f7ff fff0 	bl	8002fb0 <HAL_RCC_GetHCLKFreq>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	0a9b      	lsrs	r3, r3, #10
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	4903      	ldr	r1, [pc, #12]	; (8002fec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fde:	5ccb      	ldrb	r3, [r1, r3]
 8002fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	0800526c 	.word	0x0800526c

08002ff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ff4:	f7ff ffdc 	bl	8002fb0 <HAL_RCC_GetHCLKFreq>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	4b05      	ldr	r3, [pc, #20]	; (8003010 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	0b5b      	lsrs	r3, r3, #13
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	4903      	ldr	r1, [pc, #12]	; (8003014 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003006:	5ccb      	ldrb	r3, [r1, r3]
 8003008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800300c:	4618      	mov	r0, r3
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40023800 	.word	0x40023800
 8003014:	0800526c 	.word	0x0800526c

08003018 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e03f      	b.n	80030aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d106      	bne.n	8003044 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7fd fef2 	bl	8000e28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2224      	movs	r2, #36	; 0x24
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68da      	ldr	r2, [r3, #12]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800305a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 fddf 	bl	8003c20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	691a      	ldr	r2, [r3, #16]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003070:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	695a      	ldr	r2, [r3, #20]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003080:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68da      	ldr	r2, [r3, #12]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003090:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2220      	movs	r2, #32
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2220      	movs	r2, #32
 80030a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b08a      	sub	sp, #40	; 0x28
 80030b6:	af02      	add	r7, sp, #8
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	603b      	str	r3, [r7, #0]
 80030be:	4613      	mov	r3, r2
 80030c0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b20      	cmp	r3, #32
 80030d0:	d17c      	bne.n	80031cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d002      	beq.n	80030de <HAL_UART_Transmit+0x2c>
 80030d8:	88fb      	ldrh	r3, [r7, #6]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e075      	b.n	80031ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d101      	bne.n	80030f0 <HAL_UART_Transmit+0x3e>
 80030ec:	2302      	movs	r3, #2
 80030ee:	e06e      	b.n	80031ce <HAL_UART_Transmit+0x11c>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2221      	movs	r2, #33	; 0x21
 8003102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003106:	f7fe fb11 	bl	800172c <HAL_GetTick>
 800310a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	88fa      	ldrh	r2, [r7, #6]
 8003110:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	88fa      	ldrh	r2, [r7, #6]
 8003116:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003120:	d108      	bne.n	8003134 <HAL_UART_Transmit+0x82>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d104      	bne.n	8003134 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800312a:	2300      	movs	r3, #0
 800312c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	61bb      	str	r3, [r7, #24]
 8003132:	e003      	b.n	800313c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003138:	2300      	movs	r3, #0
 800313a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003144:	e02a      	b.n	800319c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	2200      	movs	r2, #0
 800314e:	2180      	movs	r1, #128	; 0x80
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f000 fb1f 	bl	8003794 <UART_WaitOnFlagUntilTimeout>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e036      	b.n	80031ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10b      	bne.n	800317e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	881b      	ldrh	r3, [r3, #0]
 800316a:	461a      	mov	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003174:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	3302      	adds	r3, #2
 800317a:	61bb      	str	r3, [r7, #24]
 800317c:	e007      	b.n	800318e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	781a      	ldrb	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	3301      	adds	r3, #1
 800318c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003192:	b29b      	uxth	r3, r3
 8003194:	3b01      	subs	r3, #1
 8003196:	b29a      	uxth	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1cf      	bne.n	8003146 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	2200      	movs	r2, #0
 80031ae:	2140      	movs	r1, #64	; 0x40
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f000 faef 	bl	8003794 <UART_WaitOnFlagUntilTimeout>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e006      	b.n	80031ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2220      	movs	r2, #32
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80031c8:	2300      	movs	r3, #0
 80031ca:	e000      	b.n	80031ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80031cc:	2302      	movs	r3, #2
  }
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3720      	adds	r7, #32
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b084      	sub	sp, #16
 80031da:	af00      	add	r7, sp, #0
 80031dc:	60f8      	str	r0, [r7, #12]
 80031de:	60b9      	str	r1, [r7, #8]
 80031e0:	4613      	mov	r3, r2
 80031e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b20      	cmp	r3, #32
 80031ee:	d11d      	bne.n	800322c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d002      	beq.n	80031fc <HAL_UART_Receive_IT+0x26>
 80031f6:	88fb      	ldrh	r3, [r7, #6]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e016      	b.n	800322e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003206:	2b01      	cmp	r3, #1
 8003208:	d101      	bne.n	800320e <HAL_UART_Receive_IT+0x38>
 800320a:	2302      	movs	r3, #2
 800320c:	e00f      	b.n	800322e <HAL_UART_Receive_IT+0x58>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800321c:	88fb      	ldrh	r3, [r7, #6]
 800321e:	461a      	mov	r2, r3
 8003220:	68b9      	ldr	r1, [r7, #8]
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f000 fb24 	bl	8003870 <UART_Start_Receive_IT>
 8003228:	4603      	mov	r3, r0
 800322a:	e000      	b.n	800322e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800322c:	2302      	movs	r3, #2
  }
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
	...

08003238 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b0ba      	sub	sp, #232	; 0xe8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800325e:	2300      	movs	r3, #0
 8003260:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003264:	2300      	movs	r3, #0
 8003266:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800326a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003276:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10f      	bne.n	800329e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800327e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003282:	f003 0320 	and.w	r3, r3, #32
 8003286:	2b00      	cmp	r3, #0
 8003288:	d009      	beq.n	800329e <HAL_UART_IRQHandler+0x66>
 800328a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800328e:	f003 0320 	and.w	r3, r3, #32
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 fc07 	bl	8003aaa <UART_Receive_IT>
      return;
 800329c:	e256      	b.n	800374c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800329e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 80de 	beq.w	8003464 <HAL_UART_IRQHandler+0x22c>
 80032a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d106      	bne.n	80032c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80032b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 80d1 	beq.w	8003464 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80032c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00b      	beq.n	80032e6 <HAL_UART_IRQHandler+0xae>
 80032ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d005      	beq.n	80032e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	f043 0201 	orr.w	r2, r3, #1
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ea:	f003 0304 	and.w	r3, r3, #4
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00b      	beq.n	800330a <HAL_UART_IRQHandler+0xd2>
 80032f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d005      	beq.n	800330a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	f043 0202 	orr.w	r2, r3, #2
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800330a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00b      	beq.n	800332e <HAL_UART_IRQHandler+0xf6>
 8003316:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d005      	beq.n	800332e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	f043 0204 	orr.w	r2, r3, #4
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800332e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	2b00      	cmp	r3, #0
 8003338:	d011      	beq.n	800335e <HAL_UART_IRQHandler+0x126>
 800333a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800333e:	f003 0320 	and.w	r3, r3, #32
 8003342:	2b00      	cmp	r3, #0
 8003344:	d105      	bne.n	8003352 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003346:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d005      	beq.n	800335e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	f043 0208 	orr.w	r2, r3, #8
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	2b00      	cmp	r3, #0
 8003364:	f000 81ed 	beq.w	8003742 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800336c:	f003 0320 	and.w	r3, r3, #32
 8003370:	2b00      	cmp	r3, #0
 8003372:	d008      	beq.n	8003386 <HAL_UART_IRQHandler+0x14e>
 8003374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003378:	f003 0320 	and.w	r3, r3, #32
 800337c:	2b00      	cmp	r3, #0
 800337e:	d002      	beq.n	8003386 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 fb92 	bl	8003aaa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003390:	2b40      	cmp	r3, #64	; 0x40
 8003392:	bf0c      	ite	eq
 8003394:	2301      	moveq	r3, #1
 8003396:	2300      	movne	r3, #0
 8003398:	b2db      	uxtb	r3, r3
 800339a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d103      	bne.n	80033b2 <HAL_UART_IRQHandler+0x17a>
 80033aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d04f      	beq.n	8003452 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 fa9a 	bl	80038ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c2:	2b40      	cmp	r3, #64	; 0x40
 80033c4:	d141      	bne.n	800344a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	3314      	adds	r3, #20
 80033cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033d4:	e853 3f00 	ldrex	r3, [r3]
 80033d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80033dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80033e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	3314      	adds	r3, #20
 80033ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80033f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80033f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80033fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003402:	e841 2300 	strex	r3, r2, [r1]
 8003406:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800340a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1d9      	bne.n	80033c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003416:	2b00      	cmp	r3, #0
 8003418:	d013      	beq.n	8003442 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341e:	4a7d      	ldr	r2, [pc, #500]	; (8003614 <HAL_UART_IRQHandler+0x3dc>)
 8003420:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003426:	4618      	mov	r0, r3
 8003428:	f7fe fb31 	bl	8001a8e <HAL_DMA_Abort_IT>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d016      	beq.n	8003460 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800343c:	4610      	mov	r0, r2
 800343e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003440:	e00e      	b.n	8003460 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f990 	bl	8003768 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003448:	e00a      	b.n	8003460 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f98c 	bl	8003768 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003450:	e006      	b.n	8003460 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f988 	bl	8003768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800345e:	e170      	b.n	8003742 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003460:	bf00      	nop
    return;
 8003462:	e16e      	b.n	8003742 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003468:	2b01      	cmp	r3, #1
 800346a:	f040 814a 	bne.w	8003702 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800346e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003472:	f003 0310 	and.w	r3, r3, #16
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 8143 	beq.w	8003702 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800347c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003480:	f003 0310 	and.w	r3, r3, #16
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 813c 	beq.w	8003702 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800348a:	2300      	movs	r3, #0
 800348c:	60bb      	str	r3, [r7, #8]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	60bb      	str	r3, [r7, #8]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	60bb      	str	r3, [r7, #8]
 800349e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034aa:	2b40      	cmp	r3, #64	; 0x40
 80034ac:	f040 80b4 	bne.w	8003618 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80034bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 8140 	beq.w	8003746 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80034ce:	429a      	cmp	r2, r3
 80034d0:	f080 8139 	bcs.w	8003746 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80034da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034e6:	f000 8088 	beq.w	80035fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	330c      	adds	r3, #12
 80034f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034f8:	e853 3f00 	ldrex	r3, [r3]
 80034fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003500:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003508:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	330c      	adds	r3, #12
 8003512:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003516:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800351a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003522:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003526:	e841 2300 	strex	r3, r2, [r1]
 800352a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800352e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1d9      	bne.n	80034ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	3314      	adds	r3, #20
 800353c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003540:	e853 3f00 	ldrex	r3, [r3]
 8003544:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003546:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003548:	f023 0301 	bic.w	r3, r3, #1
 800354c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	3314      	adds	r3, #20
 8003556:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800355a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800355e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003560:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003562:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003566:	e841 2300 	strex	r3, r2, [r1]
 800356a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800356c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1e1      	bne.n	8003536 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	3314      	adds	r3, #20
 8003578:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800357a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800357c:	e853 3f00 	ldrex	r3, [r3]
 8003580:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003584:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003588:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	3314      	adds	r3, #20
 8003592:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003596:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003598:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800359a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800359c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800359e:	e841 2300 	strex	r3, r2, [r1]
 80035a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80035a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1e3      	bne.n	8003572 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2220      	movs	r2, #32
 80035ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	330c      	adds	r3, #12
 80035be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035c2:	e853 3f00 	ldrex	r3, [r3]
 80035c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80035c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035ca:	f023 0310 	bic.w	r3, r3, #16
 80035ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	330c      	adds	r3, #12
 80035d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80035dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80035de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035e4:	e841 2300 	strex	r3, r2, [r1]
 80035e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80035ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1e3      	bne.n	80035b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7fe f9da 	bl	80019ae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003602:	b29b      	uxth	r3, r3
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	b29b      	uxth	r3, r3
 8003608:	4619      	mov	r1, r3
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f8b6 	bl	800377c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003610:	e099      	b.n	8003746 <HAL_UART_IRQHandler+0x50e>
 8003612:	bf00      	nop
 8003614:	080039b3 	.word	0x080039b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003620:	b29b      	uxth	r3, r3
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800362c:	b29b      	uxth	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 808b 	beq.w	800374a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003634:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 8086 	beq.w	800374a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	330c      	adds	r3, #12
 8003644:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003648:	e853 3f00 	ldrex	r3, [r3]
 800364c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800364e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003650:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003654:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	330c      	adds	r3, #12
 800365e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003662:	647a      	str	r2, [r7, #68]	; 0x44
 8003664:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003666:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003668:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800366a:	e841 2300 	strex	r3, r2, [r1]
 800366e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1e3      	bne.n	800363e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	3314      	adds	r3, #20
 800367c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	e853 3f00 	ldrex	r3, [r3]
 8003684:	623b      	str	r3, [r7, #32]
   return(result);
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	f023 0301 	bic.w	r3, r3, #1
 800368c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	3314      	adds	r3, #20
 8003696:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800369a:	633a      	str	r2, [r7, #48]	; 0x30
 800369c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036a2:	e841 2300 	strex	r3, r2, [r1]
 80036a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80036a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1e3      	bne.n	8003676 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2220      	movs	r2, #32
 80036b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	330c      	adds	r3, #12
 80036c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	e853 3f00 	ldrex	r3, [r3]
 80036ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f023 0310 	bic.w	r3, r3, #16
 80036d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	330c      	adds	r3, #12
 80036dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80036e0:	61fa      	str	r2, [r7, #28]
 80036e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e4:	69b9      	ldr	r1, [r7, #24]
 80036e6:	69fa      	ldr	r2, [r7, #28]
 80036e8:	e841 2300 	strex	r3, r2, [r1]
 80036ec:	617b      	str	r3, [r7, #20]
   return(result);
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1e3      	bne.n	80036bc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80036f8:	4619      	mov	r1, r3
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f83e 	bl	800377c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003700:	e023      	b.n	800374a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370a:	2b00      	cmp	r3, #0
 800370c:	d009      	beq.n	8003722 <HAL_UART_IRQHandler+0x4ea>
 800370e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003716:	2b00      	cmp	r3, #0
 8003718:	d003      	beq.n	8003722 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f95d 	bl	80039da <UART_Transmit_IT>
    return;
 8003720:	e014      	b.n	800374c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00e      	beq.n	800374c <HAL_UART_IRQHandler+0x514>
 800372e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003736:	2b00      	cmp	r3, #0
 8003738:	d008      	beq.n	800374c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f99d 	bl	8003a7a <UART_EndTransmit_IT>
    return;
 8003740:	e004      	b.n	800374c <HAL_UART_IRQHandler+0x514>
    return;
 8003742:	bf00      	nop
 8003744:	e002      	b.n	800374c <HAL_UART_IRQHandler+0x514>
      return;
 8003746:	bf00      	nop
 8003748:	e000      	b.n	800374c <HAL_UART_IRQHandler+0x514>
      return;
 800374a:	bf00      	nop
  }
}
 800374c:	37e8      	adds	r7, #232	; 0xe8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop

08003754 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	460b      	mov	r3, r1
 8003786:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b090      	sub	sp, #64	; 0x40
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	603b      	str	r3, [r7, #0]
 80037a0:	4613      	mov	r3, r2
 80037a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037a4:	e050      	b.n	8003848 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ac:	d04c      	beq.n	8003848 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80037ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d007      	beq.n	80037c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80037b4:	f7fd ffba 	bl	800172c <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d241      	bcs.n	8003848 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	330c      	adds	r3, #12
 80037ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ce:	e853 3f00 	ldrex	r3, [r3]
 80037d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	330c      	adds	r3, #12
 80037e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037e4:	637a      	str	r2, [r7, #52]	; 0x34
 80037e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037ec:	e841 2300 	strex	r3, r2, [r1]
 80037f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1e5      	bne.n	80037c4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	3314      	adds	r3, #20
 80037fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	e853 3f00 	ldrex	r3, [r3]
 8003806:	613b      	str	r3, [r7, #16]
   return(result);
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	f023 0301 	bic.w	r3, r3, #1
 800380e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	3314      	adds	r3, #20
 8003816:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003818:	623a      	str	r2, [r7, #32]
 800381a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381c:	69f9      	ldr	r1, [r7, #28]
 800381e:	6a3a      	ldr	r2, [r7, #32]
 8003820:	e841 2300 	strex	r3, r2, [r1]
 8003824:	61bb      	str	r3, [r7, #24]
   return(result);
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1e5      	bne.n	80037f8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2220      	movs	r2, #32
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2220      	movs	r2, #32
 8003838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e00f      	b.n	8003868 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	4013      	ands	r3, r2
 8003852:	68ba      	ldr	r2, [r7, #8]
 8003854:	429a      	cmp	r2, r3
 8003856:	bf0c      	ite	eq
 8003858:	2301      	moveq	r3, #1
 800385a:	2300      	movne	r3, #0
 800385c:	b2db      	uxtb	r3, r3
 800385e:	461a      	mov	r2, r3
 8003860:	79fb      	ldrb	r3, [r7, #7]
 8003862:	429a      	cmp	r2, r3
 8003864:	d09f      	beq.n	80037a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3740      	adds	r7, #64	; 0x40
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	4613      	mov	r3, r2
 800387c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	88fa      	ldrh	r2, [r7, #6]
 8003888:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	88fa      	ldrh	r2, [r7, #6]
 800388e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2222      	movs	r2, #34	; 0x22
 800389a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d007      	beq.n	80038be <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68da      	ldr	r2, [r3, #12]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038bc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695a      	ldr	r2, [r3, #20]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f042 0201 	orr.w	r2, r2, #1
 80038cc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68da      	ldr	r2, [r3, #12]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f042 0220 	orr.w	r2, r2, #32
 80038dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3714      	adds	r7, #20
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b095      	sub	sp, #84	; 0x54
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	330c      	adds	r3, #12
 80038fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038fe:	e853 3f00 	ldrex	r3, [r3]
 8003902:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003906:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800390a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	330c      	adds	r3, #12
 8003912:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003914:	643a      	str	r2, [r7, #64]	; 0x40
 8003916:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003918:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800391a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800391c:	e841 2300 	strex	r3, r2, [r1]
 8003920:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1e5      	bne.n	80038f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	3314      	adds	r3, #20
 800392e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	e853 3f00 	ldrex	r3, [r3]
 8003936:	61fb      	str	r3, [r7, #28]
   return(result);
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	f023 0301 	bic.w	r3, r3, #1
 800393e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	3314      	adds	r3, #20
 8003946:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003948:	62fa      	str	r2, [r7, #44]	; 0x2c
 800394a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800394e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003950:	e841 2300 	strex	r3, r2, [r1]
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1e5      	bne.n	8003928 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003960:	2b01      	cmp	r3, #1
 8003962:	d119      	bne.n	8003998 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	330c      	adds	r3, #12
 800396a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	e853 3f00 	ldrex	r3, [r3]
 8003972:	60bb      	str	r3, [r7, #8]
   return(result);
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	f023 0310 	bic.w	r3, r3, #16
 800397a:	647b      	str	r3, [r7, #68]	; 0x44
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	330c      	adds	r3, #12
 8003982:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003984:	61ba      	str	r2, [r7, #24]
 8003986:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003988:	6979      	ldr	r1, [r7, #20]
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	e841 2300 	strex	r3, r2, [r1]
 8003990:	613b      	str	r3, [r7, #16]
   return(result);
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1e5      	bne.n	8003964 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2220      	movs	r2, #32
 800399c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80039a6:	bf00      	nop
 80039a8:	3754      	adds	r7, #84	; 0x54
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b084      	sub	sp, #16
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f7ff fecb 	bl	8003768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039d2:	bf00      	nop
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80039da:	b480      	push	{r7}
 80039dc:	b085      	sub	sp, #20
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b21      	cmp	r3, #33	; 0x21
 80039ec:	d13e      	bne.n	8003a6c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f6:	d114      	bne.n	8003a22 <UART_Transmit_IT+0x48>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d110      	bne.n	8003a22 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	881b      	ldrh	r3, [r3, #0]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a14:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	1c9a      	adds	r2, r3, #2
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	621a      	str	r2, [r3, #32]
 8003a20:	e008      	b.n	8003a34 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	1c59      	adds	r1, r3, #1
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6211      	str	r1, [r2, #32]
 8003a2c:	781a      	ldrb	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	4619      	mov	r1, r3
 8003a42:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d10f      	bne.n	8003a68 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68da      	ldr	r2, [r3, #12]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a56:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68da      	ldr	r2, [r3, #12]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a66:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	e000      	b.n	8003a6e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a6c:	2302      	movs	r3, #2
  }
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b082      	sub	sp, #8
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68da      	ldr	r2, [r3, #12]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a90:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2220      	movs	r2, #32
 8003a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7ff fe5a 	bl	8003754 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b08c      	sub	sp, #48	; 0x30
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b22      	cmp	r3, #34	; 0x22
 8003abc:	f040 80ab 	bne.w	8003c16 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ac8:	d117      	bne.n	8003afa <UART_Receive_IT+0x50>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d113      	bne.n	8003afa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ada:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af2:	1c9a      	adds	r2, r3, #2
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	629a      	str	r2, [r3, #40]	; 0x28
 8003af8:	e026      	b.n	8003b48 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003b00:	2300      	movs	r3, #0
 8003b02:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b0c:	d007      	beq.n	8003b1e <UART_Receive_IT+0x74>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10a      	bne.n	8003b2c <UART_Receive_IT+0x82>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d106      	bne.n	8003b2c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	b2da      	uxtb	r2, r3
 8003b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b28:	701a      	strb	r2, [r3, #0]
 8003b2a:	e008      	b.n	8003b3e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b42:	1c5a      	adds	r2, r3, #1
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	4619      	mov	r1, r3
 8003b56:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d15a      	bne.n	8003c12 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68da      	ldr	r2, [r3, #12]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 0220 	bic.w	r2, r2, #32
 8003b6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68da      	ldr	r2, [r3, #12]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695a      	ldr	r2, [r3, #20]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 0201 	bic.w	r2, r2, #1
 8003b8a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d135      	bne.n	8003c08 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	330c      	adds	r3, #12
 8003ba8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	e853 3f00 	ldrex	r3, [r3]
 8003bb0:	613b      	str	r3, [r7, #16]
   return(result);
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	f023 0310 	bic.w	r3, r3, #16
 8003bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	330c      	adds	r3, #12
 8003bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc2:	623a      	str	r2, [r7, #32]
 8003bc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc6:	69f9      	ldr	r1, [r7, #28]
 8003bc8:	6a3a      	ldr	r2, [r7, #32]
 8003bca:	e841 2300 	strex	r3, r2, [r1]
 8003bce:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1e5      	bne.n	8003ba2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0310 	and.w	r3, r3, #16
 8003be0:	2b10      	cmp	r3, #16
 8003be2:	d10a      	bne.n	8003bfa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003be4:	2300      	movs	r3, #0
 8003be6:	60fb      	str	r3, [r7, #12]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	60fb      	str	r3, [r7, #12]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003bfe:	4619      	mov	r1, r3
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f7ff fdbb 	bl	800377c <HAL_UARTEx_RxEventCallback>
 8003c06:	e002      	b.n	8003c0e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f7fd faeb 	bl	80011e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	e002      	b.n	8003c18 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003c12:	2300      	movs	r3, #0
 8003c14:	e000      	b.n	8003c18 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003c16:	2302      	movs	r3, #2
  }
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3730      	adds	r7, #48	; 0x30
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c24:	b0c0      	sub	sp, #256	; 0x100
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c3c:	68d9      	ldr	r1, [r3, #12]
 8003c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	ea40 0301 	orr.w	r3, r0, r1
 8003c48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	431a      	orrs	r2, r3
 8003c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c78:	f021 010c 	bic.w	r1, r1, #12
 8003c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c86:	430b      	orrs	r3, r1
 8003c88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c9a:	6999      	ldr	r1, [r3, #24]
 8003c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	ea40 0301 	orr.w	r3, r0, r1
 8003ca6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	4b8f      	ldr	r3, [pc, #572]	; (8003eec <UART_SetConfig+0x2cc>)
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d005      	beq.n	8003cc0 <UART_SetConfig+0xa0>
 8003cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	4b8d      	ldr	r3, [pc, #564]	; (8003ef0 <UART_SetConfig+0x2d0>)
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d104      	bne.n	8003cca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cc0:	f7ff f996 	bl	8002ff0 <HAL_RCC_GetPCLK2Freq>
 8003cc4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003cc8:	e003      	b.n	8003cd2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cca:	f7ff f97d 	bl	8002fc8 <HAL_RCC_GetPCLK1Freq>
 8003cce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cdc:	f040 810c 	bne.w	8003ef8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ce0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003cea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003cee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003cf2:	4622      	mov	r2, r4
 8003cf4:	462b      	mov	r3, r5
 8003cf6:	1891      	adds	r1, r2, r2
 8003cf8:	65b9      	str	r1, [r7, #88]	; 0x58
 8003cfa:	415b      	adcs	r3, r3
 8003cfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cfe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d02:	4621      	mov	r1, r4
 8003d04:	eb12 0801 	adds.w	r8, r2, r1
 8003d08:	4629      	mov	r1, r5
 8003d0a:	eb43 0901 	adc.w	r9, r3, r1
 8003d0e:	f04f 0200 	mov.w	r2, #0
 8003d12:	f04f 0300 	mov.w	r3, #0
 8003d16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d22:	4690      	mov	r8, r2
 8003d24:	4699      	mov	r9, r3
 8003d26:	4623      	mov	r3, r4
 8003d28:	eb18 0303 	adds.w	r3, r8, r3
 8003d2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003d30:	462b      	mov	r3, r5
 8003d32:	eb49 0303 	adc.w	r3, r9, r3
 8003d36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d46:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003d4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d4e:	460b      	mov	r3, r1
 8003d50:	18db      	adds	r3, r3, r3
 8003d52:	653b      	str	r3, [r7, #80]	; 0x50
 8003d54:	4613      	mov	r3, r2
 8003d56:	eb42 0303 	adc.w	r3, r2, r3
 8003d5a:	657b      	str	r3, [r7, #84]	; 0x54
 8003d5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003d60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003d64:	f7fc fa42 	bl	80001ec <__aeabi_uldivmod>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4b61      	ldr	r3, [pc, #388]	; (8003ef4 <UART_SetConfig+0x2d4>)
 8003d6e:	fba3 2302 	umull	r2, r3, r3, r2
 8003d72:	095b      	lsrs	r3, r3, #5
 8003d74:	011c      	lsls	r4, r3, #4
 8003d76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d80:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003d84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003d88:	4642      	mov	r2, r8
 8003d8a:	464b      	mov	r3, r9
 8003d8c:	1891      	adds	r1, r2, r2
 8003d8e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003d90:	415b      	adcs	r3, r3
 8003d92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d98:	4641      	mov	r1, r8
 8003d9a:	eb12 0a01 	adds.w	sl, r2, r1
 8003d9e:	4649      	mov	r1, r9
 8003da0:	eb43 0b01 	adc.w	fp, r3, r1
 8003da4:	f04f 0200 	mov.w	r2, #0
 8003da8:	f04f 0300 	mov.w	r3, #0
 8003dac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003db0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003db4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003db8:	4692      	mov	sl, r2
 8003dba:	469b      	mov	fp, r3
 8003dbc:	4643      	mov	r3, r8
 8003dbe:	eb1a 0303 	adds.w	r3, sl, r3
 8003dc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003dc6:	464b      	mov	r3, r9
 8003dc8:	eb4b 0303 	adc.w	r3, fp, r3
 8003dcc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ddc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003de0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003de4:	460b      	mov	r3, r1
 8003de6:	18db      	adds	r3, r3, r3
 8003de8:	643b      	str	r3, [r7, #64]	; 0x40
 8003dea:	4613      	mov	r3, r2
 8003dec:	eb42 0303 	adc.w	r3, r2, r3
 8003df0:	647b      	str	r3, [r7, #68]	; 0x44
 8003df2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003df6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003dfa:	f7fc f9f7 	bl	80001ec <__aeabi_uldivmod>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	460b      	mov	r3, r1
 8003e02:	4611      	mov	r1, r2
 8003e04:	4b3b      	ldr	r3, [pc, #236]	; (8003ef4 <UART_SetConfig+0x2d4>)
 8003e06:	fba3 2301 	umull	r2, r3, r3, r1
 8003e0a:	095b      	lsrs	r3, r3, #5
 8003e0c:	2264      	movs	r2, #100	; 0x64
 8003e0e:	fb02 f303 	mul.w	r3, r2, r3
 8003e12:	1acb      	subs	r3, r1, r3
 8003e14:	00db      	lsls	r3, r3, #3
 8003e16:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003e1a:	4b36      	ldr	r3, [pc, #216]	; (8003ef4 <UART_SetConfig+0x2d4>)
 8003e1c:	fba3 2302 	umull	r2, r3, r3, r2
 8003e20:	095b      	lsrs	r3, r3, #5
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e28:	441c      	add	r4, r3
 8003e2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e34:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003e38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003e3c:	4642      	mov	r2, r8
 8003e3e:	464b      	mov	r3, r9
 8003e40:	1891      	adds	r1, r2, r2
 8003e42:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e44:	415b      	adcs	r3, r3
 8003e46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e4c:	4641      	mov	r1, r8
 8003e4e:	1851      	adds	r1, r2, r1
 8003e50:	6339      	str	r1, [r7, #48]	; 0x30
 8003e52:	4649      	mov	r1, r9
 8003e54:	414b      	adcs	r3, r1
 8003e56:	637b      	str	r3, [r7, #52]	; 0x34
 8003e58:	f04f 0200 	mov.w	r2, #0
 8003e5c:	f04f 0300 	mov.w	r3, #0
 8003e60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003e64:	4659      	mov	r1, fp
 8003e66:	00cb      	lsls	r3, r1, #3
 8003e68:	4651      	mov	r1, sl
 8003e6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e6e:	4651      	mov	r1, sl
 8003e70:	00ca      	lsls	r2, r1, #3
 8003e72:	4610      	mov	r0, r2
 8003e74:	4619      	mov	r1, r3
 8003e76:	4603      	mov	r3, r0
 8003e78:	4642      	mov	r2, r8
 8003e7a:	189b      	adds	r3, r3, r2
 8003e7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e80:	464b      	mov	r3, r9
 8003e82:	460a      	mov	r2, r1
 8003e84:	eb42 0303 	adc.w	r3, r2, r3
 8003e88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e98:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003e9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	18db      	adds	r3, r3, r3
 8003ea4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	eb42 0303 	adc.w	r3, r2, r3
 8003eac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003eb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003eb6:	f7fc f999 	bl	80001ec <__aeabi_uldivmod>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	4b0d      	ldr	r3, [pc, #52]	; (8003ef4 <UART_SetConfig+0x2d4>)
 8003ec0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ec4:	095b      	lsrs	r3, r3, #5
 8003ec6:	2164      	movs	r1, #100	; 0x64
 8003ec8:	fb01 f303 	mul.w	r3, r1, r3
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	3332      	adds	r3, #50	; 0x32
 8003ed2:	4a08      	ldr	r2, [pc, #32]	; (8003ef4 <UART_SetConfig+0x2d4>)
 8003ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed8:	095b      	lsrs	r3, r3, #5
 8003eda:	f003 0207 	and.w	r2, r3, #7
 8003ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4422      	add	r2, r4
 8003ee6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ee8:	e105      	b.n	80040f6 <UART_SetConfig+0x4d6>
 8003eea:	bf00      	nop
 8003eec:	40011000 	.word	0x40011000
 8003ef0:	40011400 	.word	0x40011400
 8003ef4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ef8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003efc:	2200      	movs	r2, #0
 8003efe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f02:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003f06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003f0a:	4642      	mov	r2, r8
 8003f0c:	464b      	mov	r3, r9
 8003f0e:	1891      	adds	r1, r2, r2
 8003f10:	6239      	str	r1, [r7, #32]
 8003f12:	415b      	adcs	r3, r3
 8003f14:	627b      	str	r3, [r7, #36]	; 0x24
 8003f16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f1a:	4641      	mov	r1, r8
 8003f1c:	1854      	adds	r4, r2, r1
 8003f1e:	4649      	mov	r1, r9
 8003f20:	eb43 0501 	adc.w	r5, r3, r1
 8003f24:	f04f 0200 	mov.w	r2, #0
 8003f28:	f04f 0300 	mov.w	r3, #0
 8003f2c:	00eb      	lsls	r3, r5, #3
 8003f2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f32:	00e2      	lsls	r2, r4, #3
 8003f34:	4614      	mov	r4, r2
 8003f36:	461d      	mov	r5, r3
 8003f38:	4643      	mov	r3, r8
 8003f3a:	18e3      	adds	r3, r4, r3
 8003f3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f40:	464b      	mov	r3, r9
 8003f42:	eb45 0303 	adc.w	r3, r5, r3
 8003f46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f5a:	f04f 0200 	mov.w	r2, #0
 8003f5e:	f04f 0300 	mov.w	r3, #0
 8003f62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003f66:	4629      	mov	r1, r5
 8003f68:	008b      	lsls	r3, r1, #2
 8003f6a:	4621      	mov	r1, r4
 8003f6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f70:	4621      	mov	r1, r4
 8003f72:	008a      	lsls	r2, r1, #2
 8003f74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003f78:	f7fc f938 	bl	80001ec <__aeabi_uldivmod>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	460b      	mov	r3, r1
 8003f80:	4b60      	ldr	r3, [pc, #384]	; (8004104 <UART_SetConfig+0x4e4>)
 8003f82:	fba3 2302 	umull	r2, r3, r3, r2
 8003f86:	095b      	lsrs	r3, r3, #5
 8003f88:	011c      	lsls	r4, r3, #4
 8003f8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f94:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003f9c:	4642      	mov	r2, r8
 8003f9e:	464b      	mov	r3, r9
 8003fa0:	1891      	adds	r1, r2, r2
 8003fa2:	61b9      	str	r1, [r7, #24]
 8003fa4:	415b      	adcs	r3, r3
 8003fa6:	61fb      	str	r3, [r7, #28]
 8003fa8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fac:	4641      	mov	r1, r8
 8003fae:	1851      	adds	r1, r2, r1
 8003fb0:	6139      	str	r1, [r7, #16]
 8003fb2:	4649      	mov	r1, r9
 8003fb4:	414b      	adcs	r3, r1
 8003fb6:	617b      	str	r3, [r7, #20]
 8003fb8:	f04f 0200 	mov.w	r2, #0
 8003fbc:	f04f 0300 	mov.w	r3, #0
 8003fc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fc4:	4659      	mov	r1, fp
 8003fc6:	00cb      	lsls	r3, r1, #3
 8003fc8:	4651      	mov	r1, sl
 8003fca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fce:	4651      	mov	r1, sl
 8003fd0:	00ca      	lsls	r2, r1, #3
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	4642      	mov	r2, r8
 8003fda:	189b      	adds	r3, r3, r2
 8003fdc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003fe0:	464b      	mov	r3, r9
 8003fe2:	460a      	mov	r2, r1
 8003fe4:	eb42 0303 	adc.w	r3, r2, r3
 8003fe8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ff6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ff8:	f04f 0200 	mov.w	r2, #0
 8003ffc:	f04f 0300 	mov.w	r3, #0
 8004000:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004004:	4649      	mov	r1, r9
 8004006:	008b      	lsls	r3, r1, #2
 8004008:	4641      	mov	r1, r8
 800400a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800400e:	4641      	mov	r1, r8
 8004010:	008a      	lsls	r2, r1, #2
 8004012:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004016:	f7fc f8e9 	bl	80001ec <__aeabi_uldivmod>
 800401a:	4602      	mov	r2, r0
 800401c:	460b      	mov	r3, r1
 800401e:	4b39      	ldr	r3, [pc, #228]	; (8004104 <UART_SetConfig+0x4e4>)
 8004020:	fba3 1302 	umull	r1, r3, r3, r2
 8004024:	095b      	lsrs	r3, r3, #5
 8004026:	2164      	movs	r1, #100	; 0x64
 8004028:	fb01 f303 	mul.w	r3, r1, r3
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	3332      	adds	r3, #50	; 0x32
 8004032:	4a34      	ldr	r2, [pc, #208]	; (8004104 <UART_SetConfig+0x4e4>)
 8004034:	fba2 2303 	umull	r2, r3, r2, r3
 8004038:	095b      	lsrs	r3, r3, #5
 800403a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800403e:	441c      	add	r4, r3
 8004040:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004044:	2200      	movs	r2, #0
 8004046:	673b      	str	r3, [r7, #112]	; 0x70
 8004048:	677a      	str	r2, [r7, #116]	; 0x74
 800404a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800404e:	4642      	mov	r2, r8
 8004050:	464b      	mov	r3, r9
 8004052:	1891      	adds	r1, r2, r2
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	415b      	adcs	r3, r3
 8004058:	60fb      	str	r3, [r7, #12]
 800405a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800405e:	4641      	mov	r1, r8
 8004060:	1851      	adds	r1, r2, r1
 8004062:	6039      	str	r1, [r7, #0]
 8004064:	4649      	mov	r1, r9
 8004066:	414b      	adcs	r3, r1
 8004068:	607b      	str	r3, [r7, #4]
 800406a:	f04f 0200 	mov.w	r2, #0
 800406e:	f04f 0300 	mov.w	r3, #0
 8004072:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004076:	4659      	mov	r1, fp
 8004078:	00cb      	lsls	r3, r1, #3
 800407a:	4651      	mov	r1, sl
 800407c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004080:	4651      	mov	r1, sl
 8004082:	00ca      	lsls	r2, r1, #3
 8004084:	4610      	mov	r0, r2
 8004086:	4619      	mov	r1, r3
 8004088:	4603      	mov	r3, r0
 800408a:	4642      	mov	r2, r8
 800408c:	189b      	adds	r3, r3, r2
 800408e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004090:	464b      	mov	r3, r9
 8004092:	460a      	mov	r2, r1
 8004094:	eb42 0303 	adc.w	r3, r2, r3
 8004098:	66fb      	str	r3, [r7, #108]	; 0x6c
 800409a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	663b      	str	r3, [r7, #96]	; 0x60
 80040a4:	667a      	str	r2, [r7, #100]	; 0x64
 80040a6:	f04f 0200 	mov.w	r2, #0
 80040aa:	f04f 0300 	mov.w	r3, #0
 80040ae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80040b2:	4649      	mov	r1, r9
 80040b4:	008b      	lsls	r3, r1, #2
 80040b6:	4641      	mov	r1, r8
 80040b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040bc:	4641      	mov	r1, r8
 80040be:	008a      	lsls	r2, r1, #2
 80040c0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80040c4:	f7fc f892 	bl	80001ec <__aeabi_uldivmod>
 80040c8:	4602      	mov	r2, r0
 80040ca:	460b      	mov	r3, r1
 80040cc:	4b0d      	ldr	r3, [pc, #52]	; (8004104 <UART_SetConfig+0x4e4>)
 80040ce:	fba3 1302 	umull	r1, r3, r3, r2
 80040d2:	095b      	lsrs	r3, r3, #5
 80040d4:	2164      	movs	r1, #100	; 0x64
 80040d6:	fb01 f303 	mul.w	r3, r1, r3
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	011b      	lsls	r3, r3, #4
 80040de:	3332      	adds	r3, #50	; 0x32
 80040e0:	4a08      	ldr	r2, [pc, #32]	; (8004104 <UART_SetConfig+0x4e4>)
 80040e2:	fba2 2303 	umull	r2, r3, r2, r3
 80040e6:	095b      	lsrs	r3, r3, #5
 80040e8:	f003 020f 	and.w	r2, r3, #15
 80040ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4422      	add	r2, r4
 80040f4:	609a      	str	r2, [r3, #8]
}
 80040f6:	bf00      	nop
 80040f8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80040fc:	46bd      	mov	sp, r7
 80040fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004102:	bf00      	nop
 8004104:	51eb851f 	.word	0x51eb851f

08004108 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004108:	b084      	sub	sp, #16
 800410a:	b580      	push	{r7, lr}
 800410c:	b084      	sub	sp, #16
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
 8004112:	f107 001c 	add.w	r0, r7, #28
 8004116:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800411a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411c:	2b01      	cmp	r3, #1
 800411e:	d122      	bne.n	8004166 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004124:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004134:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800414a:	2b01      	cmp	r3, #1
 800414c:	d105      	bne.n	800415a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 faa2 	bl	80046a4 <USB_CoreReset>
 8004160:	4603      	mov	r3, r0
 8004162:	73fb      	strb	r3, [r7, #15]
 8004164:	e01a      	b.n	800419c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 fa96 	bl	80046a4 <USB_CoreReset>
 8004178:	4603      	mov	r3, r0
 800417a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800417c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800417e:	2b00      	cmp	r3, #0
 8004180:	d106      	bne.n	8004190 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004186:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	639a      	str	r2, [r3, #56]	; 0x38
 800418e:	e005      	b.n	800419c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004194:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800419c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d10b      	bne.n	80041ba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f043 0206 	orr.w	r2, r3, #6
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f043 0220 	orr.w	r2, r3, #32
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80041ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041c6:	b004      	add	sp, #16
 80041c8:	4770      	bx	lr

080041ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b083      	sub	sp, #12
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f023 0201 	bic.w	r2, r3, #1
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	460b      	mov	r3, r1
 80041f6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80041f8:	2300      	movs	r3, #0
 80041fa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004208:	78fb      	ldrb	r3, [r7, #3]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d115      	bne.n	800423a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800421a:	2001      	movs	r0, #1
 800421c:	f7fd fa92 	bl	8001744 <HAL_Delay>
      ms++;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	3301      	adds	r3, #1
 8004224:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 fa2e 	bl	8004688 <USB_GetMode>
 800422c:	4603      	mov	r3, r0
 800422e:	2b01      	cmp	r3, #1
 8004230:	d01e      	beq.n	8004270 <USB_SetCurrentMode+0x84>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2b31      	cmp	r3, #49	; 0x31
 8004236:	d9f0      	bls.n	800421a <USB_SetCurrentMode+0x2e>
 8004238:	e01a      	b.n	8004270 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800423a:	78fb      	ldrb	r3, [r7, #3]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d115      	bne.n	800426c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800424c:	2001      	movs	r0, #1
 800424e:	f7fd fa79 	bl	8001744 <HAL_Delay>
      ms++;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	3301      	adds	r3, #1
 8004256:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 fa15 	bl	8004688 <USB_GetMode>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <USB_SetCurrentMode+0x84>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2b31      	cmp	r3, #49	; 0x31
 8004268:	d9f0      	bls.n	800424c <USB_SetCurrentMode+0x60>
 800426a:	e001      	b.n	8004270 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e005      	b.n	800427c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2b32      	cmp	r3, #50	; 0x32
 8004274:	d101      	bne.n	800427a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e000      	b.n	800427c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004284:	b084      	sub	sp, #16
 8004286:	b580      	push	{r7, lr}
 8004288:	b086      	sub	sp, #24
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
 800428e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004292:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004296:	2300      	movs	r3, #0
 8004298:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800429e:	2300      	movs	r3, #0
 80042a0:	613b      	str	r3, [r7, #16]
 80042a2:	e009      	b.n	80042b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	3340      	adds	r3, #64	; 0x40
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4413      	add	r3, r2
 80042ae:	2200      	movs	r2, #0
 80042b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	3301      	adds	r3, #1
 80042b6:	613b      	str	r3, [r7, #16]
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	2b0e      	cmp	r3, #14
 80042bc:	d9f2      	bls.n	80042a4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80042be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d11c      	bne.n	80042fe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042d2:	f043 0302 	orr.w	r3, r3, #2
 80042d6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	639a      	str	r2, [r3, #56]	; 0x38
 80042fc:	e00b      	b.n	8004316 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004302:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800431c:	461a      	mov	r2, r3
 800431e:	2300      	movs	r3, #0
 8004320:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004328:	4619      	mov	r1, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004330:	461a      	mov	r2, r3
 8004332:	680b      	ldr	r3, [r1, #0]
 8004334:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004338:	2b01      	cmp	r3, #1
 800433a:	d10c      	bne.n	8004356 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800433c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800433e:	2b00      	cmp	r3, #0
 8004340:	d104      	bne.n	800434c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004342:	2100      	movs	r1, #0
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 f965 	bl	8004614 <USB_SetDevSpeed>
 800434a:	e008      	b.n	800435e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800434c:	2101      	movs	r1, #1
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f960 	bl	8004614 <USB_SetDevSpeed>
 8004354:	e003      	b.n	800435e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004356:	2103      	movs	r1, #3
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 f95b 	bl	8004614 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800435e:	2110      	movs	r1, #16
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f8f3 	bl	800454c <USB_FlushTxFifo>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 f91f 	bl	80045b4 <USB_FlushRxFifo>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004386:	461a      	mov	r2, r3
 8004388:	2300      	movs	r3, #0
 800438a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004392:	461a      	mov	r2, r3
 8004394:	2300      	movs	r3, #0
 8004396:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800439e:	461a      	mov	r2, r3
 80043a0:	2300      	movs	r3, #0
 80043a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043a4:	2300      	movs	r3, #0
 80043a6:	613b      	str	r3, [r7, #16]
 80043a8:	e043      	b.n	8004432 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	015a      	lsls	r2, r3, #5
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	4413      	add	r3, r2
 80043b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043c0:	d118      	bne.n	80043f4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10a      	bne.n	80043de <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	015a      	lsls	r2, r3, #5
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043d4:	461a      	mov	r2, r3
 80043d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043da:	6013      	str	r3, [r2, #0]
 80043dc:	e013      	b.n	8004406 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	015a      	lsls	r2, r3, #5
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4413      	add	r3, r2
 80043e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ea:	461a      	mov	r2, r3
 80043ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80043f0:	6013      	str	r3, [r2, #0]
 80043f2:	e008      	b.n	8004406 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	015a      	lsls	r2, r3, #5
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	4413      	add	r3, r2
 80043fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004400:	461a      	mov	r2, r3
 8004402:	2300      	movs	r3, #0
 8004404:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	4413      	add	r3, r2
 800440e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004412:	461a      	mov	r2, r3
 8004414:	2300      	movs	r3, #0
 8004416:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	015a      	lsls	r2, r3, #5
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	4413      	add	r3, r2
 8004420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004424:	461a      	mov	r2, r3
 8004426:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800442a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	3301      	adds	r3, #1
 8004430:	613b      	str	r3, [r7, #16]
 8004432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	429a      	cmp	r2, r3
 8004438:	d3b7      	bcc.n	80043aa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800443a:	2300      	movs	r3, #0
 800443c:	613b      	str	r3, [r7, #16]
 800443e:	e043      	b.n	80044c8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	015a      	lsls	r2, r3, #5
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4413      	add	r3, r2
 8004448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004452:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004456:	d118      	bne.n	800448a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10a      	bne.n	8004474 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	015a      	lsls	r2, r3, #5
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	4413      	add	r3, r2
 8004466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800446a:	461a      	mov	r2, r3
 800446c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004470:	6013      	str	r3, [r2, #0]
 8004472:	e013      	b.n	800449c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	4413      	add	r3, r2
 800447c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004480:	461a      	mov	r2, r3
 8004482:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004486:	6013      	str	r3, [r2, #0]
 8004488:	e008      	b.n	800449c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	015a      	lsls	r2, r3, #5
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	4413      	add	r3, r2
 8004492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004496:	461a      	mov	r2, r3
 8004498:	2300      	movs	r3, #0
 800449a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a8:	461a      	mov	r2, r3
 80044aa:	2300      	movs	r3, #0
 80044ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	015a      	lsls	r2, r3, #5
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	4413      	add	r3, r2
 80044b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ba:	461a      	mov	r2, r3
 80044bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80044c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	3301      	adds	r3, #1
 80044c6:	613b      	str	r3, [r7, #16]
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d3b7      	bcc.n	8004440 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80044f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80044f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d105      	bne.n	8004504 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	f043 0210 	orr.w	r2, r3, #16
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	699a      	ldr	r2, [r3, #24]
 8004508:	4b0f      	ldr	r3, [pc, #60]	; (8004548 <USB_DevInit+0x2c4>)
 800450a:	4313      	orrs	r3, r2
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004512:	2b00      	cmp	r3, #0
 8004514:	d005      	beq.n	8004522 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	f043 0208 	orr.w	r2, r3, #8
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004524:	2b01      	cmp	r3, #1
 8004526:	d107      	bne.n	8004538 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004530:	f043 0304 	orr.w	r3, r3, #4
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004538:	7dfb      	ldrb	r3, [r7, #23]
}
 800453a:	4618      	mov	r0, r3
 800453c:	3718      	adds	r7, #24
 800453e:	46bd      	mov	sp, r7
 8004540:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004544:	b004      	add	sp, #16
 8004546:	4770      	bx	lr
 8004548:	803c3800 	.word	0x803c3800

0800454c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004556:	2300      	movs	r3, #0
 8004558:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	3301      	adds	r3, #1
 800455e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4a13      	ldr	r2, [pc, #76]	; (80045b0 <USB_FlushTxFifo+0x64>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d901      	bls.n	800456c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e01b      	b.n	80045a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	2b00      	cmp	r3, #0
 8004572:	daf2      	bge.n	800455a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004574:	2300      	movs	r3, #0
 8004576:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	019b      	lsls	r3, r3, #6
 800457c:	f043 0220 	orr.w	r2, r3, #32
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	3301      	adds	r3, #1
 8004588:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	4a08      	ldr	r2, [pc, #32]	; (80045b0 <USB_FlushTxFifo+0x64>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d901      	bls.n	8004596 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e006      	b.n	80045a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	f003 0320 	and.w	r3, r3, #32
 800459e:	2b20      	cmp	r3, #32
 80045a0:	d0f0      	beq.n	8004584 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	00030d40 	.word	0x00030d40

080045b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045bc:	2300      	movs	r3, #0
 80045be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	3301      	adds	r3, #1
 80045c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	4a11      	ldr	r2, [pc, #68]	; (8004610 <USB_FlushRxFifo+0x5c>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d901      	bls.n	80045d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e018      	b.n	8004604 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	daf2      	bge.n	80045c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2210      	movs	r2, #16
 80045e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	3301      	adds	r3, #1
 80045e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	4a08      	ldr	r2, [pc, #32]	; (8004610 <USB_FlushRxFifo+0x5c>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d901      	bls.n	80045f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e006      	b.n	8004604 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	f003 0310 	and.w	r3, r3, #16
 80045fe:	2b10      	cmp	r3, #16
 8004600:	d0f0      	beq.n	80045e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	00030d40 	.word	0x00030d40

08004614 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	460b      	mov	r3, r1
 800461e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	78fb      	ldrb	r3, [r7, #3]
 800462e:	68f9      	ldr	r1, [r7, #12]
 8004630:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004634:	4313      	orrs	r3, r2
 8004636:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004646:	b480      	push	{r7}
 8004648:	b085      	sub	sp, #20
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004660:	f023 0303 	bic.w	r3, r3, #3
 8004664:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004674:	f043 0302 	orr.w	r3, r3, #2
 8004678:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3714      	adds	r7, #20
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	f003 0301 	and.w	r3, r3, #1
}
 8004698:	4618      	mov	r0, r3
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80046ac:	2300      	movs	r3, #0
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	3301      	adds	r3, #1
 80046b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	4a13      	ldr	r2, [pc, #76]	; (8004708 <USB_CoreReset+0x64>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d901      	bls.n	80046c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e01b      	b.n	80046fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	daf2      	bge.n	80046b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	f043 0201 	orr.w	r2, r3, #1
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	3301      	adds	r3, #1
 80046de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	4a09      	ldr	r2, [pc, #36]	; (8004708 <USB_CoreReset+0x64>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d901      	bls.n	80046ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e006      	b.n	80046fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d0f0      	beq.n	80046da <USB_CoreReset+0x36>

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	00030d40 	.word	0x00030d40

0800470c <__errno>:
 800470c:	4b01      	ldr	r3, [pc, #4]	; (8004714 <__errno+0x8>)
 800470e:	6818      	ldr	r0, [r3, #0]
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	2000000c 	.word	0x2000000c

08004718 <__libc_init_array>:
 8004718:	b570      	push	{r4, r5, r6, lr}
 800471a:	4d0d      	ldr	r5, [pc, #52]	; (8004750 <__libc_init_array+0x38>)
 800471c:	4c0d      	ldr	r4, [pc, #52]	; (8004754 <__libc_init_array+0x3c>)
 800471e:	1b64      	subs	r4, r4, r5
 8004720:	10a4      	asrs	r4, r4, #2
 8004722:	2600      	movs	r6, #0
 8004724:	42a6      	cmp	r6, r4
 8004726:	d109      	bne.n	800473c <__libc_init_array+0x24>
 8004728:	4d0b      	ldr	r5, [pc, #44]	; (8004758 <__libc_init_array+0x40>)
 800472a:	4c0c      	ldr	r4, [pc, #48]	; (800475c <__libc_init_array+0x44>)
 800472c:	f000 fd32 	bl	8005194 <_init>
 8004730:	1b64      	subs	r4, r4, r5
 8004732:	10a4      	asrs	r4, r4, #2
 8004734:	2600      	movs	r6, #0
 8004736:	42a6      	cmp	r6, r4
 8004738:	d105      	bne.n	8004746 <__libc_init_array+0x2e>
 800473a:	bd70      	pop	{r4, r5, r6, pc}
 800473c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004740:	4798      	blx	r3
 8004742:	3601      	adds	r6, #1
 8004744:	e7ee      	b.n	8004724 <__libc_init_array+0xc>
 8004746:	f855 3b04 	ldr.w	r3, [r5], #4
 800474a:	4798      	blx	r3
 800474c:	3601      	adds	r6, #1
 800474e:	e7f2      	b.n	8004736 <__libc_init_array+0x1e>
 8004750:	080052e0 	.word	0x080052e0
 8004754:	080052e0 	.word	0x080052e0
 8004758:	080052e0 	.word	0x080052e0
 800475c:	080052e4 	.word	0x080052e4

08004760 <memset>:
 8004760:	4402      	add	r2, r0
 8004762:	4603      	mov	r3, r0
 8004764:	4293      	cmp	r3, r2
 8004766:	d100      	bne.n	800476a <memset+0xa>
 8004768:	4770      	bx	lr
 800476a:	f803 1b01 	strb.w	r1, [r3], #1
 800476e:	e7f9      	b.n	8004764 <memset+0x4>

08004770 <_puts_r>:
 8004770:	b570      	push	{r4, r5, r6, lr}
 8004772:	460e      	mov	r6, r1
 8004774:	4605      	mov	r5, r0
 8004776:	b118      	cbz	r0, 8004780 <_puts_r+0x10>
 8004778:	6983      	ldr	r3, [r0, #24]
 800477a:	b90b      	cbnz	r3, 8004780 <_puts_r+0x10>
 800477c:	f000 fa5c 	bl	8004c38 <__sinit>
 8004780:	69ab      	ldr	r3, [r5, #24]
 8004782:	68ac      	ldr	r4, [r5, #8]
 8004784:	b913      	cbnz	r3, 800478c <_puts_r+0x1c>
 8004786:	4628      	mov	r0, r5
 8004788:	f000 fa56 	bl	8004c38 <__sinit>
 800478c:	4b2c      	ldr	r3, [pc, #176]	; (8004840 <_puts_r+0xd0>)
 800478e:	429c      	cmp	r4, r3
 8004790:	d120      	bne.n	80047d4 <_puts_r+0x64>
 8004792:	686c      	ldr	r4, [r5, #4]
 8004794:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004796:	07db      	lsls	r3, r3, #31
 8004798:	d405      	bmi.n	80047a6 <_puts_r+0x36>
 800479a:	89a3      	ldrh	r3, [r4, #12]
 800479c:	0598      	lsls	r0, r3, #22
 800479e:	d402      	bmi.n	80047a6 <_puts_r+0x36>
 80047a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047a2:	f000 fae7 	bl	8004d74 <__retarget_lock_acquire_recursive>
 80047a6:	89a3      	ldrh	r3, [r4, #12]
 80047a8:	0719      	lsls	r1, r3, #28
 80047aa:	d51d      	bpl.n	80047e8 <_puts_r+0x78>
 80047ac:	6923      	ldr	r3, [r4, #16]
 80047ae:	b1db      	cbz	r3, 80047e8 <_puts_r+0x78>
 80047b0:	3e01      	subs	r6, #1
 80047b2:	68a3      	ldr	r3, [r4, #8]
 80047b4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80047b8:	3b01      	subs	r3, #1
 80047ba:	60a3      	str	r3, [r4, #8]
 80047bc:	bb39      	cbnz	r1, 800480e <_puts_r+0x9e>
 80047be:	2b00      	cmp	r3, #0
 80047c0:	da38      	bge.n	8004834 <_puts_r+0xc4>
 80047c2:	4622      	mov	r2, r4
 80047c4:	210a      	movs	r1, #10
 80047c6:	4628      	mov	r0, r5
 80047c8:	f000 f85c 	bl	8004884 <__swbuf_r>
 80047cc:	3001      	adds	r0, #1
 80047ce:	d011      	beq.n	80047f4 <_puts_r+0x84>
 80047d0:	250a      	movs	r5, #10
 80047d2:	e011      	b.n	80047f8 <_puts_r+0x88>
 80047d4:	4b1b      	ldr	r3, [pc, #108]	; (8004844 <_puts_r+0xd4>)
 80047d6:	429c      	cmp	r4, r3
 80047d8:	d101      	bne.n	80047de <_puts_r+0x6e>
 80047da:	68ac      	ldr	r4, [r5, #8]
 80047dc:	e7da      	b.n	8004794 <_puts_r+0x24>
 80047de:	4b1a      	ldr	r3, [pc, #104]	; (8004848 <_puts_r+0xd8>)
 80047e0:	429c      	cmp	r4, r3
 80047e2:	bf08      	it	eq
 80047e4:	68ec      	ldreq	r4, [r5, #12]
 80047e6:	e7d5      	b.n	8004794 <_puts_r+0x24>
 80047e8:	4621      	mov	r1, r4
 80047ea:	4628      	mov	r0, r5
 80047ec:	f000 f89c 	bl	8004928 <__swsetup_r>
 80047f0:	2800      	cmp	r0, #0
 80047f2:	d0dd      	beq.n	80047b0 <_puts_r+0x40>
 80047f4:	f04f 35ff 	mov.w	r5, #4294967295
 80047f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047fa:	07da      	lsls	r2, r3, #31
 80047fc:	d405      	bmi.n	800480a <_puts_r+0x9a>
 80047fe:	89a3      	ldrh	r3, [r4, #12]
 8004800:	059b      	lsls	r3, r3, #22
 8004802:	d402      	bmi.n	800480a <_puts_r+0x9a>
 8004804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004806:	f000 fab6 	bl	8004d76 <__retarget_lock_release_recursive>
 800480a:	4628      	mov	r0, r5
 800480c:	bd70      	pop	{r4, r5, r6, pc}
 800480e:	2b00      	cmp	r3, #0
 8004810:	da04      	bge.n	800481c <_puts_r+0xac>
 8004812:	69a2      	ldr	r2, [r4, #24]
 8004814:	429a      	cmp	r2, r3
 8004816:	dc06      	bgt.n	8004826 <_puts_r+0xb6>
 8004818:	290a      	cmp	r1, #10
 800481a:	d004      	beq.n	8004826 <_puts_r+0xb6>
 800481c:	6823      	ldr	r3, [r4, #0]
 800481e:	1c5a      	adds	r2, r3, #1
 8004820:	6022      	str	r2, [r4, #0]
 8004822:	7019      	strb	r1, [r3, #0]
 8004824:	e7c5      	b.n	80047b2 <_puts_r+0x42>
 8004826:	4622      	mov	r2, r4
 8004828:	4628      	mov	r0, r5
 800482a:	f000 f82b 	bl	8004884 <__swbuf_r>
 800482e:	3001      	adds	r0, #1
 8004830:	d1bf      	bne.n	80047b2 <_puts_r+0x42>
 8004832:	e7df      	b.n	80047f4 <_puts_r+0x84>
 8004834:	6823      	ldr	r3, [r4, #0]
 8004836:	250a      	movs	r5, #10
 8004838:	1c5a      	adds	r2, r3, #1
 800483a:	6022      	str	r2, [r4, #0]
 800483c:	701d      	strb	r5, [r3, #0]
 800483e:	e7db      	b.n	80047f8 <_puts_r+0x88>
 8004840:	08005298 	.word	0x08005298
 8004844:	080052b8 	.word	0x080052b8
 8004848:	08005278 	.word	0x08005278

0800484c <puts>:
 800484c:	4b02      	ldr	r3, [pc, #8]	; (8004858 <puts+0xc>)
 800484e:	4601      	mov	r1, r0
 8004850:	6818      	ldr	r0, [r3, #0]
 8004852:	f7ff bf8d 	b.w	8004770 <_puts_r>
 8004856:	bf00      	nop
 8004858:	2000000c 	.word	0x2000000c

0800485c <strncmp>:
 800485c:	b510      	push	{r4, lr}
 800485e:	b17a      	cbz	r2, 8004880 <strncmp+0x24>
 8004860:	4603      	mov	r3, r0
 8004862:	3901      	subs	r1, #1
 8004864:	1884      	adds	r4, r0, r2
 8004866:	f813 0b01 	ldrb.w	r0, [r3], #1
 800486a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800486e:	4290      	cmp	r0, r2
 8004870:	d101      	bne.n	8004876 <strncmp+0x1a>
 8004872:	42a3      	cmp	r3, r4
 8004874:	d101      	bne.n	800487a <strncmp+0x1e>
 8004876:	1a80      	subs	r0, r0, r2
 8004878:	bd10      	pop	{r4, pc}
 800487a:	2800      	cmp	r0, #0
 800487c:	d1f3      	bne.n	8004866 <strncmp+0xa>
 800487e:	e7fa      	b.n	8004876 <strncmp+0x1a>
 8004880:	4610      	mov	r0, r2
 8004882:	e7f9      	b.n	8004878 <strncmp+0x1c>

08004884 <__swbuf_r>:
 8004884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004886:	460e      	mov	r6, r1
 8004888:	4614      	mov	r4, r2
 800488a:	4605      	mov	r5, r0
 800488c:	b118      	cbz	r0, 8004896 <__swbuf_r+0x12>
 800488e:	6983      	ldr	r3, [r0, #24]
 8004890:	b90b      	cbnz	r3, 8004896 <__swbuf_r+0x12>
 8004892:	f000 f9d1 	bl	8004c38 <__sinit>
 8004896:	4b21      	ldr	r3, [pc, #132]	; (800491c <__swbuf_r+0x98>)
 8004898:	429c      	cmp	r4, r3
 800489a:	d12b      	bne.n	80048f4 <__swbuf_r+0x70>
 800489c:	686c      	ldr	r4, [r5, #4]
 800489e:	69a3      	ldr	r3, [r4, #24]
 80048a0:	60a3      	str	r3, [r4, #8]
 80048a2:	89a3      	ldrh	r3, [r4, #12]
 80048a4:	071a      	lsls	r2, r3, #28
 80048a6:	d52f      	bpl.n	8004908 <__swbuf_r+0x84>
 80048a8:	6923      	ldr	r3, [r4, #16]
 80048aa:	b36b      	cbz	r3, 8004908 <__swbuf_r+0x84>
 80048ac:	6923      	ldr	r3, [r4, #16]
 80048ae:	6820      	ldr	r0, [r4, #0]
 80048b0:	1ac0      	subs	r0, r0, r3
 80048b2:	6963      	ldr	r3, [r4, #20]
 80048b4:	b2f6      	uxtb	r6, r6
 80048b6:	4283      	cmp	r3, r0
 80048b8:	4637      	mov	r7, r6
 80048ba:	dc04      	bgt.n	80048c6 <__swbuf_r+0x42>
 80048bc:	4621      	mov	r1, r4
 80048be:	4628      	mov	r0, r5
 80048c0:	f000 f926 	bl	8004b10 <_fflush_r>
 80048c4:	bb30      	cbnz	r0, 8004914 <__swbuf_r+0x90>
 80048c6:	68a3      	ldr	r3, [r4, #8]
 80048c8:	3b01      	subs	r3, #1
 80048ca:	60a3      	str	r3, [r4, #8]
 80048cc:	6823      	ldr	r3, [r4, #0]
 80048ce:	1c5a      	adds	r2, r3, #1
 80048d0:	6022      	str	r2, [r4, #0]
 80048d2:	701e      	strb	r6, [r3, #0]
 80048d4:	6963      	ldr	r3, [r4, #20]
 80048d6:	3001      	adds	r0, #1
 80048d8:	4283      	cmp	r3, r0
 80048da:	d004      	beq.n	80048e6 <__swbuf_r+0x62>
 80048dc:	89a3      	ldrh	r3, [r4, #12]
 80048de:	07db      	lsls	r3, r3, #31
 80048e0:	d506      	bpl.n	80048f0 <__swbuf_r+0x6c>
 80048e2:	2e0a      	cmp	r6, #10
 80048e4:	d104      	bne.n	80048f0 <__swbuf_r+0x6c>
 80048e6:	4621      	mov	r1, r4
 80048e8:	4628      	mov	r0, r5
 80048ea:	f000 f911 	bl	8004b10 <_fflush_r>
 80048ee:	b988      	cbnz	r0, 8004914 <__swbuf_r+0x90>
 80048f0:	4638      	mov	r0, r7
 80048f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048f4:	4b0a      	ldr	r3, [pc, #40]	; (8004920 <__swbuf_r+0x9c>)
 80048f6:	429c      	cmp	r4, r3
 80048f8:	d101      	bne.n	80048fe <__swbuf_r+0x7a>
 80048fa:	68ac      	ldr	r4, [r5, #8]
 80048fc:	e7cf      	b.n	800489e <__swbuf_r+0x1a>
 80048fe:	4b09      	ldr	r3, [pc, #36]	; (8004924 <__swbuf_r+0xa0>)
 8004900:	429c      	cmp	r4, r3
 8004902:	bf08      	it	eq
 8004904:	68ec      	ldreq	r4, [r5, #12]
 8004906:	e7ca      	b.n	800489e <__swbuf_r+0x1a>
 8004908:	4621      	mov	r1, r4
 800490a:	4628      	mov	r0, r5
 800490c:	f000 f80c 	bl	8004928 <__swsetup_r>
 8004910:	2800      	cmp	r0, #0
 8004912:	d0cb      	beq.n	80048ac <__swbuf_r+0x28>
 8004914:	f04f 37ff 	mov.w	r7, #4294967295
 8004918:	e7ea      	b.n	80048f0 <__swbuf_r+0x6c>
 800491a:	bf00      	nop
 800491c:	08005298 	.word	0x08005298
 8004920:	080052b8 	.word	0x080052b8
 8004924:	08005278 	.word	0x08005278

08004928 <__swsetup_r>:
 8004928:	4b32      	ldr	r3, [pc, #200]	; (80049f4 <__swsetup_r+0xcc>)
 800492a:	b570      	push	{r4, r5, r6, lr}
 800492c:	681d      	ldr	r5, [r3, #0]
 800492e:	4606      	mov	r6, r0
 8004930:	460c      	mov	r4, r1
 8004932:	b125      	cbz	r5, 800493e <__swsetup_r+0x16>
 8004934:	69ab      	ldr	r3, [r5, #24]
 8004936:	b913      	cbnz	r3, 800493e <__swsetup_r+0x16>
 8004938:	4628      	mov	r0, r5
 800493a:	f000 f97d 	bl	8004c38 <__sinit>
 800493e:	4b2e      	ldr	r3, [pc, #184]	; (80049f8 <__swsetup_r+0xd0>)
 8004940:	429c      	cmp	r4, r3
 8004942:	d10f      	bne.n	8004964 <__swsetup_r+0x3c>
 8004944:	686c      	ldr	r4, [r5, #4]
 8004946:	89a3      	ldrh	r3, [r4, #12]
 8004948:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800494c:	0719      	lsls	r1, r3, #28
 800494e:	d42c      	bmi.n	80049aa <__swsetup_r+0x82>
 8004950:	06dd      	lsls	r5, r3, #27
 8004952:	d411      	bmi.n	8004978 <__swsetup_r+0x50>
 8004954:	2309      	movs	r3, #9
 8004956:	6033      	str	r3, [r6, #0]
 8004958:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800495c:	81a3      	strh	r3, [r4, #12]
 800495e:	f04f 30ff 	mov.w	r0, #4294967295
 8004962:	e03e      	b.n	80049e2 <__swsetup_r+0xba>
 8004964:	4b25      	ldr	r3, [pc, #148]	; (80049fc <__swsetup_r+0xd4>)
 8004966:	429c      	cmp	r4, r3
 8004968:	d101      	bne.n	800496e <__swsetup_r+0x46>
 800496a:	68ac      	ldr	r4, [r5, #8]
 800496c:	e7eb      	b.n	8004946 <__swsetup_r+0x1e>
 800496e:	4b24      	ldr	r3, [pc, #144]	; (8004a00 <__swsetup_r+0xd8>)
 8004970:	429c      	cmp	r4, r3
 8004972:	bf08      	it	eq
 8004974:	68ec      	ldreq	r4, [r5, #12]
 8004976:	e7e6      	b.n	8004946 <__swsetup_r+0x1e>
 8004978:	0758      	lsls	r0, r3, #29
 800497a:	d512      	bpl.n	80049a2 <__swsetup_r+0x7a>
 800497c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800497e:	b141      	cbz	r1, 8004992 <__swsetup_r+0x6a>
 8004980:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004984:	4299      	cmp	r1, r3
 8004986:	d002      	beq.n	800498e <__swsetup_r+0x66>
 8004988:	4630      	mov	r0, r6
 800498a:	f000 fa5b 	bl	8004e44 <_free_r>
 800498e:	2300      	movs	r3, #0
 8004990:	6363      	str	r3, [r4, #52]	; 0x34
 8004992:	89a3      	ldrh	r3, [r4, #12]
 8004994:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004998:	81a3      	strh	r3, [r4, #12]
 800499a:	2300      	movs	r3, #0
 800499c:	6063      	str	r3, [r4, #4]
 800499e:	6923      	ldr	r3, [r4, #16]
 80049a0:	6023      	str	r3, [r4, #0]
 80049a2:	89a3      	ldrh	r3, [r4, #12]
 80049a4:	f043 0308 	orr.w	r3, r3, #8
 80049a8:	81a3      	strh	r3, [r4, #12]
 80049aa:	6923      	ldr	r3, [r4, #16]
 80049ac:	b94b      	cbnz	r3, 80049c2 <__swsetup_r+0x9a>
 80049ae:	89a3      	ldrh	r3, [r4, #12]
 80049b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80049b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049b8:	d003      	beq.n	80049c2 <__swsetup_r+0x9a>
 80049ba:	4621      	mov	r1, r4
 80049bc:	4630      	mov	r0, r6
 80049be:	f000 fa01 	bl	8004dc4 <__smakebuf_r>
 80049c2:	89a0      	ldrh	r0, [r4, #12]
 80049c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80049c8:	f010 0301 	ands.w	r3, r0, #1
 80049cc:	d00a      	beq.n	80049e4 <__swsetup_r+0xbc>
 80049ce:	2300      	movs	r3, #0
 80049d0:	60a3      	str	r3, [r4, #8]
 80049d2:	6963      	ldr	r3, [r4, #20]
 80049d4:	425b      	negs	r3, r3
 80049d6:	61a3      	str	r3, [r4, #24]
 80049d8:	6923      	ldr	r3, [r4, #16]
 80049da:	b943      	cbnz	r3, 80049ee <__swsetup_r+0xc6>
 80049dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80049e0:	d1ba      	bne.n	8004958 <__swsetup_r+0x30>
 80049e2:	bd70      	pop	{r4, r5, r6, pc}
 80049e4:	0781      	lsls	r1, r0, #30
 80049e6:	bf58      	it	pl
 80049e8:	6963      	ldrpl	r3, [r4, #20]
 80049ea:	60a3      	str	r3, [r4, #8]
 80049ec:	e7f4      	b.n	80049d8 <__swsetup_r+0xb0>
 80049ee:	2000      	movs	r0, #0
 80049f0:	e7f7      	b.n	80049e2 <__swsetup_r+0xba>
 80049f2:	bf00      	nop
 80049f4:	2000000c 	.word	0x2000000c
 80049f8:	08005298 	.word	0x08005298
 80049fc:	080052b8 	.word	0x080052b8
 8004a00:	08005278 	.word	0x08005278

08004a04 <__sflush_r>:
 8004a04:	898a      	ldrh	r2, [r1, #12]
 8004a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a0a:	4605      	mov	r5, r0
 8004a0c:	0710      	lsls	r0, r2, #28
 8004a0e:	460c      	mov	r4, r1
 8004a10:	d458      	bmi.n	8004ac4 <__sflush_r+0xc0>
 8004a12:	684b      	ldr	r3, [r1, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	dc05      	bgt.n	8004a24 <__sflush_r+0x20>
 8004a18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	dc02      	bgt.n	8004a24 <__sflush_r+0x20>
 8004a1e:	2000      	movs	r0, #0
 8004a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a26:	2e00      	cmp	r6, #0
 8004a28:	d0f9      	beq.n	8004a1e <__sflush_r+0x1a>
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a30:	682f      	ldr	r7, [r5, #0]
 8004a32:	602b      	str	r3, [r5, #0]
 8004a34:	d032      	beq.n	8004a9c <__sflush_r+0x98>
 8004a36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a38:	89a3      	ldrh	r3, [r4, #12]
 8004a3a:	075a      	lsls	r2, r3, #29
 8004a3c:	d505      	bpl.n	8004a4a <__sflush_r+0x46>
 8004a3e:	6863      	ldr	r3, [r4, #4]
 8004a40:	1ac0      	subs	r0, r0, r3
 8004a42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a44:	b10b      	cbz	r3, 8004a4a <__sflush_r+0x46>
 8004a46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a48:	1ac0      	subs	r0, r0, r3
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a50:	6a21      	ldr	r1, [r4, #32]
 8004a52:	4628      	mov	r0, r5
 8004a54:	47b0      	blx	r6
 8004a56:	1c43      	adds	r3, r0, #1
 8004a58:	89a3      	ldrh	r3, [r4, #12]
 8004a5a:	d106      	bne.n	8004a6a <__sflush_r+0x66>
 8004a5c:	6829      	ldr	r1, [r5, #0]
 8004a5e:	291d      	cmp	r1, #29
 8004a60:	d82c      	bhi.n	8004abc <__sflush_r+0xb8>
 8004a62:	4a2a      	ldr	r2, [pc, #168]	; (8004b0c <__sflush_r+0x108>)
 8004a64:	40ca      	lsrs	r2, r1
 8004a66:	07d6      	lsls	r6, r2, #31
 8004a68:	d528      	bpl.n	8004abc <__sflush_r+0xb8>
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	6062      	str	r2, [r4, #4]
 8004a6e:	04d9      	lsls	r1, r3, #19
 8004a70:	6922      	ldr	r2, [r4, #16]
 8004a72:	6022      	str	r2, [r4, #0]
 8004a74:	d504      	bpl.n	8004a80 <__sflush_r+0x7c>
 8004a76:	1c42      	adds	r2, r0, #1
 8004a78:	d101      	bne.n	8004a7e <__sflush_r+0x7a>
 8004a7a:	682b      	ldr	r3, [r5, #0]
 8004a7c:	b903      	cbnz	r3, 8004a80 <__sflush_r+0x7c>
 8004a7e:	6560      	str	r0, [r4, #84]	; 0x54
 8004a80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a82:	602f      	str	r7, [r5, #0]
 8004a84:	2900      	cmp	r1, #0
 8004a86:	d0ca      	beq.n	8004a1e <__sflush_r+0x1a>
 8004a88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a8c:	4299      	cmp	r1, r3
 8004a8e:	d002      	beq.n	8004a96 <__sflush_r+0x92>
 8004a90:	4628      	mov	r0, r5
 8004a92:	f000 f9d7 	bl	8004e44 <_free_r>
 8004a96:	2000      	movs	r0, #0
 8004a98:	6360      	str	r0, [r4, #52]	; 0x34
 8004a9a:	e7c1      	b.n	8004a20 <__sflush_r+0x1c>
 8004a9c:	6a21      	ldr	r1, [r4, #32]
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	4628      	mov	r0, r5
 8004aa2:	47b0      	blx	r6
 8004aa4:	1c41      	adds	r1, r0, #1
 8004aa6:	d1c7      	bne.n	8004a38 <__sflush_r+0x34>
 8004aa8:	682b      	ldr	r3, [r5, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d0c4      	beq.n	8004a38 <__sflush_r+0x34>
 8004aae:	2b1d      	cmp	r3, #29
 8004ab0:	d001      	beq.n	8004ab6 <__sflush_r+0xb2>
 8004ab2:	2b16      	cmp	r3, #22
 8004ab4:	d101      	bne.n	8004aba <__sflush_r+0xb6>
 8004ab6:	602f      	str	r7, [r5, #0]
 8004ab8:	e7b1      	b.n	8004a1e <__sflush_r+0x1a>
 8004aba:	89a3      	ldrh	r3, [r4, #12]
 8004abc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ac0:	81a3      	strh	r3, [r4, #12]
 8004ac2:	e7ad      	b.n	8004a20 <__sflush_r+0x1c>
 8004ac4:	690f      	ldr	r7, [r1, #16]
 8004ac6:	2f00      	cmp	r7, #0
 8004ac8:	d0a9      	beq.n	8004a1e <__sflush_r+0x1a>
 8004aca:	0793      	lsls	r3, r2, #30
 8004acc:	680e      	ldr	r6, [r1, #0]
 8004ace:	bf08      	it	eq
 8004ad0:	694b      	ldreq	r3, [r1, #20]
 8004ad2:	600f      	str	r7, [r1, #0]
 8004ad4:	bf18      	it	ne
 8004ad6:	2300      	movne	r3, #0
 8004ad8:	eba6 0807 	sub.w	r8, r6, r7
 8004adc:	608b      	str	r3, [r1, #8]
 8004ade:	f1b8 0f00 	cmp.w	r8, #0
 8004ae2:	dd9c      	ble.n	8004a1e <__sflush_r+0x1a>
 8004ae4:	6a21      	ldr	r1, [r4, #32]
 8004ae6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ae8:	4643      	mov	r3, r8
 8004aea:	463a      	mov	r2, r7
 8004aec:	4628      	mov	r0, r5
 8004aee:	47b0      	blx	r6
 8004af0:	2800      	cmp	r0, #0
 8004af2:	dc06      	bgt.n	8004b02 <__sflush_r+0xfe>
 8004af4:	89a3      	ldrh	r3, [r4, #12]
 8004af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004afa:	81a3      	strh	r3, [r4, #12]
 8004afc:	f04f 30ff 	mov.w	r0, #4294967295
 8004b00:	e78e      	b.n	8004a20 <__sflush_r+0x1c>
 8004b02:	4407      	add	r7, r0
 8004b04:	eba8 0800 	sub.w	r8, r8, r0
 8004b08:	e7e9      	b.n	8004ade <__sflush_r+0xda>
 8004b0a:	bf00      	nop
 8004b0c:	20400001 	.word	0x20400001

08004b10 <_fflush_r>:
 8004b10:	b538      	push	{r3, r4, r5, lr}
 8004b12:	690b      	ldr	r3, [r1, #16]
 8004b14:	4605      	mov	r5, r0
 8004b16:	460c      	mov	r4, r1
 8004b18:	b913      	cbnz	r3, 8004b20 <_fflush_r+0x10>
 8004b1a:	2500      	movs	r5, #0
 8004b1c:	4628      	mov	r0, r5
 8004b1e:	bd38      	pop	{r3, r4, r5, pc}
 8004b20:	b118      	cbz	r0, 8004b2a <_fflush_r+0x1a>
 8004b22:	6983      	ldr	r3, [r0, #24]
 8004b24:	b90b      	cbnz	r3, 8004b2a <_fflush_r+0x1a>
 8004b26:	f000 f887 	bl	8004c38 <__sinit>
 8004b2a:	4b14      	ldr	r3, [pc, #80]	; (8004b7c <_fflush_r+0x6c>)
 8004b2c:	429c      	cmp	r4, r3
 8004b2e:	d11b      	bne.n	8004b68 <_fflush_r+0x58>
 8004b30:	686c      	ldr	r4, [r5, #4]
 8004b32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d0ef      	beq.n	8004b1a <_fflush_r+0xa>
 8004b3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b3c:	07d0      	lsls	r0, r2, #31
 8004b3e:	d404      	bmi.n	8004b4a <_fflush_r+0x3a>
 8004b40:	0599      	lsls	r1, r3, #22
 8004b42:	d402      	bmi.n	8004b4a <_fflush_r+0x3a>
 8004b44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b46:	f000 f915 	bl	8004d74 <__retarget_lock_acquire_recursive>
 8004b4a:	4628      	mov	r0, r5
 8004b4c:	4621      	mov	r1, r4
 8004b4e:	f7ff ff59 	bl	8004a04 <__sflush_r>
 8004b52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b54:	07da      	lsls	r2, r3, #31
 8004b56:	4605      	mov	r5, r0
 8004b58:	d4e0      	bmi.n	8004b1c <_fflush_r+0xc>
 8004b5a:	89a3      	ldrh	r3, [r4, #12]
 8004b5c:	059b      	lsls	r3, r3, #22
 8004b5e:	d4dd      	bmi.n	8004b1c <_fflush_r+0xc>
 8004b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b62:	f000 f908 	bl	8004d76 <__retarget_lock_release_recursive>
 8004b66:	e7d9      	b.n	8004b1c <_fflush_r+0xc>
 8004b68:	4b05      	ldr	r3, [pc, #20]	; (8004b80 <_fflush_r+0x70>)
 8004b6a:	429c      	cmp	r4, r3
 8004b6c:	d101      	bne.n	8004b72 <_fflush_r+0x62>
 8004b6e:	68ac      	ldr	r4, [r5, #8]
 8004b70:	e7df      	b.n	8004b32 <_fflush_r+0x22>
 8004b72:	4b04      	ldr	r3, [pc, #16]	; (8004b84 <_fflush_r+0x74>)
 8004b74:	429c      	cmp	r4, r3
 8004b76:	bf08      	it	eq
 8004b78:	68ec      	ldreq	r4, [r5, #12]
 8004b7a:	e7da      	b.n	8004b32 <_fflush_r+0x22>
 8004b7c:	08005298 	.word	0x08005298
 8004b80:	080052b8 	.word	0x080052b8
 8004b84:	08005278 	.word	0x08005278

08004b88 <std>:
 8004b88:	2300      	movs	r3, #0
 8004b8a:	b510      	push	{r4, lr}
 8004b8c:	4604      	mov	r4, r0
 8004b8e:	e9c0 3300 	strd	r3, r3, [r0]
 8004b92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b96:	6083      	str	r3, [r0, #8]
 8004b98:	8181      	strh	r1, [r0, #12]
 8004b9a:	6643      	str	r3, [r0, #100]	; 0x64
 8004b9c:	81c2      	strh	r2, [r0, #14]
 8004b9e:	6183      	str	r3, [r0, #24]
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	2208      	movs	r2, #8
 8004ba4:	305c      	adds	r0, #92	; 0x5c
 8004ba6:	f7ff fddb 	bl	8004760 <memset>
 8004baa:	4b05      	ldr	r3, [pc, #20]	; (8004bc0 <std+0x38>)
 8004bac:	6263      	str	r3, [r4, #36]	; 0x24
 8004bae:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <std+0x3c>)
 8004bb0:	62a3      	str	r3, [r4, #40]	; 0x28
 8004bb2:	4b05      	ldr	r3, [pc, #20]	; (8004bc8 <std+0x40>)
 8004bb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004bb6:	4b05      	ldr	r3, [pc, #20]	; (8004bcc <std+0x44>)
 8004bb8:	6224      	str	r4, [r4, #32]
 8004bba:	6323      	str	r3, [r4, #48]	; 0x30
 8004bbc:	bd10      	pop	{r4, pc}
 8004bbe:	bf00      	nop
 8004bc0:	08005025 	.word	0x08005025
 8004bc4:	08005047 	.word	0x08005047
 8004bc8:	0800507f 	.word	0x0800507f
 8004bcc:	080050a3 	.word	0x080050a3

08004bd0 <_cleanup_r>:
 8004bd0:	4901      	ldr	r1, [pc, #4]	; (8004bd8 <_cleanup_r+0x8>)
 8004bd2:	f000 b8af 	b.w	8004d34 <_fwalk_reent>
 8004bd6:	bf00      	nop
 8004bd8:	08004b11 	.word	0x08004b11

08004bdc <__sfmoreglue>:
 8004bdc:	b570      	push	{r4, r5, r6, lr}
 8004bde:	2268      	movs	r2, #104	; 0x68
 8004be0:	1e4d      	subs	r5, r1, #1
 8004be2:	4355      	muls	r5, r2
 8004be4:	460e      	mov	r6, r1
 8004be6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004bea:	f000 f997 	bl	8004f1c <_malloc_r>
 8004bee:	4604      	mov	r4, r0
 8004bf0:	b140      	cbz	r0, 8004c04 <__sfmoreglue+0x28>
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	e9c0 1600 	strd	r1, r6, [r0]
 8004bf8:	300c      	adds	r0, #12
 8004bfa:	60a0      	str	r0, [r4, #8]
 8004bfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c00:	f7ff fdae 	bl	8004760 <memset>
 8004c04:	4620      	mov	r0, r4
 8004c06:	bd70      	pop	{r4, r5, r6, pc}

08004c08 <__sfp_lock_acquire>:
 8004c08:	4801      	ldr	r0, [pc, #4]	; (8004c10 <__sfp_lock_acquire+0x8>)
 8004c0a:	f000 b8b3 	b.w	8004d74 <__retarget_lock_acquire_recursive>
 8004c0e:	bf00      	nop
 8004c10:	20000bbd 	.word	0x20000bbd

08004c14 <__sfp_lock_release>:
 8004c14:	4801      	ldr	r0, [pc, #4]	; (8004c1c <__sfp_lock_release+0x8>)
 8004c16:	f000 b8ae 	b.w	8004d76 <__retarget_lock_release_recursive>
 8004c1a:	bf00      	nop
 8004c1c:	20000bbd 	.word	0x20000bbd

08004c20 <__sinit_lock_acquire>:
 8004c20:	4801      	ldr	r0, [pc, #4]	; (8004c28 <__sinit_lock_acquire+0x8>)
 8004c22:	f000 b8a7 	b.w	8004d74 <__retarget_lock_acquire_recursive>
 8004c26:	bf00      	nop
 8004c28:	20000bbe 	.word	0x20000bbe

08004c2c <__sinit_lock_release>:
 8004c2c:	4801      	ldr	r0, [pc, #4]	; (8004c34 <__sinit_lock_release+0x8>)
 8004c2e:	f000 b8a2 	b.w	8004d76 <__retarget_lock_release_recursive>
 8004c32:	bf00      	nop
 8004c34:	20000bbe 	.word	0x20000bbe

08004c38 <__sinit>:
 8004c38:	b510      	push	{r4, lr}
 8004c3a:	4604      	mov	r4, r0
 8004c3c:	f7ff fff0 	bl	8004c20 <__sinit_lock_acquire>
 8004c40:	69a3      	ldr	r3, [r4, #24]
 8004c42:	b11b      	cbz	r3, 8004c4c <__sinit+0x14>
 8004c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c48:	f7ff bff0 	b.w	8004c2c <__sinit_lock_release>
 8004c4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004c50:	6523      	str	r3, [r4, #80]	; 0x50
 8004c52:	4b13      	ldr	r3, [pc, #76]	; (8004ca0 <__sinit+0x68>)
 8004c54:	4a13      	ldr	r2, [pc, #76]	; (8004ca4 <__sinit+0x6c>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	62a2      	str	r2, [r4, #40]	; 0x28
 8004c5a:	42a3      	cmp	r3, r4
 8004c5c:	bf04      	itt	eq
 8004c5e:	2301      	moveq	r3, #1
 8004c60:	61a3      	streq	r3, [r4, #24]
 8004c62:	4620      	mov	r0, r4
 8004c64:	f000 f820 	bl	8004ca8 <__sfp>
 8004c68:	6060      	str	r0, [r4, #4]
 8004c6a:	4620      	mov	r0, r4
 8004c6c:	f000 f81c 	bl	8004ca8 <__sfp>
 8004c70:	60a0      	str	r0, [r4, #8]
 8004c72:	4620      	mov	r0, r4
 8004c74:	f000 f818 	bl	8004ca8 <__sfp>
 8004c78:	2200      	movs	r2, #0
 8004c7a:	60e0      	str	r0, [r4, #12]
 8004c7c:	2104      	movs	r1, #4
 8004c7e:	6860      	ldr	r0, [r4, #4]
 8004c80:	f7ff ff82 	bl	8004b88 <std>
 8004c84:	68a0      	ldr	r0, [r4, #8]
 8004c86:	2201      	movs	r2, #1
 8004c88:	2109      	movs	r1, #9
 8004c8a:	f7ff ff7d 	bl	8004b88 <std>
 8004c8e:	68e0      	ldr	r0, [r4, #12]
 8004c90:	2202      	movs	r2, #2
 8004c92:	2112      	movs	r1, #18
 8004c94:	f7ff ff78 	bl	8004b88 <std>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	61a3      	str	r3, [r4, #24]
 8004c9c:	e7d2      	b.n	8004c44 <__sinit+0xc>
 8004c9e:	bf00      	nop
 8004ca0:	08005274 	.word	0x08005274
 8004ca4:	08004bd1 	.word	0x08004bd1

08004ca8 <__sfp>:
 8004ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004caa:	4607      	mov	r7, r0
 8004cac:	f7ff ffac 	bl	8004c08 <__sfp_lock_acquire>
 8004cb0:	4b1e      	ldr	r3, [pc, #120]	; (8004d2c <__sfp+0x84>)
 8004cb2:	681e      	ldr	r6, [r3, #0]
 8004cb4:	69b3      	ldr	r3, [r6, #24]
 8004cb6:	b913      	cbnz	r3, 8004cbe <__sfp+0x16>
 8004cb8:	4630      	mov	r0, r6
 8004cba:	f7ff ffbd 	bl	8004c38 <__sinit>
 8004cbe:	3648      	adds	r6, #72	; 0x48
 8004cc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	d503      	bpl.n	8004cd0 <__sfp+0x28>
 8004cc8:	6833      	ldr	r3, [r6, #0]
 8004cca:	b30b      	cbz	r3, 8004d10 <__sfp+0x68>
 8004ccc:	6836      	ldr	r6, [r6, #0]
 8004cce:	e7f7      	b.n	8004cc0 <__sfp+0x18>
 8004cd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004cd4:	b9d5      	cbnz	r5, 8004d0c <__sfp+0x64>
 8004cd6:	4b16      	ldr	r3, [pc, #88]	; (8004d30 <__sfp+0x88>)
 8004cd8:	60e3      	str	r3, [r4, #12]
 8004cda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004cde:	6665      	str	r5, [r4, #100]	; 0x64
 8004ce0:	f000 f847 	bl	8004d72 <__retarget_lock_init_recursive>
 8004ce4:	f7ff ff96 	bl	8004c14 <__sfp_lock_release>
 8004ce8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004cec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004cf0:	6025      	str	r5, [r4, #0]
 8004cf2:	61a5      	str	r5, [r4, #24]
 8004cf4:	2208      	movs	r2, #8
 8004cf6:	4629      	mov	r1, r5
 8004cf8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004cfc:	f7ff fd30 	bl	8004760 <memset>
 8004d00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d08:	4620      	mov	r0, r4
 8004d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d0c:	3468      	adds	r4, #104	; 0x68
 8004d0e:	e7d9      	b.n	8004cc4 <__sfp+0x1c>
 8004d10:	2104      	movs	r1, #4
 8004d12:	4638      	mov	r0, r7
 8004d14:	f7ff ff62 	bl	8004bdc <__sfmoreglue>
 8004d18:	4604      	mov	r4, r0
 8004d1a:	6030      	str	r0, [r6, #0]
 8004d1c:	2800      	cmp	r0, #0
 8004d1e:	d1d5      	bne.n	8004ccc <__sfp+0x24>
 8004d20:	f7ff ff78 	bl	8004c14 <__sfp_lock_release>
 8004d24:	230c      	movs	r3, #12
 8004d26:	603b      	str	r3, [r7, #0]
 8004d28:	e7ee      	b.n	8004d08 <__sfp+0x60>
 8004d2a:	bf00      	nop
 8004d2c:	08005274 	.word	0x08005274
 8004d30:	ffff0001 	.word	0xffff0001

08004d34 <_fwalk_reent>:
 8004d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d38:	4606      	mov	r6, r0
 8004d3a:	4688      	mov	r8, r1
 8004d3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004d40:	2700      	movs	r7, #0
 8004d42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d46:	f1b9 0901 	subs.w	r9, r9, #1
 8004d4a:	d505      	bpl.n	8004d58 <_fwalk_reent+0x24>
 8004d4c:	6824      	ldr	r4, [r4, #0]
 8004d4e:	2c00      	cmp	r4, #0
 8004d50:	d1f7      	bne.n	8004d42 <_fwalk_reent+0xe>
 8004d52:	4638      	mov	r0, r7
 8004d54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d58:	89ab      	ldrh	r3, [r5, #12]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d907      	bls.n	8004d6e <_fwalk_reent+0x3a>
 8004d5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d62:	3301      	adds	r3, #1
 8004d64:	d003      	beq.n	8004d6e <_fwalk_reent+0x3a>
 8004d66:	4629      	mov	r1, r5
 8004d68:	4630      	mov	r0, r6
 8004d6a:	47c0      	blx	r8
 8004d6c:	4307      	orrs	r7, r0
 8004d6e:	3568      	adds	r5, #104	; 0x68
 8004d70:	e7e9      	b.n	8004d46 <_fwalk_reent+0x12>

08004d72 <__retarget_lock_init_recursive>:
 8004d72:	4770      	bx	lr

08004d74 <__retarget_lock_acquire_recursive>:
 8004d74:	4770      	bx	lr

08004d76 <__retarget_lock_release_recursive>:
 8004d76:	4770      	bx	lr

08004d78 <__swhatbuf_r>:
 8004d78:	b570      	push	{r4, r5, r6, lr}
 8004d7a:	460e      	mov	r6, r1
 8004d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d80:	2900      	cmp	r1, #0
 8004d82:	b096      	sub	sp, #88	; 0x58
 8004d84:	4614      	mov	r4, r2
 8004d86:	461d      	mov	r5, r3
 8004d88:	da08      	bge.n	8004d9c <__swhatbuf_r+0x24>
 8004d8a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	602a      	str	r2, [r5, #0]
 8004d92:	061a      	lsls	r2, r3, #24
 8004d94:	d410      	bmi.n	8004db8 <__swhatbuf_r+0x40>
 8004d96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d9a:	e00e      	b.n	8004dba <__swhatbuf_r+0x42>
 8004d9c:	466a      	mov	r2, sp
 8004d9e:	f000 f9a7 	bl	80050f0 <_fstat_r>
 8004da2:	2800      	cmp	r0, #0
 8004da4:	dbf1      	blt.n	8004d8a <__swhatbuf_r+0x12>
 8004da6:	9a01      	ldr	r2, [sp, #4]
 8004da8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004dac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004db0:	425a      	negs	r2, r3
 8004db2:	415a      	adcs	r2, r3
 8004db4:	602a      	str	r2, [r5, #0]
 8004db6:	e7ee      	b.n	8004d96 <__swhatbuf_r+0x1e>
 8004db8:	2340      	movs	r3, #64	; 0x40
 8004dba:	2000      	movs	r0, #0
 8004dbc:	6023      	str	r3, [r4, #0]
 8004dbe:	b016      	add	sp, #88	; 0x58
 8004dc0:	bd70      	pop	{r4, r5, r6, pc}
	...

08004dc4 <__smakebuf_r>:
 8004dc4:	898b      	ldrh	r3, [r1, #12]
 8004dc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004dc8:	079d      	lsls	r5, r3, #30
 8004dca:	4606      	mov	r6, r0
 8004dcc:	460c      	mov	r4, r1
 8004dce:	d507      	bpl.n	8004de0 <__smakebuf_r+0x1c>
 8004dd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004dd4:	6023      	str	r3, [r4, #0]
 8004dd6:	6123      	str	r3, [r4, #16]
 8004dd8:	2301      	movs	r3, #1
 8004dda:	6163      	str	r3, [r4, #20]
 8004ddc:	b002      	add	sp, #8
 8004dde:	bd70      	pop	{r4, r5, r6, pc}
 8004de0:	ab01      	add	r3, sp, #4
 8004de2:	466a      	mov	r2, sp
 8004de4:	f7ff ffc8 	bl	8004d78 <__swhatbuf_r>
 8004de8:	9900      	ldr	r1, [sp, #0]
 8004dea:	4605      	mov	r5, r0
 8004dec:	4630      	mov	r0, r6
 8004dee:	f000 f895 	bl	8004f1c <_malloc_r>
 8004df2:	b948      	cbnz	r0, 8004e08 <__smakebuf_r+0x44>
 8004df4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004df8:	059a      	lsls	r2, r3, #22
 8004dfa:	d4ef      	bmi.n	8004ddc <__smakebuf_r+0x18>
 8004dfc:	f023 0303 	bic.w	r3, r3, #3
 8004e00:	f043 0302 	orr.w	r3, r3, #2
 8004e04:	81a3      	strh	r3, [r4, #12]
 8004e06:	e7e3      	b.n	8004dd0 <__smakebuf_r+0xc>
 8004e08:	4b0d      	ldr	r3, [pc, #52]	; (8004e40 <__smakebuf_r+0x7c>)
 8004e0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004e0c:	89a3      	ldrh	r3, [r4, #12]
 8004e0e:	6020      	str	r0, [r4, #0]
 8004e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e14:	81a3      	strh	r3, [r4, #12]
 8004e16:	9b00      	ldr	r3, [sp, #0]
 8004e18:	6163      	str	r3, [r4, #20]
 8004e1a:	9b01      	ldr	r3, [sp, #4]
 8004e1c:	6120      	str	r0, [r4, #16]
 8004e1e:	b15b      	cbz	r3, 8004e38 <__smakebuf_r+0x74>
 8004e20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e24:	4630      	mov	r0, r6
 8004e26:	f000 f975 	bl	8005114 <_isatty_r>
 8004e2a:	b128      	cbz	r0, 8004e38 <__smakebuf_r+0x74>
 8004e2c:	89a3      	ldrh	r3, [r4, #12]
 8004e2e:	f023 0303 	bic.w	r3, r3, #3
 8004e32:	f043 0301 	orr.w	r3, r3, #1
 8004e36:	81a3      	strh	r3, [r4, #12]
 8004e38:	89a0      	ldrh	r0, [r4, #12]
 8004e3a:	4305      	orrs	r5, r0
 8004e3c:	81a5      	strh	r5, [r4, #12]
 8004e3e:	e7cd      	b.n	8004ddc <__smakebuf_r+0x18>
 8004e40:	08004bd1 	.word	0x08004bd1

08004e44 <_free_r>:
 8004e44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e46:	2900      	cmp	r1, #0
 8004e48:	d044      	beq.n	8004ed4 <_free_r+0x90>
 8004e4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e4e:	9001      	str	r0, [sp, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f1a1 0404 	sub.w	r4, r1, #4
 8004e56:	bfb8      	it	lt
 8004e58:	18e4      	addlt	r4, r4, r3
 8004e5a:	f000 f97d 	bl	8005158 <__malloc_lock>
 8004e5e:	4a1e      	ldr	r2, [pc, #120]	; (8004ed8 <_free_r+0x94>)
 8004e60:	9801      	ldr	r0, [sp, #4]
 8004e62:	6813      	ldr	r3, [r2, #0]
 8004e64:	b933      	cbnz	r3, 8004e74 <_free_r+0x30>
 8004e66:	6063      	str	r3, [r4, #4]
 8004e68:	6014      	str	r4, [r2, #0]
 8004e6a:	b003      	add	sp, #12
 8004e6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e70:	f000 b978 	b.w	8005164 <__malloc_unlock>
 8004e74:	42a3      	cmp	r3, r4
 8004e76:	d908      	bls.n	8004e8a <_free_r+0x46>
 8004e78:	6825      	ldr	r5, [r4, #0]
 8004e7a:	1961      	adds	r1, r4, r5
 8004e7c:	428b      	cmp	r3, r1
 8004e7e:	bf01      	itttt	eq
 8004e80:	6819      	ldreq	r1, [r3, #0]
 8004e82:	685b      	ldreq	r3, [r3, #4]
 8004e84:	1949      	addeq	r1, r1, r5
 8004e86:	6021      	streq	r1, [r4, #0]
 8004e88:	e7ed      	b.n	8004e66 <_free_r+0x22>
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	b10b      	cbz	r3, 8004e94 <_free_r+0x50>
 8004e90:	42a3      	cmp	r3, r4
 8004e92:	d9fa      	bls.n	8004e8a <_free_r+0x46>
 8004e94:	6811      	ldr	r1, [r2, #0]
 8004e96:	1855      	adds	r5, r2, r1
 8004e98:	42a5      	cmp	r5, r4
 8004e9a:	d10b      	bne.n	8004eb4 <_free_r+0x70>
 8004e9c:	6824      	ldr	r4, [r4, #0]
 8004e9e:	4421      	add	r1, r4
 8004ea0:	1854      	adds	r4, r2, r1
 8004ea2:	42a3      	cmp	r3, r4
 8004ea4:	6011      	str	r1, [r2, #0]
 8004ea6:	d1e0      	bne.n	8004e6a <_free_r+0x26>
 8004ea8:	681c      	ldr	r4, [r3, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	6053      	str	r3, [r2, #4]
 8004eae:	4421      	add	r1, r4
 8004eb0:	6011      	str	r1, [r2, #0]
 8004eb2:	e7da      	b.n	8004e6a <_free_r+0x26>
 8004eb4:	d902      	bls.n	8004ebc <_free_r+0x78>
 8004eb6:	230c      	movs	r3, #12
 8004eb8:	6003      	str	r3, [r0, #0]
 8004eba:	e7d6      	b.n	8004e6a <_free_r+0x26>
 8004ebc:	6825      	ldr	r5, [r4, #0]
 8004ebe:	1961      	adds	r1, r4, r5
 8004ec0:	428b      	cmp	r3, r1
 8004ec2:	bf04      	itt	eq
 8004ec4:	6819      	ldreq	r1, [r3, #0]
 8004ec6:	685b      	ldreq	r3, [r3, #4]
 8004ec8:	6063      	str	r3, [r4, #4]
 8004eca:	bf04      	itt	eq
 8004ecc:	1949      	addeq	r1, r1, r5
 8004ece:	6021      	streq	r1, [r4, #0]
 8004ed0:	6054      	str	r4, [r2, #4]
 8004ed2:	e7ca      	b.n	8004e6a <_free_r+0x26>
 8004ed4:	b003      	add	sp, #12
 8004ed6:	bd30      	pop	{r4, r5, pc}
 8004ed8:	20000bc0 	.word	0x20000bc0

08004edc <sbrk_aligned>:
 8004edc:	b570      	push	{r4, r5, r6, lr}
 8004ede:	4e0e      	ldr	r6, [pc, #56]	; (8004f18 <sbrk_aligned+0x3c>)
 8004ee0:	460c      	mov	r4, r1
 8004ee2:	6831      	ldr	r1, [r6, #0]
 8004ee4:	4605      	mov	r5, r0
 8004ee6:	b911      	cbnz	r1, 8004eee <sbrk_aligned+0x12>
 8004ee8:	f000 f88c 	bl	8005004 <_sbrk_r>
 8004eec:	6030      	str	r0, [r6, #0]
 8004eee:	4621      	mov	r1, r4
 8004ef0:	4628      	mov	r0, r5
 8004ef2:	f000 f887 	bl	8005004 <_sbrk_r>
 8004ef6:	1c43      	adds	r3, r0, #1
 8004ef8:	d00a      	beq.n	8004f10 <sbrk_aligned+0x34>
 8004efa:	1cc4      	adds	r4, r0, #3
 8004efc:	f024 0403 	bic.w	r4, r4, #3
 8004f00:	42a0      	cmp	r0, r4
 8004f02:	d007      	beq.n	8004f14 <sbrk_aligned+0x38>
 8004f04:	1a21      	subs	r1, r4, r0
 8004f06:	4628      	mov	r0, r5
 8004f08:	f000 f87c 	bl	8005004 <_sbrk_r>
 8004f0c:	3001      	adds	r0, #1
 8004f0e:	d101      	bne.n	8004f14 <sbrk_aligned+0x38>
 8004f10:	f04f 34ff 	mov.w	r4, #4294967295
 8004f14:	4620      	mov	r0, r4
 8004f16:	bd70      	pop	{r4, r5, r6, pc}
 8004f18:	20000bc4 	.word	0x20000bc4

08004f1c <_malloc_r>:
 8004f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f20:	1ccd      	adds	r5, r1, #3
 8004f22:	f025 0503 	bic.w	r5, r5, #3
 8004f26:	3508      	adds	r5, #8
 8004f28:	2d0c      	cmp	r5, #12
 8004f2a:	bf38      	it	cc
 8004f2c:	250c      	movcc	r5, #12
 8004f2e:	2d00      	cmp	r5, #0
 8004f30:	4607      	mov	r7, r0
 8004f32:	db01      	blt.n	8004f38 <_malloc_r+0x1c>
 8004f34:	42a9      	cmp	r1, r5
 8004f36:	d905      	bls.n	8004f44 <_malloc_r+0x28>
 8004f38:	230c      	movs	r3, #12
 8004f3a:	603b      	str	r3, [r7, #0]
 8004f3c:	2600      	movs	r6, #0
 8004f3e:	4630      	mov	r0, r6
 8004f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f44:	4e2e      	ldr	r6, [pc, #184]	; (8005000 <_malloc_r+0xe4>)
 8004f46:	f000 f907 	bl	8005158 <__malloc_lock>
 8004f4a:	6833      	ldr	r3, [r6, #0]
 8004f4c:	461c      	mov	r4, r3
 8004f4e:	bb34      	cbnz	r4, 8004f9e <_malloc_r+0x82>
 8004f50:	4629      	mov	r1, r5
 8004f52:	4638      	mov	r0, r7
 8004f54:	f7ff ffc2 	bl	8004edc <sbrk_aligned>
 8004f58:	1c43      	adds	r3, r0, #1
 8004f5a:	4604      	mov	r4, r0
 8004f5c:	d14d      	bne.n	8004ffa <_malloc_r+0xde>
 8004f5e:	6834      	ldr	r4, [r6, #0]
 8004f60:	4626      	mov	r6, r4
 8004f62:	2e00      	cmp	r6, #0
 8004f64:	d140      	bne.n	8004fe8 <_malloc_r+0xcc>
 8004f66:	6823      	ldr	r3, [r4, #0]
 8004f68:	4631      	mov	r1, r6
 8004f6a:	4638      	mov	r0, r7
 8004f6c:	eb04 0803 	add.w	r8, r4, r3
 8004f70:	f000 f848 	bl	8005004 <_sbrk_r>
 8004f74:	4580      	cmp	r8, r0
 8004f76:	d13a      	bne.n	8004fee <_malloc_r+0xd2>
 8004f78:	6821      	ldr	r1, [r4, #0]
 8004f7a:	3503      	adds	r5, #3
 8004f7c:	1a6d      	subs	r5, r5, r1
 8004f7e:	f025 0503 	bic.w	r5, r5, #3
 8004f82:	3508      	adds	r5, #8
 8004f84:	2d0c      	cmp	r5, #12
 8004f86:	bf38      	it	cc
 8004f88:	250c      	movcc	r5, #12
 8004f8a:	4629      	mov	r1, r5
 8004f8c:	4638      	mov	r0, r7
 8004f8e:	f7ff ffa5 	bl	8004edc <sbrk_aligned>
 8004f92:	3001      	adds	r0, #1
 8004f94:	d02b      	beq.n	8004fee <_malloc_r+0xd2>
 8004f96:	6823      	ldr	r3, [r4, #0]
 8004f98:	442b      	add	r3, r5
 8004f9a:	6023      	str	r3, [r4, #0]
 8004f9c:	e00e      	b.n	8004fbc <_malloc_r+0xa0>
 8004f9e:	6822      	ldr	r2, [r4, #0]
 8004fa0:	1b52      	subs	r2, r2, r5
 8004fa2:	d41e      	bmi.n	8004fe2 <_malloc_r+0xc6>
 8004fa4:	2a0b      	cmp	r2, #11
 8004fa6:	d916      	bls.n	8004fd6 <_malloc_r+0xba>
 8004fa8:	1961      	adds	r1, r4, r5
 8004faa:	42a3      	cmp	r3, r4
 8004fac:	6025      	str	r5, [r4, #0]
 8004fae:	bf18      	it	ne
 8004fb0:	6059      	strne	r1, [r3, #4]
 8004fb2:	6863      	ldr	r3, [r4, #4]
 8004fb4:	bf08      	it	eq
 8004fb6:	6031      	streq	r1, [r6, #0]
 8004fb8:	5162      	str	r2, [r4, r5]
 8004fba:	604b      	str	r3, [r1, #4]
 8004fbc:	4638      	mov	r0, r7
 8004fbe:	f104 060b 	add.w	r6, r4, #11
 8004fc2:	f000 f8cf 	bl	8005164 <__malloc_unlock>
 8004fc6:	f026 0607 	bic.w	r6, r6, #7
 8004fca:	1d23      	adds	r3, r4, #4
 8004fcc:	1af2      	subs	r2, r6, r3
 8004fce:	d0b6      	beq.n	8004f3e <_malloc_r+0x22>
 8004fd0:	1b9b      	subs	r3, r3, r6
 8004fd2:	50a3      	str	r3, [r4, r2]
 8004fd4:	e7b3      	b.n	8004f3e <_malloc_r+0x22>
 8004fd6:	6862      	ldr	r2, [r4, #4]
 8004fd8:	42a3      	cmp	r3, r4
 8004fda:	bf0c      	ite	eq
 8004fdc:	6032      	streq	r2, [r6, #0]
 8004fde:	605a      	strne	r2, [r3, #4]
 8004fe0:	e7ec      	b.n	8004fbc <_malloc_r+0xa0>
 8004fe2:	4623      	mov	r3, r4
 8004fe4:	6864      	ldr	r4, [r4, #4]
 8004fe6:	e7b2      	b.n	8004f4e <_malloc_r+0x32>
 8004fe8:	4634      	mov	r4, r6
 8004fea:	6876      	ldr	r6, [r6, #4]
 8004fec:	e7b9      	b.n	8004f62 <_malloc_r+0x46>
 8004fee:	230c      	movs	r3, #12
 8004ff0:	603b      	str	r3, [r7, #0]
 8004ff2:	4638      	mov	r0, r7
 8004ff4:	f000 f8b6 	bl	8005164 <__malloc_unlock>
 8004ff8:	e7a1      	b.n	8004f3e <_malloc_r+0x22>
 8004ffa:	6025      	str	r5, [r4, #0]
 8004ffc:	e7de      	b.n	8004fbc <_malloc_r+0xa0>
 8004ffe:	bf00      	nop
 8005000:	20000bc0 	.word	0x20000bc0

08005004 <_sbrk_r>:
 8005004:	b538      	push	{r3, r4, r5, lr}
 8005006:	4d06      	ldr	r5, [pc, #24]	; (8005020 <_sbrk_r+0x1c>)
 8005008:	2300      	movs	r3, #0
 800500a:	4604      	mov	r4, r0
 800500c:	4608      	mov	r0, r1
 800500e:	602b      	str	r3, [r5, #0]
 8005010:	f7fc f8a0 	bl	8001154 <_sbrk>
 8005014:	1c43      	adds	r3, r0, #1
 8005016:	d102      	bne.n	800501e <_sbrk_r+0x1a>
 8005018:	682b      	ldr	r3, [r5, #0]
 800501a:	b103      	cbz	r3, 800501e <_sbrk_r+0x1a>
 800501c:	6023      	str	r3, [r4, #0]
 800501e:	bd38      	pop	{r3, r4, r5, pc}
 8005020:	20000bc8 	.word	0x20000bc8

08005024 <__sread>:
 8005024:	b510      	push	{r4, lr}
 8005026:	460c      	mov	r4, r1
 8005028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800502c:	f000 f8a0 	bl	8005170 <_read_r>
 8005030:	2800      	cmp	r0, #0
 8005032:	bfab      	itete	ge
 8005034:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005036:	89a3      	ldrhlt	r3, [r4, #12]
 8005038:	181b      	addge	r3, r3, r0
 800503a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800503e:	bfac      	ite	ge
 8005040:	6563      	strge	r3, [r4, #84]	; 0x54
 8005042:	81a3      	strhlt	r3, [r4, #12]
 8005044:	bd10      	pop	{r4, pc}

08005046 <__swrite>:
 8005046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800504a:	461f      	mov	r7, r3
 800504c:	898b      	ldrh	r3, [r1, #12]
 800504e:	05db      	lsls	r3, r3, #23
 8005050:	4605      	mov	r5, r0
 8005052:	460c      	mov	r4, r1
 8005054:	4616      	mov	r6, r2
 8005056:	d505      	bpl.n	8005064 <__swrite+0x1e>
 8005058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800505c:	2302      	movs	r3, #2
 800505e:	2200      	movs	r2, #0
 8005060:	f000 f868 	bl	8005134 <_lseek_r>
 8005064:	89a3      	ldrh	r3, [r4, #12]
 8005066:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800506a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800506e:	81a3      	strh	r3, [r4, #12]
 8005070:	4632      	mov	r2, r6
 8005072:	463b      	mov	r3, r7
 8005074:	4628      	mov	r0, r5
 8005076:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800507a:	f000 b817 	b.w	80050ac <_write_r>

0800507e <__sseek>:
 800507e:	b510      	push	{r4, lr}
 8005080:	460c      	mov	r4, r1
 8005082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005086:	f000 f855 	bl	8005134 <_lseek_r>
 800508a:	1c43      	adds	r3, r0, #1
 800508c:	89a3      	ldrh	r3, [r4, #12]
 800508e:	bf15      	itete	ne
 8005090:	6560      	strne	r0, [r4, #84]	; 0x54
 8005092:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005096:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800509a:	81a3      	strheq	r3, [r4, #12]
 800509c:	bf18      	it	ne
 800509e:	81a3      	strhne	r3, [r4, #12]
 80050a0:	bd10      	pop	{r4, pc}

080050a2 <__sclose>:
 80050a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050a6:	f000 b813 	b.w	80050d0 <_close_r>
	...

080050ac <_write_r>:
 80050ac:	b538      	push	{r3, r4, r5, lr}
 80050ae:	4d07      	ldr	r5, [pc, #28]	; (80050cc <_write_r+0x20>)
 80050b0:	4604      	mov	r4, r0
 80050b2:	4608      	mov	r0, r1
 80050b4:	4611      	mov	r1, r2
 80050b6:	2200      	movs	r2, #0
 80050b8:	602a      	str	r2, [r5, #0]
 80050ba:	461a      	mov	r2, r3
 80050bc:	f7fb fff9 	bl	80010b2 <_write>
 80050c0:	1c43      	adds	r3, r0, #1
 80050c2:	d102      	bne.n	80050ca <_write_r+0x1e>
 80050c4:	682b      	ldr	r3, [r5, #0]
 80050c6:	b103      	cbz	r3, 80050ca <_write_r+0x1e>
 80050c8:	6023      	str	r3, [r4, #0]
 80050ca:	bd38      	pop	{r3, r4, r5, pc}
 80050cc:	20000bc8 	.word	0x20000bc8

080050d0 <_close_r>:
 80050d0:	b538      	push	{r3, r4, r5, lr}
 80050d2:	4d06      	ldr	r5, [pc, #24]	; (80050ec <_close_r+0x1c>)
 80050d4:	2300      	movs	r3, #0
 80050d6:	4604      	mov	r4, r0
 80050d8:	4608      	mov	r0, r1
 80050da:	602b      	str	r3, [r5, #0]
 80050dc:	f7fc f805 	bl	80010ea <_close>
 80050e0:	1c43      	adds	r3, r0, #1
 80050e2:	d102      	bne.n	80050ea <_close_r+0x1a>
 80050e4:	682b      	ldr	r3, [r5, #0]
 80050e6:	b103      	cbz	r3, 80050ea <_close_r+0x1a>
 80050e8:	6023      	str	r3, [r4, #0]
 80050ea:	bd38      	pop	{r3, r4, r5, pc}
 80050ec:	20000bc8 	.word	0x20000bc8

080050f0 <_fstat_r>:
 80050f0:	b538      	push	{r3, r4, r5, lr}
 80050f2:	4d07      	ldr	r5, [pc, #28]	; (8005110 <_fstat_r+0x20>)
 80050f4:	2300      	movs	r3, #0
 80050f6:	4604      	mov	r4, r0
 80050f8:	4608      	mov	r0, r1
 80050fa:	4611      	mov	r1, r2
 80050fc:	602b      	str	r3, [r5, #0]
 80050fe:	f7fc f800 	bl	8001102 <_fstat>
 8005102:	1c43      	adds	r3, r0, #1
 8005104:	d102      	bne.n	800510c <_fstat_r+0x1c>
 8005106:	682b      	ldr	r3, [r5, #0]
 8005108:	b103      	cbz	r3, 800510c <_fstat_r+0x1c>
 800510a:	6023      	str	r3, [r4, #0]
 800510c:	bd38      	pop	{r3, r4, r5, pc}
 800510e:	bf00      	nop
 8005110:	20000bc8 	.word	0x20000bc8

08005114 <_isatty_r>:
 8005114:	b538      	push	{r3, r4, r5, lr}
 8005116:	4d06      	ldr	r5, [pc, #24]	; (8005130 <_isatty_r+0x1c>)
 8005118:	2300      	movs	r3, #0
 800511a:	4604      	mov	r4, r0
 800511c:	4608      	mov	r0, r1
 800511e:	602b      	str	r3, [r5, #0]
 8005120:	f7fb ffff 	bl	8001122 <_isatty>
 8005124:	1c43      	adds	r3, r0, #1
 8005126:	d102      	bne.n	800512e <_isatty_r+0x1a>
 8005128:	682b      	ldr	r3, [r5, #0]
 800512a:	b103      	cbz	r3, 800512e <_isatty_r+0x1a>
 800512c:	6023      	str	r3, [r4, #0]
 800512e:	bd38      	pop	{r3, r4, r5, pc}
 8005130:	20000bc8 	.word	0x20000bc8

08005134 <_lseek_r>:
 8005134:	b538      	push	{r3, r4, r5, lr}
 8005136:	4d07      	ldr	r5, [pc, #28]	; (8005154 <_lseek_r+0x20>)
 8005138:	4604      	mov	r4, r0
 800513a:	4608      	mov	r0, r1
 800513c:	4611      	mov	r1, r2
 800513e:	2200      	movs	r2, #0
 8005140:	602a      	str	r2, [r5, #0]
 8005142:	461a      	mov	r2, r3
 8005144:	f7fb fff8 	bl	8001138 <_lseek>
 8005148:	1c43      	adds	r3, r0, #1
 800514a:	d102      	bne.n	8005152 <_lseek_r+0x1e>
 800514c:	682b      	ldr	r3, [r5, #0]
 800514e:	b103      	cbz	r3, 8005152 <_lseek_r+0x1e>
 8005150:	6023      	str	r3, [r4, #0]
 8005152:	bd38      	pop	{r3, r4, r5, pc}
 8005154:	20000bc8 	.word	0x20000bc8

08005158 <__malloc_lock>:
 8005158:	4801      	ldr	r0, [pc, #4]	; (8005160 <__malloc_lock+0x8>)
 800515a:	f7ff be0b 	b.w	8004d74 <__retarget_lock_acquire_recursive>
 800515e:	bf00      	nop
 8005160:	20000bbc 	.word	0x20000bbc

08005164 <__malloc_unlock>:
 8005164:	4801      	ldr	r0, [pc, #4]	; (800516c <__malloc_unlock+0x8>)
 8005166:	f7ff be06 	b.w	8004d76 <__retarget_lock_release_recursive>
 800516a:	bf00      	nop
 800516c:	20000bbc 	.word	0x20000bbc

08005170 <_read_r>:
 8005170:	b538      	push	{r3, r4, r5, lr}
 8005172:	4d07      	ldr	r5, [pc, #28]	; (8005190 <_read_r+0x20>)
 8005174:	4604      	mov	r4, r0
 8005176:	4608      	mov	r0, r1
 8005178:	4611      	mov	r1, r2
 800517a:	2200      	movs	r2, #0
 800517c:	602a      	str	r2, [r5, #0]
 800517e:	461a      	mov	r2, r3
 8005180:	f7fb ff7a 	bl	8001078 <_read>
 8005184:	1c43      	adds	r3, r0, #1
 8005186:	d102      	bne.n	800518e <_read_r+0x1e>
 8005188:	682b      	ldr	r3, [r5, #0]
 800518a:	b103      	cbz	r3, 800518e <_read_r+0x1e>
 800518c:	6023      	str	r3, [r4, #0]
 800518e:	bd38      	pop	{r3, r4, r5, pc}
 8005190:	20000bc8 	.word	0x20000bc8

08005194 <_init>:
 8005194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005196:	bf00      	nop
 8005198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800519a:	bc08      	pop	{r3}
 800519c:	469e      	mov	lr, r3
 800519e:	4770      	bx	lr

080051a0 <_fini>:
 80051a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051a2:	bf00      	nop
 80051a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051a6:	bc08      	pop	{r3}
 80051a8:	469e      	mov	lr, r3
 80051aa:	4770      	bx	lr


07.PWM_FAN_CONTROL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d08  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  08008eb8  08008eb8  00018eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800916c  0800916c  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800916c  0800916c  0001916c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009174  08009174  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009174  08009174  00019174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009178  08009178  00019178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800917c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          00000d3c  20000084  20000084  00020084  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000dc0  20000dc0  00020084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b866  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037db  00000000  00000000  0003b91a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001720  00000000  00000000  0003f0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015c0  00000000  00000000  00040818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000279d6  00000000  00000000  00041dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c03c  00000000  00000000  000697ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7540  00000000  00000000  000857ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016cd2a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006afc  00000000  00000000  0016cd7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008ea0 	.word	0x08008ea0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	08008ea0 	.word	0x08008ea0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <DHT11_Init>:
		//	FND_update(i_Tmp*100 + i_RH);
	}
}

void DHT11_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_SET);
 8000598:	2201      	movs	r2, #1
 800059a:	2101      	movs	r1, #1
 800059c:	4804      	ldr	r0, [pc, #16]	; (80005b0 <DHT11_Init+0x1c>)
 800059e:	f002 ffe1 	bl	8003564 <HAL_GPIO_WritePin>
	HAL_Delay(3000); // 초기화 할때는 딱 한번만 일어나기 때문에 hal_delay()를 줘도 상관 없다.
 80005a2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005a6:	f002 f929 	bl	80027fc <HAL_Delay>
	return;
 80005aa:	bf00      	nop
}
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40020000 	.word	0x40020000

080005b4 <Get_Button>:
/*
 * desc: 사용자가 한번 버튼을 누를때마다(떼는 행동 포함) led의 on/off상태를 바꾸는 것이 목표
 * return: 완전히 눌렀다 떼면 BUTTON_RELEASE(1) 상태를 리턴
 * */
int Get_Button(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t button_number)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	460b      	mov	r3, r1
 80005be:	807b      	strh	r3, [r7, #2]
 80005c0:	4613      	mov	r3, r2
 80005c2:	707b      	strb	r3, [r7, #1]
	unsigned char curr_state;
	curr_state = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin); // curr_state에는 0 또는 1의 상태가 걸리게 됨
 80005c4:	887b      	ldrh	r3, [r7, #2]
 80005c6:	4619      	mov	r1, r3
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f002 ffb3 	bl	8003534 <HAL_GPIO_ReadPin>
 80005ce:	4603      	mov	r3, r0
 80005d0:	73fb      	strb	r3, [r7, #15]

	// 원치않는 노이즈를 디바운스? 채터링? 하는 if문 코드
	if (curr_state == BUTTON_PRESS && button_status[button_number] == BUTTON_RELEASE) // 처음 노이즈가 발생하는 상황을 체크
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d10d      	bne.n	80005f4 <Get_Button+0x40>
 80005d8:	787b      	ldrb	r3, [r7, #1]
 80005da:	4a11      	ldr	r2, [pc, #68]	; (8000620 <Get_Button+0x6c>)
 80005dc:	5cd3      	ldrb	r3, [r2, r3]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d108      	bne.n	80005f4 <Get_Button+0x40>
	{
		HAL_Delay(100); // 노이즈가 지나가기를 기다리는 것
 80005e2:	2064      	movs	r0, #100	; 0x64
 80005e4:	f002 f90a 	bl	80027fc <HAL_Delay>
		button_status[button_number] = BUTTON_PRESS;
 80005e8:	787b      	ldrb	r3, [r7, #1]
 80005ea:	4a0d      	ldr	r2, [pc, #52]	; (8000620 <Get_Button+0x6c>)
 80005ec:	2100      	movs	r1, #0
 80005ee:	54d1      	strb	r1, [r2, r3]
		return BUTTON_RELEASE; // 버튼이 눌려진 상태이나 아직은 noise상태로 인정
 80005f0:	2301      	movs	r3, #1
 80005f2:	e011      	b.n	8000618 <Get_Button+0x64>
	}
	else if (curr_state == BUTTON_RELEASE && button_status[button_number] == BUTTON_PRESS) // 이전에 버튼이 눌려진 상태였고, 지금은 버튼을 뗀 상태이면
 80005f4:	7bfb      	ldrb	r3, [r7, #15]
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d10d      	bne.n	8000616 <Get_Button+0x62>
 80005fa:	787b      	ldrb	r3, [r7, #1]
 80005fc:	4a08      	ldr	r2, [pc, #32]	; (8000620 <Get_Button+0x6c>)
 80005fe:	5cd3      	ldrb	r3, [r2, r3]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d108      	bne.n	8000616 <Get_Button+0x62>
	{
		button_status[button_number] = BUTTON_RELEASE; // button_status_table을 초기화 하고
 8000604:	787b      	ldrb	r3, [r7, #1]
 8000606:	4a06      	ldr	r2, [pc, #24]	; (8000620 <Get_Button+0x6c>)
 8000608:	2101      	movs	r1, #1
 800060a:	54d1      	strb	r1, [r2, r3]
		HAL_Delay(30);
 800060c:	201e      	movs	r0, #30
 800060e:	f002 f8f5 	bl	80027fc <HAL_Delay>
		return BUTTON_PRESS; // 버튼을 한번 눌렀다 뗀 것으로 인정
 8000612:	2300      	movs	r3, #0
 8000614:	e000      	b.n	8000618 <Get_Button+0x64>
	}
	return BUTTON_RELEASE;
 8000616:	2301      	movs	r3, #1
}
 8000618:	4618      	mov	r0, r3
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000008 	.word	0x20000008

08000624 <dcmotor_processing>:

int auto_mode_remain_time = 30; // auto mode


void dcmotor_processing(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
//	if (manual_auto_flag == 0)
	if (manual_auto_flag == 1)
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <dcmotor_processing+0x1c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d102      	bne.n	8000636 <dcmotor_processing+0x12>
	{
		dcmotor_pwm_manual_control();
 8000630:	f000 f8e0 	bl	80007f4 <dcmotor_pwm_manual_control>
//		else
//		{
//			manual_auto_flag = 0;
//		}
//	}
}
 8000634:	e001      	b.n	800063a <dcmotor_processing+0x16>
		dcmotor_pwm_auto_control();
 8000636:	f000 f805 	bl	8000644 <dcmotor_pwm_auto_control>
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	200000a6 	.word	0x200000a6

08000644 <dcmotor_pwm_auto_control>:


void dcmotor_pwm_auto_control(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	dcmotor_auto_mode_display(auto_mode_remain_time); // 오토모드 디스플레이 출력
 8000648:	4b55      	ldr	r3, [pc, #340]	; (80007a0 <dcmotor_pwm_auto_control+0x15c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4618      	mov	r0, r3
 800064e:	f000 f8b5 	bl	80007bc <dcmotor_auto_mode_display>

	// 1초마다 자동으로 남은시간 1초 감소
	if (TIM10_10ms_fan_auto_mode >= 100)
 8000652:	4b54      	ldr	r3, [pc, #336]	; (80007a4 <dcmotor_pwm_auto_control+0x160>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2b63      	cmp	r3, #99	; 0x63
 8000658:	dd26      	ble.n	80006a8 <dcmotor_pwm_auto_control+0x64>
	{
		TIM10_10ms_fan_auto_mode = 0;
 800065a:	4b52      	ldr	r3, [pc, #328]	; (80007a4 <dcmotor_pwm_auto_control+0x160>)
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
		auto_mode_remain_time--;
 8000660:	4b4f      	ldr	r3, [pc, #316]	; (80007a0 <dcmotor_pwm_auto_control+0x15c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	3b01      	subs	r3, #1
 8000666:	4a4e      	ldr	r2, [pc, #312]	; (80007a0 <dcmotor_pwm_auto_control+0x15c>)
 8000668:	6013      	str	r3, [r2, #0]

		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000670:	484d      	ldr	r0, [pc, #308]	; (80007a8 <dcmotor_pwm_auto_control+0x164>)
 8000672:	f002 ff77 	bl	8003564 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 8000676:	2201      	movs	r2, #1
 8000678:	f44f 7100 	mov.w	r1, #512	; 0x200
 800067c:	484a      	ldr	r0, [pc, #296]	; (80007a8 <dcmotor_pwm_auto_control+0x164>)
 800067e:	f002 ff71 	bl	8003564 <HAL_GPIO_WritePin>

		if (auto_mode_remain_time < 0)
 8000682:	4b47      	ldr	r3, [pc, #284]	; (80007a0 <dcmotor_pwm_auto_control+0x15c>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2b00      	cmp	r3, #0
 8000688:	da0e      	bge.n	80006a8 <dcmotor_pwm_auto_control+0x64>
		{
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 800068a:	2201      	movs	r2, #1
 800068c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000690:	4845      	ldr	r0, [pc, #276]	; (80007a8 <dcmotor_pwm_auto_control+0x164>)
 8000692:	f002 ff67 	bl	8003564 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 8000696:	2201      	movs	r2, #1
 8000698:	f44f 7100 	mov.w	r1, #512	; 0x200
 800069c:	4842      	ldr	r0, [pc, #264]	; (80007a8 <dcmotor_pwm_auto_control+0x164>)
 800069e:	f002 ff61 	bl	8003564 <HAL_GPIO_WritePin>
			auto_mode_remain_time = 0;
 80006a2:	4b3f      	ldr	r3, [pc, #252]	; (80007a0 <dcmotor_pwm_auto_control+0x15c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
		}
	}
	// BUTTON0 누르면 남은시간 10초 증가
	if (Get_Button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 80006a8:	2200      	movs	r2, #0
 80006aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ae:	483e      	ldr	r0, [pc, #248]	; (80007a8 <dcmotor_pwm_auto_control+0x164>)
 80006b0:	f7ff ff80 	bl	80005b4 <Get_Button>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d104      	bne.n	80006c4 <dcmotor_pwm_auto_control+0x80>
	{
		auto_mode_remain_time += 10;
 80006ba:	4b39      	ldr	r3, [pc, #228]	; (80007a0 <dcmotor_pwm_auto_control+0x15c>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	330a      	adds	r3, #10
 80006c0:	4a37      	ldr	r2, [pc, #220]	; (80007a0 <dcmotor_pwm_auto_control+0x15c>)
 80006c2:	6013      	str	r3, [r2, #0]
	}
	// BUTTON1 누르면 남은시간 10초 감소
	if (Get_Button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 80006c4:	2201      	movs	r2, #1
 80006c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006ca:	4837      	ldr	r0, [pc, #220]	; (80007a8 <dcmotor_pwm_auto_control+0x164>)
 80006cc:	f7ff ff72 	bl	80005b4 <Get_Button>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d10b      	bne.n	80006ee <dcmotor_pwm_auto_control+0xaa>
	{
		auto_mode_remain_time -= 10;
 80006d6:	4b32      	ldr	r3, [pc, #200]	; (80007a0 <dcmotor_pwm_auto_control+0x15c>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	3b0a      	subs	r3, #10
 80006dc:	4a30      	ldr	r2, [pc, #192]	; (80007a0 <dcmotor_pwm_auto_control+0x15c>)
 80006de:	6013      	str	r3, [r2, #0]
		if (auto_mode_remain_time < 0) auto_mode_remain_time = 0; // 남은시간이 마이너스로 떨어지는거 방지
 80006e0:	4b2f      	ldr	r3, [pc, #188]	; (80007a0 <dcmotor_pwm_auto_control+0x15c>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	da02      	bge.n	80006ee <dcmotor_pwm_auto_control+0xaa>
 80006e8:	4b2d      	ldr	r3, [pc, #180]	; (80007a0 <dcmotor_pwm_auto_control+0x15c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
	}


	// BUTTON2 누르면 가속
	if (Get_Button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 80006ee:	2202      	movs	r2, #2
 80006f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006f4:	482c      	ldr	r0, [pc, #176]	; (80007a8 <dcmotor_pwm_auto_control+0x164>)
 80006f6:	f7ff ff5d 	bl	80005b4 <Get_Button>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d121      	bne.n	8000744 <dcmotor_pwm_auto_control+0x100>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7); // LED1
 8000700:	2180      	movs	r1, #128	; 0x80
 8000702:	482a      	ldr	r0, [pc, #168]	; (80007ac <dcmotor_pwm_auto_control+0x168>)
 8000704:	f002 ff47 	bl	8003596 <HAL_GPIO_TogglePin>

		ChannelControlRegister_UP_Value = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_1);
 8000708:	4b29      	ldr	r3, [pc, #164]	; (80007b0 <dcmotor_pwm_auto_control+0x16c>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800070e:	b29a      	uxth	r2, r3
 8000710:	4b28      	ldr	r3, [pc, #160]	; (80007b4 <dcmotor_pwm_auto_control+0x170>)
 8000712:	801a      	strh	r2, [r3, #0]
		ChannelControlRegister_UP_Value += 10;
 8000714:	4b27      	ldr	r3, [pc, #156]	; (80007b4 <dcmotor_pwm_auto_control+0x170>)
 8000716:	881b      	ldrh	r3, [r3, #0]
 8000718:	330a      	adds	r3, #10
 800071a:	b29a      	uxth	r2, r3
 800071c:	4b25      	ldr	r3, [pc, #148]	; (80007b4 <dcmotor_pwm_auto_control+0x170>)
 800071e:	801a      	strh	r2, [r3, #0]

		if (ChannelControlRegister_UP_Value > 100) // ChannelControlRegister_UP_Value의 쓰레시 홀드(최대치 상한): 듀디사이클 최대 상한치는 100%(풀스피트)
 8000720:	4b24      	ldr	r3, [pc, #144]	; (80007b4 <dcmotor_pwm_auto_control+0x170>)
 8000722:	881b      	ldrh	r3, [r3, #0]
 8000724:	2b64      	cmp	r3, #100	; 0x64
 8000726:	d902      	bls.n	800072e <dcmotor_pwm_auto_control+0xea>
		{
			ChannelControlRegister_UP_Value = 100;
 8000728:	4b22      	ldr	r3, [pc, #136]	; (80007b4 <dcmotor_pwm_auto_control+0x170>)
 800072a:	2264      	movs	r2, #100	; 0x64
 800072c:	801a      	strh	r2, [r3, #0]
		}

		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, ChannelControlRegister_UP_Value);
 800072e:	4b21      	ldr	r3, [pc, #132]	; (80007b4 <dcmotor_pwm_auto_control+0x170>)
 8000730:	881a      	ldrh	r2, [r3, #0]
 8000732:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <dcmotor_pwm_auto_control+0x16c>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	635a      	str	r2, [r3, #52]	; 0x34

		dcmotor_ledbar_control(Get_Current_ChannelControlRegister_Value());
 8000738:	f000 f956 	bl	80009e8 <Get_Current_ChannelControlRegister_Value>
 800073c:	4603      	mov	r3, r0
 800073e:	4618      	mov	r0, r3
 8000740:	f000 f962 	bl	8000a08 <dcmotor_ledbar_control>
	}

	// BUTTON3 누르면 감속
	if (Get_Button(BUTTON3_GPIO_Port, BUTTON3_Pin, 3) == BUTTON_PRESS)
 8000744:	2203      	movs	r2, #3
 8000746:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800074a:	4817      	ldr	r0, [pc, #92]	; (80007a8 <dcmotor_pwm_auto_control+0x164>)
 800074c:	f7ff ff32 	bl	80005b4 <Get_Button>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d122      	bne.n	800079c <dcmotor_pwm_auto_control+0x158>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); // LED1
 8000756:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800075a:	4814      	ldr	r0, [pc, #80]	; (80007ac <dcmotor_pwm_auto_control+0x168>)
 800075c:	f002 ff1b 	bl	8003596 <HAL_GPIO_TogglePin>

		ChannelControlRegister_DOWN_Value = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_1);
 8000760:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <dcmotor_pwm_auto_control+0x16c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000766:	b29a      	uxth	r2, r3
 8000768:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <dcmotor_pwm_auto_control+0x174>)
 800076a:	801a      	strh	r2, [r3, #0]
		ChannelControlRegister_DOWN_Value -= 10;
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <dcmotor_pwm_auto_control+0x174>)
 800076e:	881b      	ldrh	r3, [r3, #0]
 8000770:	3b0a      	subs	r3, #10
 8000772:	b29a      	uxth	r2, r3
 8000774:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <dcmotor_pwm_auto_control+0x174>)
 8000776:	801a      	strh	r2, [r3, #0]

		if (ChannelControlRegister_DOWN_Value < 60) // ChannelControlRegister_DOWN_Value의 쓰레시 홀드(최대치 하한): 듀디사이클 펄스 최대 하한치는 60%
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <dcmotor_pwm_auto_control+0x174>)
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	2b3b      	cmp	r3, #59	; 0x3b
 800077e:	d802      	bhi.n	8000786 <dcmotor_pwm_auto_control+0x142>
		{
			ChannelControlRegister_DOWN_Value = 60;
 8000780:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <dcmotor_pwm_auto_control+0x174>)
 8000782:	223c      	movs	r2, #60	; 0x3c
 8000784:	801a      	strh	r2, [r3, #0]
		}

		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, ChannelControlRegister_DOWN_Value);
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <dcmotor_pwm_auto_control+0x174>)
 8000788:	881a      	ldrh	r2, [r3, #0]
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <dcmotor_pwm_auto_control+0x16c>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	635a      	str	r2, [r3, #52]	; 0x34

		dcmotor_ledbar_control(Get_Current_ChannelControlRegister_Value());
 8000790:	f000 f92a 	bl	80009e8 <Get_Current_ChannelControlRegister_Value>
 8000794:	4603      	mov	r3, r0
 8000796:	4618      	mov	r0, r3
 8000798:	f000 f936 	bl	8000a08 <dcmotor_ledbar_control>
	}

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	2000000c 	.word	0x2000000c
 80007a4:	20000a34 	.word	0x20000a34
 80007a8:	40021000 	.word	0x40021000
 80007ac:	40020400 	.word	0x40020400
 80007b0:	200003b4 	.word	0x200003b4
 80007b4:	200000a0 	.word	0x200000a0
 80007b8:	200000a2 	.word	0x200000a2

080007bc <dcmotor_auto_mode_display>:


void dcmotor_auto_mode_display(int auto_mode_remain_time)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08e      	sub	sp, #56	; 0x38
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	int auto_mode_remain_time_lv = auto_mode_remain_time; // 전역변수를 지역변수(lv: local variable)로 값 대피
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	637b      	str	r3, [r7, #52]	; 0x34
	char lcd_buff_1[20], lcd_buff_2[20];



	sprintf(lcd_buff_1, "remain_time: %ds", auto_mode_remain_time_lv);
 80007c8:	f107 0320 	add.w	r3, r7, #32
 80007cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007ce:	4908      	ldr	r1, [pc, #32]	; (80007f0 <dcmotor_auto_mode_display+0x34>)
 80007d0:	4618      	mov	r0, r3
 80007d2:	f007 facd 	bl	8007d70 <siprintf>
	move_cursor(0,0);
 80007d6:	2100      	movs	r1, #0
 80007d8:	2000      	movs	r0, #0
 80007da:	f000 fa01 	bl	8000be0 <move_cursor>
	lcd_string(lcd_buff_1);
 80007de:	f107 0320 	add.w	r3, r7, #32
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 f9e7 	bl	8000bb6 <lcd_string>
//
//	sprintf(lcd_buff_1, "curr : %dcm", auto_mode_remain_time_lv);
//	move_cursor(1,0);
//	lcd_string(lcd_buff_2);
}
 80007e8:	bf00      	nop
 80007ea:	3738      	adds	r7, #56	; 0x38
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	08008eb8 	.word	0x08008eb8

080007f4 <dcmotor_pwm_manual_control>:
// BUTTON0: start/stop : 버튼이 눌리면 모터를 작동하거나 끄며 LED1 toggle
// BUTTON1: speed up : 버튼이 눌리면 모터를 가속하며 LED2 toggle
// BUTTON2: speed down : 버튼이 눌리면 모터를 감속하며 LED3 toggle
// BUTTON3: 정회전 역회전 반전
void dcmotor_pwm_manual_control(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	if (pwm_start_flag)
 80007f8:	4b73      	ldr	r3, [pc, #460]	; (80009c8 <dcmotor_pwm_manual_control+0x1d4>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d005      	beq.n	800080c <dcmotor_pwm_manual_control+0x18>
	{
		FAN_ROTATE_DERECTION_LED_control(forward_backwrd_dcmotor); // start 상태면, 정방향 역방향을 알리는 LED가 깜빡깜빡 거림
 8000800:	4b72      	ldr	r3, [pc, #456]	; (80009cc <dcmotor_pwm_manual_control+0x1d8>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	4618      	mov	r0, r3
 8000806:	f000 f92b 	bl	8000a60 <FAN_ROTATE_DERECTION_LED_control>
 800080a:	e005      	b.n	8000818 <dcmotor_pwm_manual_control+0x24>
	}
	else
	{
		HAL_GPIO_WritePin(FAN_ROTATE_DERECTION_LED_GPIO_Port, FAN_ROTATE_DERECTION_LED_Pin, 0); // stop 상태면, 정방향 역방향을 알리는 LED가 꺼짐
 800080c:	2200      	movs	r2, #0
 800080e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000812:	486f      	ldr	r0, [pc, #444]	; (80009d0 <dcmotor_pwm_manual_control+0x1dc>)
 8000814:	f002 fea6 	bl	8003564 <HAL_GPIO_WritePin>
	}

	// BUTTON0: start/stop : 버튼이 눌리면 모터를 작동하거나 끄며 LED1 toggle
	if (Get_Button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 8000818:	2200      	movs	r2, #0
 800081a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800081e:	486c      	ldr	r0, [pc, #432]	; (80009d0 <dcmotor_pwm_manual_control+0x1dc>)
 8000820:	f7ff fec8 	bl	80005b4 <Get_Button>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d13e      	bne.n	80008a8 <dcmotor_pwm_manual_control+0xb4>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); // LED1
 800082a:	2101      	movs	r1, #1
 800082c:	4869      	ldr	r0, [pc, #420]	; (80009d4 <dcmotor_pwm_manual_control+0x1e0>)
 800082e:	f002 feb2 	bl	8003596 <HAL_GPIO_TogglePin>

		if (!forward_backwrd_dcmotor) // 역방향 회전중이라면
 8000832:	4b66      	ldr	r3, [pc, #408]	; (80009cc <dcmotor_pwm_manual_control+0x1d8>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d10c      	bne.n	8000854 <dcmotor_pwm_manual_control+0x60>
		{
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 800083a:	2201      	movs	r2, #1
 800083c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000840:	4863      	ldr	r0, [pc, #396]	; (80009d0 <dcmotor_pwm_manual_control+0x1dc>)
 8000842:	f002 fe8f 	bl	8003564 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	f44f 7100 	mov.w	r1, #512	; 0x200
 800084c:	4860      	ldr	r0, [pc, #384]	; (80009d0 <dcmotor_pwm_manual_control+0x1dc>)
 800084e:	f002 fe89 	bl	8003564 <HAL_GPIO_WritePin>
 8000852:	e00b      	b.n	800086c <dcmotor_pwm_manual_control+0x78>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 8000854:	2200      	movs	r2, #0
 8000856:	f44f 7180 	mov.w	r1, #256	; 0x100
 800085a:	485d      	ldr	r0, [pc, #372]	; (80009d0 <dcmotor_pwm_manual_control+0x1dc>)
 800085c:	f002 fe82 	bl	8003564 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 8000860:	2201      	movs	r2, #1
 8000862:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000866:	485a      	ldr	r0, [pc, #360]	; (80009d0 <dcmotor_pwm_manual_control+0x1dc>)
 8000868:	f002 fe7c 	bl	8003564 <HAL_GPIO_WritePin>
		}


		if (!pwm_start_flag) // 앞에 not 있음.. pwm이 첫음 누른 상태라면..?
 800086c:	4b56      	ldr	r3, [pc, #344]	; (80009c8 <dcmotor_pwm_manual_control+0x1d4>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d10d      	bne.n	8000890 <dcmotor_pwm_manual_control+0x9c>
		{
			pwm_start_flag = 1;
 8000874:	4b54      	ldr	r3, [pc, #336]	; (80009c8 <dcmotor_pwm_manual_control+0x1d4>)
 8000876:	2201      	movs	r2, #1
 8000878:	701a      	strb	r2, [r3, #0]
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); // START_it가 아니라 그냥 Start이다. START_it는 main()단에서 이미 했다.
 800087a:	2100      	movs	r1, #0
 800087c:	4856      	ldr	r0, [pc, #344]	; (80009d8 <dcmotor_pwm_manual_control+0x1e4>)
 800087e:	f004 fa31 	bl	8004ce4 <HAL_TIM_PWM_Start>

			dcmotor_ledbar_control(Get_Current_ChannelControlRegister_Value()); // start상태가 되면 현재 클락 듀디 사이클에 맞게 ledbar가 켜지게 됨
 8000882:	f000 f8b1 	bl	80009e8 <Get_Current_ChannelControlRegister_Value>
 8000886:	4603      	mov	r3, r0
 8000888:	4618      	mov	r0, r3
 800088a:	f000 f8bd 	bl	8000a08 <dcmotor_ledbar_control>
 800088e:	e00b      	b.n	80008a8 <dcmotor_pwm_manual_control+0xb4>
		}
		else
		{
			pwm_start_flag = 0;
 8000890:	4b4d      	ldr	r3, [pc, #308]	; (80009c8 <dcmotor_pwm_manual_control+0x1d4>)
 8000892:	2200      	movs	r2, #0
 8000894:	701a      	strb	r2, [r3, #0]
			HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8000896:	2100      	movs	r1, #0
 8000898:	484f      	ldr	r0, [pc, #316]	; (80009d8 <dcmotor_pwm_manual_control+0x1e4>)
 800089a:	f004 faeb 	bl	8004e74 <HAL_TIM_PWM_Stop>

			HAL_GPIO_WritePin(GPIOD, 0xff, 0); // stop상태가 되면 아예 ledbar가 꺼져있어야 함
 800089e:	2200      	movs	r2, #0
 80008a0:	21ff      	movs	r1, #255	; 0xff
 80008a2:	484e      	ldr	r0, [pc, #312]	; (80009dc <dcmotor_pwm_manual_control+0x1e8>)
 80008a4:	f002 fe5e 	bl	8003564 <HAL_GPIO_WritePin>
		}

	}

	// BUTTON1: speed up : 버튼이 눌리면 모터를 가속하며 LED2 toggle
	if (Get_Button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 80008a8:	2201      	movs	r2, #1
 80008aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008ae:	4848      	ldr	r0, [pc, #288]	; (80009d0 <dcmotor_pwm_manual_control+0x1dc>)
 80008b0:	f7ff fe80 	bl	80005b4 <Get_Button>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d121      	bne.n	80008fe <dcmotor_pwm_manual_control+0x10a>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7); // LED1
 80008ba:	2180      	movs	r1, #128	; 0x80
 80008bc:	4845      	ldr	r0, [pc, #276]	; (80009d4 <dcmotor_pwm_manual_control+0x1e0>)
 80008be:	f002 fe6a 	bl	8003596 <HAL_GPIO_TogglePin>

		ChannelControlRegister_UP_Value = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_1);
 80008c2:	4b45      	ldr	r3, [pc, #276]	; (80009d8 <dcmotor_pwm_manual_control+0x1e4>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008c8:	b29a      	uxth	r2, r3
 80008ca:	4b45      	ldr	r3, [pc, #276]	; (80009e0 <dcmotor_pwm_manual_control+0x1ec>)
 80008cc:	801a      	strh	r2, [r3, #0]
		ChannelControlRegister_UP_Value += 10;
 80008ce:	4b44      	ldr	r3, [pc, #272]	; (80009e0 <dcmotor_pwm_manual_control+0x1ec>)
 80008d0:	881b      	ldrh	r3, [r3, #0]
 80008d2:	330a      	adds	r3, #10
 80008d4:	b29a      	uxth	r2, r3
 80008d6:	4b42      	ldr	r3, [pc, #264]	; (80009e0 <dcmotor_pwm_manual_control+0x1ec>)
 80008d8:	801a      	strh	r2, [r3, #0]

		if (ChannelControlRegister_UP_Value > 100) // ChannelControlRegister_UP_Value의 쓰레시 홀드(최대치 상한): 듀디사이클 최대 상한치는 100%(풀스피트)
 80008da:	4b41      	ldr	r3, [pc, #260]	; (80009e0 <dcmotor_pwm_manual_control+0x1ec>)
 80008dc:	881b      	ldrh	r3, [r3, #0]
 80008de:	2b64      	cmp	r3, #100	; 0x64
 80008e0:	d902      	bls.n	80008e8 <dcmotor_pwm_manual_control+0xf4>
		{
			ChannelControlRegister_UP_Value = 100;
 80008e2:	4b3f      	ldr	r3, [pc, #252]	; (80009e0 <dcmotor_pwm_manual_control+0x1ec>)
 80008e4:	2264      	movs	r2, #100	; 0x64
 80008e6:	801a      	strh	r2, [r3, #0]
		}

		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, ChannelControlRegister_UP_Value);
 80008e8:	4b3d      	ldr	r3, [pc, #244]	; (80009e0 <dcmotor_pwm_manual_control+0x1ec>)
 80008ea:	881a      	ldrh	r2, [r3, #0]
 80008ec:	4b3a      	ldr	r3, [pc, #232]	; (80009d8 <dcmotor_pwm_manual_control+0x1e4>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	635a      	str	r2, [r3, #52]	; 0x34

		dcmotor_ledbar_control(Get_Current_ChannelControlRegister_Value());
 80008f2:	f000 f879 	bl	80009e8 <Get_Current_ChannelControlRegister_Value>
 80008f6:	4603      	mov	r3, r0
 80008f8:	4618      	mov	r0, r3
 80008fa:	f000 f885 	bl	8000a08 <dcmotor_ledbar_control>
	}

	// BUTTON2: speed down : 버튼이 눌리면 모터를 감속하며 LED3 toggle
	if (Get_Button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 80008fe:	2202      	movs	r2, #2
 8000900:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000904:	4832      	ldr	r0, [pc, #200]	; (80009d0 <dcmotor_pwm_manual_control+0x1dc>)
 8000906:	f7ff fe55 	bl	80005b4 <Get_Button>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d122      	bne.n	8000956 <dcmotor_pwm_manual_control+0x162>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); // LED1
 8000910:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000914:	482f      	ldr	r0, [pc, #188]	; (80009d4 <dcmotor_pwm_manual_control+0x1e0>)
 8000916:	f002 fe3e 	bl	8003596 <HAL_GPIO_TogglePin>

		ChannelControlRegister_DOWN_Value = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_1);
 800091a:	4b2f      	ldr	r3, [pc, #188]	; (80009d8 <dcmotor_pwm_manual_control+0x1e4>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000920:	b29a      	uxth	r2, r3
 8000922:	4b30      	ldr	r3, [pc, #192]	; (80009e4 <dcmotor_pwm_manual_control+0x1f0>)
 8000924:	801a      	strh	r2, [r3, #0]
		ChannelControlRegister_DOWN_Value -= 10;
 8000926:	4b2f      	ldr	r3, [pc, #188]	; (80009e4 <dcmotor_pwm_manual_control+0x1f0>)
 8000928:	881b      	ldrh	r3, [r3, #0]
 800092a:	3b0a      	subs	r3, #10
 800092c:	b29a      	uxth	r2, r3
 800092e:	4b2d      	ldr	r3, [pc, #180]	; (80009e4 <dcmotor_pwm_manual_control+0x1f0>)
 8000930:	801a      	strh	r2, [r3, #0]

		if (ChannelControlRegister_DOWN_Value < 60) // ChannelControlRegister_DOWN_Value의 쓰레시 홀드(최대치 하한): 듀디사이클 펄스 최대 하한치는 60%
 8000932:	4b2c      	ldr	r3, [pc, #176]	; (80009e4 <dcmotor_pwm_manual_control+0x1f0>)
 8000934:	881b      	ldrh	r3, [r3, #0]
 8000936:	2b3b      	cmp	r3, #59	; 0x3b
 8000938:	d802      	bhi.n	8000940 <dcmotor_pwm_manual_control+0x14c>
		{
			ChannelControlRegister_DOWN_Value = 60;
 800093a:	4b2a      	ldr	r3, [pc, #168]	; (80009e4 <dcmotor_pwm_manual_control+0x1f0>)
 800093c:	223c      	movs	r2, #60	; 0x3c
 800093e:	801a      	strh	r2, [r3, #0]
		}

		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, ChannelControlRegister_DOWN_Value);
 8000940:	4b28      	ldr	r3, [pc, #160]	; (80009e4 <dcmotor_pwm_manual_control+0x1f0>)
 8000942:	881a      	ldrh	r2, [r3, #0]
 8000944:	4b24      	ldr	r3, [pc, #144]	; (80009d8 <dcmotor_pwm_manual_control+0x1e4>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	635a      	str	r2, [r3, #52]	; 0x34

		dcmotor_ledbar_control(Get_Current_ChannelControlRegister_Value());
 800094a:	f000 f84d 	bl	80009e8 <Get_Current_ChannelControlRegister_Value>
 800094e:	4603      	mov	r3, r0
 8000950:	4618      	mov	r0, r3
 8000952:	f000 f859 	bl	8000a08 <dcmotor_ledbar_control>
	}

	// BUTTON3: 정회전 역회전 반전
	if (Get_Button(BUTTON3_GPIO_Port, BUTTON3_Pin, 3) == BUTTON_PRESS)
 8000956:	2203      	movs	r2, #3
 8000958:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800095c:	481c      	ldr	r0, [pc, #112]	; (80009d0 <dcmotor_pwm_manual_control+0x1dc>)
 800095e:	f7ff fe29 	bl	80005b4 <Get_Button>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d12c      	bne.n	80009c2 <dcmotor_pwm_manual_control+0x1ce>
	{
		if (!forward_backwrd_dcmotor) // 역방향 회전중이라면
 8000968:	4b18      	ldr	r3, [pc, #96]	; (80009cc <dcmotor_pwm_manual_control+0x1d8>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d114      	bne.n	800099a <dcmotor_pwm_manual_control+0x1a6>
		{
			forward_backwrd_dcmotor = 1;
 8000970:	4b16      	ldr	r3, [pc, #88]	; (80009cc <dcmotor_pwm_manual_control+0x1d8>)
 8000972:	2201      	movs	r2, #1
 8000974:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8000976:	2201      	movs	r2, #1
 8000978:	f44f 7180 	mov.w	r1, #256	; 0x100
 800097c:	4814      	ldr	r0, [pc, #80]	; (80009d0 <dcmotor_pwm_manual_control+0x1dc>)
 800097e:	f002 fdf1 	bl	8003564 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000988:	4811      	ldr	r0, [pc, #68]	; (80009d0 <dcmotor_pwm_manual_control+0x1dc>)
 800098a:	f002 fdeb 	bl	8003564 <HAL_GPIO_WritePin>

			FAN_ROTATE_DERECTION_LED_control(forward_backwrd_dcmotor);
 800098e:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <dcmotor_pwm_manual_control+0x1d8>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	4618      	mov	r0, r3
 8000994:	f000 f864 	bl	8000a60 <FAN_ROTATE_DERECTION_LED_control>
			FAN_ROTATE_DERECTION_LED_control(forward_backwrd_dcmotor);
		}

	}

}
 8000998:	e013      	b.n	80009c2 <dcmotor_pwm_manual_control+0x1ce>
			forward_backwrd_dcmotor = 0;
 800099a:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <dcmotor_pwm_manual_control+0x1d8>)
 800099c:	2200      	movs	r2, #0
 800099e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009a6:	480a      	ldr	r0, [pc, #40]	; (80009d0 <dcmotor_pwm_manual_control+0x1dc>)
 80009a8:	f002 fddc 	bl	8003564 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 80009ac:	2201      	movs	r2, #1
 80009ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009b2:	4807      	ldr	r0, [pc, #28]	; (80009d0 <dcmotor_pwm_manual_control+0x1dc>)
 80009b4:	f002 fdd6 	bl	8003564 <HAL_GPIO_WritePin>
			FAN_ROTATE_DERECTION_LED_control(forward_backwrd_dcmotor);
 80009b8:	4b04      	ldr	r3, [pc, #16]	; (80009cc <dcmotor_pwm_manual_control+0x1d8>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	4618      	mov	r0, r3
 80009be:	f000 f84f 	bl	8000a60 <FAN_ROTATE_DERECTION_LED_control>
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200000a4 	.word	0x200000a4
 80009cc:	200000a5 	.word	0x200000a5
 80009d0:	40021000 	.word	0x40021000
 80009d4:	40020400 	.word	0x40020400
 80009d8:	200003b4 	.word	0x200003b4
 80009dc:	40020c00 	.word	0x40020c00
 80009e0:	200000a0 	.word	0x200000a0
 80009e4:	200000a2 	.word	0x200000a2

080009e8 <Get_Current_ChannelControlRegister_Value>:

uint16_t Get_Current_ChannelControlRegister_Value(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
	uint16_t result;
	result = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_1);
 80009ee:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <Get_Current_ChannelControlRegister_Value+0x1c>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009f4:	80fb      	strh	r3, [r7, #6]
	return result;
 80009f6:	88fb      	ldrh	r3, [r7, #6]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	200003b4 	.word	0x200003b4

08000a08 <dcmotor_ledbar_control>:

void dcmotor_ledbar_control(uint16_t Current_ChannelControlRegister_Value)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	80fb      	strh	r3, [r7, #6]
	int ledbar_level;

	ledbar_level = (Current_ChannelControlRegister_Value - 44) / 8;
 8000a12:	88fb      	ldrh	r3, [r7, #6]
 8000a14:	3b2c      	subs	r3, #44	; 0x2c
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	da00      	bge.n	8000a1c <dcmotor_ledbar_control+0x14>
 8000a1a:	3307      	adds	r3, #7
 8000a1c:	10db      	asrs	r3, r3, #3
 8000a1e:	60bb      	str	r3, [r7, #8]

	HAL_GPIO_WritePin(GPIOD, 0xff, 0);
 8000a20:	2200      	movs	r2, #0
 8000a22:	21ff      	movs	r1, #255	; 0xff
 8000a24:	480d      	ldr	r0, [pc, #52]	; (8000a5c <dcmotor_ledbar_control+0x54>)
 8000a26:	f002 fd9d 	bl	8003564 <HAL_GPIO_WritePin>

	for (int i = 0; i < ledbar_level; i++)
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	e00c      	b.n	8000a4a <dcmotor_ledbar_control+0x42>
	{
		HAL_GPIO_WritePin(GPIOD, 0x00|(0x80 >> i), 1);
 8000a30:	2280      	movs	r2, #128	; 0x80
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	fa42 f303 	asr.w	r3, r2, r3
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4807      	ldr	r0, [pc, #28]	; (8000a5c <dcmotor_ledbar_control+0x54>)
 8000a40:	f002 fd90 	bl	8003564 <HAL_GPIO_WritePin>
	for (int i = 0; i < ledbar_level; i++)
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	3301      	adds	r3, #1
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	68fa      	ldr	r2, [r7, #12]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	dbee      	blt.n	8000a30 <dcmotor_ledbar_control+0x28>
	}
}
 8000a52:	bf00      	nop
 8000a54:	bf00      	nop
 8000a56:	3710      	adds	r7, #16
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40020c00 	.word	0x40020c00

08000a60 <FAN_ROTATE_DERECTION_LED_control>:

void FAN_ROTATE_DERECTION_LED_control(uint8_t forward_backwrd_dcmotor)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	71fb      	strb	r3, [r7, #7]
	if (!forward_backwrd_dcmotor) // 역방향 회전 중이라면
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d10c      	bne.n	8000a8a <FAN_ROTATE_DERECTION_LED_control+0x2a>
	{
		if (TIM10_10ms_fan_rotate_direction_led >= 5) // 50ms마다 점멸
 8000a70:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <FAN_ROTATE_DERECTION_LED_control+0x4c>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b04      	cmp	r3, #4
 8000a76:	dd14      	ble.n	8000aa2 <FAN_ROTATE_DERECTION_LED_control+0x42>
		{
			TIM10_10ms_fan_rotate_direction_led = 0;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <FAN_ROTATE_DERECTION_LED_control+0x4c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(FAN_ROTATE_DERECTION_LED_GPIO_Port, FAN_ROTATE_DERECTION_LED_Pin);
 8000a7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a82:	480b      	ldr	r0, [pc, #44]	; (8000ab0 <FAN_ROTATE_DERECTION_LED_control+0x50>)
 8000a84:	f002 fd87 	bl	8003596 <HAL_GPIO_TogglePin>
		{
			TIM10_10ms_fan_rotate_direction_led = 0;
			HAL_GPIO_TogglePin(FAN_ROTATE_DERECTION_LED_GPIO_Port, FAN_ROTATE_DERECTION_LED_Pin);
		}
	}
}
 8000a88:	e00b      	b.n	8000aa2 <FAN_ROTATE_DERECTION_LED_control+0x42>
		if (TIM10_10ms_fan_rotate_direction_led >= 10) // 100ms마다 점멸
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <FAN_ROTATE_DERECTION_LED_control+0x4c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2b09      	cmp	r3, #9
 8000a90:	dd07      	ble.n	8000aa2 <FAN_ROTATE_DERECTION_LED_control+0x42>
			TIM10_10ms_fan_rotate_direction_led = 0;
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <FAN_ROTATE_DERECTION_LED_control+0x4c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(FAN_ROTATE_DERECTION_LED_GPIO_Port, FAN_ROTATE_DERECTION_LED_Pin);
 8000a98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a9c:	4804      	ldr	r0, [pc, #16]	; (8000ab0 <FAN_ROTATE_DERECTION_LED_control+0x50>)
 8000a9e:	f002 fd7a 	bl	8003596 <HAL_GPIO_TogglePin>
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000a30 	.word	0x20000a30
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <lcd_command>:
#endif

}

void lcd_command(uint8_t command)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af02      	add	r7, sp, #8
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = command & 0xf0;
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	f023 030f 	bic.w	r3, r3, #15
 8000ac4:	73fb      	strb	r3, [r7, #15]
	low_nibble = (command<<4) & 0xf0;
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	011b      	lsls	r3, r3, #4
 8000aca:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 8000acc:	7bfb      	ldrb	r3, [r7, #15]
 8000ace:	f043 030c 	orr.w	r3, r3, #12
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 8000ad6:	7bfb      	ldrb	r3, [r7, #15]
 8000ad8:	f043 0308 	orr.w	r3, r3, #8
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 8000ae0:	7bbb      	ldrb	r3, [r7, #14]
 8000ae2:	f043 030c 	orr.w	r3, r3, #12
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 8000aea:	7bbb      	ldrb	r3, [r7, #14]
 8000aec:	f043 0308 	orr.w	r3, r3, #8
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 8000af4:	bf00      	nop
 8000af6:	f107 0208 	add.w	r2, r7, #8
 8000afa:	2364      	movs	r3, #100	; 0x64
 8000afc:	9300      	str	r3, [sp, #0]
 8000afe:	2304      	movs	r3, #4
 8000b00:	214e      	movs	r1, #78	; 0x4e
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <lcd_command+0x64>)
 8000b04:	f002 fea6 	bl	8003854 <HAL_I2C_Master_Transmit>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d1f3      	bne.n	8000af6 <lcd_command+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 8000b0e:	bf00      	nop
}
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200002d0 	.word	0x200002d0

08000b1c <lcd_data>:

// 1 byte write... 딱 한개의 캐릭터만 찍는 것이다.
void lcd_data(uint8_t data)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af02      	add	r7, sp, #8
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = data & 0xf0;
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	f023 030f 	bic.w	r3, r3, #15
 8000b2c:	73fb      	strb	r3, [r7, #15]
	low_nibble = (data<<4) & 0xf0;
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	011b      	lsls	r3, r3, #4
 8000b32:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8000b34:	7bfb      	ldrb	r3, [r7, #15]
 8000b36:	f043 030d 	orr.w	r3, r3, #13
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 8000b3e:	7bfb      	ldrb	r3, [r7, #15]
 8000b40:	f043 0309 	orr.w	r3, r3, #9
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8000b48:	7bbb      	ldrb	r3, [r7, #14]
 8000b4a:	f043 030d 	orr.w	r3, r3, #13
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 8000b52:	7bbb      	ldrb	r3, [r7, #14]
 8000b54:	f043 0309 	orr.w	r3, r3, #9
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 8000b5c:	bf00      	nop
 8000b5e:	f107 0208 	add.w	r2, r7, #8
 8000b62:	2364      	movs	r3, #100	; 0x64
 8000b64:	9300      	str	r3, [sp, #0]
 8000b66:	2304      	movs	r3, #4
 8000b68:	214e      	movs	r1, #78	; 0x4e
 8000b6a:	4805      	ldr	r0, [pc, #20]	; (8000b80 <lcd_data+0x64>)
 8000b6c:	f002 fe72 	bl	8003854 <HAL_I2C_Master_Transmit>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d1f3      	bne.n	8000b5e <lcd_data+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 8000b76:	bf00      	nop
}
 8000b78:	3710      	adds	r7, #16
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200002d0 	.word	0x200002d0

08000b84 <i2c_lcd_init>:

// lcd 초기화
void i2c_lcd_init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0

	lcd_command(0x33);
 8000b88:	2033      	movs	r0, #51	; 0x33
 8000b8a:	f7ff ff93 	bl	8000ab4 <lcd_command>
	lcd_command(0x32);
 8000b8e:	2032      	movs	r0, #50	; 0x32
 8000b90:	f7ff ff90 	bl	8000ab4 <lcd_command>
	lcd_command(0x28);	//Function Set 4-bit mode
 8000b94:	2028      	movs	r0, #40	; 0x28
 8000b96:	f7ff ff8d 	bl	8000ab4 <lcd_command>
	lcd_command(DISPLAY_ON);
 8000b9a:	200c      	movs	r0, #12
 8000b9c:	f7ff ff8a 	bl	8000ab4 <lcd_command>
	lcd_command(0x06);	//Entry mode set
 8000ba0:	2006      	movs	r0, #6
 8000ba2:	f7ff ff87 	bl	8000ab4 <lcd_command>
	lcd_command(CLEAR_DISPLAY);
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	f7ff ff84 	bl	8000ab4 <lcd_command>
	HAL_Delay(2);
 8000bac:	2002      	movs	r0, #2
 8000bae:	f001 fe25 	bl	80027fc <HAL_Delay>
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <lcd_string>:

// null을 만날때 까지 string을 LCD에 출력
void lcd_string(uint8_t *str)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
	while(*str) // 널문자를 만날 때까지
 8000bbe:	e006      	b.n	8000bce <lcd_string+0x18>
	{
		lcd_data(*str++);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	1c5a      	adds	r2, r3, #1
 8000bc4:	607a      	str	r2, [r7, #4]
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ffa7 	bl	8000b1c <lcd_data>
	while(*str) // 널문자를 만날 때까지
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d1f4      	bne.n	8000bc0 <lcd_string+0xa>
	}
}
 8000bd6:	bf00      	nop
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <move_cursor>:

// 해당 줄,col으로 이동 하는 함수
void move_cursor(uint8_t row, uint8_t column)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	460a      	mov	r2, r1
 8000bea:	71fb      	strb	r3, [r7, #7]
 8000bec:	4613      	mov	r3, r2
 8000bee:	71bb      	strb	r3, [r7, #6]
	lcd_command(0x80 | row<<6 | column);
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	019b      	lsls	r3, r3, #6
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	79bb      	ldrb	r3, [r7, #6]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff ff56 	bl	8000ab4 <lcd_command>
	return;
 8000c08:	bf00      	nop
}
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <led_all_on>:

	fp[func_index]();
}

void led_all_on(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|
//			GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, 1);
	HAL_GPIO_WritePin(GPIOD, 0xff, 1);
 8000c14:	2201      	movs	r2, #1
 8000c16:	21ff      	movs	r1, #255	; 0xff
 8000c18:	4802      	ldr	r0, [pc, #8]	; (8000c24 <led_all_on+0x14>)
 8000c1a:	f002 fca3 	bl	8003564 <HAL_GPIO_WritePin>
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40020c00 	.word	0x40020c00

08000c28 <led_all_off>:

void led_all_off(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|
//				GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, 0);
	HAL_GPIO_WritePin(GPIOD, 0xff, 0);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	21ff      	movs	r1, #255	; 0xff
 8000c30:	4802      	ldr	r0, [pc, #8]	; (8000c3c <led_all_off+0x14>)
 8000c32:	f002 fc97 	bl	8003564 <HAL_GPIO_WritePin>
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40020c00 	.word	0x40020c00

08000c40 <led_on_up>:

void led_on_up(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
	//	static int i = 0;
	int i = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	607b      	str	r3, [r7, #4]
	t1ms_counter = 0;
 8000c4a:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <led_on_up+0x50>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]

	led_all_off();
 8000c50:	f7ff ffea 	bl	8000c28 <led_all_off>

	while(i < 8)
 8000c54:	e014      	b.n	8000c80 <led_on_up+0x40>
	{
		if (t1ms_counter >= 200)
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <led_on_up+0x50>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2bc7      	cmp	r3, #199	; 0xc7
 8000c5c:	dd10      	ble.n	8000c80 <led_on_up+0x40>
		{
			t1ms_counter = 0;
 8000c5e:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <led_on_up+0x50>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
			led_all_off();
 8000c64:	f7ff ffe0 	bl	8000c28 <led_all_off>
			HAL_GPIO_WritePin(GPIOD, 0x01 << i++, 1);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	1c5a      	adds	r2, r3, #1
 8000c6c:	607a      	str	r2, [r7, #4]
 8000c6e:	2201      	movs	r2, #1
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	2201      	movs	r2, #1
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4806      	ldr	r0, [pc, #24]	; (8000c94 <led_on_up+0x54>)
 8000c7c:	f002 fc72 	bl	8003564 <HAL_GPIO_WritePin>
	while(i < 8)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2b07      	cmp	r3, #7
 8000c84:	dde7      	ble.n	8000c56 <led_on_up+0x16>
		}
	}
}
 8000c86:	bf00      	nop
 8000c88:	bf00      	nop
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000a24 	.word	0x20000a24
 8000c94:	40020c00 	.word	0x40020c00

08000c98 <led_on_down>:

void led_on_down(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
	int i = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	607b      	str	r3, [r7, #4]
	t1ms_counter = 0;
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <led_on_down+0x50>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]

	led_all_off();
 8000ca8:	f7ff ffbe 	bl	8000c28 <led_all_off>

	while(i < 8)
 8000cac:	e014      	b.n	8000cd8 <led_on_down+0x40>
	{
		if (t1ms_counter >= 200)
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <led_on_down+0x50>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2bc7      	cmp	r3, #199	; 0xc7
 8000cb4:	dd10      	ble.n	8000cd8 <led_on_down+0x40>
		{
			t1ms_counter = 0;
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <led_on_down+0x50>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
			led_all_off();
 8000cbc:	f7ff ffb4 	bl	8000c28 <led_all_off>
			HAL_GPIO_WritePin(GPIOD, 0x80 >> i++, 1);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	1c5a      	adds	r2, r3, #1
 8000cc4:	607a      	str	r2, [r7, #4]
 8000cc6:	2280      	movs	r2, #128	; 0x80
 8000cc8:	fa42 f303 	asr.w	r3, r2, r3
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	2201      	movs	r2, #1
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4806      	ldr	r0, [pc, #24]	; (8000cec <led_on_down+0x54>)
 8000cd4:	f002 fc46 	bl	8003564 <HAL_GPIO_WritePin>
	while(i < 8)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2b07      	cmp	r3, #7
 8000cdc:	dde7      	ble.n	8000cae <led_on_down+0x16>
		}
	}
}
 8000cde:	bf00      	nop
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000a24 	.word	0x20000a24
 8000cec:	40020c00 	.word	0x40020c00

08000cf0 <led_keepon_up>:

void led_keepon_up(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
	int i = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]
	t1ms_counter = 0;
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <led_keepon_up+0x4c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]

	led_all_off();
 8000d00:	f7ff ff92 	bl	8000c28 <led_all_off>

	while (i < 8)
 8000d04:	e012      	b.n	8000d2c <led_keepon_up+0x3c>
	{
		if (t1ms_counter >= 200)
 8000d06:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <led_keepon_up+0x4c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2bc7      	cmp	r3, #199	; 0xc7
 8000d0c:	dd0e      	ble.n	8000d2c <led_keepon_up+0x3c>
		{
			t1ms_counter = 0;
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <led_keepon_up+0x4c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, 0x01 << i++, 1);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	1c5a      	adds	r2, r3, #1
 8000d18:	607a      	str	r2, [r7, #4]
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	2201      	movs	r2, #1
 8000d24:	4619      	mov	r1, r3
 8000d26:	4806      	ldr	r0, [pc, #24]	; (8000d40 <led_keepon_up+0x50>)
 8000d28:	f002 fc1c 	bl	8003564 <HAL_GPIO_WritePin>
	while (i < 8)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2b07      	cmp	r3, #7
 8000d30:	dde9      	ble.n	8000d06 <led_keepon_up+0x16>
		}
	}
}
 8000d32:	bf00      	nop
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000a24 	.word	0x20000a24
 8000d40:	40020c00 	.word	0x40020c00

08000d44 <led_keepon_down>:

void led_keepon_down(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
	int i = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	607b      	str	r3, [r7, #4]
	t1ms_counter = 0;
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <led_keepon_down+0x4c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]

	led_all_off();
 8000d54:	f7ff ff68 	bl	8000c28 <led_all_off>

	while (i < 8)
 8000d58:	e012      	b.n	8000d80 <led_keepon_down+0x3c>
	{
		if (t1ms_counter >= 200)
 8000d5a:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <led_keepon_down+0x4c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2bc7      	cmp	r3, #199	; 0xc7
 8000d60:	dd0e      	ble.n	8000d80 <led_keepon_down+0x3c>
		{
			t1ms_counter = 0;
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <led_keepon_down+0x4c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, 0x80 >> i++, 1);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	1c5a      	adds	r2, r3, #1
 8000d6c:	607a      	str	r2, [r7, #4]
 8000d6e:	2280      	movs	r2, #128	; 0x80
 8000d70:	fa42 f303 	asr.w	r3, r2, r3
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	2201      	movs	r2, #1
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4806      	ldr	r0, [pc, #24]	; (8000d94 <led_keepon_down+0x50>)
 8000d7c:	f002 fbf2 	bl	8003564 <HAL_GPIO_WritePin>
	while (i < 8)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b07      	cmp	r3, #7
 8000d84:	dde9      	ble.n	8000d5a <led_keepon_down+0x16>
		}
	}
}
 8000d86:	bf00      	nop
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000a24 	.word	0x20000a24
 8000d94:	40020c00 	.word	0x40020c00

08000d98 <led_flower_on>:

void led_flower_on(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
	int i = 0, delay = 300;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000da6:	603b      	str	r3, [r7, #0]
	t1ms_counter = 0;
 8000da8:	4b19      	ldr	r3, [pc, #100]	; (8000e10 <led_flower_on+0x78>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]

	led_all_off();
 8000dae:	f7ff ff3b 	bl	8000c28 <led_all_off>

	while(i < 4)
 8000db2:	e024      	b.n	8000dfe <led_flower_on+0x66>
	{
		if (t1ms_counter >= delay)
 8000db4:	4b16      	ldr	r3, [pc, #88]	; (8000e10 <led_flower_on+0x78>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	683a      	ldr	r2, [r7, #0]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	dc1f      	bgt.n	8000dfe <led_flower_on+0x66>
		{
			t1ms_counter = 0;
 8000dbe:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <led_flower_on+0x78>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, 0x01 << (4 + i), 1);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3304      	adds	r3, #4
 8000dc8:	2201      	movs	r2, #1
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	480f      	ldr	r0, [pc, #60]	; (8000e14 <led_flower_on+0x7c>)
 8000dd6:	f002 fbc5 	bl	8003564 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, 0x01 << (3 - i), 1);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f1c3 0303 	rsb	r3, r3, #3
 8000de0:	2201      	movs	r2, #1
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	2201      	movs	r2, #1
 8000dea:	4619      	mov	r1, r3
 8000dec:	4809      	ldr	r0, [pc, #36]	; (8000e14 <led_flower_on+0x7c>)
 8000dee:	f002 fbb9 	bl	8003564 <HAL_GPIO_WritePin>
			i++;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	3301      	adds	r3, #1
 8000df6:	607b      	str	r3, [r7, #4]
			delay += 100;
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	3364      	adds	r3, #100	; 0x64
 8000dfc:	603b      	str	r3, [r7, #0]
	while(i < 4)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2b03      	cmp	r3, #3
 8000e02:	ddd7      	ble.n	8000db4 <led_flower_on+0x1c>
		}
	}
}
 8000e04:	bf00      	nop
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000a24 	.word	0x20000a24
 8000e14:	40020c00 	.word	0x40020c00

08000e18 <led_flower_off>:

void led_flower_off(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
	int i = 0, delay = 700;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8000e26:	603b      	str	r3, [r7, #0]
	t1ms_counter = 0;
 8000e28:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <led_flower_off+0x74>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]

	led_all_on();
 8000e2e:	f7ff feef 	bl	8000c10 <led_all_on>

	while(i < 4)
 8000e32:	e023      	b.n	8000e7c <led_flower_off+0x64>
	{
		if (t1ms_counter >= delay)
 8000e34:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <led_flower_off+0x74>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	683a      	ldr	r2, [r7, #0]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	dc1e      	bgt.n	8000e7c <led_flower_off+0x64>
		{
			t1ms_counter = 0;
 8000e3e:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <led_flower_off+0x74>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, 0x01 << (0 + i), 0);
 8000e44:	2201      	movs	r2, #1
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	2200      	movs	r2, #0
 8000e50:	4619      	mov	r1, r3
 8000e52:	480f      	ldr	r0, [pc, #60]	; (8000e90 <led_flower_off+0x78>)
 8000e54:	f002 fb86 	bl	8003564 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, 0x01 << (7 - i), 0);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f1c3 0307 	rsb	r3, r3, #7
 8000e5e:	2201      	movs	r2, #1
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	2200      	movs	r2, #0
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4809      	ldr	r0, [pc, #36]	; (8000e90 <led_flower_off+0x78>)
 8000e6c:	f002 fb7a 	bl	8003564 <HAL_GPIO_WritePin>
			i++;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3301      	adds	r3, #1
 8000e74:	607b      	str	r3, [r7, #4]
			delay -= 100;
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	3b64      	subs	r3, #100	; 0x64
 8000e7a:	603b      	str	r3, [r7, #0]
	while(i < 4)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2b03      	cmp	r3, #3
 8000e80:	ddd8      	ble.n	8000e34 <led_flower_off+0x1c>
		}
	}
}
 8000e82:	bf00      	nop
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000a24 	.word	0x20000a24
 8000e90:	40020c00 	.word	0x40020c00

08000e94 <HAL_STSTICK_Handler>:
// call by SysTick_Handler of stm32f4xx_it.c
// ARM default timer
// enter here every 1ms
volatile int t1ms_counter = 0;
void HAL_STSTICK_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
	t1ms_counter++; // 1ms timer
 8000e98:	4b04      	ldr	r3, [pc, #16]	; (8000eac <HAL_STSTICK_Handler+0x18>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	4a03      	ldr	r2, [pc, #12]	; (8000eac <HAL_STSTICK_Handler+0x18>)
 8000ea0:	6013      	str	r3, [r2, #0]
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	20000a24 	.word	0x20000a24

08000eb0 <HAL_TIM_PeriodElapsedCallback>:
volatile int TIM10_10ms_counter = 0;
volatile int TIM10_10ms_ultrasonic = 0;
volatile int TIM10_10ms_fan_rotate_direction_led = 0;
volatile int TIM10_10ms_fan_auto_mode = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a0e      	ldr	r2, [pc, #56]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d113      	bne.n	8000eea <HAL_TIM_PeriodElapsedCallback+0x3a>
	{
		TIM10_10ms_counter++; // timer for LED
 8000ec2:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	4a0c      	ldr	r2, [pc, #48]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000eca:	6013      	str	r3, [r2, #0]
		TIM10_10ms_ultrasonic++; // timer for ultrasonic trigger
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000ed4:	6013      	str	r3, [r2, #0]
		TIM10_10ms_fan_rotate_direction_led++; // timer for fan_rotate_direction_led toggle
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	3301      	adds	r3, #1
 8000edc:	4a09      	ldr	r2, [pc, #36]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000ede:	6013      	str	r3, [r2, #0]
		TIM10_10ms_fan_auto_mode++; // timer for Auto mode fan remain time check
 8000ee0:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000ee8:	6013      	str	r3, [r2, #0]
	}
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	40014400 	.word	0x40014400
 8000efc:	20000a28 	.word	0x20000a28
 8000f00:	20000a2c 	.word	0x20000a2c
 8000f04:	20000a30 	.word	0x20000a30
 8000f08:	20000a34 	.word	0x20000a34

08000f0c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000f14:	1d39      	adds	r1, r7, #4
 8000f16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	4803      	ldr	r0, [pc, #12]	; (8000f2c <__io_putchar+0x20>)
 8000f1e:	f005 fb4e 	bl	80065be <HAL_UART_Transmit>

  return ch;
 8000f22:	687b      	ldr	r3, [r7, #4]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	2000048c 	.word	0x2000048c

08000f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f34:	f001 fbf0 	bl	8002718 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f38:	f000 f85a 	bl	8000ff0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3c:	f000 fb3e 	bl	80015bc <MX_GPIO_Init>
  MX_ETH_Init();
 8000f40:	f000 f8c0 	bl	80010c4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000f44:	f000 fab8 	bl	80014b8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f48:	f000 fb0a 	bl	8001560 <MX_USB_OTG_FS_PCD_Init>
  MX_USART6_UART_Init();
 8000f4c:	f000 fade 	bl	800150c <MX_USART6_UART_Init>
  MX_TIM10_Init();
 8000f50:	f000 fa6a 	bl	8001428 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000f54:	f000 fa8c 	bl	8001470 <MX_TIM11_Init>
  MX_TIM3_Init();
 8000f58:	f000 f99c 	bl	8001294 <MX_TIM3_Init>
  MX_I2C1_Init();
 8000f5c:	f000 f900 	bl	8001160 <MX_I2C1_Init>
  MX_TIM4_Init();
 8000f60:	f000 f9ec 	bl	800133c <MX_TIM4_Init>
  MX_TIM2_Init();
 8000f64:	f000 f93c 	bl	80011e0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  printf("main() start!!\n");
 8000f68:	4816      	ldr	r0, [pc, #88]	; (8000fc4 <main+0x94>)
 8000f6a:	f006 fef9 	bl	8007d60 <puts>

  DHT11_Init();
 8000f6e:	f7ff fb11 	bl	8000594 <DHT11_Init>
  i2c_lcd_init();
 8000f72:	f7ff fe07 	bl	8000b84 <i2c_lcd_init>

  HAL_UART_Receive_IT(&huart3, &rx_data, 1); // RX huart3�????????? ?��?��?��?�� interrupt ?��?��?��
 8000f76:	2201      	movs	r2, #1
 8000f78:	4913      	ldr	r1, [pc, #76]	; (8000fc8 <main+0x98>)
 8000f7a:	4814      	ldr	r0, [pc, #80]	; (8000fcc <main+0x9c>)
 8000f7c:	f005 fbb1 	bl	80066e2 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1); // RX huart6�????????? ?��?��?��?�� interrupt ?��?��?��
 8000f80:	2201      	movs	r2, #1
 8000f82:	4913      	ldr	r1, [pc, #76]	; (8000fd0 <main+0xa0>)
 8000f84:	4813      	ldr	r0, [pc, #76]	; (8000fd4 <main+0xa4>)
 8000f86:	f005 fbac 	bl	80066e2 <HAL_UART_Receive_IT>

  HAL_TIM_Base_Start_IT(&htim10); // add_kenGwon_1011
 8000f8a:	4813      	ldr	r0, [pc, #76]	; (8000fd8 <main+0xa8>)
 8000f8c:	f003 fdea 	bl	8004b64 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11); // add_kenGwon_1011
 8000f90:	4812      	ldr	r0, [pc, #72]	; (8000fdc <main+0xac>)
 8000f92:	f003 fde7 	bl	8004b64 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1); // for count pulse(InputCapture between rising edge & falling edge) add_kenGwon_1012
 8000f96:	2100      	movs	r1, #0
 8000f98:	4811      	ldr	r0, [pc, #68]	; (8000fe0 <main+0xb0>)
 8000f9a:	f004 f941 	bl	8005220 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1); // for DC motor PWM control add_kenGwon_1013
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4810      	ldr	r0, [pc, #64]	; (8000fe4 <main+0xb4>)
 8000fa2:	f003 ffd7 	bl	8004f54 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //for SERVO motor PWM control add_kenGwon_1013
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	480f      	ldr	r0, [pc, #60]	; (8000fe8 <main+0xb8>)
 8000faa:	f003 fe9b 	bl	8004ce4 <HAL_TIM_PWM_Start>
//  i2c_lcd_main();
//  DHT11_main();
//  servo_motor_test_main();
//  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 1);

  TIM10_10ms_counter = 0;
 8000fae:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <main+0xbc>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]

  while (1)
  {
	  pc_command_processing();
 8000fb4:	f001 f96e 	bl	8002294 <pc_command_processing>
	  bt_command_processing();
 8000fb8:	f001 fad4 	bl	8002564 <bt_command_processing>

//	  DHT11_processing();
//	  ultrasonic_processing();

//	  dcmotor_pwm_control();
	  dcmotor_processing();
 8000fbc:	f7ff fb32 	bl	8000624 <dcmotor_processing>
	  pc_command_processing();
 8000fc0:	e7f8      	b.n	8000fb4 <main+0x84>
 8000fc2:	bf00      	nop
 8000fc4:	08008ecc 	.word	0x08008ecc
 8000fc8:	20000a20 	.word	0x20000a20
 8000fcc:	2000048c 	.word	0x2000048c
 8000fd0:	20000a21 	.word	0x20000a21
 8000fd4:	200004d0 	.word	0x200004d0
 8000fd8:	200003fc 	.word	0x200003fc
 8000fdc:	20000444 	.word	0x20000444
 8000fe0:	2000036c 	.word	0x2000036c
 8000fe4:	200003b4 	.word	0x200003b4
 8000fe8:	20000324 	.word	0x20000324
 8000fec:	20000a28 	.word	0x20000a28

08000ff0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b094      	sub	sp, #80	; 0x50
 8000ff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff6:	f107 0320 	add.w	r3, r7, #32
 8000ffa:	2230      	movs	r2, #48	; 0x30
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f006 fe38 	bl	8007c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001014:	2300      	movs	r3, #0
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	4b28      	ldr	r3, [pc, #160]	; (80010bc <SystemClock_Config+0xcc>)
 800101a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101c:	4a27      	ldr	r2, [pc, #156]	; (80010bc <SystemClock_Config+0xcc>)
 800101e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001022:	6413      	str	r3, [r2, #64]	; 0x40
 8001024:	4b25      	ldr	r3, [pc, #148]	; (80010bc <SystemClock_Config+0xcc>)
 8001026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001030:	2300      	movs	r3, #0
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	4b22      	ldr	r3, [pc, #136]	; (80010c0 <SystemClock_Config+0xd0>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a21      	ldr	r2, [pc, #132]	; (80010c0 <SystemClock_Config+0xd0>)
 800103a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800103e:	6013      	str	r3, [r2, #0]
 8001040:	4b1f      	ldr	r3, [pc, #124]	; (80010c0 <SystemClock_Config+0xd0>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800104c:	2301      	movs	r3, #1
 800104e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001050:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001056:	2302      	movs	r3, #2
 8001058:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800105a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800105e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001060:	2304      	movs	r3, #4
 8001062:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001064:	23a8      	movs	r3, #168	; 0xa8
 8001066:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001068:	2302      	movs	r3, #2
 800106a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800106c:	2307      	movs	r3, #7
 800106e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001070:	f107 0320 	add.w	r3, r7, #32
 8001074:	4618      	mov	r0, r3
 8001076:	f003 f88d 	bl	8004194 <HAL_RCC_OscConfig>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001080:	f000 fbca 	bl	8001818 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001084:	230f      	movs	r3, #15
 8001086:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001088:	2302      	movs	r3, #2
 800108a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001090:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001094:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001096:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800109a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	2105      	movs	r1, #5
 80010a2:	4618      	mov	r0, r3
 80010a4:	f003 faee 	bl	8004684 <HAL_RCC_ClockConfig>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010ae:	f000 fbb3 	bl	8001818 <Error_Handler>
  }
}
 80010b2:	bf00      	nop
 80010b4:	3750      	adds	r7, #80	; 0x50
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40007000 	.word	0x40007000

080010c4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80010c8:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <MX_ETH_Init+0x84>)
 80010ca:	4a20      	ldr	r2, [pc, #128]	; (800114c <MX_ETH_Init+0x88>)
 80010cc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80010ce:	4b20      	ldr	r3, [pc, #128]	; (8001150 <MX_ETH_Init+0x8c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80010d4:	4b1e      	ldr	r3, [pc, #120]	; (8001150 <MX_ETH_Init+0x8c>)
 80010d6:	2280      	movs	r2, #128	; 0x80
 80010d8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80010da:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <MX_ETH_Init+0x8c>)
 80010dc:	22e1      	movs	r2, #225	; 0xe1
 80010de:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80010e0:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <MX_ETH_Init+0x8c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80010e6:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <MX_ETH_Init+0x8c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80010ec:	4b18      	ldr	r3, [pc, #96]	; (8001150 <MX_ETH_Init+0x8c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <MX_ETH_Init+0x84>)
 80010f4:	4a16      	ldr	r2, [pc, #88]	; (8001150 <MX_ETH_Init+0x8c>)
 80010f6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80010f8:	4b13      	ldr	r3, [pc, #76]	; (8001148 <MX_ETH_Init+0x84>)
 80010fa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80010fe:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <MX_ETH_Init+0x84>)
 8001102:	4a14      	ldr	r2, [pc, #80]	; (8001154 <MX_ETH_Init+0x90>)
 8001104:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <MX_ETH_Init+0x84>)
 8001108:	4a13      	ldr	r2, [pc, #76]	; (8001158 <MX_ETH_Init+0x94>)
 800110a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800110c:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <MX_ETH_Init+0x84>)
 800110e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001112:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001114:	480c      	ldr	r0, [pc, #48]	; (8001148 <MX_ETH_Init+0x84>)
 8001116:	f001 fd39 	bl	8002b8c <HAL_ETH_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001120:	f000 fb7a 	bl	8001818 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001124:	2238      	movs	r2, #56	; 0x38
 8001126:	2100      	movs	r1, #0
 8001128:	480c      	ldr	r0, [pc, #48]	; (800115c <MX_ETH_Init+0x98>)
 800112a:	f006 fda3 	bl	8007c74 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800112e:	4b0b      	ldr	r3, [pc, #44]	; (800115c <MX_ETH_Init+0x98>)
 8001130:	2221      	movs	r2, #33	; 0x21
 8001132:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001134:	4b09      	ldr	r3, [pc, #36]	; (800115c <MX_ETH_Init+0x98>)
 8001136:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800113a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800113c:	4b07      	ldr	r3, [pc, #28]	; (800115c <MX_ETH_Init+0x98>)
 800113e:	2200      	movs	r2, #0
 8001140:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000220 	.word	0x20000220
 800114c:	40028000 	.word	0x40028000
 8001150:	20000a38 	.word	0x20000a38
 8001154:	20000180 	.word	0x20000180
 8001158:	200000e0 	.word	0x200000e0
 800115c:	200000a8 	.word	0x200000a8

08001160 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001164:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <MX_I2C1_Init+0x74>)
 8001166:	4a1c      	ldr	r2, [pc, #112]	; (80011d8 <MX_I2C1_Init+0x78>)
 8001168:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800116a:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <MX_I2C1_Init+0x74>)
 800116c:	4a1b      	ldr	r2, [pc, #108]	; (80011dc <MX_I2C1_Init+0x7c>)
 800116e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001170:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <MX_I2C1_Init+0x74>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001176:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <MX_I2C1_Init+0x74>)
 8001178:	2200      	movs	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800117c:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <MX_I2C1_Init+0x74>)
 800117e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001182:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001184:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <MX_I2C1_Init+0x74>)
 8001186:	2200      	movs	r2, #0
 8001188:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800118a:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <MX_I2C1_Init+0x74>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001190:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <MX_I2C1_Init+0x74>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001196:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <MX_I2C1_Init+0x74>)
 8001198:	2200      	movs	r2, #0
 800119a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800119c:	480d      	ldr	r0, [pc, #52]	; (80011d4 <MX_I2C1_Init+0x74>)
 800119e:	f002 fa15 	bl	80035cc <HAL_I2C_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011a8:	f000 fb36 	bl	8001818 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011ac:	2100      	movs	r1, #0
 80011ae:	4809      	ldr	r0, [pc, #36]	; (80011d4 <MX_I2C1_Init+0x74>)
 80011b0:	f002 fe57 	bl	8003e62 <HAL_I2CEx_ConfigAnalogFilter>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80011ba:	f000 fb2d 	bl	8001818 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011be:	2100      	movs	r1, #0
 80011c0:	4804      	ldr	r0, [pc, #16]	; (80011d4 <MX_I2C1_Init+0x74>)
 80011c2:	f002 fe8a 	bl	8003eda <HAL_I2CEx_ConfigDigitalFilter>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80011cc:	f000 fb24 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	200002d0 	.word	0x200002d0
 80011d8:	40005400 	.word	0x40005400
 80011dc:	000186a0 	.word	0x000186a0

080011e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	; 0x28
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e6:	f107 0320 	add.w	r3, r7, #32
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
 80011fc:	611a      	str	r2, [r3, #16]
 80011fe:	615a      	str	r2, [r3, #20]
 8001200:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001202:	4b23      	ldr	r3, [pc, #140]	; (8001290 <MX_TIM2_Init+0xb0>)
 8001204:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001208:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 800120a:	4b21      	ldr	r3, [pc, #132]	; (8001290 <MX_TIM2_Init+0xb0>)
 800120c:	f240 628f 	movw	r2, #1679	; 0x68f
 8001210:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001212:	4b1f      	ldr	r3, [pc, #124]	; (8001290 <MX_TIM2_Init+0xb0>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001218:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <MX_TIM2_Init+0xb0>)
 800121a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800121e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001220:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <MX_TIM2_Init+0xb0>)
 8001222:	2200      	movs	r2, #0
 8001224:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001226:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <MX_TIM2_Init+0xb0>)
 8001228:	2200      	movs	r2, #0
 800122a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800122c:	4818      	ldr	r0, [pc, #96]	; (8001290 <MX_TIM2_Init+0xb0>)
 800122e:	f003 fd09 	bl	8004c44 <HAL_TIM_PWM_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001238:	f000 faee 	bl	8001818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800123c:	2300      	movs	r3, #0
 800123e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001240:	2300      	movs	r3, #0
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001244:	f107 0320 	add.w	r3, r7, #32
 8001248:	4619      	mov	r1, r3
 800124a:	4811      	ldr	r0, [pc, #68]	; (8001290 <MX_TIM2_Init+0xb0>)
 800124c:	f005 f8da 	bl	8006404 <HAL_TIMEx_MasterConfigSynchronization>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001256:	f000 fadf 	bl	8001818 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800125a:	2360      	movs	r3, #96	; 0x60
 800125c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 800125e:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001262:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800126c:	1d3b      	adds	r3, r7, #4
 800126e:	2200      	movs	r2, #0
 8001270:	4619      	mov	r1, r3
 8001272:	4807      	ldr	r0, [pc, #28]	; (8001290 <MX_TIM2_Init+0xb0>)
 8001274:	f004 faa0 	bl	80057b8 <HAL_TIM_PWM_ConfigChannel>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800127e:	f000 facb 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001282:	4803      	ldr	r0, [pc, #12]	; (8001290 <MX_TIM2_Init+0xb0>)
 8001284:	f000 fcde 	bl	8001c44 <HAL_TIM_MspPostInit>

}
 8001288:	bf00      	nop
 800128a:	3728      	adds	r7, #40	; 0x28
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000324 	.word	0x20000324

08001294 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800129a:	f107 0310 	add.w	r3, r7, #16
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80012a4:	463b      	mov	r3, r7
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012b0:	4b20      	ldr	r3, [pc, #128]	; (8001334 <MX_TIM3_Init+0xa0>)
 80012b2:	4a21      	ldr	r2, [pc, #132]	; (8001338 <MX_TIM3_Init+0xa4>)
 80012b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80012b6:	4b1f      	ldr	r3, [pc, #124]	; (8001334 <MX_TIM3_Init+0xa0>)
 80012b8:	2253      	movs	r2, #83	; 0x53
 80012ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012bc:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <MX_TIM3_Init+0xa0>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012c2:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <MX_TIM3_Init+0xa0>)
 80012c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ca:	4b1a      	ldr	r3, [pc, #104]	; (8001334 <MX_TIM3_Init+0xa0>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d0:	4b18      	ldr	r3, [pc, #96]	; (8001334 <MX_TIM3_Init+0xa0>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80012d6:	4817      	ldr	r0, [pc, #92]	; (8001334 <MX_TIM3_Init+0xa0>)
 80012d8:	f003 ff52 	bl	8005180 <HAL_TIM_IC_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80012e2:	f000 fa99 	bl	8001818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012ee:	f107 0310 	add.w	r3, r7, #16
 80012f2:	4619      	mov	r1, r3
 80012f4:	480f      	ldr	r0, [pc, #60]	; (8001334 <MX_TIM3_Init+0xa0>)
 80012f6:	f005 f885 	bl	8006404 <HAL_TIMEx_MasterConfigSynchronization>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001300:	f000 fa8a 	bl	8001818 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001304:	230a      	movs	r3, #10
 8001306:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001308:	2301      	movs	r3, #1
 800130a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800130c:	2300      	movs	r3, #0
 800130e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001314:	463b      	mov	r3, r7
 8001316:	2200      	movs	r2, #0
 8001318:	4619      	mov	r1, r3
 800131a:	4806      	ldr	r0, [pc, #24]	; (8001334 <MX_TIM3_Init+0xa0>)
 800131c:	f004 f9b0 	bl	8005680 <HAL_TIM_IC_ConfigChannel>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001326:	f000 fa77 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	2000036c 	.word	0x2000036c
 8001338:	40000400 	.word	0x40000400

0800133c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08e      	sub	sp, #56	; 0x38
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001342:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001350:	f107 0320 	add.w	r3, r7, #32
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
 8001368:	615a      	str	r2, [r3, #20]
 800136a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800136c:	4b2c      	ldr	r3, [pc, #176]	; (8001420 <MX_TIM4_Init+0xe4>)
 800136e:	4a2d      	ldr	r2, [pc, #180]	; (8001424 <MX_TIM4_Init+0xe8>)
 8001370:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 8001372:	4b2b      	ldr	r3, [pc, #172]	; (8001420 <MX_TIM4_Init+0xe4>)
 8001374:	f240 3247 	movw	r2, #839	; 0x347
 8001378:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137a:	4b29      	ldr	r3, [pc, #164]	; (8001420 <MX_TIM4_Init+0xe4>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8001380:	4b27      	ldr	r3, [pc, #156]	; (8001420 <MX_TIM4_Init+0xe4>)
 8001382:	2263      	movs	r2, #99	; 0x63
 8001384:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001386:	4b26      	ldr	r3, [pc, #152]	; (8001420 <MX_TIM4_Init+0xe4>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800138c:	4b24      	ldr	r3, [pc, #144]	; (8001420 <MX_TIM4_Init+0xe4>)
 800138e:	2200      	movs	r2, #0
 8001390:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001392:	4823      	ldr	r0, [pc, #140]	; (8001420 <MX_TIM4_Init+0xe4>)
 8001394:	f003 fb96 	bl	8004ac4 <HAL_TIM_Base_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800139e:	f000 fa3b 	bl	8001818 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ac:	4619      	mov	r1, r3
 80013ae:	481c      	ldr	r0, [pc, #112]	; (8001420 <MX_TIM4_Init+0xe4>)
 80013b0:	f004 fac4 	bl	800593c <HAL_TIM_ConfigClockSource>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80013ba:	f000 fa2d 	bl	8001818 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80013be:	4818      	ldr	r0, [pc, #96]	; (8001420 <MX_TIM4_Init+0xe4>)
 80013c0:	f003 fc40 	bl	8004c44 <HAL_TIM_PWM_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80013ca:	f000 fa25 	bl	8001818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ce:	2300      	movs	r3, #0
 80013d0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013d6:	f107 0320 	add.w	r3, r7, #32
 80013da:	4619      	mov	r1, r3
 80013dc:	4810      	ldr	r0, [pc, #64]	; (8001420 <MX_TIM4_Init+0xe4>)
 80013de:	f005 f811 	bl	8006404 <HAL_TIMEx_MasterConfigSynchronization>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80013e8:	f000 fa16 	bl	8001818 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ec:	2360      	movs	r3, #96	; 0x60
 80013ee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 70-1;
 80013f0:	2345      	movs	r3, #69	; 0x45
 80013f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80013f8:	2304      	movs	r3, #4
 80013fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	2200      	movs	r2, #0
 8001400:	4619      	mov	r1, r3
 8001402:	4807      	ldr	r0, [pc, #28]	; (8001420 <MX_TIM4_Init+0xe4>)
 8001404:	f004 f9d8 	bl	80057b8 <HAL_TIM_PWM_ConfigChannel>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800140e:	f000 fa03 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001412:	4803      	ldr	r0, [pc, #12]	; (8001420 <MX_TIM4_Init+0xe4>)
 8001414:	f000 fc16 	bl	8001c44 <HAL_TIM_MspPostInit>

}
 8001418:	bf00      	nop
 800141a:	3738      	adds	r7, #56	; 0x38
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	200003b4 	.word	0x200003b4
 8001424:	40000800 	.word	0x40000800

08001428 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800142c:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <MX_TIM10_Init+0x40>)
 800142e:	4a0f      	ldr	r2, [pc, #60]	; (800146c <MX_TIM10_Init+0x44>)
 8001430:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 8001432:	4b0d      	ldr	r3, [pc, #52]	; (8001468 <MX_TIM10_Init+0x40>)
 8001434:	22a7      	movs	r2, #167	; 0xa7
 8001436:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001438:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <MX_TIM10_Init+0x40>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 800143e:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <MX_TIM10_Init+0x40>)
 8001440:	f242 720f 	movw	r2, #9999	; 0x270f
 8001444:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001446:	4b08      	ldr	r3, [pc, #32]	; (8001468 <MX_TIM10_Init+0x40>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <MX_TIM10_Init+0x40>)
 800144e:	2200      	movs	r2, #0
 8001450:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001452:	4805      	ldr	r0, [pc, #20]	; (8001468 <MX_TIM10_Init+0x40>)
 8001454:	f003 fb36 	bl	8004ac4 <HAL_TIM_Base_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800145e:	f000 f9db 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	200003fc 	.word	0x200003fc
 800146c:	40014400 	.word	0x40014400

08001470 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001474:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <MX_TIM11_Init+0x40>)
 8001476:	4a0f      	ldr	r2, [pc, #60]	; (80014b4 <MX_TIM11_Init+0x44>)
 8001478:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 800147a:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <MX_TIM11_Init+0x40>)
 800147c:	22a7      	movs	r2, #167	; 0xa7
 800147e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001480:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <MX_TIM11_Init+0x40>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001486:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <MX_TIM11_Init+0x40>)
 8001488:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800148c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800148e:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <MX_TIM11_Init+0x40>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <MX_TIM11_Init+0x40>)
 8001496:	2200      	movs	r2, #0
 8001498:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800149a:	4805      	ldr	r0, [pc, #20]	; (80014b0 <MX_TIM11_Init+0x40>)
 800149c:	f003 fb12 	bl	8004ac4 <HAL_TIM_Base_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80014a6:	f000 f9b7 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000444 	.word	0x20000444
 80014b4:	40014800 	.word	0x40014800

080014b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014bc:	4b11      	ldr	r3, [pc, #68]	; (8001504 <MX_USART3_UART_Init+0x4c>)
 80014be:	4a12      	ldr	r2, [pc, #72]	; (8001508 <MX_USART3_UART_Init+0x50>)
 80014c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <MX_USART3_UART_Init+0x4c>)
 80014c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80014c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <MX_USART3_UART_Init+0x4c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <MX_USART3_UART_Init+0x4c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <MX_USART3_UART_Init+0x4c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <MX_USART3_UART_Init+0x4c>)
 80014de:	220c      	movs	r2, #12
 80014e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e2:	4b08      	ldr	r3, [pc, #32]	; (8001504 <MX_USART3_UART_Init+0x4c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <MX_USART3_UART_Init+0x4c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014ee:	4805      	ldr	r0, [pc, #20]	; (8001504 <MX_USART3_UART_Init+0x4c>)
 80014f0:	f005 f818 	bl	8006524 <HAL_UART_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80014fa:	f000 f98d 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	2000048c 	.word	0x2000048c
 8001508:	40004800 	.word	0x40004800

0800150c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001510:	4b11      	ldr	r3, [pc, #68]	; (8001558 <MX_USART6_UART_Init+0x4c>)
 8001512:	4a12      	ldr	r2, [pc, #72]	; (800155c <MX_USART6_UART_Init+0x50>)
 8001514:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001516:	4b10      	ldr	r3, [pc, #64]	; (8001558 <MX_USART6_UART_Init+0x4c>)
 8001518:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800151c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800151e:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <MX_USART6_UART_Init+0x4c>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001524:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <MX_USART6_UART_Init+0x4c>)
 8001526:	2200      	movs	r2, #0
 8001528:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800152a:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <MX_USART6_UART_Init+0x4c>)
 800152c:	2200      	movs	r2, #0
 800152e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001530:	4b09      	ldr	r3, [pc, #36]	; (8001558 <MX_USART6_UART_Init+0x4c>)
 8001532:	220c      	movs	r2, #12
 8001534:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001536:	4b08      	ldr	r3, [pc, #32]	; (8001558 <MX_USART6_UART_Init+0x4c>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <MX_USART6_UART_Init+0x4c>)
 800153e:	2200      	movs	r2, #0
 8001540:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001542:	4805      	ldr	r0, [pc, #20]	; (8001558 <MX_USART6_UART_Init+0x4c>)
 8001544:	f004 ffee 	bl	8006524 <HAL_UART_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800154e:	f000 f963 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	200004d0 	.word	0x200004d0
 800155c:	40011400 	.word	0x40011400

08001560 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001564:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001566:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800156a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800156e:	2204      	movs	r2, #4
 8001570:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001574:	2202      	movs	r2, #2
 8001576:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001578:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800157a:	2200      	movs	r2, #0
 800157c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001580:	2202      	movs	r2, #2
 8001582:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001586:	2201      	movs	r2, #1
 8001588:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800158c:	2200      	movs	r2, #0
 800158e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001590:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001592:	2200      	movs	r2, #0
 8001594:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001596:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001598:	2201      	movs	r2, #1
 800159a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800159e:	2200      	movs	r2, #0
 80015a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80015a2:	4805      	ldr	r0, [pc, #20]	; (80015b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015a4:	f002 fcd8 	bl	8003f58 <HAL_PCD_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80015ae:	f000 f933 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000514 	.word	0x20000514

080015bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08e      	sub	sp, #56	; 0x38
 80015c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	60da      	str	r2, [r3, #12]
 80015d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	623b      	str	r3, [r7, #32]
 80015d6:	4b88      	ldr	r3, [pc, #544]	; (80017f8 <MX_GPIO_Init+0x23c>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a87      	ldr	r2, [pc, #540]	; (80017f8 <MX_GPIO_Init+0x23c>)
 80015dc:	f043 0304 	orr.w	r3, r3, #4
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b85      	ldr	r3, [pc, #532]	; (80017f8 <MX_GPIO_Init+0x23c>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0304 	and.w	r3, r3, #4
 80015ea:	623b      	str	r3, [r7, #32]
 80015ec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
 80015f2:	4b81      	ldr	r3, [pc, #516]	; (80017f8 <MX_GPIO_Init+0x23c>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a80      	ldr	r2, [pc, #512]	; (80017f8 <MX_GPIO_Init+0x23c>)
 80015f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b7e      	ldr	r3, [pc, #504]	; (80017f8 <MX_GPIO_Init+0x23c>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001606:	61fb      	str	r3, [r7, #28]
 8001608:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	61bb      	str	r3, [r7, #24]
 800160e:	4b7a      	ldr	r3, [pc, #488]	; (80017f8 <MX_GPIO_Init+0x23c>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a79      	ldr	r2, [pc, #484]	; (80017f8 <MX_GPIO_Init+0x23c>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b77      	ldr	r3, [pc, #476]	; (80017f8 <MX_GPIO_Init+0x23c>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	61bb      	str	r3, [r7, #24]
 8001624:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
 800162a:	4b73      	ldr	r3, [pc, #460]	; (80017f8 <MX_GPIO_Init+0x23c>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a72      	ldr	r2, [pc, #456]	; (80017f8 <MX_GPIO_Init+0x23c>)
 8001630:	f043 0302 	orr.w	r3, r3, #2
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b70      	ldr	r3, [pc, #448]	; (80017f8 <MX_GPIO_Init+0x23c>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
 8001646:	4b6c      	ldr	r3, [pc, #432]	; (80017f8 <MX_GPIO_Init+0x23c>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4a6b      	ldr	r2, [pc, #428]	; (80017f8 <MX_GPIO_Init+0x23c>)
 800164c:	f043 0320 	orr.w	r3, r3, #32
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4b69      	ldr	r3, [pc, #420]	; (80017f8 <MX_GPIO_Init+0x23c>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0320 	and.w	r3, r3, #32
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	4b65      	ldr	r3, [pc, #404]	; (80017f8 <MX_GPIO_Init+0x23c>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a64      	ldr	r2, [pc, #400]	; (80017f8 <MX_GPIO_Init+0x23c>)
 8001668:	f043 0310 	orr.w	r3, r3, #16
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b62      	ldr	r3, [pc, #392]	; (80017f8 <MX_GPIO_Init+0x23c>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0310 	and.w	r3, r3, #16
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	4b5e      	ldr	r3, [pc, #376]	; (80017f8 <MX_GPIO_Init+0x23c>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a5d      	ldr	r2, [pc, #372]	; (80017f8 <MX_GPIO_Init+0x23c>)
 8001684:	f043 0308 	orr.w	r3, r3, #8
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b5b      	ldr	r3, [pc, #364]	; (80017f8 <MX_GPIO_Init+0x23c>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0308 	and.w	r3, r3, #8
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	607b      	str	r3, [r7, #4]
 800169a:	4b57      	ldr	r3, [pc, #348]	; (80017f8 <MX_GPIO_Init+0x23c>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a56      	ldr	r2, [pc, #344]	; (80017f8 <MX_GPIO_Init+0x23c>)
 80016a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b54      	ldr	r3, [pc, #336]	; (80017f8 <MX_GPIO_Init+0x23c>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2101      	movs	r1, #1
 80016b6:	4851      	ldr	r0, [pc, #324]	; (80017fc <MX_GPIO_Init+0x240>)
 80016b8:	f001 ff54 	bl	8003564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80016bc:	2200      	movs	r2, #0
 80016be:	f244 0181 	movw	r1, #16513	; 0x4081
 80016c2:	484f      	ldr	r0, [pc, #316]	; (8001800 <MX_GPIO_Init+0x244>)
 80016c4:	f001 ff4e 	bl	8003564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, GPIO_PIN_RESET);
 80016c8:	2200      	movs	r2, #0
 80016ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ce:	484d      	ldr	r0, [pc, #308]	; (8001804 <MX_GPIO_Init+0x248>)
 80016d0:	f001 ff48 	bl	8003564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, IN1_DCMOTOR_Pin|IN2_DCMOTOR_Pin|FAN_ROTATE_DERECTION_LED_Pin, GPIO_PIN_RESET);
 80016d4:	2200      	movs	r2, #0
 80016d6:	f44f 510c 	mov.w	r1, #8960	; 0x2300
 80016da:	484b      	ldr	r0, [pc, #300]	; (8001808 <MX_GPIO_Init+0x24c>)
 80016dc:	f001 ff42 	bl	8003564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80016e0:	2200      	movs	r2, #0
 80016e2:	2140      	movs	r1, #64	; 0x40
 80016e4:	4849      	ldr	r0, [pc, #292]	; (800180c <MX_GPIO_Init+0x250>)
 80016e6:	f001 ff3d 	bl	8003564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80016ea:	2200      	movs	r2, #0
 80016ec:	21ff      	movs	r1, #255	; 0xff
 80016ee:	4848      	ldr	r0, [pc, #288]	; (8001810 <MX_GPIO_Init+0x254>)
 80016f0:	f001 ff38 	bl	8003564 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80016f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001708:	4619      	mov	r1, r3
 800170a:	4842      	ldr	r0, [pc, #264]	; (8001814 <MX_GPIO_Init+0x258>)
 800170c:	f001 fd66 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8001710:	2301      	movs	r3, #1
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001714:	2301      	movs	r3, #1
 8001716:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171c:	2300      	movs	r3, #0
 800171e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8001720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001724:	4619      	mov	r1, r3
 8001726:	4835      	ldr	r0, [pc, #212]	; (80017fc <MX_GPIO_Init+0x240>)
 8001728:	f001 fd58 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800172c:	f244 0381 	movw	r3, #16513	; 0x4081
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001732:	2301      	movs	r3, #1
 8001734:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173a:	2300      	movs	r3, #0
 800173c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001742:	4619      	mov	r1, r3
 8001744:	482e      	ldr	r0, [pc, #184]	; (8001800 <MX_GPIO_Init+0x244>)
 8001746:	f001 fd49 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ULTRASONIC_TRIGGER_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIGGER_Pin;
 800174a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001750:	2301      	movs	r3, #1
 8001752:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001758:	2300      	movs	r3, #0
 800175a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ULTRASONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 800175c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001760:	4619      	mov	r1, r3
 8001762:	4828      	ldr	r0, [pc, #160]	; (8001804 <MX_GPIO_Init+0x248>)
 8001764:	f001 fd3a 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_DCMOTOR_Pin IN2_DCMOTOR_Pin FAN_ROTATE_DERECTION_LED_Pin */
  GPIO_InitStruct.Pin = IN1_DCMOTOR_Pin|IN2_DCMOTOR_Pin|FAN_ROTATE_DERECTION_LED_Pin;
 8001768:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176e:	2301      	movs	r3, #1
 8001770:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001776:	2300      	movs	r3, #0
 8001778:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800177a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800177e:	4619      	mov	r1, r3
 8001780:	4821      	ldr	r0, [pc, #132]	; (8001808 <MX_GPIO_Init+0x24c>)
 8001782:	f001 fd2b 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin|BUTTON0_Pin;
 8001786:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 800178a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800178c:	2300      	movs	r3, #0
 800178e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001794:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001798:	4619      	mov	r1, r3
 800179a:	481b      	ldr	r0, [pc, #108]	; (8001808 <MX_GPIO_Init+0x24c>)
 800179c:	f001 fd1e 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80017a0:	2340      	movs	r3, #64	; 0x40
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a4:	2301      	movs	r3, #1
 80017a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ac:	2300      	movs	r3, #0
 80017ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80017b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b4:	4619      	mov	r1, r3
 80017b6:	4815      	ldr	r0, [pc, #84]	; (800180c <MX_GPIO_Init+0x250>)
 80017b8:	f001 fd10 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80017bc:	2380      	movs	r3, #128	; 0x80
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c0:	2300      	movs	r3, #0
 80017c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017cc:	4619      	mov	r1, r3
 80017ce:	480f      	ldr	r0, [pc, #60]	; (800180c <MX_GPIO_Init+0x250>)
 80017d0:	f001 fd04 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80017d4:	23ff      	movs	r3, #255	; 0xff
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d8:	2301      	movs	r3, #1
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2300      	movs	r3, #0
 80017e2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e8:	4619      	mov	r1, r3
 80017ea:	4809      	ldr	r0, [pc, #36]	; (8001810 <MX_GPIO_Init+0x254>)
 80017ec:	f001 fcf6 	bl	80031dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017f0:	bf00      	nop
 80017f2:	3738      	adds	r7, #56	; 0x38
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40020000 	.word	0x40020000
 8001800:	40020400 	.word	0x40020400
 8001804:	40021400 	.word	0x40021400
 8001808:	40021000 	.word	0x40021000
 800180c:	40021800 	.word	0x40021800
 8001810:	40020c00 	.word	0x40020c00
 8001814:	40020800 	.word	0x40020800

08001818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800181c:	b672      	cpsid	i
}
 800181e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001820:	e7fe      	b.n	8001820 <Error_Handler+0x8>
	...

08001824 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	4b10      	ldr	r3, [pc, #64]	; (8001870 <HAL_MspInit+0x4c>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001832:	4a0f      	ldr	r2, [pc, #60]	; (8001870 <HAL_MspInit+0x4c>)
 8001834:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001838:	6453      	str	r3, [r2, #68]	; 0x44
 800183a:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <HAL_MspInit+0x4c>)
 800183c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	603b      	str	r3, [r7, #0]
 800184a:	4b09      	ldr	r3, [pc, #36]	; (8001870 <HAL_MspInit+0x4c>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	4a08      	ldr	r2, [pc, #32]	; (8001870 <HAL_MspInit+0x4c>)
 8001850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001854:	6413      	str	r3, [r2, #64]	; 0x40
 8001856:	4b06      	ldr	r3, [pc, #24]	; (8001870 <HAL_MspInit+0x4c>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185e:	603b      	str	r3, [r7, #0]
 8001860:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	40023800 	.word	0x40023800

08001874 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08e      	sub	sp, #56	; 0x38
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a55      	ldr	r2, [pc, #340]	; (80019e8 <HAL_ETH_MspInit+0x174>)
 8001892:	4293      	cmp	r3, r2
 8001894:	f040 80a4 	bne.w	80019e0 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001898:	2300      	movs	r3, #0
 800189a:	623b      	str	r3, [r7, #32]
 800189c:	4b53      	ldr	r3, [pc, #332]	; (80019ec <HAL_ETH_MspInit+0x178>)
 800189e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a0:	4a52      	ldr	r2, [pc, #328]	; (80019ec <HAL_ETH_MspInit+0x178>)
 80018a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018a6:	6313      	str	r3, [r2, #48]	; 0x30
 80018a8:	4b50      	ldr	r3, [pc, #320]	; (80019ec <HAL_ETH_MspInit+0x178>)
 80018aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b0:	623b      	str	r3, [r7, #32]
 80018b2:	6a3b      	ldr	r3, [r7, #32]
 80018b4:	2300      	movs	r3, #0
 80018b6:	61fb      	str	r3, [r7, #28]
 80018b8:	4b4c      	ldr	r3, [pc, #304]	; (80019ec <HAL_ETH_MspInit+0x178>)
 80018ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018bc:	4a4b      	ldr	r2, [pc, #300]	; (80019ec <HAL_ETH_MspInit+0x178>)
 80018be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80018c2:	6313      	str	r3, [r2, #48]	; 0x30
 80018c4:	4b49      	ldr	r3, [pc, #292]	; (80019ec <HAL_ETH_MspInit+0x178>)
 80018c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018cc:	61fb      	str	r3, [r7, #28]
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	2300      	movs	r3, #0
 80018d2:	61bb      	str	r3, [r7, #24]
 80018d4:	4b45      	ldr	r3, [pc, #276]	; (80019ec <HAL_ETH_MspInit+0x178>)
 80018d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d8:	4a44      	ldr	r2, [pc, #272]	; (80019ec <HAL_ETH_MspInit+0x178>)
 80018da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80018de:	6313      	str	r3, [r2, #48]	; 0x30
 80018e0:	4b42      	ldr	r3, [pc, #264]	; (80019ec <HAL_ETH_MspInit+0x178>)
 80018e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80018e8:	61bb      	str	r3, [r7, #24]
 80018ea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	4b3e      	ldr	r3, [pc, #248]	; (80019ec <HAL_ETH_MspInit+0x178>)
 80018f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f4:	4a3d      	ldr	r2, [pc, #244]	; (80019ec <HAL_ETH_MspInit+0x178>)
 80018f6:	f043 0304 	orr.w	r3, r3, #4
 80018fa:	6313      	str	r3, [r2, #48]	; 0x30
 80018fc:	4b3b      	ldr	r3, [pc, #236]	; (80019ec <HAL_ETH_MspInit+0x178>)
 80018fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001908:	2300      	movs	r3, #0
 800190a:	613b      	str	r3, [r7, #16]
 800190c:	4b37      	ldr	r3, [pc, #220]	; (80019ec <HAL_ETH_MspInit+0x178>)
 800190e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001910:	4a36      	ldr	r2, [pc, #216]	; (80019ec <HAL_ETH_MspInit+0x178>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	6313      	str	r3, [r2, #48]	; 0x30
 8001918:	4b34      	ldr	r3, [pc, #208]	; (80019ec <HAL_ETH_MspInit+0x178>)
 800191a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	613b      	str	r3, [r7, #16]
 8001922:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001924:	2300      	movs	r3, #0
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	4b30      	ldr	r3, [pc, #192]	; (80019ec <HAL_ETH_MspInit+0x178>)
 800192a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192c:	4a2f      	ldr	r2, [pc, #188]	; (80019ec <HAL_ETH_MspInit+0x178>)
 800192e:	f043 0302 	orr.w	r3, r3, #2
 8001932:	6313      	str	r3, [r2, #48]	; 0x30
 8001934:	4b2d      	ldr	r3, [pc, #180]	; (80019ec <HAL_ETH_MspInit+0x178>)
 8001936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001940:	2300      	movs	r3, #0
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	4b29      	ldr	r3, [pc, #164]	; (80019ec <HAL_ETH_MspInit+0x178>)
 8001946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001948:	4a28      	ldr	r2, [pc, #160]	; (80019ec <HAL_ETH_MspInit+0x178>)
 800194a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800194e:	6313      	str	r3, [r2, #48]	; 0x30
 8001950:	4b26      	ldr	r3, [pc, #152]	; (80019ec <HAL_ETH_MspInit+0x178>)
 8001952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800195c:	2332      	movs	r3, #50	; 0x32
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001960:	2302      	movs	r3, #2
 8001962:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001968:	2303      	movs	r3, #3
 800196a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800196c:	230b      	movs	r3, #11
 800196e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001974:	4619      	mov	r1, r3
 8001976:	481e      	ldr	r0, [pc, #120]	; (80019f0 <HAL_ETH_MspInit+0x17c>)
 8001978:	f001 fc30 	bl	80031dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800197c:	2386      	movs	r3, #134	; 0x86
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001988:	2303      	movs	r3, #3
 800198a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800198c:	230b      	movs	r3, #11
 800198e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001994:	4619      	mov	r1, r3
 8001996:	4817      	ldr	r0, [pc, #92]	; (80019f4 <HAL_ETH_MspInit+0x180>)
 8001998:	f001 fc20 	bl	80031dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800199c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a2:	2302      	movs	r3, #2
 80019a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019aa:	2303      	movs	r3, #3
 80019ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019ae:	230b      	movs	r3, #11
 80019b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80019b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b6:	4619      	mov	r1, r3
 80019b8:	480f      	ldr	r0, [pc, #60]	; (80019f8 <HAL_ETH_MspInit+0x184>)
 80019ba:	f001 fc0f 	bl	80031dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80019be:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c4:	2302      	movs	r3, #2
 80019c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019cc:	2303      	movs	r3, #3
 80019ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019d0:	230b      	movs	r3, #11
 80019d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d8:	4619      	mov	r1, r3
 80019da:	4808      	ldr	r0, [pc, #32]	; (80019fc <HAL_ETH_MspInit+0x188>)
 80019dc:	f001 fbfe 	bl	80031dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80019e0:	bf00      	nop
 80019e2:	3738      	adds	r7, #56	; 0x38
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40028000 	.word	0x40028000
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40020800 	.word	0x40020800
 80019f4:	40020000 	.word	0x40020000
 80019f8:	40020400 	.word	0x40020400
 80019fc:	40021800 	.word	0x40021800

08001a00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	; 0x28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a19      	ldr	r2, [pc, #100]	; (8001a84 <HAL_I2C_MspInit+0x84>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d12c      	bne.n	8001a7c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <HAL_I2C_MspInit+0x88>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	4a17      	ldr	r2, [pc, #92]	; (8001a88 <HAL_I2C_MspInit+0x88>)
 8001a2c:	f043 0302 	orr.w	r3, r3, #2
 8001a30:	6313      	str	r3, [r2, #48]	; 0x30
 8001a32:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <HAL_I2C_MspInit+0x88>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	613b      	str	r3, [r7, #16]
 8001a3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a44:	2312      	movs	r3, #18
 8001a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a50:	2304      	movs	r3, #4
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	4619      	mov	r1, r3
 8001a5a:	480c      	ldr	r0, [pc, #48]	; (8001a8c <HAL_I2C_MspInit+0x8c>)
 8001a5c:	f001 fbbe 	bl	80031dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <HAL_I2C_MspInit+0x88>)
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	4a07      	ldr	r2, [pc, #28]	; (8001a88 <HAL_I2C_MspInit+0x88>)
 8001a6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a6e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a70:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <HAL_I2C_MspInit+0x88>)
 8001a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a7c:	bf00      	nop
 8001a7e:	3728      	adds	r7, #40	; 0x28
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40005400 	.word	0x40005400
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40020400 	.word	0x40020400

08001a90 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aa0:	d115      	bne.n	8001ace <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <HAL_TIM_PWM_MspInit+0x48>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	4a0b      	ldr	r2, [pc, #44]	; (8001ad8 <HAL_TIM_PWM_MspInit+0x48>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_TIM_PWM_MspInit+0x48>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	201c      	movs	r0, #28
 8001ac4:	f000 ff99 	bl	80029fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ac8:	201c      	movs	r0, #28
 8001aca:	f000 ffb2 	bl	8002a32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ace:	bf00      	nop
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40023800 	.word	0x40023800

08001adc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08a      	sub	sp, #40	; 0x28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	f107 0314 	add.w	r3, r7, #20
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a1d      	ldr	r2, [pc, #116]	; (8001b70 <HAL_TIM_IC_MspInit+0x94>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d133      	bne.n	8001b66 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	4b1c      	ldr	r3, [pc, #112]	; (8001b74 <HAL_TIM_IC_MspInit+0x98>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	4a1b      	ldr	r2, [pc, #108]	; (8001b74 <HAL_TIM_IC_MspInit+0x98>)
 8001b08:	f043 0302 	orr.w	r3, r3, #2
 8001b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0e:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <HAL_TIM_IC_MspInit+0x98>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <HAL_TIM_IC_MspInit+0x98>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a14      	ldr	r2, [pc, #80]	; (8001b74 <HAL_TIM_IC_MspInit+0x98>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2a:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <HAL_TIM_IC_MspInit+0x98>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ULTRASONIC_TIM3_CH1_Pin;
 8001b36:	2340      	movs	r3, #64	; 0x40
 8001b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b42:	2300      	movs	r3, #0
 8001b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b46:	2302      	movs	r3, #2
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULTRASONIC_TIM3_CH1_GPIO_Port, &GPIO_InitStruct);
 8001b4a:	f107 0314 	add.w	r3, r7, #20
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4809      	ldr	r0, [pc, #36]	; (8001b78 <HAL_TIM_IC_MspInit+0x9c>)
 8001b52:	f001 fb43 	bl	80031dc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2100      	movs	r1, #0
 8001b5a:	201d      	movs	r0, #29
 8001b5c:	f000 ff4d 	bl	80029fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b60:	201d      	movs	r0, #29
 8001b62:	f000 ff66 	bl	8002a32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b66:	bf00      	nop
 8001b68:	3728      	adds	r7, #40	; 0x28
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40000400 	.word	0x40000400
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40020000 	.word	0x40020000

08001b7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a2a      	ldr	r2, [pc, #168]	; (8001c34 <HAL_TIM_Base_MspInit+0xb8>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d116      	bne.n	8001bbc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]
 8001b92:	4b29      	ldr	r3, [pc, #164]	; (8001c38 <HAL_TIM_Base_MspInit+0xbc>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	4a28      	ldr	r2, [pc, #160]	; (8001c38 <HAL_TIM_Base_MspInit+0xbc>)
 8001b98:	f043 0304 	orr.w	r3, r3, #4
 8001b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9e:	4b26      	ldr	r3, [pc, #152]	; (8001c38 <HAL_TIM_Base_MspInit+0xbc>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	f003 0304 	and.w	r3, r3, #4
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001baa:	2200      	movs	r2, #0
 8001bac:	2100      	movs	r1, #0
 8001bae:	201e      	movs	r0, #30
 8001bb0:	f000 ff23 	bl	80029fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001bb4:	201e      	movs	r0, #30
 8001bb6:	f000 ff3c 	bl	8002a32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001bba:	e036      	b.n	8001c2a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a1e      	ldr	r2, [pc, #120]	; (8001c3c <HAL_TIM_Base_MspInit+0xc0>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d116      	bne.n	8001bf4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	4b1b      	ldr	r3, [pc, #108]	; (8001c38 <HAL_TIM_Base_MspInit+0xbc>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bce:	4a1a      	ldr	r2, [pc, #104]	; (8001c38 <HAL_TIM_Base_MspInit+0xbc>)
 8001bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bd6:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <HAL_TIM_Base_MspInit+0xbc>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001be2:	2200      	movs	r2, #0
 8001be4:	2100      	movs	r1, #0
 8001be6:	2019      	movs	r0, #25
 8001be8:	f000 ff07 	bl	80029fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001bec:	2019      	movs	r0, #25
 8001bee:	f000 ff20 	bl	8002a32 <HAL_NVIC_EnableIRQ>
}
 8001bf2:	e01a      	b.n	8001c2a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a11      	ldr	r2, [pc, #68]	; (8001c40 <HAL_TIM_Base_MspInit+0xc4>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d115      	bne.n	8001c2a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <HAL_TIM_Base_MspInit+0xbc>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	4a0c      	ldr	r2, [pc, #48]	; (8001c38 <HAL_TIM_Base_MspInit+0xbc>)
 8001c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <HAL_TIM_Base_MspInit+0xbc>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	201a      	movs	r0, #26
 8001c20:	f000 feeb 	bl	80029fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001c24:	201a      	movs	r0, #26
 8001c26:	f000 ff04 	bl	8002a32 <HAL_NVIC_EnableIRQ>
}
 8001c2a:	bf00      	nop
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40000800 	.word	0x40000800
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40014400 	.word	0x40014400
 8001c40:	40014800 	.word	0x40014800

08001c44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	; 0x28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c64:	d11e      	bne.n	8001ca4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	613b      	str	r3, [r7, #16]
 8001c6a:	4b22      	ldr	r3, [pc, #136]	; (8001cf4 <HAL_TIM_MspPostInit+0xb0>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	4a21      	ldr	r2, [pc, #132]	; (8001cf4 <HAL_TIM_MspPostInit+0xb0>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	6313      	str	r3, [r2, #48]	; 0x30
 8001c76:	4b1f      	ldr	r3, [pc, #124]	; (8001cf4 <HAL_TIM_MspPostInit+0xb0>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_CH1_SERVO_Pin;
 8001c82:	2320      	movs	r3, #32
 8001c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c86:	2302      	movs	r3, #2
 8001c88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c92:	2301      	movs	r3, #1
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM2_CH1_SERVO_GPIO_Port, &GPIO_InitStruct);
 8001c96:	f107 0314 	add.w	r3, r7, #20
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4816      	ldr	r0, [pc, #88]	; (8001cf8 <HAL_TIM_MspPostInit+0xb4>)
 8001c9e:	f001 fa9d 	bl	80031dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001ca2:	e023      	b.n	8001cec <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a14      	ldr	r2, [pc, #80]	; (8001cfc <HAL_TIM_MspPostInit+0xb8>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d11e      	bne.n	8001cec <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	4b10      	ldr	r3, [pc, #64]	; (8001cf4 <HAL_TIM_MspPostInit+0xb0>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	4a0f      	ldr	r2, [pc, #60]	; (8001cf4 <HAL_TIM_MspPostInit+0xb0>)
 8001cb8:	f043 0308 	orr.w	r3, r3, #8
 8001cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cbe:	4b0d      	ldr	r3, [pc, #52]	; (8001cf4 <HAL_TIM_MspPostInit+0xb0>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	f003 0308 	and.w	r3, r3, #8
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ce0:	f107 0314 	add.w	r3, r7, #20
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4806      	ldr	r0, [pc, #24]	; (8001d00 <HAL_TIM_MspPostInit+0xbc>)
 8001ce8:	f001 fa78 	bl	80031dc <HAL_GPIO_Init>
}
 8001cec:	bf00      	nop
 8001cee:	3728      	adds	r7, #40	; 0x28
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40020000 	.word	0x40020000
 8001cfc:	40000800 	.word	0x40000800
 8001d00:	40020c00 	.word	0x40020c00

08001d04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08c      	sub	sp, #48	; 0x30
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f107 031c 	add.w	r3, r7, #28
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a3a      	ldr	r2, [pc, #232]	; (8001e0c <HAL_UART_MspInit+0x108>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d135      	bne.n	8001d92 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	61bb      	str	r3, [r7, #24]
 8001d2a:	4b39      	ldr	r3, [pc, #228]	; (8001e10 <HAL_UART_MspInit+0x10c>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	4a38      	ldr	r2, [pc, #224]	; (8001e10 <HAL_UART_MspInit+0x10c>)
 8001d30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d34:	6413      	str	r3, [r2, #64]	; 0x40
 8001d36:	4b36      	ldr	r3, [pc, #216]	; (8001e10 <HAL_UART_MspInit+0x10c>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d3e:	61bb      	str	r3, [r7, #24]
 8001d40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	4b32      	ldr	r3, [pc, #200]	; (8001e10 <HAL_UART_MspInit+0x10c>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a31      	ldr	r2, [pc, #196]	; (8001e10 <HAL_UART_MspInit+0x10c>)
 8001d4c:	f043 0308 	orr.w	r3, r3, #8
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b2f      	ldr	r3, [pc, #188]	; (8001e10 <HAL_UART_MspInit+0x10c>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001d5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d64:	2302      	movs	r3, #2
 8001d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d70:	2307      	movs	r3, #7
 8001d72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d74:	f107 031c 	add.w	r3, r7, #28
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4826      	ldr	r0, [pc, #152]	; (8001e14 <HAL_UART_MspInit+0x110>)
 8001d7c:	f001 fa2e 	bl	80031dc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001d80:	2200      	movs	r2, #0
 8001d82:	2100      	movs	r1, #0
 8001d84:	2027      	movs	r0, #39	; 0x27
 8001d86:	f000 fe38 	bl	80029fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d8a:	2027      	movs	r0, #39	; 0x27
 8001d8c:	f000 fe51 	bl	8002a32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001d90:	e038      	b.n	8001e04 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART6)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a20      	ldr	r2, [pc, #128]	; (8001e18 <HAL_UART_MspInit+0x114>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d133      	bne.n	8001e04 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	4b1b      	ldr	r3, [pc, #108]	; (8001e10 <HAL_UART_MspInit+0x10c>)
 8001da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da4:	4a1a      	ldr	r2, [pc, #104]	; (8001e10 <HAL_UART_MspInit+0x10c>)
 8001da6:	f043 0320 	orr.w	r3, r3, #32
 8001daa:	6453      	str	r3, [r2, #68]	; 0x44
 8001dac:	4b18      	ldr	r3, [pc, #96]	; (8001e10 <HAL_UART_MspInit+0x10c>)
 8001dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db0:	f003 0320 	and.w	r3, r3, #32
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db8:	2300      	movs	r3, #0
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <HAL_UART_MspInit+0x10c>)
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc0:	4a13      	ldr	r2, [pc, #76]	; (8001e10 <HAL_UART_MspInit+0x10c>)
 8001dc2:	f043 0304 	orr.w	r3, r3, #4
 8001dc6:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <HAL_UART_MspInit+0x10c>)
 8001dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dd4:	23c0      	movs	r3, #192	; 0xc0
 8001dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de0:	2303      	movs	r3, #3
 8001de2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001de4:	2308      	movs	r3, #8
 8001de6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001de8:	f107 031c 	add.w	r3, r7, #28
 8001dec:	4619      	mov	r1, r3
 8001dee:	480b      	ldr	r0, [pc, #44]	; (8001e1c <HAL_UART_MspInit+0x118>)
 8001df0:	f001 f9f4 	bl	80031dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001df4:	2200      	movs	r2, #0
 8001df6:	2100      	movs	r1, #0
 8001df8:	2047      	movs	r0, #71	; 0x47
 8001dfa:	f000 fdfe 	bl	80029fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001dfe:	2047      	movs	r0, #71	; 0x47
 8001e00:	f000 fe17 	bl	8002a32 <HAL_NVIC_EnableIRQ>
}
 8001e04:	bf00      	nop
 8001e06:	3730      	adds	r7, #48	; 0x30
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40004800 	.word	0x40004800
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40020c00 	.word	0x40020c00
 8001e18:	40011400 	.word	0x40011400
 8001e1c:	40020800 	.word	0x40020800

08001e20 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08a      	sub	sp, #40	; 0x28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e40:	d13f      	bne.n	8001ec2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	4b21      	ldr	r3, [pc, #132]	; (8001ecc <HAL_PCD_MspInit+0xac>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	4a20      	ldr	r2, [pc, #128]	; (8001ecc <HAL_PCD_MspInit+0xac>)
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	6313      	str	r3, [r2, #48]	; 0x30
 8001e52:	4b1e      	ldr	r3, [pc, #120]	; (8001ecc <HAL_PCD_MspInit+0xac>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001e5e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e64:	2302      	movs	r3, #2
 8001e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e70:	230a      	movs	r3, #10
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4815      	ldr	r0, [pc, #84]	; (8001ed0 <HAL_PCD_MspInit+0xb0>)
 8001e7c:	f001 f9ae 	bl	80031dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001e80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001e8e:	f107 0314 	add.w	r3, r7, #20
 8001e92:	4619      	mov	r1, r3
 8001e94:	480e      	ldr	r0, [pc, #56]	; (8001ed0 <HAL_PCD_MspInit+0xb0>)
 8001e96:	f001 f9a1 	bl	80031dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001e9a:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <HAL_PCD_MspInit+0xac>)
 8001e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e9e:	4a0b      	ldr	r2, [pc, #44]	; (8001ecc <HAL_PCD_MspInit+0xac>)
 8001ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ea4:	6353      	str	r3, [r2, #52]	; 0x34
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <HAL_PCD_MspInit+0xac>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	4a07      	ldr	r2, [pc, #28]	; (8001ecc <HAL_PCD_MspInit+0xac>)
 8001eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb6:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <HAL_PCD_MspInit+0xac>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001ec2:	bf00      	nop
 8001ec4:	3728      	adds	r7, #40	; 0x28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40020000 	.word	0x40020000

08001ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ed8:	e7fe      	b.n	8001ed8 <NMI_Handler+0x4>

08001eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eda:	b480      	push	{r7}
 8001edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ede:	e7fe      	b.n	8001ede <HardFault_Handler+0x4>

08001ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee4:	e7fe      	b.n	8001ee4 <MemManage_Handler+0x4>

08001ee6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eea:	e7fe      	b.n	8001eea <BusFault_Handler+0x4>

08001eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <UsageFault_Handler+0x4>

08001ef2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f20:	f000 fc4c 	bl	80027bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_STSTICK_Handler(); // ADD_kenGwon_231006
 8001f24:	f7fe ffb6 	bl	8000e94 <HAL_STSTICK_Handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001f28:	bf00      	nop
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001f30:	4802      	ldr	r0, [pc, #8]	; (8001f3c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001f32:	f003 fa9d 	bl	8005470 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	200003fc 	.word	0x200003fc

08001f40 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001f44:	4802      	ldr	r0, [pc, #8]	; (8001f50 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001f46:	f003 fa93 	bl	8005470 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000444 	.word	0x20000444

08001f54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f58:	4802      	ldr	r0, [pc, #8]	; (8001f64 <TIM2_IRQHandler+0x10>)
 8001f5a:	f003 fa89 	bl	8005470 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000324 	.word	0x20000324

08001f68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f6c:	4802      	ldr	r0, [pc, #8]	; (8001f78 <TIM3_IRQHandler+0x10>)
 8001f6e:	f003 fa7f 	bl	8005470 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	2000036c 	.word	0x2000036c

08001f7c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001f80:	4802      	ldr	r0, [pc, #8]	; (8001f8c <TIM4_IRQHandler+0x10>)
 8001f82:	f003 fa75 	bl	8005470 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	200003b4 	.word	0x200003b4

08001f90 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001f94:	4802      	ldr	r0, [pc, #8]	; (8001fa0 <USART3_IRQHandler+0x10>)
 8001f96:	f004 fbd5 	bl	8006744 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	2000048c 	.word	0x2000048c

08001fa4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001fa8:	4802      	ldr	r0, [pc, #8]	; (8001fb4 <USART6_IRQHandler+0x10>)
 8001faa:	f004 fbcb 	bl	8006744 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	200004d0 	.word	0x200004d0

08001fb8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]
 8001fc8:	e00a      	b.n	8001fe0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fca:	f3af 8000 	nop.w
 8001fce:	4601      	mov	r1, r0
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	1c5a      	adds	r2, r3, #1
 8001fd4:	60ba      	str	r2, [r7, #8]
 8001fd6:	b2ca      	uxtb	r2, r1
 8001fd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	617b      	str	r3, [r7, #20]
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	dbf0      	blt.n	8001fca <_read+0x12>
  }

  return len;
 8001fe8:	687b      	ldr	r3, [r7, #4]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b086      	sub	sp, #24
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	60f8      	str	r0, [r7, #12]
 8001ffa:	60b9      	str	r1, [r7, #8]
 8001ffc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ffe:	2300      	movs	r3, #0
 8002000:	617b      	str	r3, [r7, #20]
 8002002:	e009      	b.n	8002018 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	1c5a      	adds	r2, r3, #1
 8002008:	60ba      	str	r2, [r7, #8]
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7fe ff7d 	bl	8000f0c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	3301      	adds	r3, #1
 8002016:	617b      	str	r3, [r7, #20]
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	429a      	cmp	r2, r3
 800201e:	dbf1      	blt.n	8002004 <_write+0x12>
  }
  return len;
 8002020:	687b      	ldr	r3, [r7, #4]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <_close>:

int _close(int file)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002032:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002036:	4618      	mov	r0, r3
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002052:	605a      	str	r2, [r3, #4]
  return 0;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <_isatty>:

int _isatty(int file)
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800206a:	2301      	movs	r3, #1
}
 800206c:	4618      	mov	r0, r3
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
	...

08002094 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800209c:	4a14      	ldr	r2, [pc, #80]	; (80020f0 <_sbrk+0x5c>)
 800209e:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <_sbrk+0x60>)
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020a8:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <_sbrk+0x64>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d102      	bne.n	80020b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020b0:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <_sbrk+0x64>)
 80020b2:	4a12      	ldr	r2, [pc, #72]	; (80020fc <_sbrk+0x68>)
 80020b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020b6:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <_sbrk+0x64>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4413      	add	r3, r2
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d207      	bcs.n	80020d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020c4:	f005 fdac 	bl	8007c20 <__errno>
 80020c8:	4603      	mov	r3, r0
 80020ca:	220c      	movs	r2, #12
 80020cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ce:	f04f 33ff 	mov.w	r3, #4294967295
 80020d2:	e009      	b.n	80020e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020d4:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <_sbrk+0x64>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020da:	4b07      	ldr	r3, [pc, #28]	; (80020f8 <_sbrk+0x64>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	4a05      	ldr	r2, [pc, #20]	; (80020f8 <_sbrk+0x64>)
 80020e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020e6:	68fb      	ldr	r3, [r7, #12]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	20030000 	.word	0x20030000
 80020f4:	00000400 	.word	0x00000400
 80020f8:	20000a40 	.word	0x20000a40
 80020fc:	20000dc0 	.word	0x20000dc0

08002100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002104:	4b06      	ldr	r3, [pc, #24]	; (8002120 <SystemInit+0x20>)
 8002106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210a:	4a05      	ldr	r2, [pc, #20]	; (8002120 <SystemInit+0x20>)
 800210c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <HAL_UART_RxCpltCallback>:
volatile int bt_rx_index = 0; // bt_rx_buff의 save위치
volatile int bt_newline_detect_flag = 0; // \n을 만났다는 것을 알려주는 플래그변수..


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002124:	b590      	push	{r4, r7, lr}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]

#if 1

	if (huart == &huart3)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a4c      	ldr	r2, [pc, #304]	; (8002260 <HAL_UART_RxCpltCallback+0x13c>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d160      	bne.n	80021f6 <HAL_UART_RxCpltCallback+0xd2>
	{
		if ((queue_rear+1)%QUEUE_MAX != queue_front)
 8002134:	4b4b      	ldr	r3, [pc, #300]	; (8002264 <HAL_UART_RxCpltCallback+0x140>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	1c59      	adds	r1, r3, #1
 800213a:	4b4b      	ldr	r3, [pc, #300]	; (8002268 <HAL_UART_RxCpltCallback+0x144>)
 800213c:	fb83 2301 	smull	r2, r3, r3, r1
 8002140:	10da      	asrs	r2, r3, #3
 8002142:	17cb      	asrs	r3, r1, #31
 8002144:	1ad2      	subs	r2, r2, r3
 8002146:	4613      	mov	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	1aca      	subs	r2, r1, r3
 8002150:	4b46      	ldr	r3, [pc, #280]	; (800226c <HAL_UART_RxCpltCallback+0x148>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	429a      	cmp	r2, r3
 8002156:	d049      	beq.n	80021ec <HAL_UART_RxCpltCallback+0xc8>
		{
			if (rx_index < COMMAND_LENGTH)
 8002158:	4b45      	ldr	r3, [pc, #276]	; (8002270 <HAL_UART_RxCpltCallback+0x14c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b27      	cmp	r3, #39	; 0x27
 800215e:	dc3f      	bgt.n	80021e0 <HAL_UART_RxCpltCallback+0xbc>
			{
				if (rx_data == '\n' || rx_data == '\r')
 8002160:	4b44      	ldr	r3, [pc, #272]	; (8002274 <HAL_UART_RxCpltCallback+0x150>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b0a      	cmp	r3, #10
 8002166:	d003      	beq.n	8002170 <HAL_UART_RxCpltCallback+0x4c>
 8002168:	4b42      	ldr	r3, [pc, #264]	; (8002274 <HAL_UART_RxCpltCallback+0x150>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b0d      	cmp	r3, #13
 800216e:	d124      	bne.n	80021ba <HAL_UART_RxCpltCallback+0x96>
				{
					rx_buff[queue_rear][rx_index] = '\0';
 8002170:	4b3c      	ldr	r3, [pc, #240]	; (8002264 <HAL_UART_RxCpltCallback+0x140>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4b3e      	ldr	r3, [pc, #248]	; (8002270 <HAL_UART_RxCpltCallback+0x14c>)
 8002176:	6819      	ldr	r1, [r3, #0]
 8002178:	483f      	ldr	r0, [pc, #252]	; (8002278 <HAL_UART_RxCpltCallback+0x154>)
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	4403      	add	r3, r0
 8002184:	440b      	add	r3, r1
 8002186:	2200      	movs	r2, #0
 8002188:	701a      	strb	r2, [r3, #0]
					rx_index = 0;
 800218a:	4b39      	ldr	r3, [pc, #228]	; (8002270 <HAL_UART_RxCpltCallback+0x14c>)
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
					queue_rear++;
 8002190:	4b34      	ldr	r3, [pc, #208]	; (8002264 <HAL_UART_RxCpltCallback+0x140>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	3301      	adds	r3, #1
 8002196:	4a33      	ldr	r2, [pc, #204]	; (8002264 <HAL_UART_RxCpltCallback+0x140>)
 8002198:	6013      	str	r3, [r2, #0]
					queue_rear %= QUEUE_MAX;
 800219a:	4b32      	ldr	r3, [pc, #200]	; (8002264 <HAL_UART_RxCpltCallback+0x140>)
 800219c:	6819      	ldr	r1, [r3, #0]
 800219e:	4b32      	ldr	r3, [pc, #200]	; (8002268 <HAL_UART_RxCpltCallback+0x144>)
 80021a0:	fb83 2301 	smull	r2, r3, r3, r1
 80021a4:	10da      	asrs	r2, r3, #3
 80021a6:	17cb      	asrs	r3, r1, #31
 80021a8:	1ad2      	subs	r2, r2, r3
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	1aca      	subs	r2, r1, r3
 80021b4:	4b2b      	ldr	r3, [pc, #172]	; (8002264 <HAL_UART_RxCpltCallback+0x140>)
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	e018      	b.n	80021ec <HAL_UART_RxCpltCallback+0xc8>
				}
				else
				{
					rx_buff[queue_rear][rx_index++] = rx_data;
 80021ba:	4b2a      	ldr	r3, [pc, #168]	; (8002264 <HAL_UART_RxCpltCallback+0x140>)
 80021bc:	6819      	ldr	r1, [r3, #0]
 80021be:	4b2c      	ldr	r3, [pc, #176]	; (8002270 <HAL_UART_RxCpltCallback+0x14c>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	1c53      	adds	r3, r2, #1
 80021c4:	482a      	ldr	r0, [pc, #168]	; (8002270 <HAL_UART_RxCpltCallback+0x14c>)
 80021c6:	6003      	str	r3, [r0, #0]
 80021c8:	4b2a      	ldr	r3, [pc, #168]	; (8002274 <HAL_UART_RxCpltCallback+0x150>)
 80021ca:	781c      	ldrb	r4, [r3, #0]
 80021cc:	482a      	ldr	r0, [pc, #168]	; (8002278 <HAL_UART_RxCpltCallback+0x154>)
 80021ce:	460b      	mov	r3, r1
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	440b      	add	r3, r1
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	4403      	add	r3, r0
 80021d8:	4413      	add	r3, r2
 80021da:	4622      	mov	r2, r4
 80021dc:	701a      	strb	r2, [r3, #0]
 80021de:	e005      	b.n	80021ec <HAL_UART_RxCpltCallback+0xc8>
				}
			}
			else
			{
				rx_index = 0;
 80021e0:	4b23      	ldr	r3, [pc, #140]	; (8002270 <HAL_UART_RxCpltCallback+0x14c>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
				printf("Message Overflow !!!\n");
 80021e6:	4825      	ldr	r0, [pc, #148]	; (800227c <HAL_UART_RxCpltCallback+0x158>)
 80021e8:	f005 fdba 	bl	8007d60 <puts>
		{

		}

		// 주의: 반드시 HAL_UART_Receive_IT() 함수를 call 해줘야 다음 인터럽트가 이어서 발생이 가능해진다.
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 80021ec:	2201      	movs	r2, #1
 80021ee:	4921      	ldr	r1, [pc, #132]	; (8002274 <HAL_UART_RxCpltCallback+0x150>)
 80021f0:	481b      	ldr	r0, [pc, #108]	; (8002260 <HAL_UART_RxCpltCallback+0x13c>)
 80021f2:	f004 fa76 	bl	80066e2 <HAL_UART_Receive_IT>
		// 주의: 반드시 HAL_UART_Receive_IT() 함수를 call 해줘야 다음 인터럽트가 이어서 발생이 가능해진다.
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);
	}
#endif

	if (huart == &huart6) // Bluetooth와 연결된 uart
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a21      	ldr	r2, [pc, #132]	; (8002280 <HAL_UART_RxCpltCallback+0x15c>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d12c      	bne.n	8002258 <HAL_UART_RxCpltCallback+0x134>
	{
		if (bt_rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 80021fe:	4b21      	ldr	r3, [pc, #132]	; (8002284 <HAL_UART_RxCpltCallback+0x160>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2b27      	cmp	r3, #39	; 0x27
 8002204:	dc1d      	bgt.n	8002242 <HAL_UART_RxCpltCallback+0x11e>
		{
			if(bt_rx_data == '\n' || bt_rx_data == '\r')
 8002206:	4b20      	ldr	r3, [pc, #128]	; (8002288 <HAL_UART_RxCpltCallback+0x164>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b0a      	cmp	r3, #10
 800220c:	d003      	beq.n	8002216 <HAL_UART_RxCpltCallback+0xf2>
 800220e:	4b1e      	ldr	r3, [pc, #120]	; (8002288 <HAL_UART_RxCpltCallback+0x164>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b0d      	cmp	r3, #13
 8002214:	d10b      	bne.n	800222e <HAL_UART_RxCpltCallback+0x10a>
			{
				bt_rx_buff[bt_rx_index] = 0; // '\0'
 8002216:	4b1b      	ldr	r3, [pc, #108]	; (8002284 <HAL_UART_RxCpltCallback+0x160>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a1c      	ldr	r2, [pc, #112]	; (800228c <HAL_UART_RxCpltCallback+0x168>)
 800221c:	2100      	movs	r1, #0
 800221e:	54d1      	strb	r1, [r2, r3]
				bt_newline_detect_flag = 1;
 8002220:	4b1b      	ldr	r3, [pc, #108]	; (8002290 <HAL_UART_RxCpltCallback+0x16c>)
 8002222:	2201      	movs	r2, #1
 8002224:	601a      	str	r2, [r3, #0]
				bt_rx_index = 0; // 다음 메시지 저장을 위해서 rx_index값을 0으로 한다.
 8002226:	4b17      	ldr	r3, [pc, #92]	; (8002284 <HAL_UART_RxCpltCallback+0x160>)
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	e00f      	b.n	800224e <HAL_UART_RxCpltCallback+0x12a>
			}
			else
			{
				bt_rx_buff[bt_rx_index++] = bt_rx_data;
 800222e:	4b15      	ldr	r3, [pc, #84]	; (8002284 <HAL_UART_RxCpltCallback+0x160>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	1c5a      	adds	r2, r3, #1
 8002234:	4913      	ldr	r1, [pc, #76]	; (8002284 <HAL_UART_RxCpltCallback+0x160>)
 8002236:	600a      	str	r2, [r1, #0]
 8002238:	4a13      	ldr	r2, [pc, #76]	; (8002288 <HAL_UART_RxCpltCallback+0x164>)
 800223a:	7811      	ldrb	r1, [r2, #0]
 800223c:	4a13      	ldr	r2, [pc, #76]	; (800228c <HAL_UART_RxCpltCallback+0x168>)
 800223e:	54d1      	strb	r1, [r2, r3]
 8002240:	e005      	b.n	800224e <HAL_UART_RxCpltCallback+0x12a>
			}
		}
		else
		{
			bt_rx_index = 0;
 8002242:	4b10      	ldr	r3, [pc, #64]	; (8002284 <HAL_UART_RxCpltCallback+0x160>)
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
			printf("Message Overflow !!!\n");
 8002248:	480c      	ldr	r0, [pc, #48]	; (800227c <HAL_UART_RxCpltCallback+0x158>)
 800224a:	f005 fd89 	bl	8007d60 <puts>
		}

		// 주의: 반드시 HAL_UART_Receive_IT() 함수를 call 해줘야 다음 인터럽트가 이어서 발생이 가능해진다.
		HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);
 800224e:	2201      	movs	r2, #1
 8002250:	490d      	ldr	r1, [pc, #52]	; (8002288 <HAL_UART_RxCpltCallback+0x164>)
 8002252:	480b      	ldr	r0, [pc, #44]	; (8002280 <HAL_UART_RxCpltCallback+0x15c>)
 8002254:	f004 fa45 	bl	80066e2 <HAL_UART_Receive_IT>
	}
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	bd90      	pop	{r4, r7, pc}
 8002260:	2000048c 	.word	0x2000048c
 8002264:	20000d68 	.word	0x20000d68
 8002268:	66666667 	.word	0x66666667
 800226c:	20000d64 	.word	0x20000d64
 8002270:	20000d6c 	.word	0x20000d6c
 8002274:	20000a20 	.word	0x20000a20
 8002278:	20000a44 	.word	0x20000a44
 800227c:	08008edc 	.word	0x08008edc
 8002280:	200004d0 	.word	0x200004d0
 8002284:	20000d98 	.word	0x20000d98
 8002288:	20000a21 	.word	0x20000a21
 800228c:	20000d70 	.word	0x20000d70
 8002290:	20000d9c 	.word	0x20000d9c

08002294 <pc_command_processing>:

void pc_command_processing(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
	if (queue_front != queue_rear) // 원형쿠로 구성한게 아니기 때무네, 뉴라인 플래그가 서 있을 때만 완전한 문장이 들어왔다고 판단하고 함수가 진해오디어야 하낟.
 8002298:	4b9e      	ldr	r3, [pc, #632]	; (8002514 <pc_command_processing+0x280>)
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	4b9e      	ldr	r3, [pc, #632]	; (8002518 <pc_command_processing+0x284>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	f000 8136 	beq.w	8002512 <pc_command_processing+0x27e>
	{
		queue_front++;
 80022a6:	4b9b      	ldr	r3, [pc, #620]	; (8002514 <pc_command_processing+0x280>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	3301      	adds	r3, #1
 80022ac:	4a99      	ldr	r2, [pc, #612]	; (8002514 <pc_command_processing+0x280>)
 80022ae:	6013      	str	r3, [r2, #0]
		queue_front %= QUEUE_MAX;
 80022b0:	4b98      	ldr	r3, [pc, #608]	; (8002514 <pc_command_processing+0x280>)
 80022b2:	6819      	ldr	r1, [r3, #0]
 80022b4:	4b99      	ldr	r3, [pc, #612]	; (800251c <pc_command_processing+0x288>)
 80022b6:	fb83 2301 	smull	r2, r3, r3, r1
 80022ba:	10da      	asrs	r2, r3, #3
 80022bc:	17cb      	asrs	r3, r1, #31
 80022be:	1ad2      	subs	r2, r2, r3
 80022c0:	4613      	mov	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	1aca      	subs	r2, r1, r3
 80022ca:	4b92      	ldr	r3, [pc, #584]	; (8002514 <pc_command_processing+0x280>)
 80022cc:	601a      	str	r2, [r3, #0]
//		newline_detect_flag = 0;

		printf("%s\n", rx_buff[queue_front - 1]);
 80022ce:	4b91      	ldr	r3, [pc, #580]	; (8002514 <pc_command_processing+0x280>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	1e5a      	subs	r2, r3, #1
 80022d4:	4613      	mov	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	4a90      	ldr	r2, [pc, #576]	; (8002520 <pc_command_processing+0x28c>)
 80022de:	4413      	add	r3, r2
 80022e0:	4618      	mov	r0, r3
 80022e2:	f005 fd3d 	bl	8007d60 <puts>

		if (!strncmp(rx_buff[queue_front - 1], "led_all_on", strlen("led_all_on"))) // 느낌표가 들어갔다!! strcmp는 같으면 0을 리턴하기 때문에 if문에 진입하려먼 !not을 통해서 1(true)로 뒤집어 줘야 한다.
 80022e6:	4b8b      	ldr	r3, [pc, #556]	; (8002514 <pc_command_processing+0x280>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	1e5a      	subs	r2, r3, #1
 80022ec:	4613      	mov	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	4a8a      	ldr	r2, [pc, #552]	; (8002520 <pc_command_processing+0x28c>)
 80022f6:	4413      	add	r3, r2
 80022f8:	220a      	movs	r2, #10
 80022fa:	498a      	ldr	r1, [pc, #552]	; (8002524 <pc_command_processing+0x290>)
 80022fc:	4618      	mov	r0, r3
 80022fe:	f005 fd57 	bl	8007db0 <strncmp>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d102      	bne.n	800230e <pc_command_processing+0x7a>
		{
			led_all_on();
 8002308:	f7fe fc82 	bl	8000c10 <led_all_on>
			return;
 800230c:	e101      	b.n	8002512 <pc_command_processing+0x27e>
		}
		if (!strncmp(rx_buff[queue_front - 1], "led_all_off", strlen("led_all_off")))
 800230e:	4b81      	ldr	r3, [pc, #516]	; (8002514 <pc_command_processing+0x280>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	1e5a      	subs	r2, r3, #1
 8002314:	4613      	mov	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	4a80      	ldr	r2, [pc, #512]	; (8002520 <pc_command_processing+0x28c>)
 800231e:	4413      	add	r3, r2
 8002320:	220b      	movs	r2, #11
 8002322:	4981      	ldr	r1, [pc, #516]	; (8002528 <pc_command_processing+0x294>)
 8002324:	4618      	mov	r0, r3
 8002326:	f005 fd43 	bl	8007db0 <strncmp>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d102      	bne.n	8002336 <pc_command_processing+0xa2>
		{
			led_all_off();
 8002330:	f7fe fc7a 	bl	8000c28 <led_all_off>
			return;
 8002334:	e0ed      	b.n	8002512 <pc_command_processing+0x27e>
		}
		if (!strncmp(rx_buff[queue_front - 1], "led_on_up", strlen("led_on_up")))
 8002336:	4b77      	ldr	r3, [pc, #476]	; (8002514 <pc_command_processing+0x280>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	1e5a      	subs	r2, r3, #1
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	4a76      	ldr	r2, [pc, #472]	; (8002520 <pc_command_processing+0x28c>)
 8002346:	4413      	add	r3, r2
 8002348:	2209      	movs	r2, #9
 800234a:	4978      	ldr	r1, [pc, #480]	; (800252c <pc_command_processing+0x298>)
 800234c:	4618      	mov	r0, r3
 800234e:	f005 fd2f 	bl	8007db0 <strncmp>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d102      	bne.n	800235e <pc_command_processing+0xca>
		{
			led_on_up();
 8002358:	f7fe fc72 	bl	8000c40 <led_on_up>
			return;
 800235c:	e0d9      	b.n	8002512 <pc_command_processing+0x27e>
		}
		if (!strncmp(rx_buff[queue_front - 1], "led_on_down", strlen("led_on_down")))
 800235e:	4b6d      	ldr	r3, [pc, #436]	; (8002514 <pc_command_processing+0x280>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	1e5a      	subs	r2, r3, #1
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	4a6c      	ldr	r2, [pc, #432]	; (8002520 <pc_command_processing+0x28c>)
 800236e:	4413      	add	r3, r2
 8002370:	220b      	movs	r2, #11
 8002372:	496f      	ldr	r1, [pc, #444]	; (8002530 <pc_command_processing+0x29c>)
 8002374:	4618      	mov	r0, r3
 8002376:	f005 fd1b 	bl	8007db0 <strncmp>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d102      	bne.n	8002386 <pc_command_processing+0xf2>
		{
			led_on_down();
 8002380:	f7fe fc8a 	bl	8000c98 <led_on_down>
			return;
 8002384:	e0c5      	b.n	8002512 <pc_command_processing+0x27e>
		}
		if (!strncmp(rx_buff[queue_front - 1], "led_keepon_up", strlen("led_keepon_up")))
 8002386:	4b63      	ldr	r3, [pc, #396]	; (8002514 <pc_command_processing+0x280>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	1e5a      	subs	r2, r3, #1
 800238c:	4613      	mov	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	4a62      	ldr	r2, [pc, #392]	; (8002520 <pc_command_processing+0x28c>)
 8002396:	4413      	add	r3, r2
 8002398:	220d      	movs	r2, #13
 800239a:	4966      	ldr	r1, [pc, #408]	; (8002534 <pc_command_processing+0x2a0>)
 800239c:	4618      	mov	r0, r3
 800239e:	f005 fd07 	bl	8007db0 <strncmp>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d102      	bne.n	80023ae <pc_command_processing+0x11a>
		{
			led_keepon_up();
 80023a8:	f7fe fca2 	bl	8000cf0 <led_keepon_up>
			return;
 80023ac:	e0b1      	b.n	8002512 <pc_command_processing+0x27e>
		}
		if (!strncmp(rx_buff[queue_front - 1], "led_keepon_down", strlen("led_keepon_down")))
 80023ae:	4b59      	ldr	r3, [pc, #356]	; (8002514 <pc_command_processing+0x280>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	1e5a      	subs	r2, r3, #1
 80023b4:	4613      	mov	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	4a58      	ldr	r2, [pc, #352]	; (8002520 <pc_command_processing+0x28c>)
 80023be:	4413      	add	r3, r2
 80023c0:	220f      	movs	r2, #15
 80023c2:	495d      	ldr	r1, [pc, #372]	; (8002538 <pc_command_processing+0x2a4>)
 80023c4:	4618      	mov	r0, r3
 80023c6:	f005 fcf3 	bl	8007db0 <strncmp>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d102      	bne.n	80023d6 <pc_command_processing+0x142>
		{
			led_keepon_down();
 80023d0:	f7fe fcb8 	bl	8000d44 <led_keepon_down>
			return;
 80023d4:	e09d      	b.n	8002512 <pc_command_processing+0x27e>
		}
		if (!strncmp(rx_buff[queue_front - 1], "led_flower_on", strlen("led_flower_on")))
 80023d6:	4b4f      	ldr	r3, [pc, #316]	; (8002514 <pc_command_processing+0x280>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	1e5a      	subs	r2, r3, #1
 80023dc:	4613      	mov	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	4a4e      	ldr	r2, [pc, #312]	; (8002520 <pc_command_processing+0x28c>)
 80023e6:	4413      	add	r3, r2
 80023e8:	220d      	movs	r2, #13
 80023ea:	4954      	ldr	r1, [pc, #336]	; (800253c <pc_command_processing+0x2a8>)
 80023ec:	4618      	mov	r0, r3
 80023ee:	f005 fcdf 	bl	8007db0 <strncmp>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d102      	bne.n	80023fe <pc_command_processing+0x16a>
		{
			led_flower_on();
 80023f8:	f7fe fcce 	bl	8000d98 <led_flower_on>
			return;
 80023fc:	e089      	b.n	8002512 <pc_command_processing+0x27e>
		}
		if (!strncmp(rx_buff[queue_front - 1], "led_flower_off", strlen("led_flower_off")))
 80023fe:	4b45      	ldr	r3, [pc, #276]	; (8002514 <pc_command_processing+0x280>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	1e5a      	subs	r2, r3, #1
 8002404:	4613      	mov	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	4a44      	ldr	r2, [pc, #272]	; (8002520 <pc_command_processing+0x28c>)
 800240e:	4413      	add	r3, r2
 8002410:	220e      	movs	r2, #14
 8002412:	494b      	ldr	r1, [pc, #300]	; (8002540 <pc_command_processing+0x2ac>)
 8002414:	4618      	mov	r0, r3
 8002416:	f005 fccb 	bl	8007db0 <strncmp>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d102      	bne.n	8002426 <pc_command_processing+0x192>
		{
			led_flower_off();
 8002420:	f7fe fcfa 	bl	8000e18 <led_flower_off>
			return;
 8002424:	e075      	b.n	8002512 <pc_command_processing+0x27e>
		}


		if (!strncmp(rx_buff[queue_front - 1], "dht11time", strlen("dht11time")))
 8002426:	4b3b      	ldr	r3, [pc, #236]	; (8002514 <pc_command_processing+0x280>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	1e5a      	subs	r2, r3, #1
 800242c:	4613      	mov	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4413      	add	r3, r2
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	4a3a      	ldr	r2, [pc, #232]	; (8002520 <pc_command_processing+0x28c>)
 8002436:	4413      	add	r3, r2
 8002438:	2209      	movs	r2, #9
 800243a:	4942      	ldr	r1, [pc, #264]	; (8002544 <pc_command_processing+0x2b0>)
 800243c:	4618      	mov	r0, r3
 800243e:	f005 fcb7 	bl	8007db0 <strncmp>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d110      	bne.n	800246a <pc_command_processing+0x1d6>
		{
			dht11time = atoi(rx_buff[queue_front - 1] + 9);
 8002448:	4b32      	ldr	r3, [pc, #200]	; (8002514 <pc_command_processing+0x280>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	1e5a      	subs	r2, r3, #1
 800244e:	4613      	mov	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	4a32      	ldr	r2, [pc, #200]	; (8002520 <pc_command_processing+0x28c>)
 8002458:	4413      	add	r3, r2
 800245a:	3309      	adds	r3, #9
 800245c:	4618      	mov	r0, r3
 800245e:	f005 fbdb 	bl	8007c18 <atoi>
 8002462:	4603      	mov	r3, r0
 8002464:	4a38      	ldr	r2, [pc, #224]	; (8002548 <pc_command_processing+0x2b4>)
 8002466:	6013      	str	r3, [r2, #0]
			return;
 8002468:	e053      	b.n	8002512 <pc_command_processing+0x27e>
		}

		if (!strncmp(rx_buff[queue_front - 1], "dht11_on", strlen("dht11_on")))
 800246a:	4b2a      	ldr	r3, [pc, #168]	; (8002514 <pc_command_processing+0x280>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	1e5a      	subs	r2, r3, #1
 8002470:	4613      	mov	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	4a29      	ldr	r2, [pc, #164]	; (8002520 <pc_command_processing+0x28c>)
 800247a:	4413      	add	r3, r2
 800247c:	2208      	movs	r2, #8
 800247e:	4933      	ldr	r1, [pc, #204]	; (800254c <pc_command_processing+0x2b8>)
 8002480:	4618      	mov	r0, r3
 8002482:	f005 fc95 	bl	8007db0 <strncmp>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d103      	bne.n	8002494 <pc_command_processing+0x200>
		{
			DHT11_print_flag = 1;
 800248c:	4b30      	ldr	r3, [pc, #192]	; (8002550 <pc_command_processing+0x2bc>)
 800248e:	2201      	movs	r2, #1
 8002490:	601a      	str	r2, [r3, #0]
			return;
 8002492:	e03e      	b.n	8002512 <pc_command_processing+0x27e>
		}
		if (!strncmp(rx_buff[queue_front - 1], "dht11_off", strlen("dht11_off")))
 8002494:	4b1f      	ldr	r3, [pc, #124]	; (8002514 <pc_command_processing+0x280>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	1e5a      	subs	r2, r3, #1
 800249a:	4613      	mov	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	4a1f      	ldr	r2, [pc, #124]	; (8002520 <pc_command_processing+0x28c>)
 80024a4:	4413      	add	r3, r2
 80024a6:	2209      	movs	r2, #9
 80024a8:	492a      	ldr	r1, [pc, #168]	; (8002554 <pc_command_processing+0x2c0>)
 80024aa:	4618      	mov	r0, r3
 80024ac:	f005 fc80 	bl	8007db0 <strncmp>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d103      	bne.n	80024be <pc_command_processing+0x22a>
		{
			DHT11_print_flag = 0;
 80024b6:	4b26      	ldr	r3, [pc, #152]	; (8002550 <pc_command_processing+0x2bc>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
			return;
 80024bc:	e029      	b.n	8002512 <pc_command_processing+0x27e>
		}
		if (!strncmp(rx_buff[queue_front - 1], "ultra_on", strlen("ultra_on")))
 80024be:	4b15      	ldr	r3, [pc, #84]	; (8002514 <pc_command_processing+0x280>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	1e5a      	subs	r2, r3, #1
 80024c4:	4613      	mov	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4413      	add	r3, r2
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	4a14      	ldr	r2, [pc, #80]	; (8002520 <pc_command_processing+0x28c>)
 80024ce:	4413      	add	r3, r2
 80024d0:	2208      	movs	r2, #8
 80024d2:	4921      	ldr	r1, [pc, #132]	; (8002558 <pc_command_processing+0x2c4>)
 80024d4:	4618      	mov	r0, r3
 80024d6:	f005 fc6b 	bl	8007db0 <strncmp>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d103      	bne.n	80024e8 <pc_command_processing+0x254>
		{
			ultrasonic_print_flag = 1;
 80024e0:	4b1e      	ldr	r3, [pc, #120]	; (800255c <pc_command_processing+0x2c8>)
 80024e2:	2201      	movs	r2, #1
 80024e4:	601a      	str	r2, [r3, #0]
			return;
 80024e6:	e014      	b.n	8002512 <pc_command_processing+0x27e>
		}
		if (!strncmp(rx_buff[queue_front - 1], "ultra_off", strlen("ultra_off")))
 80024e8:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <pc_command_processing+0x280>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	1e5a      	subs	r2, r3, #1
 80024ee:	4613      	mov	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	4a0a      	ldr	r2, [pc, #40]	; (8002520 <pc_command_processing+0x28c>)
 80024f8:	4413      	add	r3, r2
 80024fa:	2209      	movs	r2, #9
 80024fc:	4918      	ldr	r1, [pc, #96]	; (8002560 <pc_command_processing+0x2cc>)
 80024fe:	4618      	mov	r0, r3
 8002500:	f005 fc56 	bl	8007db0 <strncmp>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d103      	bne.n	8002512 <pc_command_processing+0x27e>
		{
			ultrasonic_print_flag = 0;
 800250a:	4b14      	ldr	r3, [pc, #80]	; (800255c <pc_command_processing+0x2c8>)
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
			return;
 8002510:	bf00      	nop
		}


	}
}
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20000d64 	.word	0x20000d64
 8002518:	20000d68 	.word	0x20000d68
 800251c:	66666667 	.word	0x66666667
 8002520:	20000a44 	.word	0x20000a44
 8002524:	08008ef4 	.word	0x08008ef4
 8002528:	08008f00 	.word	0x08008f00
 800252c:	08008f0c 	.word	0x08008f0c
 8002530:	08008f18 	.word	0x08008f18
 8002534:	08008f24 	.word	0x08008f24
 8002538:	08008f34 	.word	0x08008f34
 800253c:	08008f44 	.word	0x08008f44
 8002540:	08008f54 	.word	0x08008f54
 8002544:	08008f64 	.word	0x08008f64
 8002548:	20000004 	.word	0x20000004
 800254c:	08008f70 	.word	0x08008f70
 8002550:	20000000 	.word	0x20000000
 8002554:	08008f7c 	.word	0x08008f7c
 8002558:	08008f88 	.word	0x08008f88
 800255c:	20000014 	.word	0x20000014
 8002560:	08008f94 	.word	0x08008f94

08002564 <bt_command_processing>:

void bt_command_processing(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
	if (bt_newline_detect_flag) // 원형쿠로 구성한게 아니기 때무네, 뉴라인 플래그가 서 있을 때만 완전한 문장이 들어왔다고 판단하고 함수가 진해오디어야 하낟.
 8002568:	4b31      	ldr	r3, [pc, #196]	; (8002630 <bt_command_processing+0xcc>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d05d      	beq.n	800262c <bt_command_processing+0xc8>
	{
		bt_newline_detect_flag = 0;
 8002570:	4b2f      	ldr	r3, [pc, #188]	; (8002630 <bt_command_processing+0xcc>)
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
		printf("%s\n", bt_rx_buff);
 8002576:	482f      	ldr	r0, [pc, #188]	; (8002634 <bt_command_processing+0xd0>)
 8002578:	f005 fbf2 	bl	8007d60 <puts>
		if (!strncmp(bt_rx_buff, "ledallon", strlen("ledallon"))) // 느낌표가 들어갔다!! strcmp는 같으면 0을 리턴하기 때문에 if문에 진입하려먼 !not을 통해서 1(true)로 뒤집어 줘야 한다.
 800257c:	2208      	movs	r2, #8
 800257e:	492e      	ldr	r1, [pc, #184]	; (8002638 <bt_command_processing+0xd4>)
 8002580:	482c      	ldr	r0, [pc, #176]	; (8002634 <bt_command_processing+0xd0>)
 8002582:	f005 fc15 	bl	8007db0 <strncmp>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d102      	bne.n	8002592 <bt_command_processing+0x2e>
		{
			led_all_on();
 800258c:	f7fe fb40 	bl	8000c10 <led_all_on>
			return;
 8002590:	e04c      	b.n	800262c <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "ledalloff", strlen("ledalloff")))
 8002592:	2209      	movs	r2, #9
 8002594:	4929      	ldr	r1, [pc, #164]	; (800263c <bt_command_processing+0xd8>)
 8002596:	4827      	ldr	r0, [pc, #156]	; (8002634 <bt_command_processing+0xd0>)
 8002598:	f005 fc0a 	bl	8007db0 <strncmp>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d102      	bne.n	80025a8 <bt_command_processing+0x44>
		{
			led_all_off();
 80025a2:	f7fe fb41 	bl	8000c28 <led_all_off>
			return;
 80025a6:	e041      	b.n	800262c <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_on_up", strlen("led_on_up")))
 80025a8:	2209      	movs	r2, #9
 80025aa:	4925      	ldr	r1, [pc, #148]	; (8002640 <bt_command_processing+0xdc>)
 80025ac:	4821      	ldr	r0, [pc, #132]	; (8002634 <bt_command_processing+0xd0>)
 80025ae:	f005 fbff 	bl	8007db0 <strncmp>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d102      	bne.n	80025be <bt_command_processing+0x5a>
		{
			led_on_up();
 80025b8:	f7fe fb42 	bl	8000c40 <led_on_up>
			return;
 80025bc:	e036      	b.n	800262c <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_on_down", strlen("led_on_down")))
 80025be:	220b      	movs	r2, #11
 80025c0:	4920      	ldr	r1, [pc, #128]	; (8002644 <bt_command_processing+0xe0>)
 80025c2:	481c      	ldr	r0, [pc, #112]	; (8002634 <bt_command_processing+0xd0>)
 80025c4:	f005 fbf4 	bl	8007db0 <strncmp>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d102      	bne.n	80025d4 <bt_command_processing+0x70>
		{
			led_on_down();
 80025ce:	f7fe fb63 	bl	8000c98 <led_on_down>
			return;
 80025d2:	e02b      	b.n	800262c <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_keepon_up", strlen("led_keepon_up")))
 80025d4:	220d      	movs	r2, #13
 80025d6:	491c      	ldr	r1, [pc, #112]	; (8002648 <bt_command_processing+0xe4>)
 80025d8:	4816      	ldr	r0, [pc, #88]	; (8002634 <bt_command_processing+0xd0>)
 80025da:	f005 fbe9 	bl	8007db0 <strncmp>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d102      	bne.n	80025ea <bt_command_processing+0x86>
		{
			led_keepon_up();
 80025e4:	f7fe fb84 	bl	8000cf0 <led_keepon_up>
			return;
 80025e8:	e020      	b.n	800262c <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_keepon_down", strlen("led_keepon_down")))
 80025ea:	220f      	movs	r2, #15
 80025ec:	4917      	ldr	r1, [pc, #92]	; (800264c <bt_command_processing+0xe8>)
 80025ee:	4811      	ldr	r0, [pc, #68]	; (8002634 <bt_command_processing+0xd0>)
 80025f0:	f005 fbde 	bl	8007db0 <strncmp>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d102      	bne.n	8002600 <bt_command_processing+0x9c>
		{
			led_keepon_down();
 80025fa:	f7fe fba3 	bl	8000d44 <led_keepon_down>
			return;
 80025fe:	e015      	b.n	800262c <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_flower_on", strlen("led_flower_on")))
 8002600:	220d      	movs	r2, #13
 8002602:	4913      	ldr	r1, [pc, #76]	; (8002650 <bt_command_processing+0xec>)
 8002604:	480b      	ldr	r0, [pc, #44]	; (8002634 <bt_command_processing+0xd0>)
 8002606:	f005 fbd3 	bl	8007db0 <strncmp>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d102      	bne.n	8002616 <bt_command_processing+0xb2>
		{
			led_flower_on();
 8002610:	f7fe fbc2 	bl	8000d98 <led_flower_on>
			return;
 8002614:	e00a      	b.n	800262c <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_flower_off", strlen("led_flower_off")))
 8002616:	220e      	movs	r2, #14
 8002618:	490e      	ldr	r1, [pc, #56]	; (8002654 <bt_command_processing+0xf0>)
 800261a:	4806      	ldr	r0, [pc, #24]	; (8002634 <bt_command_processing+0xd0>)
 800261c:	f005 fbc8 	bl	8007db0 <strncmp>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d102      	bne.n	800262c <bt_command_processing+0xc8>
		{
			led_flower_off();
 8002626:	f7fe fbf7 	bl	8000e18 <led_flower_off>
			return;
 800262a:	bf00      	nop
		}
	}
}
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	20000d9c 	.word	0x20000d9c
 8002634:	20000d70 	.word	0x20000d70
 8002638:	08008fa0 	.word	0x08008fa0
 800263c:	08008fac 	.word	0x08008fac
 8002640:	08008f0c 	.word	0x08008f0c
 8002644:	08008f18 	.word	0x08008f18
 8002648:	08008f24 	.word	0x08008f24
 800264c:	08008f34 	.word	0x08008f34
 8002650:	08008f44 	.word	0x08008f44
 8002654:	08008f54 	.word	0x08008f54

08002658 <HAL_TIM_IC_CaptureCallback>:
volatile int ultrasonic_print_flag = 1;

// 1. Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c에 가서 가져온 call-back function
// 2. 초음파 센서의 ECHO핀의 상승edge와 하강edge 발생 시 이 함수로 들어온다!!!
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a13      	ldr	r2, [pc, #76]	; (80026b4 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d11f      	bne.n	80026aa <HAL_TIM_IC_CaptureCallback+0x52>
	{
		if (is_first_capture == 0) // 상승엣지 때문에 콜백 펑션에 들어온 경우
 800266a:	4b13      	ldr	r3, [pc, #76]	; (80026b8 <HAL_TIM_IC_CaptureCallback+0x60>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	d107      	bne.n	8002684 <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			__HAL_TIM_SET_COUNTER(htim, 0); // 펄스를 셀 카운터를 초기화 하고 세기 시작하는 것이다.
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2200      	movs	r2, #0
 800267a:	625a      	str	r2, [r3, #36]	; 0x24
			is_first_capture = 1; // 다음에 콜백 펑선이 불릴 때는 당연히 하강 엣지일 때 일 것이므로 플래그변수를 1로 셋팅해준다.
 800267c:	4b0e      	ldr	r3, [pc, #56]	; (80026b8 <HAL_TIM_IC_CaptureCallback+0x60>)
 800267e:	2201      	movs	r2, #1
 8002680:	701a      	strb	r2, [r3, #0]
			is_first_capture = 0; // 이제 다음 펄스를 또 카운트 하기 위해서 플래그 변수를 초기화 해준다.
			distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // 상승엣지부터 하강엣지까지 펄스가 몇번 카운트 되었는지 그 값을 읽어온다.
			ic_cpt_finish_flag = 1; // 초음파 측정완료
		}
	}
}
 8002682:	e012      	b.n	80026aa <HAL_TIM_IC_CaptureCallback+0x52>
		else if (is_first_capture == 1) // 하강 엣지 때문에 콜백 펑션에 들어온 경우
 8002684:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <HAL_TIM_IC_CaptureCallback+0x60>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b01      	cmp	r3, #1
 800268c:	d10d      	bne.n	80026aa <HAL_TIM_IC_CaptureCallback+0x52>
			is_first_capture = 0; // 이제 다음 펄스를 또 카운트 하기 위해서 플래그 변수를 초기화 해준다.
 800268e:	4b0a      	ldr	r3, [pc, #40]	; (80026b8 <HAL_TIM_IC_CaptureCallback+0x60>)
 8002690:	2200      	movs	r2, #0
 8002692:	701a      	strb	r2, [r3, #0]
			distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // 상승엣지부터 하강엣지까지 펄스가 몇번 카운트 되었는지 그 값을 읽어온다.
 8002694:	2100      	movs	r1, #0
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f003 fa18 	bl	8005acc <HAL_TIM_ReadCapturedValue>
 800269c:	4603      	mov	r3, r0
 800269e:	461a      	mov	r2, r3
 80026a0:	4b06      	ldr	r3, [pc, #24]	; (80026bc <HAL_TIM_IC_CaptureCallback+0x64>)
 80026a2:	601a      	str	r2, [r3, #0]
			ic_cpt_finish_flag = 1; // 초음파 측정완료
 80026a4:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <HAL_TIM_IC_CaptureCallback+0x68>)
 80026a6:	2201      	movs	r2, #1
 80026a8:	601a      	str	r2, [r3, #0]
}
 80026aa:	bf00      	nop
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40000400 	.word	0x40000400
 80026b8:	20000da8 	.word	0x20000da8
 80026bc:	20000da0 	.word	0x20000da0
 80026c0:	20000da4 	.word	0x20000da4

080026c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80026c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026fc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026c8:	480d      	ldr	r0, [pc, #52]	; (8002700 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026ca:	490e      	ldr	r1, [pc, #56]	; (8002704 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026cc:	4a0e      	ldr	r2, [pc, #56]	; (8002708 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026d0:	e002      	b.n	80026d8 <LoopCopyDataInit>

080026d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026d6:	3304      	adds	r3, #4

080026d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026dc:	d3f9      	bcc.n	80026d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026de:	4a0b      	ldr	r2, [pc, #44]	; (800270c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026e0:	4c0b      	ldr	r4, [pc, #44]	; (8002710 <LoopFillZerobss+0x26>)
  movs r3, #0
 80026e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026e4:	e001      	b.n	80026ea <LoopFillZerobss>

080026e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e8:	3204      	adds	r2, #4

080026ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026ec:	d3fb      	bcc.n	80026e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026ee:	f7ff fd07 	bl	8002100 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026f2:	f005 fa9b 	bl	8007c2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026f6:	f7fe fc1b 	bl	8000f30 <main>
  bx  lr    
 80026fa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80026fc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002704:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8002708:	0800917c 	.word	0x0800917c
  ldr r2, =_sbss
 800270c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8002710:	20000dc0 	.word	0x20000dc0

08002714 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002714:	e7fe      	b.n	8002714 <ADC_IRQHandler>
	...

08002718 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800271c:	4b0e      	ldr	r3, [pc, #56]	; (8002758 <HAL_Init+0x40>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a0d      	ldr	r2, [pc, #52]	; (8002758 <HAL_Init+0x40>)
 8002722:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002726:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <HAL_Init+0x40>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a0a      	ldr	r2, [pc, #40]	; (8002758 <HAL_Init+0x40>)
 800272e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002732:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002734:	4b08      	ldr	r3, [pc, #32]	; (8002758 <HAL_Init+0x40>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a07      	ldr	r2, [pc, #28]	; (8002758 <HAL_Init+0x40>)
 800273a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800273e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002740:	2003      	movs	r0, #3
 8002742:	f000 f94f 	bl	80029e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002746:	2000      	movs	r0, #0
 8002748:	f000 f808 	bl	800275c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800274c:	f7ff f86a 	bl	8001824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40023c00 	.word	0x40023c00

0800275c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002764:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <HAL_InitTick+0x54>)
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <HAL_InitTick+0x58>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	4619      	mov	r1, r3
 800276e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002772:	fbb3 f3f1 	udiv	r3, r3, r1
 8002776:	fbb2 f3f3 	udiv	r3, r2, r3
 800277a:	4618      	mov	r0, r3
 800277c:	f000 f967 	bl	8002a4e <HAL_SYSTICK_Config>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e00e      	b.n	80027a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b0f      	cmp	r3, #15
 800278e:	d80a      	bhi.n	80027a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002790:	2200      	movs	r2, #0
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	f04f 30ff 	mov.w	r0, #4294967295
 8002798:	f000 f92f 	bl	80029fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800279c:	4a06      	ldr	r2, [pc, #24]	; (80027b8 <HAL_InitTick+0x5c>)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
 80027a4:	e000      	b.n	80027a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	20000010 	.word	0x20000010
 80027b4:	2000001c 	.word	0x2000001c
 80027b8:	20000018 	.word	0x20000018

080027bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027c0:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_IncTick+0x20>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	461a      	mov	r2, r3
 80027c6:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <HAL_IncTick+0x24>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4413      	add	r3, r2
 80027cc:	4a04      	ldr	r2, [pc, #16]	; (80027e0 <HAL_IncTick+0x24>)
 80027ce:	6013      	str	r3, [r2, #0]
}
 80027d0:	bf00      	nop
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	2000001c 	.word	0x2000001c
 80027e0:	20000dac 	.word	0x20000dac

080027e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return uwTick;
 80027e8:	4b03      	ldr	r3, [pc, #12]	; (80027f8 <HAL_GetTick+0x14>)
 80027ea:	681b      	ldr	r3, [r3, #0]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	20000dac 	.word	0x20000dac

080027fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002804:	f7ff ffee 	bl	80027e4 <HAL_GetTick>
 8002808:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002814:	d005      	beq.n	8002822 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002816:	4b0a      	ldr	r3, [pc, #40]	; (8002840 <HAL_Delay+0x44>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	461a      	mov	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4413      	add	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002822:	bf00      	nop
 8002824:	f7ff ffde 	bl	80027e4 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	429a      	cmp	r2, r3
 8002832:	d8f7      	bhi.n	8002824 <HAL_Delay+0x28>
  {
  }
}
 8002834:	bf00      	nop
 8002836:	bf00      	nop
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	2000001c 	.word	0x2000001c

08002844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002854:	4b0c      	ldr	r3, [pc, #48]	; (8002888 <__NVIC_SetPriorityGrouping+0x44>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002860:	4013      	ands	r3, r2
 8002862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800286c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002876:	4a04      	ldr	r2, [pc, #16]	; (8002888 <__NVIC_SetPriorityGrouping+0x44>)
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	60d3      	str	r3, [r2, #12]
}
 800287c:	bf00      	nop
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	e000ed00 	.word	0xe000ed00

0800288c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002890:	4b04      	ldr	r3, [pc, #16]	; (80028a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	0a1b      	lsrs	r3, r3, #8
 8002896:	f003 0307 	and.w	r3, r3, #7
}
 800289a:	4618      	mov	r0, r3
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	e000ed00 	.word	0xe000ed00

080028a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	db0b      	blt.n	80028d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	f003 021f 	and.w	r2, r3, #31
 80028c0:	4907      	ldr	r1, [pc, #28]	; (80028e0 <__NVIC_EnableIRQ+0x38>)
 80028c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c6:	095b      	lsrs	r3, r3, #5
 80028c8:	2001      	movs	r0, #1
 80028ca:	fa00 f202 	lsl.w	r2, r0, r2
 80028ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	e000e100 	.word	0xe000e100

080028e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	6039      	str	r1, [r7, #0]
 80028ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	db0a      	blt.n	800290e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	490c      	ldr	r1, [pc, #48]	; (8002930 <__NVIC_SetPriority+0x4c>)
 80028fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002902:	0112      	lsls	r2, r2, #4
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	440b      	add	r3, r1
 8002908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800290c:	e00a      	b.n	8002924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	b2da      	uxtb	r2, r3
 8002912:	4908      	ldr	r1, [pc, #32]	; (8002934 <__NVIC_SetPriority+0x50>)
 8002914:	79fb      	ldrb	r3, [r7, #7]
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	3b04      	subs	r3, #4
 800291c:	0112      	lsls	r2, r2, #4
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	440b      	add	r3, r1
 8002922:	761a      	strb	r2, [r3, #24]
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	e000e100 	.word	0xe000e100
 8002934:	e000ed00 	.word	0xe000ed00

08002938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002938:	b480      	push	{r7}
 800293a:	b089      	sub	sp, #36	; 0x24
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f1c3 0307 	rsb	r3, r3, #7
 8002952:	2b04      	cmp	r3, #4
 8002954:	bf28      	it	cs
 8002956:	2304      	movcs	r3, #4
 8002958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	3304      	adds	r3, #4
 800295e:	2b06      	cmp	r3, #6
 8002960:	d902      	bls.n	8002968 <NVIC_EncodePriority+0x30>
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	3b03      	subs	r3, #3
 8002966:	e000      	b.n	800296a <NVIC_EncodePriority+0x32>
 8002968:	2300      	movs	r3, #0
 800296a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800296c:	f04f 32ff 	mov.w	r2, #4294967295
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	43da      	mvns	r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	401a      	ands	r2, r3
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002980:	f04f 31ff 	mov.w	r1, #4294967295
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	fa01 f303 	lsl.w	r3, r1, r3
 800298a:	43d9      	mvns	r1, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002990:	4313      	orrs	r3, r2
         );
}
 8002992:	4618      	mov	r0, r3
 8002994:	3724      	adds	r7, #36	; 0x24
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
	...

080029a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029b0:	d301      	bcc.n	80029b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029b2:	2301      	movs	r3, #1
 80029b4:	e00f      	b.n	80029d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029b6:	4a0a      	ldr	r2, [pc, #40]	; (80029e0 <SysTick_Config+0x40>)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3b01      	subs	r3, #1
 80029bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029be:	210f      	movs	r1, #15
 80029c0:	f04f 30ff 	mov.w	r0, #4294967295
 80029c4:	f7ff ff8e 	bl	80028e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029c8:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <SysTick_Config+0x40>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ce:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <SysTick_Config+0x40>)
 80029d0:	2207      	movs	r2, #7
 80029d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	e000e010 	.word	0xe000e010

080029e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7ff ff29 	bl	8002844 <__NVIC_SetPriorityGrouping>
}
 80029f2:	bf00      	nop
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b086      	sub	sp, #24
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	4603      	mov	r3, r0
 8002a02:	60b9      	str	r1, [r7, #8]
 8002a04:	607a      	str	r2, [r7, #4]
 8002a06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a0c:	f7ff ff3e 	bl	800288c <__NVIC_GetPriorityGrouping>
 8002a10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	68b9      	ldr	r1, [r7, #8]
 8002a16:	6978      	ldr	r0, [r7, #20]
 8002a18:	f7ff ff8e 	bl	8002938 <NVIC_EncodePriority>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a22:	4611      	mov	r1, r2
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff ff5d 	bl	80028e4 <__NVIC_SetPriority>
}
 8002a2a:	bf00      	nop
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b082      	sub	sp, #8
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	4603      	mov	r3, r0
 8002a3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff ff31 	bl	80028a8 <__NVIC_EnableIRQ>
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7ff ffa2 	bl	80029a0 <SysTick_Config>
 8002a5c:	4603      	mov	r3, r0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b084      	sub	sp, #16
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a72:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a74:	f7ff feb6 	bl	80027e4 <HAL_GetTick>
 8002a78:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d008      	beq.n	8002a98 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2280      	movs	r2, #128	; 0x80
 8002a8a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e052      	b.n	8002b3e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 0216 	bic.w	r2, r2, #22
 8002aa6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	695a      	ldr	r2, [r3, #20]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ab6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d103      	bne.n	8002ac8 <HAL_DMA_Abort+0x62>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d007      	beq.n	8002ad8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 0208 	bic.w	r2, r2, #8
 8002ad6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0201 	bic.w	r2, r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ae8:	e013      	b.n	8002b12 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002aea:	f7ff fe7b 	bl	80027e4 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b05      	cmp	r3, #5
 8002af6:	d90c      	bls.n	8002b12 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2220      	movs	r2, #32
 8002afc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2203      	movs	r2, #3
 8002b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e015      	b.n	8002b3e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1e4      	bne.n	8002aea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b24:	223f      	movs	r2, #63	; 0x3f
 8002b26:	409a      	lsls	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d004      	beq.n	8002b64 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2280      	movs	r2, #128	; 0x80
 8002b5e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e00c      	b.n	8002b7e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2205      	movs	r2, #5
 8002b68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0201 	bic.w	r2, r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
	...

08002b8c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e06c      	b.n	8002c78 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d106      	bne.n	8002bb6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2223      	movs	r2, #35	; 0x23
 8002bac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f7fe fe5f 	bl	8001874 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60bb      	str	r3, [r7, #8]
 8002bba:	4b31      	ldr	r3, [pc, #196]	; (8002c80 <HAL_ETH_Init+0xf4>)
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbe:	4a30      	ldr	r2, [pc, #192]	; (8002c80 <HAL_ETH_Init+0xf4>)
 8002bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bc6:	4b2e      	ldr	r3, [pc, #184]	; (8002c80 <HAL_ETH_Init+0xf4>)
 8002bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bce:	60bb      	str	r3, [r7, #8]
 8002bd0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002bd2:	4b2c      	ldr	r3, [pc, #176]	; (8002c84 <HAL_ETH_Init+0xf8>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	4a2b      	ldr	r2, [pc, #172]	; (8002c84 <HAL_ETH_Init+0xf8>)
 8002bd8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002bdc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002bde:	4b29      	ldr	r3, [pc, #164]	; (8002c84 <HAL_ETH_Init+0xf8>)
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	4927      	ldr	r1, [pc, #156]	; (8002c84 <HAL_ETH_Init+0xf8>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002bec:	4b25      	ldr	r3, [pc, #148]	; (8002c84 <HAL_ETH_Init+0xf8>)
 8002bee:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6812      	ldr	r2, [r2, #0]
 8002bfe:	f043 0301 	orr.w	r3, r3, #1
 8002c02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002c06:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c08:	f7ff fdec 	bl	80027e4 <HAL_GetTick>
 8002c0c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002c0e:	e011      	b.n	8002c34 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002c10:	f7ff fde8 	bl	80027e4 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c1e:	d909      	bls.n	8002c34 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2204      	movs	r2, #4
 8002c24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	22e0      	movs	r2, #224	; 0xe0
 8002c2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e021      	b.n	8002c78 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1e4      	bne.n	8002c10 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f958 	bl	8002efc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 f9ff 	bl	8003050 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 fa55 	bl	8003102 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	2100      	movs	r1, #0
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 f9bd 	bl	8002fe0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2210      	movs	r2, #16
 8002c72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40023800 	.word	0x40023800
 8002c84:	40013800 	.word	0x40013800

08002c88 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	4b51      	ldr	r3, [pc, #324]	; (8002de4 <ETH_SetMACConfig+0x15c>)
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	7c1b      	ldrb	r3, [r3, #16]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d102      	bne.n	8002cb0 <ETH_SetMACConfig+0x28>
 8002caa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002cae:	e000      	b.n	8002cb2 <ETH_SetMACConfig+0x2a>
 8002cb0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	7c5b      	ldrb	r3, [r3, #17]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d102      	bne.n	8002cc0 <ETH_SetMACConfig+0x38>
 8002cba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002cbe:	e000      	b.n	8002cc2 <ETH_SetMACConfig+0x3a>
 8002cc0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002cc2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002cc8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	7fdb      	ldrb	r3, [r3, #31]
 8002cce:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002cd0:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002cd6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	7f92      	ldrb	r2, [r2, #30]
 8002cdc:	2a00      	cmp	r2, #0
 8002cde:	d102      	bne.n	8002ce6 <ETH_SetMACConfig+0x5e>
 8002ce0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ce4:	e000      	b.n	8002ce8 <ETH_SetMACConfig+0x60>
 8002ce6:	2200      	movs	r2, #0
                        macconf->Speed |
 8002ce8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	7f1b      	ldrb	r3, [r3, #28]
 8002cee:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002cf0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002cf6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	791b      	ldrb	r3, [r3, #4]
 8002cfc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002cfe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002d06:	2a00      	cmp	r2, #0
 8002d08:	d102      	bne.n	8002d10 <ETH_SetMACConfig+0x88>
 8002d0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d0e:	e000      	b.n	8002d12 <ETH_SetMACConfig+0x8a>
 8002d10:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002d12:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	7bdb      	ldrb	r3, [r3, #15]
 8002d18:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002d1a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002d20:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d28:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d42:	2001      	movs	r0, #1
 8002d44:	f7ff fd5a 	bl	80027fc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002d5e:	4013      	ands	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d66:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002d6e:	2a00      	cmp	r2, #0
 8002d70:	d101      	bne.n	8002d76 <ETH_SetMACConfig+0xee>
 8002d72:	2280      	movs	r2, #128	; 0x80
 8002d74:	e000      	b.n	8002d78 <ETH_SetMACConfig+0xf0>
 8002d76:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002d78:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002d7e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002d86:	2a01      	cmp	r2, #1
 8002d88:	d101      	bne.n	8002d8e <ETH_SetMACConfig+0x106>
 8002d8a:	2208      	movs	r2, #8
 8002d8c:	e000      	b.n	8002d90 <ETH_SetMACConfig+0x108>
 8002d8e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002d90:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002d98:	2a01      	cmp	r2, #1
 8002d9a:	d101      	bne.n	8002da0 <ETH_SetMACConfig+0x118>
 8002d9c:	2204      	movs	r2, #4
 8002d9e:	e000      	b.n	8002da2 <ETH_SetMACConfig+0x11a>
 8002da0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002da2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002daa:	2a01      	cmp	r2, #1
 8002dac:	d101      	bne.n	8002db2 <ETH_SetMACConfig+0x12a>
 8002dae:	2202      	movs	r2, #2
 8002db0:	e000      	b.n	8002db4 <ETH_SetMACConfig+0x12c>
 8002db2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002db4:	4313      	orrs	r3, r2
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002dcc:	2001      	movs	r0, #1
 8002dce:	f7ff fd15 	bl	80027fc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	619a      	str	r2, [r3, #24]
}
 8002dda:	bf00      	nop
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	ff20810f 	.word	0xff20810f

08002de8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	4b3d      	ldr	r3, [pc, #244]	; (8002ef8 <ETH_SetDMAConfig+0x110>)
 8002e02:	4013      	ands	r3, r2
 8002e04:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	7b1b      	ldrb	r3, [r3, #12]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d102      	bne.n	8002e14 <ETH_SetDMAConfig+0x2c>
 8002e0e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002e12:	e000      	b.n	8002e16 <ETH_SetDMAConfig+0x2e>
 8002e14:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	7b5b      	ldrb	r3, [r3, #13]
 8002e1a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002e1c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	7f52      	ldrb	r2, [r2, #29]
 8002e22:	2a00      	cmp	r2, #0
 8002e24:	d102      	bne.n	8002e2c <ETH_SetDMAConfig+0x44>
 8002e26:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e2a:	e000      	b.n	8002e2e <ETH_SetDMAConfig+0x46>
 8002e2c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002e2e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	7b9b      	ldrb	r3, [r3, #14]
 8002e34:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002e36:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002e3c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	7f1b      	ldrb	r3, [r3, #28]
 8002e42:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002e44:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	7f9b      	ldrb	r3, [r3, #30]
 8002e4a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002e4c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002e52:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e5a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e7e:	2001      	movs	r0, #1
 8002e80:	f7ff fcbc 	bl	80027fc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	791b      	ldrb	r3, [r3, #4]
 8002e96:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002e9c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002ea2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002ea8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002eb0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002eb2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002eba:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002ec0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6812      	ldr	r2, [r2, #0]
 8002ec6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002eca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ece:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002edc:	2001      	movs	r0, #1
 8002ede:	f7ff fc8d 	bl	80027fc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eea:	461a      	mov	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6013      	str	r3, [r2, #0]
}
 8002ef0:	bf00      	nop
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	f8de3f23 	.word	0xf8de3f23

08002efc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b0a6      	sub	sp, #152	; 0x98
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002f04:	2301      	movs	r3, #1
 8002f06:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002f10:	2300      	movs	r3, #0
 8002f12:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002f14:	2300      	movs	r3, #0
 8002f16:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002f20:	2300      	movs	r3, #0
 8002f22:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002f26:	2301      	movs	r3, #1
 8002f28:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002f32:	2300      	movs	r3, #0
 8002f34:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002f46:	2300      	movs	r3, #0
 8002f48:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002f52:	2300      	movs	r3, #0
 8002f54:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002f5e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f62:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002f64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f68:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002f70:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f74:	4619      	mov	r1, r3
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7ff fe86 	bl	8002c88 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002f80:	2301      	movs	r3, #1
 8002f82:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002f84:	2301      	movs	r3, #1
 8002f86:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002f92:	2300      	movs	r3, #0
 8002f94:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002fac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fb0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002fb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002fb6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002fb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fbc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002fcc:	f107 0308 	add.w	r3, r7, #8
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7ff ff08 	bl	8002de8 <ETH_SetDMAConfig>
}
 8002fd8:	bf00      	nop
 8002fda:	3798      	adds	r7, #152	; 0x98
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b087      	sub	sp, #28
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3305      	adds	r3, #5
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	021b      	lsls	r3, r3, #8
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	3204      	adds	r2, #4
 8002ff8:	7812      	ldrb	r2, [r2, #0]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	4b11      	ldr	r3, [pc, #68]	; (8003048 <ETH_MACAddressConfig+0x68>)
 8003002:	4413      	add	r3, r2
 8003004:	461a      	mov	r2, r3
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	3303      	adds	r3, #3
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	061a      	lsls	r2, r3, #24
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3302      	adds	r3, #2
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	041b      	lsls	r3, r3, #16
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3301      	adds	r3, #1
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	021b      	lsls	r3, r3, #8
 8003024:	4313      	orrs	r3, r2
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	7812      	ldrb	r2, [r2, #0]
 800302a:	4313      	orrs	r3, r2
 800302c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	4b06      	ldr	r3, [pc, #24]	; (800304c <ETH_MACAddressConfig+0x6c>)
 8003032:	4413      	add	r3, r2
 8003034:	461a      	mov	r2, r3
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	6013      	str	r3, [r2, #0]
}
 800303a:	bf00      	nop
 800303c:	371c      	adds	r7, #28
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	40028040 	.word	0x40028040
 800304c:	40028044 	.word	0x40028044

08003050 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003058:	2300      	movs	r3, #0
 800305a:	60fb      	str	r3, [r7, #12]
 800305c:	e03e      	b.n	80030dc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68d9      	ldr	r1, [r3, #12]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	4613      	mov	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	440b      	add	r3, r1
 800306e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2200      	movs	r2, #0
 8003074:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	2200      	movs	r2, #0
 800307a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2200      	movs	r2, #0
 8003080:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2200      	movs	r2, #0
 8003086:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003088:	68b9      	ldr	r1, [r7, #8]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	3206      	adds	r2, #6
 8003090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d80c      	bhi.n	80030c0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68d9      	ldr	r1, [r3, #12]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	1c5a      	adds	r2, r3, #1
 80030ae:	4613      	mov	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	440b      	add	r3, r1
 80030b8:	461a      	mov	r2, r3
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	60da      	str	r2, [r3, #12]
 80030be:	e004      	b.n	80030ca <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	461a      	mov	r2, r3
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	3301      	adds	r3, #1
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2b03      	cmp	r3, #3
 80030e0:	d9bd      	bls.n	800305e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030f4:	611a      	str	r2, [r3, #16]
}
 80030f6:	bf00      	nop
 80030f8:	3714      	adds	r7, #20
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003102:	b480      	push	{r7}
 8003104:	b085      	sub	sp, #20
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800310a:	2300      	movs	r3, #0
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	e046      	b.n	800319e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6919      	ldr	r1, [r3, #16]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	4613      	mov	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	440b      	add	r3, r1
 8003120:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	2200      	movs	r2, #0
 800312c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2200      	movs	r2, #0
 8003132:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	2200      	movs	r2, #0
 8003138:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2200      	movs	r2, #0
 800313e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	2200      	movs	r2, #0
 8003144:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800314c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003154:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003162:	68b9      	ldr	r1, [r7, #8]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	3212      	adds	r2, #18
 800316a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2b02      	cmp	r3, #2
 8003172:	d80c      	bhi.n	800318e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6919      	ldr	r1, [r3, #16]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	1c5a      	adds	r2, r3, #1
 800317c:	4613      	mov	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	440b      	add	r3, r1
 8003186:	461a      	mov	r2, r3
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	60da      	str	r2, [r3, #12]
 800318c:	e004      	b.n	8003198 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	461a      	mov	r2, r3
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	3301      	adds	r3, #1
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2b03      	cmp	r3, #3
 80031a2:	d9b5      	bls.n	8003110 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	691a      	ldr	r2, [r3, #16]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031ce:	60da      	str	r2, [r3, #12]
}
 80031d0:	bf00      	nop
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031dc:	b480      	push	{r7}
 80031de:	b089      	sub	sp, #36	; 0x24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031ee:	2300      	movs	r3, #0
 80031f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031f2:	2300      	movs	r3, #0
 80031f4:	61fb      	str	r3, [r7, #28]
 80031f6:	e177      	b.n	80034e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031f8:	2201      	movs	r2, #1
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	4013      	ands	r3, r2
 800320a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	429a      	cmp	r2, r3
 8003212:	f040 8166 	bne.w	80034e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f003 0303 	and.w	r3, r3, #3
 800321e:	2b01      	cmp	r3, #1
 8003220:	d005      	beq.n	800322e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800322a:	2b02      	cmp	r3, #2
 800322c:	d130      	bne.n	8003290 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	2203      	movs	r2, #3
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	43db      	mvns	r3, r3
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	4013      	ands	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	68da      	ldr	r2, [r3, #12]
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4313      	orrs	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003264:	2201      	movs	r2, #1
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	43db      	mvns	r3, r3
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4013      	ands	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	091b      	lsrs	r3, r3, #4
 800327a:	f003 0201 	and.w	r2, r3, #1
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	4313      	orrs	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 0303 	and.w	r3, r3, #3
 8003298:	2b03      	cmp	r3, #3
 800329a:	d017      	beq.n	80032cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	2203      	movs	r2, #3
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	43db      	mvns	r3, r3
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	4013      	ands	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 0303 	and.w	r3, r3, #3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d123      	bne.n	8003320 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	08da      	lsrs	r2, r3, #3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3208      	adds	r2, #8
 80032e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	220f      	movs	r2, #15
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	43db      	mvns	r3, r3
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4013      	ands	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	691a      	ldr	r2, [r3, #16]
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	f003 0307 	and.w	r3, r3, #7
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	4313      	orrs	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	08da      	lsrs	r2, r3, #3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	3208      	adds	r2, #8
 800331a:	69b9      	ldr	r1, [r7, #24]
 800331c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	2203      	movs	r2, #3
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	43db      	mvns	r3, r3
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4013      	ands	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f003 0203 	and.w	r2, r3, #3
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4313      	orrs	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 80c0 	beq.w	80034e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003362:	2300      	movs	r3, #0
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	4b66      	ldr	r3, [pc, #408]	; (8003500 <HAL_GPIO_Init+0x324>)
 8003368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336a:	4a65      	ldr	r2, [pc, #404]	; (8003500 <HAL_GPIO_Init+0x324>)
 800336c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003370:	6453      	str	r3, [r2, #68]	; 0x44
 8003372:	4b63      	ldr	r3, [pc, #396]	; (8003500 <HAL_GPIO_Init+0x324>)
 8003374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800337e:	4a61      	ldr	r2, [pc, #388]	; (8003504 <HAL_GPIO_Init+0x328>)
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	089b      	lsrs	r3, r3, #2
 8003384:	3302      	adds	r3, #2
 8003386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800338a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	220f      	movs	r2, #15
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	43db      	mvns	r3, r3
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4013      	ands	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a58      	ldr	r2, [pc, #352]	; (8003508 <HAL_GPIO_Init+0x32c>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d037      	beq.n	800341a <HAL_GPIO_Init+0x23e>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a57      	ldr	r2, [pc, #348]	; (800350c <HAL_GPIO_Init+0x330>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d031      	beq.n	8003416 <HAL_GPIO_Init+0x23a>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a56      	ldr	r2, [pc, #344]	; (8003510 <HAL_GPIO_Init+0x334>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d02b      	beq.n	8003412 <HAL_GPIO_Init+0x236>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a55      	ldr	r2, [pc, #340]	; (8003514 <HAL_GPIO_Init+0x338>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d025      	beq.n	800340e <HAL_GPIO_Init+0x232>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a54      	ldr	r2, [pc, #336]	; (8003518 <HAL_GPIO_Init+0x33c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d01f      	beq.n	800340a <HAL_GPIO_Init+0x22e>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a53      	ldr	r2, [pc, #332]	; (800351c <HAL_GPIO_Init+0x340>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d019      	beq.n	8003406 <HAL_GPIO_Init+0x22a>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a52      	ldr	r2, [pc, #328]	; (8003520 <HAL_GPIO_Init+0x344>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d013      	beq.n	8003402 <HAL_GPIO_Init+0x226>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a51      	ldr	r2, [pc, #324]	; (8003524 <HAL_GPIO_Init+0x348>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d00d      	beq.n	80033fe <HAL_GPIO_Init+0x222>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a50      	ldr	r2, [pc, #320]	; (8003528 <HAL_GPIO_Init+0x34c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d007      	beq.n	80033fa <HAL_GPIO_Init+0x21e>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a4f      	ldr	r2, [pc, #316]	; (800352c <HAL_GPIO_Init+0x350>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d101      	bne.n	80033f6 <HAL_GPIO_Init+0x21a>
 80033f2:	2309      	movs	r3, #9
 80033f4:	e012      	b.n	800341c <HAL_GPIO_Init+0x240>
 80033f6:	230a      	movs	r3, #10
 80033f8:	e010      	b.n	800341c <HAL_GPIO_Init+0x240>
 80033fa:	2308      	movs	r3, #8
 80033fc:	e00e      	b.n	800341c <HAL_GPIO_Init+0x240>
 80033fe:	2307      	movs	r3, #7
 8003400:	e00c      	b.n	800341c <HAL_GPIO_Init+0x240>
 8003402:	2306      	movs	r3, #6
 8003404:	e00a      	b.n	800341c <HAL_GPIO_Init+0x240>
 8003406:	2305      	movs	r3, #5
 8003408:	e008      	b.n	800341c <HAL_GPIO_Init+0x240>
 800340a:	2304      	movs	r3, #4
 800340c:	e006      	b.n	800341c <HAL_GPIO_Init+0x240>
 800340e:	2303      	movs	r3, #3
 8003410:	e004      	b.n	800341c <HAL_GPIO_Init+0x240>
 8003412:	2302      	movs	r3, #2
 8003414:	e002      	b.n	800341c <HAL_GPIO_Init+0x240>
 8003416:	2301      	movs	r3, #1
 8003418:	e000      	b.n	800341c <HAL_GPIO_Init+0x240>
 800341a:	2300      	movs	r3, #0
 800341c:	69fa      	ldr	r2, [r7, #28]
 800341e:	f002 0203 	and.w	r2, r2, #3
 8003422:	0092      	lsls	r2, r2, #2
 8003424:	4093      	lsls	r3, r2
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	4313      	orrs	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800342c:	4935      	ldr	r1, [pc, #212]	; (8003504 <HAL_GPIO_Init+0x328>)
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	089b      	lsrs	r3, r3, #2
 8003432:	3302      	adds	r3, #2
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800343a:	4b3d      	ldr	r3, [pc, #244]	; (8003530 <HAL_GPIO_Init+0x354>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	43db      	mvns	r3, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4013      	ands	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	4313      	orrs	r3, r2
 800345c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800345e:	4a34      	ldr	r2, [pc, #208]	; (8003530 <HAL_GPIO_Init+0x354>)
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003464:	4b32      	ldr	r3, [pc, #200]	; (8003530 <HAL_GPIO_Init+0x354>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	43db      	mvns	r3, r3
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4013      	ands	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d003      	beq.n	8003488 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	4313      	orrs	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003488:	4a29      	ldr	r2, [pc, #164]	; (8003530 <HAL_GPIO_Init+0x354>)
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800348e:	4b28      	ldr	r3, [pc, #160]	; (8003530 <HAL_GPIO_Init+0x354>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	43db      	mvns	r3, r3
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	4013      	ands	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034b2:	4a1f      	ldr	r2, [pc, #124]	; (8003530 <HAL_GPIO_Init+0x354>)
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034b8:	4b1d      	ldr	r3, [pc, #116]	; (8003530 <HAL_GPIO_Init+0x354>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	43db      	mvns	r3, r3
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	4013      	ands	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	4313      	orrs	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034dc:	4a14      	ldr	r2, [pc, #80]	; (8003530 <HAL_GPIO_Init+0x354>)
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	3301      	adds	r3, #1
 80034e6:	61fb      	str	r3, [r7, #28]
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	2b0f      	cmp	r3, #15
 80034ec:	f67f ae84 	bls.w	80031f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034f0:	bf00      	nop
 80034f2:	bf00      	nop
 80034f4:	3724      	adds	r7, #36	; 0x24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	40023800 	.word	0x40023800
 8003504:	40013800 	.word	0x40013800
 8003508:	40020000 	.word	0x40020000
 800350c:	40020400 	.word	0x40020400
 8003510:	40020800 	.word	0x40020800
 8003514:	40020c00 	.word	0x40020c00
 8003518:	40021000 	.word	0x40021000
 800351c:	40021400 	.word	0x40021400
 8003520:	40021800 	.word	0x40021800
 8003524:	40021c00 	.word	0x40021c00
 8003528:	40022000 	.word	0x40022000
 800352c:	40022400 	.word	0x40022400
 8003530:	40013c00 	.word	0x40013c00

08003534 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	460b      	mov	r3, r1
 800353e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	887b      	ldrh	r3, [r7, #2]
 8003546:	4013      	ands	r3, r2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d002      	beq.n	8003552 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800354c:	2301      	movs	r3, #1
 800354e:	73fb      	strb	r3, [r7, #15]
 8003550:	e001      	b.n	8003556 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003552:	2300      	movs	r3, #0
 8003554:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003556:	7bfb      	ldrb	r3, [r7, #15]
}
 8003558:	4618      	mov	r0, r3
 800355a:	3714      	adds	r7, #20
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	460b      	mov	r3, r1
 800356e:	807b      	strh	r3, [r7, #2]
 8003570:	4613      	mov	r3, r2
 8003572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003574:	787b      	ldrb	r3, [r7, #1]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800357a:	887a      	ldrh	r2, [r7, #2]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003580:	e003      	b.n	800358a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003582:	887b      	ldrh	r3, [r7, #2]
 8003584:	041a      	lsls	r2, r3, #16
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	619a      	str	r2, [r3, #24]
}
 800358a:	bf00      	nop
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003596:	b480      	push	{r7}
 8003598:	b085      	sub	sp, #20
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
 800359e:	460b      	mov	r3, r1
 80035a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80035a8:	887a      	ldrh	r2, [r7, #2]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	4013      	ands	r3, r2
 80035ae:	041a      	lsls	r2, r3, #16
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	43d9      	mvns	r1, r3
 80035b4:	887b      	ldrh	r3, [r7, #2]
 80035b6:	400b      	ands	r3, r1
 80035b8:	431a      	orrs	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	619a      	str	r2, [r3, #24]
}
 80035be:	bf00      	nop
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
	...

080035cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e12b      	b.n	8003836 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d106      	bne.n	80035f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7fe fa04 	bl	8001a00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2224      	movs	r2, #36	; 0x24
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0201 	bic.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800361e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800362e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003630:	f001 fa20 	bl	8004a74 <HAL_RCC_GetPCLK1Freq>
 8003634:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	4a81      	ldr	r2, [pc, #516]	; (8003840 <HAL_I2C_Init+0x274>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d807      	bhi.n	8003650 <HAL_I2C_Init+0x84>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4a80      	ldr	r2, [pc, #512]	; (8003844 <HAL_I2C_Init+0x278>)
 8003644:	4293      	cmp	r3, r2
 8003646:	bf94      	ite	ls
 8003648:	2301      	movls	r3, #1
 800364a:	2300      	movhi	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	e006      	b.n	800365e <HAL_I2C_Init+0x92>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4a7d      	ldr	r2, [pc, #500]	; (8003848 <HAL_I2C_Init+0x27c>)
 8003654:	4293      	cmp	r3, r2
 8003656:	bf94      	ite	ls
 8003658:	2301      	movls	r3, #1
 800365a:	2300      	movhi	r3, #0
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e0e7      	b.n	8003836 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	4a78      	ldr	r2, [pc, #480]	; (800384c <HAL_I2C_Init+0x280>)
 800366a:	fba2 2303 	umull	r2, r3, r2, r3
 800366e:	0c9b      	lsrs	r3, r3, #18
 8003670:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	430a      	orrs	r2, r1
 8003684:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	4a6a      	ldr	r2, [pc, #424]	; (8003840 <HAL_I2C_Init+0x274>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d802      	bhi.n	80036a0 <HAL_I2C_Init+0xd4>
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	3301      	adds	r3, #1
 800369e:	e009      	b.n	80036b4 <HAL_I2C_Init+0xe8>
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80036a6:	fb02 f303 	mul.w	r3, r2, r3
 80036aa:	4a69      	ldr	r2, [pc, #420]	; (8003850 <HAL_I2C_Init+0x284>)
 80036ac:	fba2 2303 	umull	r2, r3, r2, r3
 80036b0:	099b      	lsrs	r3, r3, #6
 80036b2:	3301      	adds	r3, #1
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	6812      	ldr	r2, [r2, #0]
 80036b8:	430b      	orrs	r3, r1
 80036ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80036c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	495c      	ldr	r1, [pc, #368]	; (8003840 <HAL_I2C_Init+0x274>)
 80036d0:	428b      	cmp	r3, r1
 80036d2:	d819      	bhi.n	8003708 <HAL_I2C_Init+0x13c>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	1e59      	subs	r1, r3, #1
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	fbb1 f3f3 	udiv	r3, r1, r3
 80036e2:	1c59      	adds	r1, r3, #1
 80036e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80036e8:	400b      	ands	r3, r1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00a      	beq.n	8003704 <HAL_I2C_Init+0x138>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	1e59      	subs	r1, r3, #1
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80036fc:	3301      	adds	r3, #1
 80036fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003702:	e051      	b.n	80037a8 <HAL_I2C_Init+0x1dc>
 8003704:	2304      	movs	r3, #4
 8003706:	e04f      	b.n	80037a8 <HAL_I2C_Init+0x1dc>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d111      	bne.n	8003734 <HAL_I2C_Init+0x168>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	1e58      	subs	r0, r3, #1
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6859      	ldr	r1, [r3, #4]
 8003718:	460b      	mov	r3, r1
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	440b      	add	r3, r1
 800371e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003722:	3301      	adds	r3, #1
 8003724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003728:	2b00      	cmp	r3, #0
 800372a:	bf0c      	ite	eq
 800372c:	2301      	moveq	r3, #1
 800372e:	2300      	movne	r3, #0
 8003730:	b2db      	uxtb	r3, r3
 8003732:	e012      	b.n	800375a <HAL_I2C_Init+0x18e>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	1e58      	subs	r0, r3, #1
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6859      	ldr	r1, [r3, #4]
 800373c:	460b      	mov	r3, r1
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	440b      	add	r3, r1
 8003742:	0099      	lsls	r1, r3, #2
 8003744:	440b      	add	r3, r1
 8003746:	fbb0 f3f3 	udiv	r3, r0, r3
 800374a:	3301      	adds	r3, #1
 800374c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003750:	2b00      	cmp	r3, #0
 8003752:	bf0c      	ite	eq
 8003754:	2301      	moveq	r3, #1
 8003756:	2300      	movne	r3, #0
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <HAL_I2C_Init+0x196>
 800375e:	2301      	movs	r3, #1
 8003760:	e022      	b.n	80037a8 <HAL_I2C_Init+0x1dc>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10e      	bne.n	8003788 <HAL_I2C_Init+0x1bc>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	1e58      	subs	r0, r3, #1
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6859      	ldr	r1, [r3, #4]
 8003772:	460b      	mov	r3, r1
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	440b      	add	r3, r1
 8003778:	fbb0 f3f3 	udiv	r3, r0, r3
 800377c:	3301      	adds	r3, #1
 800377e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003786:	e00f      	b.n	80037a8 <HAL_I2C_Init+0x1dc>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	1e58      	subs	r0, r3, #1
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6859      	ldr	r1, [r3, #4]
 8003790:	460b      	mov	r3, r1
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	440b      	add	r3, r1
 8003796:	0099      	lsls	r1, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	fbb0 f3f3 	udiv	r3, r0, r3
 800379e:	3301      	adds	r3, #1
 80037a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037a8:	6879      	ldr	r1, [r7, #4]
 80037aa:	6809      	ldr	r1, [r1, #0]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69da      	ldr	r2, [r3, #28]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	431a      	orrs	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80037d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6911      	ldr	r1, [r2, #16]
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	68d2      	ldr	r2, [r2, #12]
 80037e2:	4311      	orrs	r1, r2
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6812      	ldr	r2, [r2, #0]
 80037e8:	430b      	orrs	r3, r1
 80037ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	695a      	ldr	r2, [r3, #20]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	431a      	orrs	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0201 	orr.w	r2, r2, #1
 8003816:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2220      	movs	r2, #32
 8003822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	000186a0 	.word	0x000186a0
 8003844:	001e847f 	.word	0x001e847f
 8003848:	003d08ff 	.word	0x003d08ff
 800384c:	431bde83 	.word	0x431bde83
 8003850:	10624dd3 	.word	0x10624dd3

08003854 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b088      	sub	sp, #32
 8003858:	af02      	add	r7, sp, #8
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	607a      	str	r2, [r7, #4]
 800385e:	461a      	mov	r2, r3
 8003860:	460b      	mov	r3, r1
 8003862:	817b      	strh	r3, [r7, #10]
 8003864:	4613      	mov	r3, r2
 8003866:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003868:	f7fe ffbc 	bl	80027e4 <HAL_GetTick>
 800386c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b20      	cmp	r3, #32
 8003878:	f040 80e0 	bne.w	8003a3c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	2319      	movs	r3, #25
 8003882:	2201      	movs	r2, #1
 8003884:	4970      	ldr	r1, [pc, #448]	; (8003a48 <HAL_I2C_Master_Transmit+0x1f4>)
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f000 f964 	bl	8003b54 <I2C_WaitOnFlagUntilTimeout>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003892:	2302      	movs	r3, #2
 8003894:	e0d3      	b.n	8003a3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800389c:	2b01      	cmp	r3, #1
 800389e:	d101      	bne.n	80038a4 <HAL_I2C_Master_Transmit+0x50>
 80038a0:	2302      	movs	r3, #2
 80038a2:	e0cc      	b.n	8003a3e <HAL_I2C_Master_Transmit+0x1ea>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d007      	beq.n	80038ca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f042 0201 	orr.w	r2, r2, #1
 80038c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2221      	movs	r2, #33	; 0x21
 80038de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2210      	movs	r2, #16
 80038e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	893a      	ldrh	r2, [r7, #8]
 80038fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003900:	b29a      	uxth	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	4a50      	ldr	r2, [pc, #320]	; (8003a4c <HAL_I2C_Master_Transmit+0x1f8>)
 800390a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800390c:	8979      	ldrh	r1, [r7, #10]
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	6a3a      	ldr	r2, [r7, #32]
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 f89c 	bl	8003a50 <I2C_MasterRequestWrite>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e08d      	b.n	8003a3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003922:	2300      	movs	r3, #0
 8003924:	613b      	str	r3, [r7, #16]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	613b      	str	r3, [r7, #16]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	613b      	str	r3, [r7, #16]
 8003936:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003938:	e066      	b.n	8003a08 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	6a39      	ldr	r1, [r7, #32]
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 f9de 	bl	8003d00 <I2C_WaitOnTXEFlagUntilTimeout>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00d      	beq.n	8003966 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	2b04      	cmp	r3, #4
 8003950:	d107      	bne.n	8003962 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003960:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e06b      	b.n	8003a3e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396a:	781a      	ldrb	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	1c5a      	adds	r2, r3, #1
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003980:	b29b      	uxth	r3, r3
 8003982:	3b01      	subs	r3, #1
 8003984:	b29a      	uxth	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800398e:	3b01      	subs	r3, #1
 8003990:	b29a      	uxth	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	695b      	ldr	r3, [r3, #20]
 800399c:	f003 0304 	and.w	r3, r3, #4
 80039a0:	2b04      	cmp	r3, #4
 80039a2:	d11b      	bne.n	80039dc <HAL_I2C_Master_Transmit+0x188>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d017      	beq.n	80039dc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b0:	781a      	ldrb	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	1c5a      	adds	r2, r3, #1
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d4:	3b01      	subs	r3, #1
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	6a39      	ldr	r1, [r7, #32]
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 f9ce 	bl	8003d82 <I2C_WaitOnBTFFlagUntilTimeout>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00d      	beq.n	8003a08 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f0:	2b04      	cmp	r3, #4
 80039f2:	d107      	bne.n	8003a04 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a02:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e01a      	b.n	8003a3e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d194      	bne.n	800393a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2220      	movs	r2, #32
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	e000      	b.n	8003a3e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003a3c:	2302      	movs	r3, #2
  }
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3718      	adds	r7, #24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	00100002 	.word	0x00100002
 8003a4c:	ffff0000 	.word	0xffff0000

08003a50 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b088      	sub	sp, #32
 8003a54:	af02      	add	r7, sp, #8
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	607a      	str	r2, [r7, #4]
 8003a5a:	603b      	str	r3, [r7, #0]
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a64:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	d006      	beq.n	8003a7a <I2C_MasterRequestWrite+0x2a>
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d003      	beq.n	8003a7a <I2C_MasterRequestWrite+0x2a>
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a78:	d108      	bne.n	8003a8c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	e00b      	b.n	8003aa4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a90:	2b12      	cmp	r3, #18
 8003a92:	d107      	bne.n	8003aa4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003aa2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 f84f 	bl	8003b54 <I2C_WaitOnFlagUntilTimeout>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00d      	beq.n	8003ad8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aca:	d103      	bne.n	8003ad4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ad2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e035      	b.n	8003b44 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ae0:	d108      	bne.n	8003af4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ae2:	897b      	ldrh	r3, [r7, #10]
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003af0:	611a      	str	r2, [r3, #16]
 8003af2:	e01b      	b.n	8003b2c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003af4:	897b      	ldrh	r3, [r7, #10]
 8003af6:	11db      	asrs	r3, r3, #7
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	f003 0306 	and.w	r3, r3, #6
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	f063 030f 	orn	r3, r3, #15
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	490e      	ldr	r1, [pc, #56]	; (8003b4c <I2C_MasterRequestWrite+0xfc>)
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 f875 	bl	8003c02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e010      	b.n	8003b44 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b22:	897b      	ldrh	r3, [r7, #10]
 8003b24:	b2da      	uxtb	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	4907      	ldr	r1, [pc, #28]	; (8003b50 <I2C_MasterRequestWrite+0x100>)
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 f865 	bl	8003c02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3718      	adds	r7, #24
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	00010008 	.word	0x00010008
 8003b50:	00010002 	.word	0x00010002

08003b54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	603b      	str	r3, [r7, #0]
 8003b60:	4613      	mov	r3, r2
 8003b62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b64:	e025      	b.n	8003bb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6c:	d021      	beq.n	8003bb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b6e:	f7fe fe39 	bl	80027e4 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d302      	bcc.n	8003b84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d116      	bne.n	8003bb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	f043 0220 	orr.w	r2, r3, #32
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e023      	b.n	8003bfa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	0c1b      	lsrs	r3, r3, #16
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d10d      	bne.n	8003bd8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	43da      	mvns	r2, r3
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	bf0c      	ite	eq
 8003bce:	2301      	moveq	r3, #1
 8003bd0:	2300      	movne	r3, #0
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	e00c      	b.n	8003bf2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	43da      	mvns	r2, r3
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	4013      	ands	r3, r2
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	bf0c      	ite	eq
 8003bea:	2301      	moveq	r3, #1
 8003bec:	2300      	movne	r3, #0
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	79fb      	ldrb	r3, [r7, #7]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d0b6      	beq.n	8003b66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b084      	sub	sp, #16
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	607a      	str	r2, [r7, #4]
 8003c0e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c10:	e051      	b.n	8003cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c20:	d123      	bne.n	8003c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c30:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c3a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2220      	movs	r2, #32
 8003c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	f043 0204 	orr.w	r2, r3, #4
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e046      	b.n	8003cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c70:	d021      	beq.n	8003cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c72:	f7fe fdb7 	bl	80027e4 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d302      	bcc.n	8003c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d116      	bne.n	8003cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2220      	movs	r2, #32
 8003c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	f043 0220 	orr.w	r2, r3, #32
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e020      	b.n	8003cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	0c1b      	lsrs	r3, r3, #16
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d10c      	bne.n	8003cda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	43da      	mvns	r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	bf14      	ite	ne
 8003cd2:	2301      	movne	r3, #1
 8003cd4:	2300      	moveq	r3, #0
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	e00b      	b.n	8003cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	43da      	mvns	r2, r3
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	bf14      	ite	ne
 8003cec:	2301      	movne	r3, #1
 8003cee:	2300      	moveq	r3, #0
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d18d      	bne.n	8003c12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d0c:	e02d      	b.n	8003d6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 f878 	bl	8003e04 <I2C_IsAcknowledgeFailed>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e02d      	b.n	8003d7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d24:	d021      	beq.n	8003d6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d26:	f7fe fd5d 	bl	80027e4 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	68ba      	ldr	r2, [r7, #8]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d302      	bcc.n	8003d3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d116      	bne.n	8003d6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2220      	movs	r2, #32
 8003d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	f043 0220 	orr.w	r2, r3, #32
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e007      	b.n	8003d7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d74:	2b80      	cmp	r3, #128	; 0x80
 8003d76:	d1ca      	bne.n	8003d0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b084      	sub	sp, #16
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	60f8      	str	r0, [r7, #12]
 8003d8a:	60b9      	str	r1, [r7, #8]
 8003d8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d8e:	e02d      	b.n	8003dec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f000 f837 	bl	8003e04 <I2C_IsAcknowledgeFailed>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e02d      	b.n	8003dfc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da6:	d021      	beq.n	8003dec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003da8:	f7fe fd1c 	bl	80027e4 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d302      	bcc.n	8003dbe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d116      	bne.n	8003dec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd8:	f043 0220 	orr.w	r2, r3, #32
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e007      	b.n	8003dfc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	f003 0304 	and.w	r3, r3, #4
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d1ca      	bne.n	8003d90 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e1a:	d11b      	bne.n	8003e54 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e24:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e40:	f043 0204 	orr.w	r2, r3, #4
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e000      	b.n	8003e56 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
 8003e6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b20      	cmp	r3, #32
 8003e76:	d129      	bne.n	8003ecc <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2224      	movs	r2, #36	; 0x24
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 0201 	bic.w	r2, r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 0210 	bic.w	r2, r2, #16
 8003e9e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	430a      	orrs	r2, r1
 8003eae:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0201 	orr.w	r2, r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	e000      	b.n	8003ece <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003ecc:	2302      	movs	r3, #2
  }
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b085      	sub	sp, #20
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
 8003ee2:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b20      	cmp	r3, #32
 8003ef2:	d12a      	bne.n	8003f4a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2224      	movs	r2, #36	; 0x24
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 0201 	bic.w	r2, r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f12:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003f14:	89fb      	ldrh	r3, [r7, #14]
 8003f16:	f023 030f 	bic.w	r3, r3, #15
 8003f1a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	89fb      	ldrh	r3, [r7, #14]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	89fa      	ldrh	r2, [r7, #14]
 8003f2c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f042 0201 	orr.w	r2, r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2220      	movs	r2, #32
 8003f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f46:	2300      	movs	r3, #0
 8003f48:	e000      	b.n	8003f4c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003f4a:	2302      	movs	r3, #2
  }
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3714      	adds	r7, #20
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f5a:	b08f      	sub	sp, #60	; 0x3c
 8003f5c:	af0a      	add	r7, sp, #40	; 0x28
 8003f5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e10f      	b.n	800418a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d106      	bne.n	8003f8a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f7fd ff4b 	bl	8001e20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2203      	movs	r2, #3
 8003f8e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d102      	bne.n	8003fa4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f003 fb94 	bl	80076d6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	603b      	str	r3, [r7, #0]
 8003fb4:	687e      	ldr	r6, [r7, #4]
 8003fb6:	466d      	mov	r5, sp
 8003fb8:	f106 0410 	add.w	r4, r6, #16
 8003fbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fc4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003fc8:	e885 0003 	stmia.w	r5, {r0, r1}
 8003fcc:	1d33      	adds	r3, r6, #4
 8003fce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fd0:	6838      	ldr	r0, [r7, #0]
 8003fd2:	f003 fb1f 	bl	8007614 <USB_CoreInit>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d005      	beq.n	8003fe8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e0d0      	b.n	800418a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2100      	movs	r1, #0
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f003 fb82 	bl	80076f8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	73fb      	strb	r3, [r7, #15]
 8003ff8:	e04a      	b.n	8004090 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ffa:	7bfa      	ldrb	r2, [r7, #15]
 8003ffc:	6879      	ldr	r1, [r7, #4]
 8003ffe:	4613      	mov	r3, r2
 8004000:	00db      	lsls	r3, r3, #3
 8004002:	4413      	add	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	440b      	add	r3, r1
 8004008:	333d      	adds	r3, #61	; 0x3d
 800400a:	2201      	movs	r2, #1
 800400c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800400e:	7bfa      	ldrb	r2, [r7, #15]
 8004010:	6879      	ldr	r1, [r7, #4]
 8004012:	4613      	mov	r3, r2
 8004014:	00db      	lsls	r3, r3, #3
 8004016:	4413      	add	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	440b      	add	r3, r1
 800401c:	333c      	adds	r3, #60	; 0x3c
 800401e:	7bfa      	ldrb	r2, [r7, #15]
 8004020:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004022:	7bfa      	ldrb	r2, [r7, #15]
 8004024:	7bfb      	ldrb	r3, [r7, #15]
 8004026:	b298      	uxth	r0, r3
 8004028:	6879      	ldr	r1, [r7, #4]
 800402a:	4613      	mov	r3, r2
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	4413      	add	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	440b      	add	r3, r1
 8004034:	3344      	adds	r3, #68	; 0x44
 8004036:	4602      	mov	r2, r0
 8004038:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800403a:	7bfa      	ldrb	r2, [r7, #15]
 800403c:	6879      	ldr	r1, [r7, #4]
 800403e:	4613      	mov	r3, r2
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	4413      	add	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	440b      	add	r3, r1
 8004048:	3340      	adds	r3, #64	; 0x40
 800404a:	2200      	movs	r2, #0
 800404c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800404e:	7bfa      	ldrb	r2, [r7, #15]
 8004050:	6879      	ldr	r1, [r7, #4]
 8004052:	4613      	mov	r3, r2
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	4413      	add	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	440b      	add	r3, r1
 800405c:	3348      	adds	r3, #72	; 0x48
 800405e:	2200      	movs	r2, #0
 8004060:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004062:	7bfa      	ldrb	r2, [r7, #15]
 8004064:	6879      	ldr	r1, [r7, #4]
 8004066:	4613      	mov	r3, r2
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	4413      	add	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	440b      	add	r3, r1
 8004070:	334c      	adds	r3, #76	; 0x4c
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004076:	7bfa      	ldrb	r2, [r7, #15]
 8004078:	6879      	ldr	r1, [r7, #4]
 800407a:	4613      	mov	r3, r2
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	4413      	add	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	440b      	add	r3, r1
 8004084:	3354      	adds	r3, #84	; 0x54
 8004086:	2200      	movs	r2, #0
 8004088:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800408a:	7bfb      	ldrb	r3, [r7, #15]
 800408c:	3301      	adds	r3, #1
 800408e:	73fb      	strb	r3, [r7, #15]
 8004090:	7bfa      	ldrb	r2, [r7, #15]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	429a      	cmp	r2, r3
 8004098:	d3af      	bcc.n	8003ffa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800409a:	2300      	movs	r3, #0
 800409c:	73fb      	strb	r3, [r7, #15]
 800409e:	e044      	b.n	800412a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80040a0:	7bfa      	ldrb	r2, [r7, #15]
 80040a2:	6879      	ldr	r1, [r7, #4]
 80040a4:	4613      	mov	r3, r2
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	4413      	add	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	440b      	add	r3, r1
 80040ae:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80040b2:	2200      	movs	r2, #0
 80040b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80040b6:	7bfa      	ldrb	r2, [r7, #15]
 80040b8:	6879      	ldr	r1, [r7, #4]
 80040ba:	4613      	mov	r3, r2
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	4413      	add	r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	440b      	add	r3, r1
 80040c4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80040c8:	7bfa      	ldrb	r2, [r7, #15]
 80040ca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80040cc:	7bfa      	ldrb	r2, [r7, #15]
 80040ce:	6879      	ldr	r1, [r7, #4]
 80040d0:	4613      	mov	r3, r2
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	4413      	add	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	440b      	add	r3, r1
 80040da:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80040de:	2200      	movs	r2, #0
 80040e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80040e2:	7bfa      	ldrb	r2, [r7, #15]
 80040e4:	6879      	ldr	r1, [r7, #4]
 80040e6:	4613      	mov	r3, r2
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	4413      	add	r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	440b      	add	r3, r1
 80040f0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80040f4:	2200      	movs	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80040f8:	7bfa      	ldrb	r2, [r7, #15]
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	4613      	mov	r3, r2
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	4413      	add	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	440b      	add	r3, r1
 8004106:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800410a:	2200      	movs	r2, #0
 800410c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800410e:	7bfa      	ldrb	r2, [r7, #15]
 8004110:	6879      	ldr	r1, [r7, #4]
 8004112:	4613      	mov	r3, r2
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	4413      	add	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	440b      	add	r3, r1
 800411c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004124:	7bfb      	ldrb	r3, [r7, #15]
 8004126:	3301      	adds	r3, #1
 8004128:	73fb      	strb	r3, [r7, #15]
 800412a:	7bfa      	ldrb	r2, [r7, #15]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	429a      	cmp	r2, r3
 8004132:	d3b5      	bcc.n	80040a0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	603b      	str	r3, [r7, #0]
 800413a:	687e      	ldr	r6, [r7, #4]
 800413c:	466d      	mov	r5, sp
 800413e:	f106 0410 	add.w	r4, r6, #16
 8004142:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004144:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004146:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004148:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800414a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800414e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004152:	1d33      	adds	r3, r6, #4
 8004154:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004156:	6838      	ldr	r0, [r7, #0]
 8004158:	f003 fb1a 	bl	8007790 <USB_DevInit>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d005      	beq.n	800416e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2202      	movs	r2, #2
 8004166:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e00d      	b.n	800418a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4618      	mov	r0, r3
 8004184:	f003 fce5 	bl	8007b52 <USB_DevDisconnect>

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004194 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e267      	b.n	8004676 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d075      	beq.n	800429e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041b2:	4b88      	ldr	r3, [pc, #544]	; (80043d4 <HAL_RCC_OscConfig+0x240>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f003 030c 	and.w	r3, r3, #12
 80041ba:	2b04      	cmp	r3, #4
 80041bc:	d00c      	beq.n	80041d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041be:	4b85      	ldr	r3, [pc, #532]	; (80043d4 <HAL_RCC_OscConfig+0x240>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041c6:	2b08      	cmp	r3, #8
 80041c8:	d112      	bne.n	80041f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ca:	4b82      	ldr	r3, [pc, #520]	; (80043d4 <HAL_RCC_OscConfig+0x240>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041d6:	d10b      	bne.n	80041f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d8:	4b7e      	ldr	r3, [pc, #504]	; (80043d4 <HAL_RCC_OscConfig+0x240>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d05b      	beq.n	800429c <HAL_RCC_OscConfig+0x108>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d157      	bne.n	800429c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e242      	b.n	8004676 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041f8:	d106      	bne.n	8004208 <HAL_RCC_OscConfig+0x74>
 80041fa:	4b76      	ldr	r3, [pc, #472]	; (80043d4 <HAL_RCC_OscConfig+0x240>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a75      	ldr	r2, [pc, #468]	; (80043d4 <HAL_RCC_OscConfig+0x240>)
 8004200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004204:	6013      	str	r3, [r2, #0]
 8004206:	e01d      	b.n	8004244 <HAL_RCC_OscConfig+0xb0>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004210:	d10c      	bne.n	800422c <HAL_RCC_OscConfig+0x98>
 8004212:	4b70      	ldr	r3, [pc, #448]	; (80043d4 <HAL_RCC_OscConfig+0x240>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a6f      	ldr	r2, [pc, #444]	; (80043d4 <HAL_RCC_OscConfig+0x240>)
 8004218:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	4b6d      	ldr	r3, [pc, #436]	; (80043d4 <HAL_RCC_OscConfig+0x240>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a6c      	ldr	r2, [pc, #432]	; (80043d4 <HAL_RCC_OscConfig+0x240>)
 8004224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004228:	6013      	str	r3, [r2, #0]
 800422a:	e00b      	b.n	8004244 <HAL_RCC_OscConfig+0xb0>
 800422c:	4b69      	ldr	r3, [pc, #420]	; (80043d4 <HAL_RCC_OscConfig+0x240>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a68      	ldr	r2, [pc, #416]	; (80043d4 <HAL_RCC_OscConfig+0x240>)
 8004232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004236:	6013      	str	r3, [r2, #0]
 8004238:	4b66      	ldr	r3, [pc, #408]	; (80043d4 <HAL_RCC_OscConfig+0x240>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a65      	ldr	r2, [pc, #404]	; (80043d4 <HAL_RCC_OscConfig+0x240>)
 800423e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004242:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d013      	beq.n	8004274 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800424c:	f7fe faca 	bl	80027e4 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004254:	f7fe fac6 	bl	80027e4 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b64      	cmp	r3, #100	; 0x64
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e207      	b.n	8004676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004266:	4b5b      	ldr	r3, [pc, #364]	; (80043d4 <HAL_RCC_OscConfig+0x240>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0f0      	beq.n	8004254 <HAL_RCC_OscConfig+0xc0>
 8004272:	e014      	b.n	800429e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004274:	f7fe fab6 	bl	80027e4 <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800427c:	f7fe fab2 	bl	80027e4 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b64      	cmp	r3, #100	; 0x64
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e1f3      	b.n	8004676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800428e:	4b51      	ldr	r3, [pc, #324]	; (80043d4 <HAL_RCC_OscConfig+0x240>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1f0      	bne.n	800427c <HAL_RCC_OscConfig+0xe8>
 800429a:	e000      	b.n	800429e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800429c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d063      	beq.n	8004372 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042aa:	4b4a      	ldr	r3, [pc, #296]	; (80043d4 <HAL_RCC_OscConfig+0x240>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 030c 	and.w	r3, r3, #12
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00b      	beq.n	80042ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042b6:	4b47      	ldr	r3, [pc, #284]	; (80043d4 <HAL_RCC_OscConfig+0x240>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042be:	2b08      	cmp	r3, #8
 80042c0:	d11c      	bne.n	80042fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042c2:	4b44      	ldr	r3, [pc, #272]	; (80043d4 <HAL_RCC_OscConfig+0x240>)
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d116      	bne.n	80042fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ce:	4b41      	ldr	r3, [pc, #260]	; (80043d4 <HAL_RCC_OscConfig+0x240>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d005      	beq.n	80042e6 <HAL_RCC_OscConfig+0x152>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d001      	beq.n	80042e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e1c7      	b.n	8004676 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042e6:	4b3b      	ldr	r3, [pc, #236]	; (80043d4 <HAL_RCC_OscConfig+0x240>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	4937      	ldr	r1, [pc, #220]	; (80043d4 <HAL_RCC_OscConfig+0x240>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042fa:	e03a      	b.n	8004372 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d020      	beq.n	8004346 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004304:	4b34      	ldr	r3, [pc, #208]	; (80043d8 <HAL_RCC_OscConfig+0x244>)
 8004306:	2201      	movs	r2, #1
 8004308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430a:	f7fe fa6b 	bl	80027e4 <HAL_GetTick>
 800430e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004310:	e008      	b.n	8004324 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004312:	f7fe fa67 	bl	80027e4 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e1a8      	b.n	8004676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004324:	4b2b      	ldr	r3, [pc, #172]	; (80043d4 <HAL_RCC_OscConfig+0x240>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0f0      	beq.n	8004312 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004330:	4b28      	ldr	r3, [pc, #160]	; (80043d4 <HAL_RCC_OscConfig+0x240>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	00db      	lsls	r3, r3, #3
 800433e:	4925      	ldr	r1, [pc, #148]	; (80043d4 <HAL_RCC_OscConfig+0x240>)
 8004340:	4313      	orrs	r3, r2
 8004342:	600b      	str	r3, [r1, #0]
 8004344:	e015      	b.n	8004372 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004346:	4b24      	ldr	r3, [pc, #144]	; (80043d8 <HAL_RCC_OscConfig+0x244>)
 8004348:	2200      	movs	r2, #0
 800434a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434c:	f7fe fa4a 	bl	80027e4 <HAL_GetTick>
 8004350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004352:	e008      	b.n	8004366 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004354:	f7fe fa46 	bl	80027e4 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b02      	cmp	r3, #2
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e187      	b.n	8004676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004366:	4b1b      	ldr	r3, [pc, #108]	; (80043d4 <HAL_RCC_OscConfig+0x240>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1f0      	bne.n	8004354 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0308 	and.w	r3, r3, #8
 800437a:	2b00      	cmp	r3, #0
 800437c:	d036      	beq.n	80043ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d016      	beq.n	80043b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004386:	4b15      	ldr	r3, [pc, #84]	; (80043dc <HAL_RCC_OscConfig+0x248>)
 8004388:	2201      	movs	r2, #1
 800438a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800438c:	f7fe fa2a 	bl	80027e4 <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004392:	e008      	b.n	80043a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004394:	f7fe fa26 	bl	80027e4 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e167      	b.n	8004676 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043a6:	4b0b      	ldr	r3, [pc, #44]	; (80043d4 <HAL_RCC_OscConfig+0x240>)
 80043a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d0f0      	beq.n	8004394 <HAL_RCC_OscConfig+0x200>
 80043b2:	e01b      	b.n	80043ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043b4:	4b09      	ldr	r3, [pc, #36]	; (80043dc <HAL_RCC_OscConfig+0x248>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ba:	f7fe fa13 	bl	80027e4 <HAL_GetTick>
 80043be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043c0:	e00e      	b.n	80043e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043c2:	f7fe fa0f 	bl	80027e4 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d907      	bls.n	80043e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e150      	b.n	8004676 <HAL_RCC_OscConfig+0x4e2>
 80043d4:	40023800 	.word	0x40023800
 80043d8:	42470000 	.word	0x42470000
 80043dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043e0:	4b88      	ldr	r3, [pc, #544]	; (8004604 <HAL_RCC_OscConfig+0x470>)
 80043e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1ea      	bne.n	80043c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0304 	and.w	r3, r3, #4
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 8097 	beq.w	8004528 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043fa:	2300      	movs	r3, #0
 80043fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043fe:	4b81      	ldr	r3, [pc, #516]	; (8004604 <HAL_RCC_OscConfig+0x470>)
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10f      	bne.n	800442a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800440a:	2300      	movs	r3, #0
 800440c:	60bb      	str	r3, [r7, #8]
 800440e:	4b7d      	ldr	r3, [pc, #500]	; (8004604 <HAL_RCC_OscConfig+0x470>)
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	4a7c      	ldr	r2, [pc, #496]	; (8004604 <HAL_RCC_OscConfig+0x470>)
 8004414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004418:	6413      	str	r3, [r2, #64]	; 0x40
 800441a:	4b7a      	ldr	r3, [pc, #488]	; (8004604 <HAL_RCC_OscConfig+0x470>)
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004422:	60bb      	str	r3, [r7, #8]
 8004424:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004426:	2301      	movs	r3, #1
 8004428:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800442a:	4b77      	ldr	r3, [pc, #476]	; (8004608 <HAL_RCC_OscConfig+0x474>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004432:	2b00      	cmp	r3, #0
 8004434:	d118      	bne.n	8004468 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004436:	4b74      	ldr	r3, [pc, #464]	; (8004608 <HAL_RCC_OscConfig+0x474>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a73      	ldr	r2, [pc, #460]	; (8004608 <HAL_RCC_OscConfig+0x474>)
 800443c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004440:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004442:	f7fe f9cf 	bl	80027e4 <HAL_GetTick>
 8004446:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004448:	e008      	b.n	800445c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800444a:	f7fe f9cb 	bl	80027e4 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b02      	cmp	r3, #2
 8004456:	d901      	bls.n	800445c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e10c      	b.n	8004676 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800445c:	4b6a      	ldr	r3, [pc, #424]	; (8004608 <HAL_RCC_OscConfig+0x474>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0f0      	beq.n	800444a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d106      	bne.n	800447e <HAL_RCC_OscConfig+0x2ea>
 8004470:	4b64      	ldr	r3, [pc, #400]	; (8004604 <HAL_RCC_OscConfig+0x470>)
 8004472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004474:	4a63      	ldr	r2, [pc, #396]	; (8004604 <HAL_RCC_OscConfig+0x470>)
 8004476:	f043 0301 	orr.w	r3, r3, #1
 800447a:	6713      	str	r3, [r2, #112]	; 0x70
 800447c:	e01c      	b.n	80044b8 <HAL_RCC_OscConfig+0x324>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	2b05      	cmp	r3, #5
 8004484:	d10c      	bne.n	80044a0 <HAL_RCC_OscConfig+0x30c>
 8004486:	4b5f      	ldr	r3, [pc, #380]	; (8004604 <HAL_RCC_OscConfig+0x470>)
 8004488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448a:	4a5e      	ldr	r2, [pc, #376]	; (8004604 <HAL_RCC_OscConfig+0x470>)
 800448c:	f043 0304 	orr.w	r3, r3, #4
 8004490:	6713      	str	r3, [r2, #112]	; 0x70
 8004492:	4b5c      	ldr	r3, [pc, #368]	; (8004604 <HAL_RCC_OscConfig+0x470>)
 8004494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004496:	4a5b      	ldr	r2, [pc, #364]	; (8004604 <HAL_RCC_OscConfig+0x470>)
 8004498:	f043 0301 	orr.w	r3, r3, #1
 800449c:	6713      	str	r3, [r2, #112]	; 0x70
 800449e:	e00b      	b.n	80044b8 <HAL_RCC_OscConfig+0x324>
 80044a0:	4b58      	ldr	r3, [pc, #352]	; (8004604 <HAL_RCC_OscConfig+0x470>)
 80044a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a4:	4a57      	ldr	r2, [pc, #348]	; (8004604 <HAL_RCC_OscConfig+0x470>)
 80044a6:	f023 0301 	bic.w	r3, r3, #1
 80044aa:	6713      	str	r3, [r2, #112]	; 0x70
 80044ac:	4b55      	ldr	r3, [pc, #340]	; (8004604 <HAL_RCC_OscConfig+0x470>)
 80044ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b0:	4a54      	ldr	r2, [pc, #336]	; (8004604 <HAL_RCC_OscConfig+0x470>)
 80044b2:	f023 0304 	bic.w	r3, r3, #4
 80044b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d015      	beq.n	80044ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c0:	f7fe f990 	bl	80027e4 <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044c6:	e00a      	b.n	80044de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044c8:	f7fe f98c 	bl	80027e4 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e0cb      	b.n	8004676 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044de:	4b49      	ldr	r3, [pc, #292]	; (8004604 <HAL_RCC_OscConfig+0x470>)
 80044e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d0ee      	beq.n	80044c8 <HAL_RCC_OscConfig+0x334>
 80044ea:	e014      	b.n	8004516 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ec:	f7fe f97a 	bl	80027e4 <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044f2:	e00a      	b.n	800450a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044f4:	f7fe f976 	bl	80027e4 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004502:	4293      	cmp	r3, r2
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e0b5      	b.n	8004676 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800450a:	4b3e      	ldr	r3, [pc, #248]	; (8004604 <HAL_RCC_OscConfig+0x470>)
 800450c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1ee      	bne.n	80044f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004516:	7dfb      	ldrb	r3, [r7, #23]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d105      	bne.n	8004528 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800451c:	4b39      	ldr	r3, [pc, #228]	; (8004604 <HAL_RCC_OscConfig+0x470>)
 800451e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004520:	4a38      	ldr	r2, [pc, #224]	; (8004604 <HAL_RCC_OscConfig+0x470>)
 8004522:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004526:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 80a1 	beq.w	8004674 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004532:	4b34      	ldr	r3, [pc, #208]	; (8004604 <HAL_RCC_OscConfig+0x470>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f003 030c 	and.w	r3, r3, #12
 800453a:	2b08      	cmp	r3, #8
 800453c:	d05c      	beq.n	80045f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	2b02      	cmp	r3, #2
 8004544:	d141      	bne.n	80045ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004546:	4b31      	ldr	r3, [pc, #196]	; (800460c <HAL_RCC_OscConfig+0x478>)
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800454c:	f7fe f94a 	bl	80027e4 <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004552:	e008      	b.n	8004566 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004554:	f7fe f946 	bl	80027e4 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e087      	b.n	8004676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004566:	4b27      	ldr	r3, [pc, #156]	; (8004604 <HAL_RCC_OscConfig+0x470>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1f0      	bne.n	8004554 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	69da      	ldr	r2, [r3, #28]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	431a      	orrs	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	019b      	lsls	r3, r3, #6
 8004582:	431a      	orrs	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004588:	085b      	lsrs	r3, r3, #1
 800458a:	3b01      	subs	r3, #1
 800458c:	041b      	lsls	r3, r3, #16
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004594:	061b      	lsls	r3, r3, #24
 8004596:	491b      	ldr	r1, [pc, #108]	; (8004604 <HAL_RCC_OscConfig+0x470>)
 8004598:	4313      	orrs	r3, r2
 800459a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800459c:	4b1b      	ldr	r3, [pc, #108]	; (800460c <HAL_RCC_OscConfig+0x478>)
 800459e:	2201      	movs	r2, #1
 80045a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a2:	f7fe f91f 	bl	80027e4 <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045a8:	e008      	b.n	80045bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045aa:	f7fe f91b 	bl	80027e4 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e05c      	b.n	8004676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045bc:	4b11      	ldr	r3, [pc, #68]	; (8004604 <HAL_RCC_OscConfig+0x470>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0f0      	beq.n	80045aa <HAL_RCC_OscConfig+0x416>
 80045c8:	e054      	b.n	8004674 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ca:	4b10      	ldr	r3, [pc, #64]	; (800460c <HAL_RCC_OscConfig+0x478>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d0:	f7fe f908 	bl	80027e4 <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045d8:	f7fe f904 	bl	80027e4 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e045      	b.n	8004676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ea:	4b06      	ldr	r3, [pc, #24]	; (8004604 <HAL_RCC_OscConfig+0x470>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1f0      	bne.n	80045d8 <HAL_RCC_OscConfig+0x444>
 80045f6:	e03d      	b.n	8004674 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d107      	bne.n	8004610 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e038      	b.n	8004676 <HAL_RCC_OscConfig+0x4e2>
 8004604:	40023800 	.word	0x40023800
 8004608:	40007000 	.word	0x40007000
 800460c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004610:	4b1b      	ldr	r3, [pc, #108]	; (8004680 <HAL_RCC_OscConfig+0x4ec>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d028      	beq.n	8004670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004628:	429a      	cmp	r2, r3
 800462a:	d121      	bne.n	8004670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004636:	429a      	cmp	r2, r3
 8004638:	d11a      	bne.n	8004670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004640:	4013      	ands	r3, r2
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004646:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004648:	4293      	cmp	r3, r2
 800464a:	d111      	bne.n	8004670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004656:	085b      	lsrs	r3, r3, #1
 8004658:	3b01      	subs	r3, #1
 800465a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800465c:	429a      	cmp	r2, r3
 800465e:	d107      	bne.n	8004670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800466c:	429a      	cmp	r2, r3
 800466e:	d001      	beq.n	8004674 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e000      	b.n	8004676 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3718      	adds	r7, #24
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	40023800 	.word	0x40023800

08004684 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e0cc      	b.n	8004832 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004698:	4b68      	ldr	r3, [pc, #416]	; (800483c <HAL_RCC_ClockConfig+0x1b8>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 030f 	and.w	r3, r3, #15
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d90c      	bls.n	80046c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046a6:	4b65      	ldr	r3, [pc, #404]	; (800483c <HAL_RCC_ClockConfig+0x1b8>)
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	b2d2      	uxtb	r2, r2
 80046ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ae:	4b63      	ldr	r3, [pc, #396]	; (800483c <HAL_RCC_ClockConfig+0x1b8>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 030f 	and.w	r3, r3, #15
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d001      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e0b8      	b.n	8004832 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d020      	beq.n	800470e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0304 	and.w	r3, r3, #4
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d005      	beq.n	80046e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046d8:	4b59      	ldr	r3, [pc, #356]	; (8004840 <HAL_RCC_ClockConfig+0x1bc>)
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	4a58      	ldr	r2, [pc, #352]	; (8004840 <HAL_RCC_ClockConfig+0x1bc>)
 80046de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0308 	and.w	r3, r3, #8
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d005      	beq.n	80046fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046f0:	4b53      	ldr	r3, [pc, #332]	; (8004840 <HAL_RCC_ClockConfig+0x1bc>)
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	4a52      	ldr	r2, [pc, #328]	; (8004840 <HAL_RCC_ClockConfig+0x1bc>)
 80046f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046fc:	4b50      	ldr	r3, [pc, #320]	; (8004840 <HAL_RCC_ClockConfig+0x1bc>)
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	494d      	ldr	r1, [pc, #308]	; (8004840 <HAL_RCC_ClockConfig+0x1bc>)
 800470a:	4313      	orrs	r3, r2
 800470c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	d044      	beq.n	80047a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d107      	bne.n	8004732 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004722:	4b47      	ldr	r3, [pc, #284]	; (8004840 <HAL_RCC_ClockConfig+0x1bc>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d119      	bne.n	8004762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e07f      	b.n	8004832 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	2b02      	cmp	r3, #2
 8004738:	d003      	beq.n	8004742 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800473e:	2b03      	cmp	r3, #3
 8004740:	d107      	bne.n	8004752 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004742:	4b3f      	ldr	r3, [pc, #252]	; (8004840 <HAL_RCC_ClockConfig+0x1bc>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d109      	bne.n	8004762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e06f      	b.n	8004832 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004752:	4b3b      	ldr	r3, [pc, #236]	; (8004840 <HAL_RCC_ClockConfig+0x1bc>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e067      	b.n	8004832 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004762:	4b37      	ldr	r3, [pc, #220]	; (8004840 <HAL_RCC_ClockConfig+0x1bc>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f023 0203 	bic.w	r2, r3, #3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	4934      	ldr	r1, [pc, #208]	; (8004840 <HAL_RCC_ClockConfig+0x1bc>)
 8004770:	4313      	orrs	r3, r2
 8004772:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004774:	f7fe f836 	bl	80027e4 <HAL_GetTick>
 8004778:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800477a:	e00a      	b.n	8004792 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800477c:	f7fe f832 	bl	80027e4 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	f241 3288 	movw	r2, #5000	; 0x1388
 800478a:	4293      	cmp	r3, r2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e04f      	b.n	8004832 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004792:	4b2b      	ldr	r3, [pc, #172]	; (8004840 <HAL_RCC_ClockConfig+0x1bc>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f003 020c 	and.w	r2, r3, #12
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d1eb      	bne.n	800477c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047a4:	4b25      	ldr	r3, [pc, #148]	; (800483c <HAL_RCC_ClockConfig+0x1b8>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 030f 	and.w	r3, r3, #15
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d20c      	bcs.n	80047cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047b2:	4b22      	ldr	r3, [pc, #136]	; (800483c <HAL_RCC_ClockConfig+0x1b8>)
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	b2d2      	uxtb	r2, r2
 80047b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ba:	4b20      	ldr	r3, [pc, #128]	; (800483c <HAL_RCC_ClockConfig+0x1b8>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 030f 	and.w	r3, r3, #15
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d001      	beq.n	80047cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e032      	b.n	8004832 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0304 	and.w	r3, r3, #4
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d008      	beq.n	80047ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047d8:	4b19      	ldr	r3, [pc, #100]	; (8004840 <HAL_RCC_ClockConfig+0x1bc>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	4916      	ldr	r1, [pc, #88]	; (8004840 <HAL_RCC_ClockConfig+0x1bc>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0308 	and.w	r3, r3, #8
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d009      	beq.n	800480a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047f6:	4b12      	ldr	r3, [pc, #72]	; (8004840 <HAL_RCC_ClockConfig+0x1bc>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	490e      	ldr	r1, [pc, #56]	; (8004840 <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	4313      	orrs	r3, r2
 8004808:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800480a:	f000 f821 	bl	8004850 <HAL_RCC_GetSysClockFreq>
 800480e:	4602      	mov	r2, r0
 8004810:	4b0b      	ldr	r3, [pc, #44]	; (8004840 <HAL_RCC_ClockConfig+0x1bc>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	091b      	lsrs	r3, r3, #4
 8004816:	f003 030f 	and.w	r3, r3, #15
 800481a:	490a      	ldr	r1, [pc, #40]	; (8004844 <HAL_RCC_ClockConfig+0x1c0>)
 800481c:	5ccb      	ldrb	r3, [r1, r3]
 800481e:	fa22 f303 	lsr.w	r3, r2, r3
 8004822:	4a09      	ldr	r2, [pc, #36]	; (8004848 <HAL_RCC_ClockConfig+0x1c4>)
 8004824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004826:	4b09      	ldr	r3, [pc, #36]	; (800484c <HAL_RCC_ClockConfig+0x1c8>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4618      	mov	r0, r3
 800482c:	f7fd ff96 	bl	800275c <HAL_InitTick>

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	40023c00 	.word	0x40023c00
 8004840:	40023800 	.word	0x40023800
 8004844:	08008fb8 	.word	0x08008fb8
 8004848:	20000010 	.word	0x20000010
 800484c:	20000018 	.word	0x20000018

08004850 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004854:	b094      	sub	sp, #80	; 0x50
 8004856:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004858:	2300      	movs	r3, #0
 800485a:	647b      	str	r3, [r7, #68]	; 0x44
 800485c:	2300      	movs	r3, #0
 800485e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004860:	2300      	movs	r3, #0
 8004862:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004864:	2300      	movs	r3, #0
 8004866:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004868:	4b79      	ldr	r3, [pc, #484]	; (8004a50 <HAL_RCC_GetSysClockFreq+0x200>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f003 030c 	and.w	r3, r3, #12
 8004870:	2b08      	cmp	r3, #8
 8004872:	d00d      	beq.n	8004890 <HAL_RCC_GetSysClockFreq+0x40>
 8004874:	2b08      	cmp	r3, #8
 8004876:	f200 80e1 	bhi.w	8004a3c <HAL_RCC_GetSysClockFreq+0x1ec>
 800487a:	2b00      	cmp	r3, #0
 800487c:	d002      	beq.n	8004884 <HAL_RCC_GetSysClockFreq+0x34>
 800487e:	2b04      	cmp	r3, #4
 8004880:	d003      	beq.n	800488a <HAL_RCC_GetSysClockFreq+0x3a>
 8004882:	e0db      	b.n	8004a3c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004884:	4b73      	ldr	r3, [pc, #460]	; (8004a54 <HAL_RCC_GetSysClockFreq+0x204>)
 8004886:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004888:	e0db      	b.n	8004a42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800488a:	4b73      	ldr	r3, [pc, #460]	; (8004a58 <HAL_RCC_GetSysClockFreq+0x208>)
 800488c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800488e:	e0d8      	b.n	8004a42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004890:	4b6f      	ldr	r3, [pc, #444]	; (8004a50 <HAL_RCC_GetSysClockFreq+0x200>)
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004898:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800489a:	4b6d      	ldr	r3, [pc, #436]	; (8004a50 <HAL_RCC_GetSysClockFreq+0x200>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d063      	beq.n	800496e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048a6:	4b6a      	ldr	r3, [pc, #424]	; (8004a50 <HAL_RCC_GetSysClockFreq+0x200>)
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	099b      	lsrs	r3, r3, #6
 80048ac:	2200      	movs	r2, #0
 80048ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80048b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80048b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048b8:	633b      	str	r3, [r7, #48]	; 0x30
 80048ba:	2300      	movs	r3, #0
 80048bc:	637b      	str	r3, [r7, #52]	; 0x34
 80048be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80048c2:	4622      	mov	r2, r4
 80048c4:	462b      	mov	r3, r5
 80048c6:	f04f 0000 	mov.w	r0, #0
 80048ca:	f04f 0100 	mov.w	r1, #0
 80048ce:	0159      	lsls	r1, r3, #5
 80048d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048d4:	0150      	lsls	r0, r2, #5
 80048d6:	4602      	mov	r2, r0
 80048d8:	460b      	mov	r3, r1
 80048da:	4621      	mov	r1, r4
 80048dc:	1a51      	subs	r1, r2, r1
 80048de:	6139      	str	r1, [r7, #16]
 80048e0:	4629      	mov	r1, r5
 80048e2:	eb63 0301 	sbc.w	r3, r3, r1
 80048e6:	617b      	str	r3, [r7, #20]
 80048e8:	f04f 0200 	mov.w	r2, #0
 80048ec:	f04f 0300 	mov.w	r3, #0
 80048f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048f4:	4659      	mov	r1, fp
 80048f6:	018b      	lsls	r3, r1, #6
 80048f8:	4651      	mov	r1, sl
 80048fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048fe:	4651      	mov	r1, sl
 8004900:	018a      	lsls	r2, r1, #6
 8004902:	4651      	mov	r1, sl
 8004904:	ebb2 0801 	subs.w	r8, r2, r1
 8004908:	4659      	mov	r1, fp
 800490a:	eb63 0901 	sbc.w	r9, r3, r1
 800490e:	f04f 0200 	mov.w	r2, #0
 8004912:	f04f 0300 	mov.w	r3, #0
 8004916:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800491a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800491e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004922:	4690      	mov	r8, r2
 8004924:	4699      	mov	r9, r3
 8004926:	4623      	mov	r3, r4
 8004928:	eb18 0303 	adds.w	r3, r8, r3
 800492c:	60bb      	str	r3, [r7, #8]
 800492e:	462b      	mov	r3, r5
 8004930:	eb49 0303 	adc.w	r3, r9, r3
 8004934:	60fb      	str	r3, [r7, #12]
 8004936:	f04f 0200 	mov.w	r2, #0
 800493a:	f04f 0300 	mov.w	r3, #0
 800493e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004942:	4629      	mov	r1, r5
 8004944:	024b      	lsls	r3, r1, #9
 8004946:	4621      	mov	r1, r4
 8004948:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800494c:	4621      	mov	r1, r4
 800494e:	024a      	lsls	r2, r1, #9
 8004950:	4610      	mov	r0, r2
 8004952:	4619      	mov	r1, r3
 8004954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004956:	2200      	movs	r2, #0
 8004958:	62bb      	str	r3, [r7, #40]	; 0x28
 800495a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800495c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004960:	f7fb fc96 	bl	8000290 <__aeabi_uldivmod>
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	4613      	mov	r3, r2
 800496a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800496c:	e058      	b.n	8004a20 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800496e:	4b38      	ldr	r3, [pc, #224]	; (8004a50 <HAL_RCC_GetSysClockFreq+0x200>)
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	099b      	lsrs	r3, r3, #6
 8004974:	2200      	movs	r2, #0
 8004976:	4618      	mov	r0, r3
 8004978:	4611      	mov	r1, r2
 800497a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800497e:	623b      	str	r3, [r7, #32]
 8004980:	2300      	movs	r3, #0
 8004982:	627b      	str	r3, [r7, #36]	; 0x24
 8004984:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004988:	4642      	mov	r2, r8
 800498a:	464b      	mov	r3, r9
 800498c:	f04f 0000 	mov.w	r0, #0
 8004990:	f04f 0100 	mov.w	r1, #0
 8004994:	0159      	lsls	r1, r3, #5
 8004996:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800499a:	0150      	lsls	r0, r2, #5
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	4641      	mov	r1, r8
 80049a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80049a6:	4649      	mov	r1, r9
 80049a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80049ac:	f04f 0200 	mov.w	r2, #0
 80049b0:	f04f 0300 	mov.w	r3, #0
 80049b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80049b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80049bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049c0:	ebb2 040a 	subs.w	r4, r2, sl
 80049c4:	eb63 050b 	sbc.w	r5, r3, fp
 80049c8:	f04f 0200 	mov.w	r2, #0
 80049cc:	f04f 0300 	mov.w	r3, #0
 80049d0:	00eb      	lsls	r3, r5, #3
 80049d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049d6:	00e2      	lsls	r2, r4, #3
 80049d8:	4614      	mov	r4, r2
 80049da:	461d      	mov	r5, r3
 80049dc:	4643      	mov	r3, r8
 80049de:	18e3      	adds	r3, r4, r3
 80049e0:	603b      	str	r3, [r7, #0]
 80049e2:	464b      	mov	r3, r9
 80049e4:	eb45 0303 	adc.w	r3, r5, r3
 80049e8:	607b      	str	r3, [r7, #4]
 80049ea:	f04f 0200 	mov.w	r2, #0
 80049ee:	f04f 0300 	mov.w	r3, #0
 80049f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049f6:	4629      	mov	r1, r5
 80049f8:	028b      	lsls	r3, r1, #10
 80049fa:	4621      	mov	r1, r4
 80049fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a00:	4621      	mov	r1, r4
 8004a02:	028a      	lsls	r2, r1, #10
 8004a04:	4610      	mov	r0, r2
 8004a06:	4619      	mov	r1, r3
 8004a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	61bb      	str	r3, [r7, #24]
 8004a0e:	61fa      	str	r2, [r7, #28]
 8004a10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a14:	f7fb fc3c 	bl	8000290 <__aeabi_uldivmod>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a20:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	0c1b      	lsrs	r3, r3, #16
 8004a26:	f003 0303 	and.w	r3, r3, #3
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	005b      	lsls	r3, r3, #1
 8004a2e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004a30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a3a:	e002      	b.n	8004a42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a3c:	4b05      	ldr	r3, [pc, #20]	; (8004a54 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a3e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3750      	adds	r7, #80	; 0x50
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a4e:	bf00      	nop
 8004a50:	40023800 	.word	0x40023800
 8004a54:	00f42400 	.word	0x00f42400
 8004a58:	007a1200 	.word	0x007a1200

08004a5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a60:	4b03      	ldr	r3, [pc, #12]	; (8004a70 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a62:	681b      	ldr	r3, [r3, #0]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	20000010 	.word	0x20000010

08004a74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a78:	f7ff fff0 	bl	8004a5c <HAL_RCC_GetHCLKFreq>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	4b05      	ldr	r3, [pc, #20]	; (8004a94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	0a9b      	lsrs	r3, r3, #10
 8004a84:	f003 0307 	and.w	r3, r3, #7
 8004a88:	4903      	ldr	r1, [pc, #12]	; (8004a98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a8a:	5ccb      	ldrb	r3, [r1, r3]
 8004a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	40023800 	.word	0x40023800
 8004a98:	08008fc8 	.word	0x08008fc8

08004a9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004aa0:	f7ff ffdc 	bl	8004a5c <HAL_RCC_GetHCLKFreq>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	4b05      	ldr	r3, [pc, #20]	; (8004abc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	0b5b      	lsrs	r3, r3, #13
 8004aac:	f003 0307 	and.w	r3, r3, #7
 8004ab0:	4903      	ldr	r1, [pc, #12]	; (8004ac0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ab2:	5ccb      	ldrb	r3, [r1, r3]
 8004ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	40023800 	.word	0x40023800
 8004ac0:	08008fc8 	.word	0x08008fc8

08004ac4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e041      	b.n	8004b5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d106      	bne.n	8004af0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7fd f846 	bl	8001b7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2202      	movs	r2, #2
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	3304      	adds	r3, #4
 8004b00:	4619      	mov	r1, r3
 8004b02:	4610      	mov	r0, r2
 8004b04:	f001 f844 	bl	8005b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
	...

08004b64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d001      	beq.n	8004b7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e04e      	b.n	8004c1a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2202      	movs	r2, #2
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68da      	ldr	r2, [r3, #12]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f042 0201 	orr.w	r2, r2, #1
 8004b92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a23      	ldr	r2, [pc, #140]	; (8004c28 <HAL_TIM_Base_Start_IT+0xc4>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d022      	beq.n	8004be4 <HAL_TIM_Base_Start_IT+0x80>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ba6:	d01d      	beq.n	8004be4 <HAL_TIM_Base_Start_IT+0x80>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a1f      	ldr	r2, [pc, #124]	; (8004c2c <HAL_TIM_Base_Start_IT+0xc8>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d018      	beq.n	8004be4 <HAL_TIM_Base_Start_IT+0x80>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a1e      	ldr	r2, [pc, #120]	; (8004c30 <HAL_TIM_Base_Start_IT+0xcc>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d013      	beq.n	8004be4 <HAL_TIM_Base_Start_IT+0x80>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a1c      	ldr	r2, [pc, #112]	; (8004c34 <HAL_TIM_Base_Start_IT+0xd0>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d00e      	beq.n	8004be4 <HAL_TIM_Base_Start_IT+0x80>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a1b      	ldr	r2, [pc, #108]	; (8004c38 <HAL_TIM_Base_Start_IT+0xd4>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d009      	beq.n	8004be4 <HAL_TIM_Base_Start_IT+0x80>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a19      	ldr	r2, [pc, #100]	; (8004c3c <HAL_TIM_Base_Start_IT+0xd8>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d004      	beq.n	8004be4 <HAL_TIM_Base_Start_IT+0x80>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a18      	ldr	r2, [pc, #96]	; (8004c40 <HAL_TIM_Base_Start_IT+0xdc>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d111      	bne.n	8004c08 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f003 0307 	and.w	r3, r3, #7
 8004bee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2b06      	cmp	r3, #6
 8004bf4:	d010      	beq.n	8004c18 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f042 0201 	orr.w	r2, r2, #1
 8004c04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c06:	e007      	b.n	8004c18 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f042 0201 	orr.w	r2, r2, #1
 8004c16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	40010000 	.word	0x40010000
 8004c2c:	40000400 	.word	0x40000400
 8004c30:	40000800 	.word	0x40000800
 8004c34:	40000c00 	.word	0x40000c00
 8004c38:	40010400 	.word	0x40010400
 8004c3c:	40014000 	.word	0x40014000
 8004c40:	40001800 	.word	0x40001800

08004c44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e041      	b.n	8004cda <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d106      	bne.n	8004c70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7fc ff10 	bl	8001a90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2202      	movs	r2, #2
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	3304      	adds	r3, #4
 8004c80:	4619      	mov	r1, r3
 8004c82:	4610      	mov	r0, r2
 8004c84:	f000 ff84 	bl	8005b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
	...

08004ce4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d109      	bne.n	8004d08 <HAL_TIM_PWM_Start+0x24>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	bf14      	ite	ne
 8004d00:	2301      	movne	r3, #1
 8004d02:	2300      	moveq	r3, #0
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	e022      	b.n	8004d4e <HAL_TIM_PWM_Start+0x6a>
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	2b04      	cmp	r3, #4
 8004d0c:	d109      	bne.n	8004d22 <HAL_TIM_PWM_Start+0x3e>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	bf14      	ite	ne
 8004d1a:	2301      	movne	r3, #1
 8004d1c:	2300      	moveq	r3, #0
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	e015      	b.n	8004d4e <HAL_TIM_PWM_Start+0x6a>
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d109      	bne.n	8004d3c <HAL_TIM_PWM_Start+0x58>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	bf14      	ite	ne
 8004d34:	2301      	movne	r3, #1
 8004d36:	2300      	moveq	r3, #0
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	e008      	b.n	8004d4e <HAL_TIM_PWM_Start+0x6a>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	bf14      	ite	ne
 8004d48:	2301      	movne	r3, #1
 8004d4a:	2300      	moveq	r3, #0
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d001      	beq.n	8004d56 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e07c      	b.n	8004e50 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d104      	bne.n	8004d66 <HAL_TIM_PWM_Start+0x82>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2202      	movs	r2, #2
 8004d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d64:	e013      	b.n	8004d8e <HAL_TIM_PWM_Start+0xaa>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	2b04      	cmp	r3, #4
 8004d6a:	d104      	bne.n	8004d76 <HAL_TIM_PWM_Start+0x92>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2202      	movs	r2, #2
 8004d70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d74:	e00b      	b.n	8004d8e <HAL_TIM_PWM_Start+0xaa>
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d104      	bne.n	8004d86 <HAL_TIM_PWM_Start+0xa2>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2202      	movs	r2, #2
 8004d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d84:	e003      	b.n	8004d8e <HAL_TIM_PWM_Start+0xaa>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2202      	movs	r2, #2
 8004d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2201      	movs	r2, #1
 8004d94:	6839      	ldr	r1, [r7, #0]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f001 fb0e 	bl	80063b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a2d      	ldr	r2, [pc, #180]	; (8004e58 <HAL_TIM_PWM_Start+0x174>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d004      	beq.n	8004db0 <HAL_TIM_PWM_Start+0xcc>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a2c      	ldr	r2, [pc, #176]	; (8004e5c <HAL_TIM_PWM_Start+0x178>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d101      	bne.n	8004db4 <HAL_TIM_PWM_Start+0xd0>
 8004db0:	2301      	movs	r3, #1
 8004db2:	e000      	b.n	8004db6 <HAL_TIM_PWM_Start+0xd2>
 8004db4:	2300      	movs	r3, #0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d007      	beq.n	8004dca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dc8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a22      	ldr	r2, [pc, #136]	; (8004e58 <HAL_TIM_PWM_Start+0x174>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d022      	beq.n	8004e1a <HAL_TIM_PWM_Start+0x136>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ddc:	d01d      	beq.n	8004e1a <HAL_TIM_PWM_Start+0x136>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a1f      	ldr	r2, [pc, #124]	; (8004e60 <HAL_TIM_PWM_Start+0x17c>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d018      	beq.n	8004e1a <HAL_TIM_PWM_Start+0x136>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a1d      	ldr	r2, [pc, #116]	; (8004e64 <HAL_TIM_PWM_Start+0x180>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d013      	beq.n	8004e1a <HAL_TIM_PWM_Start+0x136>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a1c      	ldr	r2, [pc, #112]	; (8004e68 <HAL_TIM_PWM_Start+0x184>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d00e      	beq.n	8004e1a <HAL_TIM_PWM_Start+0x136>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a16      	ldr	r2, [pc, #88]	; (8004e5c <HAL_TIM_PWM_Start+0x178>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d009      	beq.n	8004e1a <HAL_TIM_PWM_Start+0x136>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a18      	ldr	r2, [pc, #96]	; (8004e6c <HAL_TIM_PWM_Start+0x188>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d004      	beq.n	8004e1a <HAL_TIM_PWM_Start+0x136>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a16      	ldr	r2, [pc, #88]	; (8004e70 <HAL_TIM_PWM_Start+0x18c>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d111      	bne.n	8004e3e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2b06      	cmp	r3, #6
 8004e2a:	d010      	beq.n	8004e4e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 0201 	orr.w	r2, r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e3c:	e007      	b.n	8004e4e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f042 0201 	orr.w	r2, r2, #1
 8004e4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	40010000 	.word	0x40010000
 8004e5c:	40010400 	.word	0x40010400
 8004e60:	40000400 	.word	0x40000400
 8004e64:	40000800 	.word	0x40000800
 8004e68:	40000c00 	.word	0x40000c00
 8004e6c:	40014000 	.word	0x40014000
 8004e70:	40001800 	.word	0x40001800

08004e74 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2200      	movs	r2, #0
 8004e84:	6839      	ldr	r1, [r7, #0]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f001 fa96 	bl	80063b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a2e      	ldr	r2, [pc, #184]	; (8004f4c <HAL_TIM_PWM_Stop+0xd8>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d004      	beq.n	8004ea0 <HAL_TIM_PWM_Stop+0x2c>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a2d      	ldr	r2, [pc, #180]	; (8004f50 <HAL_TIM_PWM_Stop+0xdc>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d101      	bne.n	8004ea4 <HAL_TIM_PWM_Stop+0x30>
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e000      	b.n	8004ea6 <HAL_TIM_PWM_Stop+0x32>
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d017      	beq.n	8004eda <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	6a1a      	ldr	r2, [r3, #32]
 8004eb0:	f241 1311 	movw	r3, #4369	; 0x1111
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10f      	bne.n	8004eda <HAL_TIM_PWM_Stop+0x66>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	6a1a      	ldr	r2, [r3, #32]
 8004ec0:	f240 4344 	movw	r3, #1092	; 0x444
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d107      	bne.n	8004eda <HAL_TIM_PWM_Stop+0x66>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ed8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	6a1a      	ldr	r2, [r3, #32]
 8004ee0:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d10f      	bne.n	8004f0a <HAL_TIM_PWM_Stop+0x96>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	6a1a      	ldr	r2, [r3, #32]
 8004ef0:	f240 4344 	movw	r3, #1092	; 0x444
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d107      	bne.n	8004f0a <HAL_TIM_PWM_Stop+0x96>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 0201 	bic.w	r2, r2, #1
 8004f08:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d104      	bne.n	8004f1a <HAL_TIM_PWM_Stop+0xa6>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f18:	e013      	b.n	8004f42 <HAL_TIM_PWM_Stop+0xce>
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	2b04      	cmp	r3, #4
 8004f1e:	d104      	bne.n	8004f2a <HAL_TIM_PWM_Stop+0xb6>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f28:	e00b      	b.n	8004f42 <HAL_TIM_PWM_Stop+0xce>
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d104      	bne.n	8004f3a <HAL_TIM_PWM_Stop+0xc6>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f38:	e003      	b.n	8004f42 <HAL_TIM_PWM_Stop+0xce>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3708      	adds	r7, #8
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	40010000 	.word	0x40010000
 8004f50:	40010400 	.word	0x40010400

08004f54 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d109      	bne.n	8004f7c <HAL_TIM_PWM_Start_IT+0x28>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	bf14      	ite	ne
 8004f74:	2301      	movne	r3, #1
 8004f76:	2300      	moveq	r3, #0
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	e022      	b.n	8004fc2 <HAL_TIM_PWM_Start_IT+0x6e>
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	2b04      	cmp	r3, #4
 8004f80:	d109      	bne.n	8004f96 <HAL_TIM_PWM_Start_IT+0x42>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	bf14      	ite	ne
 8004f8e:	2301      	movne	r3, #1
 8004f90:	2300      	moveq	r3, #0
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	e015      	b.n	8004fc2 <HAL_TIM_PWM_Start_IT+0x6e>
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	2b08      	cmp	r3, #8
 8004f9a:	d109      	bne.n	8004fb0 <HAL_TIM_PWM_Start_IT+0x5c>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	bf14      	ite	ne
 8004fa8:	2301      	movne	r3, #1
 8004faa:	2300      	moveq	r3, #0
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	e008      	b.n	8004fc2 <HAL_TIM_PWM_Start_IT+0x6e>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	bf14      	ite	ne
 8004fbc:	2301      	movne	r3, #1
 8004fbe:	2300      	moveq	r3, #0
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e0c7      	b.n	800515a <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d104      	bne.n	8004fda <HAL_TIM_PWM_Start_IT+0x86>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fd8:	e013      	b.n	8005002 <HAL_TIM_PWM_Start_IT+0xae>
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	2b04      	cmp	r3, #4
 8004fde:	d104      	bne.n	8004fea <HAL_TIM_PWM_Start_IT+0x96>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fe8:	e00b      	b.n	8005002 <HAL_TIM_PWM_Start_IT+0xae>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2b08      	cmp	r3, #8
 8004fee:	d104      	bne.n	8004ffa <HAL_TIM_PWM_Start_IT+0xa6>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ff8:	e003      	b.n	8005002 <HAL_TIM_PWM_Start_IT+0xae>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2202      	movs	r2, #2
 8004ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	2b0c      	cmp	r3, #12
 8005006:	d841      	bhi.n	800508c <HAL_TIM_PWM_Start_IT+0x138>
 8005008:	a201      	add	r2, pc, #4	; (adr r2, 8005010 <HAL_TIM_PWM_Start_IT+0xbc>)
 800500a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500e:	bf00      	nop
 8005010:	08005045 	.word	0x08005045
 8005014:	0800508d 	.word	0x0800508d
 8005018:	0800508d 	.word	0x0800508d
 800501c:	0800508d 	.word	0x0800508d
 8005020:	08005057 	.word	0x08005057
 8005024:	0800508d 	.word	0x0800508d
 8005028:	0800508d 	.word	0x0800508d
 800502c:	0800508d 	.word	0x0800508d
 8005030:	08005069 	.word	0x08005069
 8005034:	0800508d 	.word	0x0800508d
 8005038:	0800508d 	.word	0x0800508d
 800503c:	0800508d 	.word	0x0800508d
 8005040:	0800507b 	.word	0x0800507b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68da      	ldr	r2, [r3, #12]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 0202 	orr.w	r2, r2, #2
 8005052:	60da      	str	r2, [r3, #12]
      break;
 8005054:	e01d      	b.n	8005092 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68da      	ldr	r2, [r3, #12]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f042 0204 	orr.w	r2, r2, #4
 8005064:	60da      	str	r2, [r3, #12]
      break;
 8005066:	e014      	b.n	8005092 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68da      	ldr	r2, [r3, #12]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f042 0208 	orr.w	r2, r2, #8
 8005076:	60da      	str	r2, [r3, #12]
      break;
 8005078:	e00b      	b.n	8005092 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68da      	ldr	r2, [r3, #12]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f042 0210 	orr.w	r2, r2, #16
 8005088:	60da      	str	r2, [r3, #12]
      break;
 800508a:	e002      	b.n	8005092 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	73fb      	strb	r3, [r7, #15]
      break;
 8005090:	bf00      	nop
  }

  if (status == HAL_OK)
 8005092:	7bfb      	ldrb	r3, [r7, #15]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d15f      	bne.n	8005158 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2201      	movs	r2, #1
 800509e:	6839      	ldr	r1, [r7, #0]
 80050a0:	4618      	mov	r0, r3
 80050a2:	f001 f989 	bl	80063b8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a2e      	ldr	r2, [pc, #184]	; (8005164 <HAL_TIM_PWM_Start_IT+0x210>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d004      	beq.n	80050ba <HAL_TIM_PWM_Start_IT+0x166>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a2c      	ldr	r2, [pc, #176]	; (8005168 <HAL_TIM_PWM_Start_IT+0x214>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d101      	bne.n	80050be <HAL_TIM_PWM_Start_IT+0x16a>
 80050ba:	2301      	movs	r3, #1
 80050bc:	e000      	b.n	80050c0 <HAL_TIM_PWM_Start_IT+0x16c>
 80050be:	2300      	movs	r3, #0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d007      	beq.n	80050d4 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050d2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a22      	ldr	r2, [pc, #136]	; (8005164 <HAL_TIM_PWM_Start_IT+0x210>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d022      	beq.n	8005124 <HAL_TIM_PWM_Start_IT+0x1d0>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e6:	d01d      	beq.n	8005124 <HAL_TIM_PWM_Start_IT+0x1d0>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a1f      	ldr	r2, [pc, #124]	; (800516c <HAL_TIM_PWM_Start_IT+0x218>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d018      	beq.n	8005124 <HAL_TIM_PWM_Start_IT+0x1d0>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a1e      	ldr	r2, [pc, #120]	; (8005170 <HAL_TIM_PWM_Start_IT+0x21c>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d013      	beq.n	8005124 <HAL_TIM_PWM_Start_IT+0x1d0>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a1c      	ldr	r2, [pc, #112]	; (8005174 <HAL_TIM_PWM_Start_IT+0x220>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d00e      	beq.n	8005124 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a17      	ldr	r2, [pc, #92]	; (8005168 <HAL_TIM_PWM_Start_IT+0x214>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d009      	beq.n	8005124 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a18      	ldr	r2, [pc, #96]	; (8005178 <HAL_TIM_PWM_Start_IT+0x224>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d004      	beq.n	8005124 <HAL_TIM_PWM_Start_IT+0x1d0>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a17      	ldr	r2, [pc, #92]	; (800517c <HAL_TIM_PWM_Start_IT+0x228>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d111      	bne.n	8005148 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f003 0307 	and.w	r3, r3, #7
 800512e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	2b06      	cmp	r3, #6
 8005134:	d010      	beq.n	8005158 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f042 0201 	orr.w	r2, r2, #1
 8005144:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005146:	e007      	b.n	8005158 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0201 	orr.w	r2, r2, #1
 8005156:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005158:	7bfb      	ldrb	r3, [r7, #15]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	40010000 	.word	0x40010000
 8005168:	40010400 	.word	0x40010400
 800516c:	40000400 	.word	0x40000400
 8005170:	40000800 	.word	0x40000800
 8005174:	40000c00 	.word	0x40000c00
 8005178:	40014000 	.word	0x40014000
 800517c:	40001800 	.word	0x40001800

08005180 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e041      	b.n	8005216 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d106      	bne.n	80051ac <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7fc fc98 	bl	8001adc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	3304      	adds	r3, #4
 80051bc:	4619      	mov	r1, r3
 80051be:	4610      	mov	r0, r2
 80051c0:	f000 fce6 	bl	8005b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
	...

08005220 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800522a:	2300      	movs	r3, #0
 800522c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d104      	bne.n	800523e <HAL_TIM_IC_Start_IT+0x1e>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800523a:	b2db      	uxtb	r3, r3
 800523c:	e013      	b.n	8005266 <HAL_TIM_IC_Start_IT+0x46>
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2b04      	cmp	r3, #4
 8005242:	d104      	bne.n	800524e <HAL_TIM_IC_Start_IT+0x2e>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800524a:	b2db      	uxtb	r3, r3
 800524c:	e00b      	b.n	8005266 <HAL_TIM_IC_Start_IT+0x46>
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	2b08      	cmp	r3, #8
 8005252:	d104      	bne.n	800525e <HAL_TIM_IC_Start_IT+0x3e>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800525a:	b2db      	uxtb	r3, r3
 800525c:	e003      	b.n	8005266 <HAL_TIM_IC_Start_IT+0x46>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005264:	b2db      	uxtb	r3, r3
 8005266:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d104      	bne.n	8005278 <HAL_TIM_IC_Start_IT+0x58>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005274:	b2db      	uxtb	r3, r3
 8005276:	e013      	b.n	80052a0 <HAL_TIM_IC_Start_IT+0x80>
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	2b04      	cmp	r3, #4
 800527c:	d104      	bne.n	8005288 <HAL_TIM_IC_Start_IT+0x68>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005284:	b2db      	uxtb	r3, r3
 8005286:	e00b      	b.n	80052a0 <HAL_TIM_IC_Start_IT+0x80>
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	2b08      	cmp	r3, #8
 800528c:	d104      	bne.n	8005298 <HAL_TIM_IC_Start_IT+0x78>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005294:	b2db      	uxtb	r3, r3
 8005296:	e003      	b.n	80052a0 <HAL_TIM_IC_Start_IT+0x80>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80052a2:	7bbb      	ldrb	r3, [r7, #14]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d102      	bne.n	80052ae <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80052a8:	7b7b      	ldrb	r3, [r7, #13]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d001      	beq.n	80052b2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e0cc      	b.n	800544c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d104      	bne.n	80052c2 <HAL_TIM_IC_Start_IT+0xa2>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2202      	movs	r2, #2
 80052bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052c0:	e013      	b.n	80052ea <HAL_TIM_IC_Start_IT+0xca>
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	2b04      	cmp	r3, #4
 80052c6:	d104      	bne.n	80052d2 <HAL_TIM_IC_Start_IT+0xb2>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2202      	movs	r2, #2
 80052cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052d0:	e00b      	b.n	80052ea <HAL_TIM_IC_Start_IT+0xca>
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	2b08      	cmp	r3, #8
 80052d6:	d104      	bne.n	80052e2 <HAL_TIM_IC_Start_IT+0xc2>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2202      	movs	r2, #2
 80052dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052e0:	e003      	b.n	80052ea <HAL_TIM_IC_Start_IT+0xca>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2202      	movs	r2, #2
 80052e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d104      	bne.n	80052fa <HAL_TIM_IC_Start_IT+0xda>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2202      	movs	r2, #2
 80052f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052f8:	e013      	b.n	8005322 <HAL_TIM_IC_Start_IT+0x102>
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	2b04      	cmp	r3, #4
 80052fe:	d104      	bne.n	800530a <HAL_TIM_IC_Start_IT+0xea>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2202      	movs	r2, #2
 8005304:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005308:	e00b      	b.n	8005322 <HAL_TIM_IC_Start_IT+0x102>
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	2b08      	cmp	r3, #8
 800530e:	d104      	bne.n	800531a <HAL_TIM_IC_Start_IT+0xfa>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2202      	movs	r2, #2
 8005314:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005318:	e003      	b.n	8005322 <HAL_TIM_IC_Start_IT+0x102>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2202      	movs	r2, #2
 800531e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2b0c      	cmp	r3, #12
 8005326:	d841      	bhi.n	80053ac <HAL_TIM_IC_Start_IT+0x18c>
 8005328:	a201      	add	r2, pc, #4	; (adr r2, 8005330 <HAL_TIM_IC_Start_IT+0x110>)
 800532a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800532e:	bf00      	nop
 8005330:	08005365 	.word	0x08005365
 8005334:	080053ad 	.word	0x080053ad
 8005338:	080053ad 	.word	0x080053ad
 800533c:	080053ad 	.word	0x080053ad
 8005340:	08005377 	.word	0x08005377
 8005344:	080053ad 	.word	0x080053ad
 8005348:	080053ad 	.word	0x080053ad
 800534c:	080053ad 	.word	0x080053ad
 8005350:	08005389 	.word	0x08005389
 8005354:	080053ad 	.word	0x080053ad
 8005358:	080053ad 	.word	0x080053ad
 800535c:	080053ad 	.word	0x080053ad
 8005360:	0800539b 	.word	0x0800539b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68da      	ldr	r2, [r3, #12]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f042 0202 	orr.w	r2, r2, #2
 8005372:	60da      	str	r2, [r3, #12]
      break;
 8005374:	e01d      	b.n	80053b2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68da      	ldr	r2, [r3, #12]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f042 0204 	orr.w	r2, r2, #4
 8005384:	60da      	str	r2, [r3, #12]
      break;
 8005386:	e014      	b.n	80053b2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68da      	ldr	r2, [r3, #12]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f042 0208 	orr.w	r2, r2, #8
 8005396:	60da      	str	r2, [r3, #12]
      break;
 8005398:	e00b      	b.n	80053b2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68da      	ldr	r2, [r3, #12]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f042 0210 	orr.w	r2, r2, #16
 80053a8:	60da      	str	r2, [r3, #12]
      break;
 80053aa:	e002      	b.n	80053b2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	73fb      	strb	r3, [r7, #15]
      break;
 80053b0:	bf00      	nop
  }

  if (status == HAL_OK)
 80053b2:	7bfb      	ldrb	r3, [r7, #15]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d148      	bne.n	800544a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2201      	movs	r2, #1
 80053be:	6839      	ldr	r1, [r7, #0]
 80053c0:	4618      	mov	r0, r3
 80053c2:	f000 fff9 	bl	80063b8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a22      	ldr	r2, [pc, #136]	; (8005454 <HAL_TIM_IC_Start_IT+0x234>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d022      	beq.n	8005416 <HAL_TIM_IC_Start_IT+0x1f6>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053d8:	d01d      	beq.n	8005416 <HAL_TIM_IC_Start_IT+0x1f6>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a1e      	ldr	r2, [pc, #120]	; (8005458 <HAL_TIM_IC_Start_IT+0x238>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d018      	beq.n	8005416 <HAL_TIM_IC_Start_IT+0x1f6>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a1c      	ldr	r2, [pc, #112]	; (800545c <HAL_TIM_IC_Start_IT+0x23c>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d013      	beq.n	8005416 <HAL_TIM_IC_Start_IT+0x1f6>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a1b      	ldr	r2, [pc, #108]	; (8005460 <HAL_TIM_IC_Start_IT+0x240>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d00e      	beq.n	8005416 <HAL_TIM_IC_Start_IT+0x1f6>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a19      	ldr	r2, [pc, #100]	; (8005464 <HAL_TIM_IC_Start_IT+0x244>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d009      	beq.n	8005416 <HAL_TIM_IC_Start_IT+0x1f6>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a18      	ldr	r2, [pc, #96]	; (8005468 <HAL_TIM_IC_Start_IT+0x248>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d004      	beq.n	8005416 <HAL_TIM_IC_Start_IT+0x1f6>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a16      	ldr	r2, [pc, #88]	; (800546c <HAL_TIM_IC_Start_IT+0x24c>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d111      	bne.n	800543a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f003 0307 	and.w	r3, r3, #7
 8005420:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	2b06      	cmp	r3, #6
 8005426:	d010      	beq.n	800544a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f042 0201 	orr.w	r2, r2, #1
 8005436:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005438:	e007      	b.n	800544a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f042 0201 	orr.w	r2, r2, #1
 8005448:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800544a:	7bfb      	ldrb	r3, [r7, #15]
}
 800544c:	4618      	mov	r0, r3
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	40010000 	.word	0x40010000
 8005458:	40000400 	.word	0x40000400
 800545c:	40000800 	.word	0x40000800
 8005460:	40000c00 	.word	0x40000c00
 8005464:	40010400 	.word	0x40010400
 8005468:	40014000 	.word	0x40014000
 800546c:	40001800 	.word	0x40001800

08005470 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b02      	cmp	r3, #2
 8005484:	d122      	bne.n	80054cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	f003 0302 	and.w	r3, r3, #2
 8005490:	2b02      	cmp	r3, #2
 8005492:	d11b      	bne.n	80054cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f06f 0202 	mvn.w	r2, #2
 800549c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	f003 0303 	and.w	r3, r3, #3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d003      	beq.n	80054ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f7fd f8d0 	bl	8002658 <HAL_TIM_IC_CaptureCallback>
 80054b8:	e005      	b.n	80054c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 fb4a 	bl	8005b54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 fb51 	bl	8005b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	f003 0304 	and.w	r3, r3, #4
 80054d6:	2b04      	cmp	r3, #4
 80054d8:	d122      	bne.n	8005520 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	f003 0304 	and.w	r3, r3, #4
 80054e4:	2b04      	cmp	r3, #4
 80054e6:	d11b      	bne.n	8005520 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f06f 0204 	mvn.w	r2, #4
 80054f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2202      	movs	r2, #2
 80054f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005502:	2b00      	cmp	r3, #0
 8005504:	d003      	beq.n	800550e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f7fd f8a6 	bl	8002658 <HAL_TIM_IC_CaptureCallback>
 800550c:	e005      	b.n	800551a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 fb20 	bl	8005b54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 fb27 	bl	8005b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	f003 0308 	and.w	r3, r3, #8
 800552a:	2b08      	cmp	r3, #8
 800552c:	d122      	bne.n	8005574 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	f003 0308 	and.w	r3, r3, #8
 8005538:	2b08      	cmp	r3, #8
 800553a:	d11b      	bne.n	8005574 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f06f 0208 	mvn.w	r2, #8
 8005544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2204      	movs	r2, #4
 800554a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	f003 0303 	and.w	r3, r3, #3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f7fd f87c 	bl	8002658 <HAL_TIM_IC_CaptureCallback>
 8005560:	e005      	b.n	800556e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 faf6 	bl	8005b54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 fafd 	bl	8005b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	f003 0310 	and.w	r3, r3, #16
 800557e:	2b10      	cmp	r3, #16
 8005580:	d122      	bne.n	80055c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	f003 0310 	and.w	r3, r3, #16
 800558c:	2b10      	cmp	r3, #16
 800558e:	d11b      	bne.n	80055c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f06f 0210 	mvn.w	r2, #16
 8005598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2208      	movs	r2, #8
 800559e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	69db      	ldr	r3, [r3, #28]
 80055a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d003      	beq.n	80055b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7fd f852 	bl	8002658 <HAL_TIM_IC_CaptureCallback>
 80055b4:	e005      	b.n	80055c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 facc 	bl	8005b54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 fad3 	bl	8005b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d10e      	bne.n	80055f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	f003 0301 	and.w	r3, r3, #1
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d107      	bne.n	80055f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f06f 0201 	mvn.w	r2, #1
 80055ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7fb fc5e 	bl	8000eb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055fe:	2b80      	cmp	r3, #128	; 0x80
 8005600:	d10e      	bne.n	8005620 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800560c:	2b80      	cmp	r3, #128	; 0x80
 800560e:	d107      	bne.n	8005620 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 ff78 	bl	8006510 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800562a:	2b40      	cmp	r3, #64	; 0x40
 800562c:	d10e      	bne.n	800564c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005638:	2b40      	cmp	r3, #64	; 0x40
 800563a:	d107      	bne.n	800564c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 fa98 	bl	8005b7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	f003 0320 	and.w	r3, r3, #32
 8005656:	2b20      	cmp	r3, #32
 8005658:	d10e      	bne.n	8005678 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	f003 0320 	and.w	r3, r3, #32
 8005664:	2b20      	cmp	r3, #32
 8005666:	d107      	bne.n	8005678 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f06f 0220 	mvn.w	r2, #32
 8005670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 ff42 	bl	80064fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005678:	bf00      	nop
 800567a:	3708      	adds	r7, #8
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800568c:	2300      	movs	r3, #0
 800568e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005696:	2b01      	cmp	r3, #1
 8005698:	d101      	bne.n	800569e <HAL_TIM_IC_ConfigChannel+0x1e>
 800569a:	2302      	movs	r3, #2
 800569c:	e088      	b.n	80057b0 <HAL_TIM_IC_ConfigChannel+0x130>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d11b      	bne.n	80056e4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6818      	ldr	r0, [r3, #0]
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	6819      	ldr	r1, [r3, #0]
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f000 fcb8 	bl	8006030 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	699a      	ldr	r2, [r3, #24]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 020c 	bic.w	r2, r2, #12
 80056ce:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6999      	ldr	r1, [r3, #24]
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	689a      	ldr	r2, [r3, #8]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	430a      	orrs	r2, r1
 80056e0:	619a      	str	r2, [r3, #24]
 80056e2:	e060      	b.n	80057a6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b04      	cmp	r3, #4
 80056e8:	d11c      	bne.n	8005724 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6818      	ldr	r0, [r3, #0]
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	6819      	ldr	r1, [r3, #0]
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	f000 fd3c 	bl	8006176 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	699a      	ldr	r2, [r3, #24]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800570c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	6999      	ldr	r1, [r3, #24]
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	021a      	lsls	r2, r3, #8
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	430a      	orrs	r2, r1
 8005720:	619a      	str	r2, [r3, #24]
 8005722:	e040      	b.n	80057a6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b08      	cmp	r3, #8
 8005728:	d11b      	bne.n	8005762 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6818      	ldr	r0, [r3, #0]
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	6819      	ldr	r1, [r3, #0]
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	685a      	ldr	r2, [r3, #4]
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	f000 fd89 	bl	8006250 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	69da      	ldr	r2, [r3, #28]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 020c 	bic.w	r2, r2, #12
 800574c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	69d9      	ldr	r1, [r3, #28]
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	430a      	orrs	r2, r1
 800575e:	61da      	str	r2, [r3, #28]
 8005760:	e021      	b.n	80057a6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2b0c      	cmp	r3, #12
 8005766:	d11c      	bne.n	80057a2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6818      	ldr	r0, [r3, #0]
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	6819      	ldr	r1, [r3, #0]
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	f000 fda6 	bl	80062c8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	69da      	ldr	r2, [r3, #28]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800578a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	69d9      	ldr	r1, [r3, #28]
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	021a      	lsls	r2, r3, #8
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	430a      	orrs	r2, r1
 800579e:	61da      	str	r2, [r3, #28]
 80057a0:	e001      	b.n	80057a6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3718      	adds	r7, #24
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b086      	sub	sp, #24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057c4:	2300      	movs	r3, #0
 80057c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d101      	bne.n	80057d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057d2:	2302      	movs	r3, #2
 80057d4:	e0ae      	b.n	8005934 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2b0c      	cmp	r3, #12
 80057e2:	f200 809f 	bhi.w	8005924 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80057e6:	a201      	add	r2, pc, #4	; (adr r2, 80057ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ec:	08005821 	.word	0x08005821
 80057f0:	08005925 	.word	0x08005925
 80057f4:	08005925 	.word	0x08005925
 80057f8:	08005925 	.word	0x08005925
 80057fc:	08005861 	.word	0x08005861
 8005800:	08005925 	.word	0x08005925
 8005804:	08005925 	.word	0x08005925
 8005808:	08005925 	.word	0x08005925
 800580c:	080058a3 	.word	0x080058a3
 8005810:	08005925 	.word	0x08005925
 8005814:	08005925 	.word	0x08005925
 8005818:	08005925 	.word	0x08005925
 800581c:	080058e3 	.word	0x080058e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68b9      	ldr	r1, [r7, #8]
 8005826:	4618      	mov	r0, r3
 8005828:	f000 fa52 	bl	8005cd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	699a      	ldr	r2, [r3, #24]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f042 0208 	orr.w	r2, r2, #8
 800583a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	699a      	ldr	r2, [r3, #24]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f022 0204 	bic.w	r2, r2, #4
 800584a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6999      	ldr	r1, [r3, #24]
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	691a      	ldr	r2, [r3, #16]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	430a      	orrs	r2, r1
 800585c:	619a      	str	r2, [r3, #24]
      break;
 800585e:	e064      	b.n	800592a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68b9      	ldr	r1, [r7, #8]
 8005866:	4618      	mov	r0, r3
 8005868:	f000 faa2 	bl	8005db0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	699a      	ldr	r2, [r3, #24]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800587a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	699a      	ldr	r2, [r3, #24]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800588a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6999      	ldr	r1, [r3, #24]
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	021a      	lsls	r2, r3, #8
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	430a      	orrs	r2, r1
 800589e:	619a      	str	r2, [r3, #24]
      break;
 80058a0:	e043      	b.n	800592a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68b9      	ldr	r1, [r7, #8]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f000 faf7 	bl	8005e9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	69da      	ldr	r2, [r3, #28]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f042 0208 	orr.w	r2, r2, #8
 80058bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	69da      	ldr	r2, [r3, #28]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 0204 	bic.w	r2, r2, #4
 80058cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69d9      	ldr	r1, [r3, #28]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	691a      	ldr	r2, [r3, #16]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	430a      	orrs	r2, r1
 80058de:	61da      	str	r2, [r3, #28]
      break;
 80058e0:	e023      	b.n	800592a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68b9      	ldr	r1, [r7, #8]
 80058e8:	4618      	mov	r0, r3
 80058ea:	f000 fb4b 	bl	8005f84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	69da      	ldr	r2, [r3, #28]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	69da      	ldr	r2, [r3, #28]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800590c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	69d9      	ldr	r1, [r3, #28]
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	021a      	lsls	r2, r3, #8
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	430a      	orrs	r2, r1
 8005920:	61da      	str	r2, [r3, #28]
      break;
 8005922:	e002      	b.n	800592a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	75fb      	strb	r3, [r7, #23]
      break;
 8005928:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005932:	7dfb      	ldrb	r3, [r7, #23]
}
 8005934:	4618      	mov	r0, r3
 8005936:	3718      	adds	r7, #24
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005946:	2300      	movs	r3, #0
 8005948:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005950:	2b01      	cmp	r3, #1
 8005952:	d101      	bne.n	8005958 <HAL_TIM_ConfigClockSource+0x1c>
 8005954:	2302      	movs	r3, #2
 8005956:	e0b4      	b.n	8005ac2 <HAL_TIM_ConfigClockSource+0x186>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2202      	movs	r2, #2
 8005964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005976:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800597e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005990:	d03e      	beq.n	8005a10 <HAL_TIM_ConfigClockSource+0xd4>
 8005992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005996:	f200 8087 	bhi.w	8005aa8 <HAL_TIM_ConfigClockSource+0x16c>
 800599a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800599e:	f000 8086 	beq.w	8005aae <HAL_TIM_ConfigClockSource+0x172>
 80059a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059a6:	d87f      	bhi.n	8005aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80059a8:	2b70      	cmp	r3, #112	; 0x70
 80059aa:	d01a      	beq.n	80059e2 <HAL_TIM_ConfigClockSource+0xa6>
 80059ac:	2b70      	cmp	r3, #112	; 0x70
 80059ae:	d87b      	bhi.n	8005aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80059b0:	2b60      	cmp	r3, #96	; 0x60
 80059b2:	d050      	beq.n	8005a56 <HAL_TIM_ConfigClockSource+0x11a>
 80059b4:	2b60      	cmp	r3, #96	; 0x60
 80059b6:	d877      	bhi.n	8005aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80059b8:	2b50      	cmp	r3, #80	; 0x50
 80059ba:	d03c      	beq.n	8005a36 <HAL_TIM_ConfigClockSource+0xfa>
 80059bc:	2b50      	cmp	r3, #80	; 0x50
 80059be:	d873      	bhi.n	8005aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80059c0:	2b40      	cmp	r3, #64	; 0x40
 80059c2:	d058      	beq.n	8005a76 <HAL_TIM_ConfigClockSource+0x13a>
 80059c4:	2b40      	cmp	r3, #64	; 0x40
 80059c6:	d86f      	bhi.n	8005aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80059c8:	2b30      	cmp	r3, #48	; 0x30
 80059ca:	d064      	beq.n	8005a96 <HAL_TIM_ConfigClockSource+0x15a>
 80059cc:	2b30      	cmp	r3, #48	; 0x30
 80059ce:	d86b      	bhi.n	8005aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80059d0:	2b20      	cmp	r3, #32
 80059d2:	d060      	beq.n	8005a96 <HAL_TIM_ConfigClockSource+0x15a>
 80059d4:	2b20      	cmp	r3, #32
 80059d6:	d867      	bhi.n	8005aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d05c      	beq.n	8005a96 <HAL_TIM_ConfigClockSource+0x15a>
 80059dc:	2b10      	cmp	r3, #16
 80059de:	d05a      	beq.n	8005a96 <HAL_TIM_ConfigClockSource+0x15a>
 80059e0:	e062      	b.n	8005aa8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6818      	ldr	r0, [r3, #0]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	6899      	ldr	r1, [r3, #8]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	685a      	ldr	r2, [r3, #4]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	f000 fcc1 	bl	8006378 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	609a      	str	r2, [r3, #8]
      break;
 8005a0e:	e04f      	b.n	8005ab0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6818      	ldr	r0, [r3, #0]
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	6899      	ldr	r1, [r3, #8]
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	685a      	ldr	r2, [r3, #4]
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	f000 fcaa 	bl	8006378 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	689a      	ldr	r2, [r3, #8]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a32:	609a      	str	r2, [r3, #8]
      break;
 8005a34:	e03c      	b.n	8005ab0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6818      	ldr	r0, [r3, #0]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	6859      	ldr	r1, [r3, #4]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	461a      	mov	r2, r3
 8005a44:	f000 fb68 	bl	8006118 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2150      	movs	r1, #80	; 0x50
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 fc77 	bl	8006342 <TIM_ITRx_SetConfig>
      break;
 8005a54:	e02c      	b.n	8005ab0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6818      	ldr	r0, [r3, #0]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	6859      	ldr	r1, [r3, #4]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	461a      	mov	r2, r3
 8005a64:	f000 fbc4 	bl	80061f0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2160      	movs	r1, #96	; 0x60
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 fc67 	bl	8006342 <TIM_ITRx_SetConfig>
      break;
 8005a74:	e01c      	b.n	8005ab0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6818      	ldr	r0, [r3, #0]
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	6859      	ldr	r1, [r3, #4]
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	461a      	mov	r2, r3
 8005a84:	f000 fb48 	bl	8006118 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2140      	movs	r1, #64	; 0x40
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f000 fc57 	bl	8006342 <TIM_ITRx_SetConfig>
      break;
 8005a94:	e00c      	b.n	8005ab0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	4610      	mov	r0, r2
 8005aa2:	f000 fc4e 	bl	8006342 <TIM_ITRx_SetConfig>
      break;
 8005aa6:	e003      	b.n	8005ab0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8005aac:	e000      	b.n	8005ab0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005aae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
	...

08005acc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2b0c      	cmp	r3, #12
 8005ade:	d831      	bhi.n	8005b44 <HAL_TIM_ReadCapturedValue+0x78>
 8005ae0:	a201      	add	r2, pc, #4	; (adr r2, 8005ae8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae6:	bf00      	nop
 8005ae8:	08005b1d 	.word	0x08005b1d
 8005aec:	08005b45 	.word	0x08005b45
 8005af0:	08005b45 	.word	0x08005b45
 8005af4:	08005b45 	.word	0x08005b45
 8005af8:	08005b27 	.word	0x08005b27
 8005afc:	08005b45 	.word	0x08005b45
 8005b00:	08005b45 	.word	0x08005b45
 8005b04:	08005b45 	.word	0x08005b45
 8005b08:	08005b31 	.word	0x08005b31
 8005b0c:	08005b45 	.word	0x08005b45
 8005b10:	08005b45 	.word	0x08005b45
 8005b14:	08005b45 	.word	0x08005b45
 8005b18:	08005b3b 	.word	0x08005b3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b22:	60fb      	str	r3, [r7, #12]

      break;
 8005b24:	e00f      	b.n	8005b46 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2c:	60fb      	str	r3, [r7, #12]

      break;
 8005b2e:	e00a      	b.n	8005b46 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b36:	60fb      	str	r3, [r7, #12]

      break;
 8005b38:	e005      	b.n	8005b46 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b40:	60fb      	str	r3, [r7, #12]

      break;
 8005b42:	e000      	b.n	8005b46 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005b44:	bf00      	nop
  }

  return tmpreg;
 8005b46:	68fb      	ldr	r3, [r7, #12]
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3714      	adds	r7, #20
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b5c:	bf00      	nop
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a40      	ldr	r2, [pc, #256]	; (8005ca4 <TIM_Base_SetConfig+0x114>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d013      	beq.n	8005bd0 <TIM_Base_SetConfig+0x40>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bae:	d00f      	beq.n	8005bd0 <TIM_Base_SetConfig+0x40>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a3d      	ldr	r2, [pc, #244]	; (8005ca8 <TIM_Base_SetConfig+0x118>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d00b      	beq.n	8005bd0 <TIM_Base_SetConfig+0x40>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a3c      	ldr	r2, [pc, #240]	; (8005cac <TIM_Base_SetConfig+0x11c>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d007      	beq.n	8005bd0 <TIM_Base_SetConfig+0x40>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a3b      	ldr	r2, [pc, #236]	; (8005cb0 <TIM_Base_SetConfig+0x120>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d003      	beq.n	8005bd0 <TIM_Base_SetConfig+0x40>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a3a      	ldr	r2, [pc, #232]	; (8005cb4 <TIM_Base_SetConfig+0x124>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d108      	bne.n	8005be2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a2f      	ldr	r2, [pc, #188]	; (8005ca4 <TIM_Base_SetConfig+0x114>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d02b      	beq.n	8005c42 <TIM_Base_SetConfig+0xb2>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bf0:	d027      	beq.n	8005c42 <TIM_Base_SetConfig+0xb2>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a2c      	ldr	r2, [pc, #176]	; (8005ca8 <TIM_Base_SetConfig+0x118>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d023      	beq.n	8005c42 <TIM_Base_SetConfig+0xb2>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a2b      	ldr	r2, [pc, #172]	; (8005cac <TIM_Base_SetConfig+0x11c>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d01f      	beq.n	8005c42 <TIM_Base_SetConfig+0xb2>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a2a      	ldr	r2, [pc, #168]	; (8005cb0 <TIM_Base_SetConfig+0x120>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d01b      	beq.n	8005c42 <TIM_Base_SetConfig+0xb2>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a29      	ldr	r2, [pc, #164]	; (8005cb4 <TIM_Base_SetConfig+0x124>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d017      	beq.n	8005c42 <TIM_Base_SetConfig+0xb2>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a28      	ldr	r2, [pc, #160]	; (8005cb8 <TIM_Base_SetConfig+0x128>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d013      	beq.n	8005c42 <TIM_Base_SetConfig+0xb2>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a27      	ldr	r2, [pc, #156]	; (8005cbc <TIM_Base_SetConfig+0x12c>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d00f      	beq.n	8005c42 <TIM_Base_SetConfig+0xb2>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a26      	ldr	r2, [pc, #152]	; (8005cc0 <TIM_Base_SetConfig+0x130>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d00b      	beq.n	8005c42 <TIM_Base_SetConfig+0xb2>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a25      	ldr	r2, [pc, #148]	; (8005cc4 <TIM_Base_SetConfig+0x134>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d007      	beq.n	8005c42 <TIM_Base_SetConfig+0xb2>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a24      	ldr	r2, [pc, #144]	; (8005cc8 <TIM_Base_SetConfig+0x138>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d003      	beq.n	8005c42 <TIM_Base_SetConfig+0xb2>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a23      	ldr	r2, [pc, #140]	; (8005ccc <TIM_Base_SetConfig+0x13c>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d108      	bne.n	8005c54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	689a      	ldr	r2, [r3, #8]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a0a      	ldr	r2, [pc, #40]	; (8005ca4 <TIM_Base_SetConfig+0x114>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d003      	beq.n	8005c88 <TIM_Base_SetConfig+0xf8>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a0c      	ldr	r2, [pc, #48]	; (8005cb4 <TIM_Base_SetConfig+0x124>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d103      	bne.n	8005c90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	691a      	ldr	r2, [r3, #16]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	615a      	str	r2, [r3, #20]
}
 8005c96:	bf00      	nop
 8005c98:	3714      	adds	r7, #20
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	40010000 	.word	0x40010000
 8005ca8:	40000400 	.word	0x40000400
 8005cac:	40000800 	.word	0x40000800
 8005cb0:	40000c00 	.word	0x40000c00
 8005cb4:	40010400 	.word	0x40010400
 8005cb8:	40014000 	.word	0x40014000
 8005cbc:	40014400 	.word	0x40014400
 8005cc0:	40014800 	.word	0x40014800
 8005cc4:	40001800 	.word	0x40001800
 8005cc8:	40001c00 	.word	0x40001c00
 8005ccc:	40002000 	.word	0x40002000

08005cd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b087      	sub	sp, #28
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	f023 0201 	bic.w	r2, r3, #1
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f023 0303 	bic.w	r3, r3, #3
 8005d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f023 0302 	bic.w	r3, r3, #2
 8005d18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a20      	ldr	r2, [pc, #128]	; (8005da8 <TIM_OC1_SetConfig+0xd8>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d003      	beq.n	8005d34 <TIM_OC1_SetConfig+0x64>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a1f      	ldr	r2, [pc, #124]	; (8005dac <TIM_OC1_SetConfig+0xdc>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d10c      	bne.n	8005d4e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	f023 0308 	bic.w	r3, r3, #8
 8005d3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	f023 0304 	bic.w	r3, r3, #4
 8005d4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a15      	ldr	r2, [pc, #84]	; (8005da8 <TIM_OC1_SetConfig+0xd8>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d003      	beq.n	8005d5e <TIM_OC1_SetConfig+0x8e>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a14      	ldr	r2, [pc, #80]	; (8005dac <TIM_OC1_SetConfig+0xdc>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d111      	bne.n	8005d82 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	685a      	ldr	r2, [r3, #4]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	697a      	ldr	r2, [r7, #20]
 8005d9a:	621a      	str	r2, [r3, #32]
}
 8005d9c:	bf00      	nop
 8005d9e:	371c      	adds	r7, #28
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr
 8005da8:	40010000 	.word	0x40010000
 8005dac:	40010400 	.word	0x40010400

08005db0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b087      	sub	sp, #28
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	f023 0210 	bic.w	r2, r3, #16
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005de6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	021b      	lsls	r3, r3, #8
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	f023 0320 	bic.w	r3, r3, #32
 8005dfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	011b      	lsls	r3, r3, #4
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a22      	ldr	r2, [pc, #136]	; (8005e94 <TIM_OC2_SetConfig+0xe4>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d003      	beq.n	8005e18 <TIM_OC2_SetConfig+0x68>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a21      	ldr	r2, [pc, #132]	; (8005e98 <TIM_OC2_SetConfig+0xe8>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d10d      	bne.n	8005e34 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	011b      	lsls	r3, r3, #4
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a17      	ldr	r2, [pc, #92]	; (8005e94 <TIM_OC2_SetConfig+0xe4>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d003      	beq.n	8005e44 <TIM_OC2_SetConfig+0x94>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a16      	ldr	r2, [pc, #88]	; (8005e98 <TIM_OC2_SetConfig+0xe8>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d113      	bne.n	8005e6c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	695b      	ldr	r3, [r3, #20]
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	621a      	str	r2, [r3, #32]
}
 8005e86:	bf00      	nop
 8005e88:	371c      	adds	r7, #28
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	40010000 	.word	0x40010000
 8005e98:	40010400 	.word	0x40010400

08005e9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b087      	sub	sp, #28
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	69db      	ldr	r3, [r3, #28]
 8005ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f023 0303 	bic.w	r3, r3, #3
 8005ed2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ee4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	021b      	lsls	r3, r3, #8
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a21      	ldr	r2, [pc, #132]	; (8005f7c <TIM_OC3_SetConfig+0xe0>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d003      	beq.n	8005f02 <TIM_OC3_SetConfig+0x66>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a20      	ldr	r2, [pc, #128]	; (8005f80 <TIM_OC3_SetConfig+0xe4>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d10d      	bne.n	8005f1e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	021b      	lsls	r3, r3, #8
 8005f10:	697a      	ldr	r2, [r7, #20]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a16      	ldr	r2, [pc, #88]	; (8005f7c <TIM_OC3_SetConfig+0xe0>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d003      	beq.n	8005f2e <TIM_OC3_SetConfig+0x92>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a15      	ldr	r2, [pc, #84]	; (8005f80 <TIM_OC3_SetConfig+0xe4>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d113      	bne.n	8005f56 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	695b      	ldr	r3, [r3, #20]
 8005f42:	011b      	lsls	r3, r3, #4
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	011b      	lsls	r3, r3, #4
 8005f50:	693a      	ldr	r2, [r7, #16]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	685a      	ldr	r2, [r3, #4]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	621a      	str	r2, [r3, #32]
}
 8005f70:	bf00      	nop
 8005f72:	371c      	adds	r7, #28
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr
 8005f7c:	40010000 	.word	0x40010000
 8005f80:	40010400 	.word	0x40010400

08005f84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b087      	sub	sp, #28
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a1b      	ldr	r3, [r3, #32]
 8005f92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	69db      	ldr	r3, [r3, #28]
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	021b      	lsls	r3, r3, #8
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	031b      	lsls	r3, r3, #12
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a12      	ldr	r2, [pc, #72]	; (8006028 <TIM_OC4_SetConfig+0xa4>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d003      	beq.n	8005fec <TIM_OC4_SetConfig+0x68>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a11      	ldr	r2, [pc, #68]	; (800602c <TIM_OC4_SetConfig+0xa8>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d109      	bne.n	8006000 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ff2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	695b      	ldr	r3, [r3, #20]
 8005ff8:	019b      	lsls	r3, r3, #6
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	685a      	ldr	r2, [r3, #4]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	621a      	str	r2, [r3, #32]
}
 800601a:	bf00      	nop
 800601c:	371c      	adds	r7, #28
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	40010000 	.word	0x40010000
 800602c:	40010400 	.word	0x40010400

08006030 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006030:	b480      	push	{r7}
 8006032:	b087      	sub	sp, #28
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
 800603c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	f023 0201 	bic.w	r2, r3, #1
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6a1b      	ldr	r3, [r3, #32]
 8006054:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	4a28      	ldr	r2, [pc, #160]	; (80060fc <TIM_TI1_SetConfig+0xcc>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d01b      	beq.n	8006096 <TIM_TI1_SetConfig+0x66>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006064:	d017      	beq.n	8006096 <TIM_TI1_SetConfig+0x66>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	4a25      	ldr	r2, [pc, #148]	; (8006100 <TIM_TI1_SetConfig+0xd0>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d013      	beq.n	8006096 <TIM_TI1_SetConfig+0x66>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	4a24      	ldr	r2, [pc, #144]	; (8006104 <TIM_TI1_SetConfig+0xd4>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d00f      	beq.n	8006096 <TIM_TI1_SetConfig+0x66>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	4a23      	ldr	r2, [pc, #140]	; (8006108 <TIM_TI1_SetConfig+0xd8>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d00b      	beq.n	8006096 <TIM_TI1_SetConfig+0x66>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	4a22      	ldr	r2, [pc, #136]	; (800610c <TIM_TI1_SetConfig+0xdc>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d007      	beq.n	8006096 <TIM_TI1_SetConfig+0x66>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	4a21      	ldr	r2, [pc, #132]	; (8006110 <TIM_TI1_SetConfig+0xe0>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d003      	beq.n	8006096 <TIM_TI1_SetConfig+0x66>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	4a20      	ldr	r2, [pc, #128]	; (8006114 <TIM_TI1_SetConfig+0xe4>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d101      	bne.n	800609a <TIM_TI1_SetConfig+0x6a>
 8006096:	2301      	movs	r3, #1
 8006098:	e000      	b.n	800609c <TIM_TI1_SetConfig+0x6c>
 800609a:	2300      	movs	r3, #0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d008      	beq.n	80060b2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	f023 0303 	bic.w	r3, r3, #3
 80060a6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80060a8:	697a      	ldr	r2, [r7, #20]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	617b      	str	r3, [r7, #20]
 80060b0:	e003      	b.n	80060ba <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	f043 0301 	orr.w	r3, r3, #1
 80060b8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	011b      	lsls	r3, r3, #4
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	697a      	ldr	r2, [r7, #20]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	f023 030a 	bic.w	r3, r3, #10
 80060d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	f003 030a 	and.w	r3, r3, #10
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	4313      	orrs	r3, r2
 80060e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	693a      	ldr	r2, [r7, #16]
 80060ec:	621a      	str	r2, [r3, #32]
}
 80060ee:	bf00      	nop
 80060f0:	371c      	adds	r7, #28
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	40010000 	.word	0x40010000
 8006100:	40000400 	.word	0x40000400
 8006104:	40000800 	.word	0x40000800
 8006108:	40000c00 	.word	0x40000c00
 800610c:	40010400 	.word	0x40010400
 8006110:	40014000 	.word	0x40014000
 8006114:	40001800 	.word	0x40001800

08006118 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006118:	b480      	push	{r7}
 800611a:	b087      	sub	sp, #28
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6a1b      	ldr	r3, [r3, #32]
 8006128:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	f023 0201 	bic.w	r2, r3, #1
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006142:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	011b      	lsls	r3, r3, #4
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	4313      	orrs	r3, r2
 800614c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f023 030a 	bic.w	r3, r3, #10
 8006154:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	4313      	orrs	r3, r2
 800615c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	621a      	str	r2, [r3, #32]
}
 800616a:	bf00      	nop
 800616c:	371c      	adds	r7, #28
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006176:	b480      	push	{r7}
 8006178:	b087      	sub	sp, #28
 800617a:	af00      	add	r7, sp, #0
 800617c:	60f8      	str	r0, [r7, #12]
 800617e:	60b9      	str	r1, [r7, #8]
 8006180:	607a      	str	r2, [r7, #4]
 8006182:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	f023 0210 	bic.w	r2, r3, #16
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	021b      	lsls	r3, r3, #8
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	031b      	lsls	r3, r3, #12
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	4313      	orrs	r3, r2
 80061c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061c8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	011b      	lsls	r3, r3, #4
 80061ce:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	621a      	str	r2, [r3, #32]
}
 80061e4:	bf00      	nop
 80061e6:	371c      	adds	r7, #28
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b087      	sub	sp, #28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6a1b      	ldr	r3, [r3, #32]
 8006200:	f023 0210 	bic.w	r2, r3, #16
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800621a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	031b      	lsls	r3, r3, #12
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	4313      	orrs	r3, r2
 8006224:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800622c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	011b      	lsls	r3, r3, #4
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	4313      	orrs	r3, r2
 8006236:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	621a      	str	r2, [r3, #32]
}
 8006244:	bf00      	nop
 8006246:	371c      	adds	r7, #28
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006250:	b480      	push	{r7}
 8006252:	b087      	sub	sp, #28
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
 800625c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6a1b      	ldr	r3, [r3, #32]
 8006262:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	69db      	ldr	r3, [r3, #28]
 800626e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6a1b      	ldr	r3, [r3, #32]
 8006274:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	f023 0303 	bic.w	r3, r3, #3
 800627c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4313      	orrs	r3, r2
 8006284:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800628c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	011b      	lsls	r3, r3, #4
 8006292:	b2db      	uxtb	r3, r3
 8006294:	697a      	ldr	r2, [r7, #20]
 8006296:	4313      	orrs	r3, r2
 8006298:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80062a0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	021b      	lsls	r3, r3, #8
 80062a6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	621a      	str	r2, [r3, #32]
}
 80062bc:	bf00      	nop
 80062be:	371c      	adds	r7, #28
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b087      	sub	sp, #28
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
 80062d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	69db      	ldr	r3, [r3, #28]
 80062e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6a1b      	ldr	r3, [r3, #32]
 80062ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	021b      	lsls	r3, r3, #8
 80062fa:	697a      	ldr	r2, [r7, #20]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006306:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	031b      	lsls	r3, r3, #12
 800630c:	b29b      	uxth	r3, r3
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	4313      	orrs	r3, r2
 8006312:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800631a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	031b      	lsls	r3, r3, #12
 8006320:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	4313      	orrs	r3, r2
 8006328:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	621a      	str	r2, [r3, #32]
}
 8006336:	bf00      	nop
 8006338:	371c      	adds	r7, #28
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr

08006342 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006342:	b480      	push	{r7}
 8006344:	b085      	sub	sp, #20
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
 800634a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006358:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800635a:	683a      	ldr	r2, [r7, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	4313      	orrs	r3, r2
 8006360:	f043 0307 	orr.w	r3, r3, #7
 8006364:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	609a      	str	r2, [r3, #8]
}
 800636c:	bf00      	nop
 800636e:	3714      	adds	r7, #20
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006378:	b480      	push	{r7}
 800637a:	b087      	sub	sp, #28
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
 8006384:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006392:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	021a      	lsls	r2, r3, #8
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	431a      	orrs	r2, r3
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	4313      	orrs	r3, r2
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	609a      	str	r2, [r3, #8]
}
 80063ac:	bf00      	nop
 80063ae:	371c      	adds	r7, #28
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b087      	sub	sp, #28
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	f003 031f 	and.w	r3, r3, #31
 80063ca:	2201      	movs	r2, #1
 80063cc:	fa02 f303 	lsl.w	r3, r2, r3
 80063d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6a1a      	ldr	r2, [r3, #32]
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	43db      	mvns	r3, r3
 80063da:	401a      	ands	r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6a1a      	ldr	r2, [r3, #32]
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	f003 031f 	and.w	r3, r3, #31
 80063ea:	6879      	ldr	r1, [r7, #4]
 80063ec:	fa01 f303 	lsl.w	r3, r1, r3
 80063f0:	431a      	orrs	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	621a      	str	r2, [r3, #32]
}
 80063f6:	bf00      	nop
 80063f8:	371c      	adds	r7, #28
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr
	...

08006404 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006404:	b480      	push	{r7}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006414:	2b01      	cmp	r3, #1
 8006416:	d101      	bne.n	800641c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006418:	2302      	movs	r3, #2
 800641a:	e05a      	b.n	80064d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2202      	movs	r2, #2
 8006428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006442:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	4313      	orrs	r3, r2
 800644c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a21      	ldr	r2, [pc, #132]	; (80064e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d022      	beq.n	80064a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006468:	d01d      	beq.n	80064a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a1d      	ldr	r2, [pc, #116]	; (80064e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d018      	beq.n	80064a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a1b      	ldr	r2, [pc, #108]	; (80064e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d013      	beq.n	80064a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a1a      	ldr	r2, [pc, #104]	; (80064ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d00e      	beq.n	80064a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a18      	ldr	r2, [pc, #96]	; (80064f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d009      	beq.n	80064a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a17      	ldr	r2, [pc, #92]	; (80064f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d004      	beq.n	80064a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a15      	ldr	r2, [pc, #84]	; (80064f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d10c      	bne.n	80064c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3714      	adds	r7, #20
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	40010000 	.word	0x40010000
 80064e4:	40000400 	.word	0x40000400
 80064e8:	40000800 	.word	0x40000800
 80064ec:	40000c00 	.word	0x40000c00
 80064f0:	40010400 	.word	0x40010400
 80064f4:	40014000 	.word	0x40014000
 80064f8:	40001800 	.word	0x40001800

080064fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006504:	bf00      	nop
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006518:	bf00      	nop
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d101      	bne.n	8006536 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e03f      	b.n	80065b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b00      	cmp	r3, #0
 8006540:	d106      	bne.n	8006550 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f7fb fbda 	bl	8001d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2224      	movs	r2, #36	; 0x24
 8006554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68da      	ldr	r2, [r3, #12]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006566:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 fddf 	bl	800712c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	691a      	ldr	r2, [r3, #16]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800657c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	695a      	ldr	r2, [r3, #20]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800658c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68da      	ldr	r2, [r3, #12]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800659c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2220      	movs	r2, #32
 80065a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2220      	movs	r2, #32
 80065b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3708      	adds	r7, #8
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b08a      	sub	sp, #40	; 0x28
 80065c2:	af02      	add	r7, sp, #8
 80065c4:	60f8      	str	r0, [r7, #12]
 80065c6:	60b9      	str	r1, [r7, #8]
 80065c8:	603b      	str	r3, [r7, #0]
 80065ca:	4613      	mov	r3, r2
 80065cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80065ce:	2300      	movs	r3, #0
 80065d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b20      	cmp	r3, #32
 80065dc:	d17c      	bne.n	80066d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d002      	beq.n	80065ea <HAL_UART_Transmit+0x2c>
 80065e4:	88fb      	ldrh	r3, [r7, #6]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d101      	bne.n	80065ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e075      	b.n	80066da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d101      	bne.n	80065fc <HAL_UART_Transmit+0x3e>
 80065f8:	2302      	movs	r3, #2
 80065fa:	e06e      	b.n	80066da <HAL_UART_Transmit+0x11c>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2221      	movs	r2, #33	; 0x21
 800660e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006612:	f7fc f8e7 	bl	80027e4 <HAL_GetTick>
 8006616:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	88fa      	ldrh	r2, [r7, #6]
 800661c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	88fa      	ldrh	r2, [r7, #6]
 8006622:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800662c:	d108      	bne.n	8006640 <HAL_UART_Transmit+0x82>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d104      	bne.n	8006640 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006636:	2300      	movs	r3, #0
 8006638:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	61bb      	str	r3, [r7, #24]
 800663e:	e003      	b.n	8006648 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006644:	2300      	movs	r3, #0
 8006646:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006650:	e02a      	b.n	80066a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	9300      	str	r3, [sp, #0]
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	2200      	movs	r2, #0
 800665a:	2180      	movs	r1, #128	; 0x80
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f000 fb1f 	bl	8006ca0 <UART_WaitOnFlagUntilTimeout>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d001      	beq.n	800666c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e036      	b.n	80066da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d10b      	bne.n	800668a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	881b      	ldrh	r3, [r3, #0]
 8006676:	461a      	mov	r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006680:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	3302      	adds	r3, #2
 8006686:	61bb      	str	r3, [r7, #24]
 8006688:	e007      	b.n	800669a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	781a      	ldrb	r2, [r3, #0]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	3301      	adds	r3, #1
 8006698:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800669e:	b29b      	uxth	r3, r3
 80066a0:	3b01      	subs	r3, #1
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1cf      	bne.n	8006652 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	9300      	str	r3, [sp, #0]
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	2200      	movs	r2, #0
 80066ba:	2140      	movs	r1, #64	; 0x40
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f000 faef 	bl	8006ca0 <UART_WaitOnFlagUntilTimeout>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d001      	beq.n	80066cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e006      	b.n	80066da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2220      	movs	r2, #32
 80066d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80066d4:	2300      	movs	r3, #0
 80066d6:	e000      	b.n	80066da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80066d8:	2302      	movs	r3, #2
  }
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3720      	adds	r7, #32
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b084      	sub	sp, #16
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	60f8      	str	r0, [r7, #12]
 80066ea:	60b9      	str	r1, [r7, #8]
 80066ec:	4613      	mov	r3, r2
 80066ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	2b20      	cmp	r3, #32
 80066fa:	d11d      	bne.n	8006738 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d002      	beq.n	8006708 <HAL_UART_Receive_IT+0x26>
 8006702:	88fb      	ldrh	r3, [r7, #6]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d101      	bne.n	800670c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e016      	b.n	800673a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006712:	2b01      	cmp	r3, #1
 8006714:	d101      	bne.n	800671a <HAL_UART_Receive_IT+0x38>
 8006716:	2302      	movs	r3, #2
 8006718:	e00f      	b.n	800673a <HAL_UART_Receive_IT+0x58>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006728:	88fb      	ldrh	r3, [r7, #6]
 800672a:	461a      	mov	r2, r3
 800672c:	68b9      	ldr	r1, [r7, #8]
 800672e:	68f8      	ldr	r0, [r7, #12]
 8006730:	f000 fb24 	bl	8006d7c <UART_Start_Receive_IT>
 8006734:	4603      	mov	r3, r0
 8006736:	e000      	b.n	800673a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006738:	2302      	movs	r3, #2
  }
}
 800673a:	4618      	mov	r0, r3
 800673c:	3710      	adds	r7, #16
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
	...

08006744 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b0ba      	sub	sp, #232	; 0xe8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800676a:	2300      	movs	r3, #0
 800676c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006770:	2300      	movs	r3, #0
 8006772:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800677a:	f003 030f 	and.w	r3, r3, #15
 800677e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006782:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10f      	bne.n	80067aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800678a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800678e:	f003 0320 	and.w	r3, r3, #32
 8006792:	2b00      	cmp	r3, #0
 8006794:	d009      	beq.n	80067aa <HAL_UART_IRQHandler+0x66>
 8006796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800679a:	f003 0320 	and.w	r3, r3, #32
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d003      	beq.n	80067aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 fc07 	bl	8006fb6 <UART_Receive_IT>
      return;
 80067a8:	e256      	b.n	8006c58 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80067aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f000 80de 	beq.w	8006970 <HAL_UART_IRQHandler+0x22c>
 80067b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067b8:	f003 0301 	and.w	r3, r3, #1
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d106      	bne.n	80067ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80067c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f000 80d1 	beq.w	8006970 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80067ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00b      	beq.n	80067f2 <HAL_UART_IRQHandler+0xae>
 80067da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d005      	beq.n	80067f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ea:	f043 0201 	orr.w	r2, r3, #1
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067f6:	f003 0304 	and.w	r3, r3, #4
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00b      	beq.n	8006816 <HAL_UART_IRQHandler+0xd2>
 80067fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006802:	f003 0301 	and.w	r3, r3, #1
 8006806:	2b00      	cmp	r3, #0
 8006808:	d005      	beq.n	8006816 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680e:	f043 0202 	orr.w	r2, r3, #2
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800681a:	f003 0302 	and.w	r3, r3, #2
 800681e:	2b00      	cmp	r3, #0
 8006820:	d00b      	beq.n	800683a <HAL_UART_IRQHandler+0xf6>
 8006822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	2b00      	cmp	r3, #0
 800682c:	d005      	beq.n	800683a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006832:	f043 0204 	orr.w	r2, r3, #4
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800683a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800683e:	f003 0308 	and.w	r3, r3, #8
 8006842:	2b00      	cmp	r3, #0
 8006844:	d011      	beq.n	800686a <HAL_UART_IRQHandler+0x126>
 8006846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800684a:	f003 0320 	and.w	r3, r3, #32
 800684e:	2b00      	cmp	r3, #0
 8006850:	d105      	bne.n	800685e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006856:	f003 0301 	and.w	r3, r3, #1
 800685a:	2b00      	cmp	r3, #0
 800685c:	d005      	beq.n	800686a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006862:	f043 0208 	orr.w	r2, r3, #8
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686e:	2b00      	cmp	r3, #0
 8006870:	f000 81ed 	beq.w	8006c4e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006878:	f003 0320 	and.w	r3, r3, #32
 800687c:	2b00      	cmp	r3, #0
 800687e:	d008      	beq.n	8006892 <HAL_UART_IRQHandler+0x14e>
 8006880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006884:	f003 0320 	and.w	r3, r3, #32
 8006888:	2b00      	cmp	r3, #0
 800688a:	d002      	beq.n	8006892 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 fb92 	bl	8006fb6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	695b      	ldr	r3, [r3, #20]
 8006898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800689c:	2b40      	cmp	r3, #64	; 0x40
 800689e:	bf0c      	ite	eq
 80068a0:	2301      	moveq	r3, #1
 80068a2:	2300      	movne	r3, #0
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ae:	f003 0308 	and.w	r3, r3, #8
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d103      	bne.n	80068be <HAL_UART_IRQHandler+0x17a>
 80068b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d04f      	beq.n	800695e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 fa9a 	bl	8006df8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ce:	2b40      	cmp	r3, #64	; 0x40
 80068d0:	d141      	bne.n	8006956 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	3314      	adds	r3, #20
 80068d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068e0:	e853 3f00 	ldrex	r3, [r3]
 80068e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80068e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	3314      	adds	r3, #20
 80068fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80068fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006902:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006906:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800690a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800690e:	e841 2300 	strex	r3, r2, [r1]
 8006912:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006916:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1d9      	bne.n	80068d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006922:	2b00      	cmp	r3, #0
 8006924:	d013      	beq.n	800694e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692a:	4a7d      	ldr	r2, [pc, #500]	; (8006b20 <HAL_UART_IRQHandler+0x3dc>)
 800692c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006932:	4618      	mov	r0, r3
 8006934:	f7fc f907 	bl	8002b46 <HAL_DMA_Abort_IT>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d016      	beq.n	800696c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006948:	4610      	mov	r0, r2
 800694a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800694c:	e00e      	b.n	800696c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f990 	bl	8006c74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006954:	e00a      	b.n	800696c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 f98c 	bl	8006c74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800695c:	e006      	b.n	800696c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f988 	bl	8006c74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800696a:	e170      	b.n	8006c4e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800696c:	bf00      	nop
    return;
 800696e:	e16e      	b.n	8006c4e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006974:	2b01      	cmp	r3, #1
 8006976:	f040 814a 	bne.w	8006c0e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800697a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800697e:	f003 0310 	and.w	r3, r3, #16
 8006982:	2b00      	cmp	r3, #0
 8006984:	f000 8143 	beq.w	8006c0e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800698c:	f003 0310 	and.w	r3, r3, #16
 8006990:	2b00      	cmp	r3, #0
 8006992:	f000 813c 	beq.w	8006c0e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006996:	2300      	movs	r3, #0
 8006998:	60bb      	str	r3, [r7, #8]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	60bb      	str	r3, [r7, #8]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	60bb      	str	r3, [r7, #8]
 80069aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	695b      	ldr	r3, [r3, #20]
 80069b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069b6:	2b40      	cmp	r3, #64	; 0x40
 80069b8:	f040 80b4 	bne.w	8006b24 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80069c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f000 8140 	beq.w	8006c52 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80069d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069da:	429a      	cmp	r2, r3
 80069dc:	f080 8139 	bcs.w	8006c52 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069e6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ec:	69db      	ldr	r3, [r3, #28]
 80069ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069f2:	f000 8088 	beq.w	8006b06 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	330c      	adds	r3, #12
 80069fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a04:	e853 3f00 	ldrex	r3, [r3]
 8006a08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006a0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	330c      	adds	r3, #12
 8006a1e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006a22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006a26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006a2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a32:	e841 2300 	strex	r3, r2, [r1]
 8006a36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006a3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1d9      	bne.n	80069f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	3314      	adds	r3, #20
 8006a48:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a4c:	e853 3f00 	ldrex	r3, [r3]
 8006a50:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a54:	f023 0301 	bic.w	r3, r3, #1
 8006a58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	3314      	adds	r3, #20
 8006a62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006a66:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006a6a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006a6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a72:	e841 2300 	strex	r3, r2, [r1]
 8006a76:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d1e1      	bne.n	8006a42 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	3314      	adds	r3, #20
 8006a84:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a88:	e853 3f00 	ldrex	r3, [r3]
 8006a8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	3314      	adds	r3, #20
 8006a9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006aa2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006aa4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006aa8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006aaa:	e841 2300 	strex	r3, r2, [r1]
 8006aae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006ab0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1e3      	bne.n	8006a7e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2220      	movs	r2, #32
 8006aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	330c      	adds	r3, #12
 8006aca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ace:	e853 3f00 	ldrex	r3, [r3]
 8006ad2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006ad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ad6:	f023 0310 	bic.w	r3, r3, #16
 8006ada:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	330c      	adds	r3, #12
 8006ae4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006ae8:	65ba      	str	r2, [r7, #88]	; 0x58
 8006aea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006aee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006af0:	e841 2300 	strex	r3, r2, [r1]
 8006af4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1e3      	bne.n	8006ac4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7fb ffb0 	bl	8002a66 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	4619      	mov	r1, r3
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 f8b6 	bl	8006c88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b1c:	e099      	b.n	8006c52 <HAL_UART_IRQHandler+0x50e>
 8006b1e:	bf00      	nop
 8006b20:	08006ebf 	.word	0x08006ebf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f000 808b 	beq.w	8006c56 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006b40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f000 8086 	beq.w	8006c56 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	330c      	adds	r3, #12
 8006b50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b54:	e853 3f00 	ldrex	r3, [r3]
 8006b58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	330c      	adds	r3, #12
 8006b6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006b6e:	647a      	str	r2, [r7, #68]	; 0x44
 8006b70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b76:	e841 2300 	strex	r3, r2, [r1]
 8006b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1e3      	bne.n	8006b4a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	3314      	adds	r3, #20
 8006b88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8c:	e853 3f00 	ldrex	r3, [r3]
 8006b90:	623b      	str	r3, [r7, #32]
   return(result);
 8006b92:	6a3b      	ldr	r3, [r7, #32]
 8006b94:	f023 0301 	bic.w	r3, r3, #1
 8006b98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	3314      	adds	r3, #20
 8006ba2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006ba6:	633a      	str	r2, [r7, #48]	; 0x30
 8006ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006baa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bae:	e841 2300 	strex	r3, r2, [r1]
 8006bb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1e3      	bne.n	8006b82 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	330c      	adds	r3, #12
 8006bce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	e853 3f00 	ldrex	r3, [r3]
 8006bd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f023 0310 	bic.w	r3, r3, #16
 8006bde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	330c      	adds	r3, #12
 8006be8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006bec:	61fa      	str	r2, [r7, #28]
 8006bee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf0:	69b9      	ldr	r1, [r7, #24]
 8006bf2:	69fa      	ldr	r2, [r7, #28]
 8006bf4:	e841 2300 	strex	r3, r2, [r1]
 8006bf8:	617b      	str	r3, [r7, #20]
   return(result);
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d1e3      	bne.n	8006bc8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c04:	4619      	mov	r1, r3
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 f83e 	bl	8006c88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c0c:	e023      	b.n	8006c56 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d009      	beq.n	8006c2e <HAL_UART_IRQHandler+0x4ea>
 8006c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d003      	beq.n	8006c2e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 f95d 	bl	8006ee6 <UART_Transmit_IT>
    return;
 8006c2c:	e014      	b.n	8006c58 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00e      	beq.n	8006c58 <HAL_UART_IRQHandler+0x514>
 8006c3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d008      	beq.n	8006c58 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f99d 	bl	8006f86 <UART_EndTransmit_IT>
    return;
 8006c4c:	e004      	b.n	8006c58 <HAL_UART_IRQHandler+0x514>
    return;
 8006c4e:	bf00      	nop
 8006c50:	e002      	b.n	8006c58 <HAL_UART_IRQHandler+0x514>
      return;
 8006c52:	bf00      	nop
 8006c54:	e000      	b.n	8006c58 <HAL_UART_IRQHandler+0x514>
      return;
 8006c56:	bf00      	nop
  }
}
 8006c58:	37e8      	adds	r7, #232	; 0xe8
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop

08006c60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c68:	bf00      	nop
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c7c:	bf00      	nop
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	460b      	mov	r3, r1
 8006c92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b090      	sub	sp, #64	; 0x40
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	603b      	str	r3, [r7, #0]
 8006cac:	4613      	mov	r3, r2
 8006cae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cb0:	e050      	b.n	8006d54 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb8:	d04c      	beq.n	8006d54 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006cba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d007      	beq.n	8006cd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006cc0:	f7fb fd90 	bl	80027e4 <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d241      	bcs.n	8006d54 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	330c      	adds	r3, #12
 8006cd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cda:	e853 3f00 	ldrex	r3, [r3]
 8006cde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	330c      	adds	r3, #12
 8006cee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006cf0:	637a      	str	r2, [r7, #52]	; 0x34
 8006cf2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006cf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cf8:	e841 2300 	strex	r3, r2, [r1]
 8006cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d1e5      	bne.n	8006cd0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	3314      	adds	r3, #20
 8006d0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	e853 3f00 	ldrex	r3, [r3]
 8006d12:	613b      	str	r3, [r7, #16]
   return(result);
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	f023 0301 	bic.w	r3, r3, #1
 8006d1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	3314      	adds	r3, #20
 8006d22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d24:	623a      	str	r2, [r7, #32]
 8006d26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d28:	69f9      	ldr	r1, [r7, #28]
 8006d2a:	6a3a      	ldr	r2, [r7, #32]
 8006d2c:	e841 2300 	strex	r3, r2, [r1]
 8006d30:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d1e5      	bne.n	8006d04 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2220      	movs	r2, #32
 8006d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2220      	movs	r2, #32
 8006d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006d50:	2303      	movs	r3, #3
 8006d52:	e00f      	b.n	8006d74 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	68ba      	ldr	r2, [r7, #8]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	bf0c      	ite	eq
 8006d64:	2301      	moveq	r3, #1
 8006d66:	2300      	movne	r3, #0
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	79fb      	ldrb	r3, [r7, #7]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d09f      	beq.n	8006cb2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3740      	adds	r7, #64	; 0x40
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	4613      	mov	r3, r2
 8006d88:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	68ba      	ldr	r2, [r7, #8]
 8006d8e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	88fa      	ldrh	r2, [r7, #6]
 8006d94:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	88fa      	ldrh	r2, [r7, #6]
 8006d9a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2222      	movs	r2, #34	; 0x22
 8006da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d007      	beq.n	8006dca <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68da      	ldr	r2, [r3, #12]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006dc8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	695a      	ldr	r2, [r3, #20]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f042 0201 	orr.w	r2, r2, #1
 8006dd8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68da      	ldr	r2, [r3, #12]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f042 0220 	orr.w	r2, r2, #32
 8006de8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3714      	adds	r7, #20
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b095      	sub	sp, #84	; 0x54
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	330c      	adds	r3, #12
 8006e06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e0a:	e853 3f00 	ldrex	r3, [r3]
 8006e0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	330c      	adds	r3, #12
 8006e1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e20:	643a      	str	r2, [r7, #64]	; 0x40
 8006e22:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e28:	e841 2300 	strex	r3, r2, [r1]
 8006e2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1e5      	bne.n	8006e00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	3314      	adds	r3, #20
 8006e3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3c:	6a3b      	ldr	r3, [r7, #32]
 8006e3e:	e853 3f00 	ldrex	r3, [r3]
 8006e42:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	f023 0301 	bic.w	r3, r3, #1
 8006e4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	3314      	adds	r3, #20
 8006e52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e5c:	e841 2300 	strex	r3, r2, [r1]
 8006e60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d1e5      	bne.n	8006e34 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d119      	bne.n	8006ea4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	330c      	adds	r3, #12
 8006e76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	e853 3f00 	ldrex	r3, [r3]
 8006e7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	f023 0310 	bic.w	r3, r3, #16
 8006e86:	647b      	str	r3, [r7, #68]	; 0x44
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	330c      	adds	r3, #12
 8006e8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e90:	61ba      	str	r2, [r7, #24]
 8006e92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e94:	6979      	ldr	r1, [r7, #20]
 8006e96:	69ba      	ldr	r2, [r7, #24]
 8006e98:	e841 2300 	strex	r3, r2, [r1]
 8006e9c:	613b      	str	r3, [r7, #16]
   return(result);
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d1e5      	bne.n	8006e70 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2220      	movs	r2, #32
 8006ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006eb2:	bf00      	nop
 8006eb4:	3754      	adds	r7, #84	; 0x54
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr

08006ebe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b084      	sub	sp, #16
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f7ff fecb 	bl	8006c74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ede:	bf00      	nop
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006ee6:	b480      	push	{r7}
 8006ee8:	b085      	sub	sp, #20
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	2b21      	cmp	r3, #33	; 0x21
 8006ef8:	d13e      	bne.n	8006f78 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f02:	d114      	bne.n	8006f2e <UART_Transmit_IT+0x48>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d110      	bne.n	8006f2e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a1b      	ldr	r3, [r3, #32]
 8006f10:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	881b      	ldrh	r3, [r3, #0]
 8006f16:	461a      	mov	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f20:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a1b      	ldr	r3, [r3, #32]
 8006f26:	1c9a      	adds	r2, r3, #2
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	621a      	str	r2, [r3, #32]
 8006f2c:	e008      	b.n	8006f40 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	1c59      	adds	r1, r3, #1
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	6211      	str	r1, [r2, #32]
 8006f38:	781a      	ldrb	r2, [r3, #0]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	3b01      	subs	r3, #1
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d10f      	bne.n	8006f74 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68da      	ldr	r2, [r3, #12]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f62:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68da      	ldr	r2, [r3, #12]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f72:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f74:	2300      	movs	r3, #0
 8006f76:	e000      	b.n	8006f7a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f78:	2302      	movs	r3, #2
  }
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3714      	adds	r7, #20
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr

08006f86 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b082      	sub	sp, #8
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	68da      	ldr	r2, [r3, #12]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f9c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2220      	movs	r2, #32
 8006fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f7ff fe5a 	bl	8006c60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3708      	adds	r7, #8
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b08c      	sub	sp, #48	; 0x30
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	2b22      	cmp	r3, #34	; 0x22
 8006fc8:	f040 80ab 	bne.w	8007122 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fd4:	d117      	bne.n	8007006 <UART_Receive_IT+0x50>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d113      	bne.n	8007006 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffe:	1c9a      	adds	r2, r3, #2
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	629a      	str	r2, [r3, #40]	; 0x28
 8007004:	e026      	b.n	8007054 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800700c:	2300      	movs	r3, #0
 800700e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007018:	d007      	beq.n	800702a <UART_Receive_IT+0x74>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d10a      	bne.n	8007038 <UART_Receive_IT+0x82>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d106      	bne.n	8007038 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	b2da      	uxtb	r2, r3
 8007032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007034:	701a      	strb	r2, [r3, #0]
 8007036:	e008      	b.n	800704a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	b2db      	uxtb	r3, r3
 8007040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007044:	b2da      	uxtb	r2, r3
 8007046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007048:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800704e:	1c5a      	adds	r2, r3, #1
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007058:	b29b      	uxth	r3, r3
 800705a:	3b01      	subs	r3, #1
 800705c:	b29b      	uxth	r3, r3
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	4619      	mov	r1, r3
 8007062:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007064:	2b00      	cmp	r3, #0
 8007066:	d15a      	bne.n	800711e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	68da      	ldr	r2, [r3, #12]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f022 0220 	bic.w	r2, r2, #32
 8007076:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68da      	ldr	r2, [r3, #12]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007086:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	695a      	ldr	r2, [r3, #20]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f022 0201 	bic.w	r2, r2, #1
 8007096:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2220      	movs	r2, #32
 800709c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d135      	bne.n	8007114 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	330c      	adds	r3, #12
 80070b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	e853 3f00 	ldrex	r3, [r3]
 80070bc:	613b      	str	r3, [r7, #16]
   return(result);
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	f023 0310 	bic.w	r3, r3, #16
 80070c4:	627b      	str	r3, [r7, #36]	; 0x24
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	330c      	adds	r3, #12
 80070cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070ce:	623a      	str	r2, [r7, #32]
 80070d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d2:	69f9      	ldr	r1, [r7, #28]
 80070d4:	6a3a      	ldr	r2, [r7, #32]
 80070d6:	e841 2300 	strex	r3, r2, [r1]
 80070da:	61bb      	str	r3, [r7, #24]
   return(result);
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d1e5      	bne.n	80070ae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 0310 	and.w	r3, r3, #16
 80070ec:	2b10      	cmp	r3, #16
 80070ee:	d10a      	bne.n	8007106 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070f0:	2300      	movs	r3, #0
 80070f2:	60fb      	str	r3, [r7, #12]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	60fb      	str	r3, [r7, #12]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	60fb      	str	r3, [r7, #12]
 8007104:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800710a:	4619      	mov	r1, r3
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f7ff fdbb 	bl	8006c88 <HAL_UARTEx_RxEventCallback>
 8007112:	e002      	b.n	800711a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f7fb f805 	bl	8002124 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800711a:	2300      	movs	r3, #0
 800711c:	e002      	b.n	8007124 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800711e:	2300      	movs	r3, #0
 8007120:	e000      	b.n	8007124 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007122:	2302      	movs	r3, #2
  }
}
 8007124:	4618      	mov	r0, r3
 8007126:	3730      	adds	r7, #48	; 0x30
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800712c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007130:	b0c0      	sub	sp, #256	; 0x100
 8007132:	af00      	add	r7, sp, #0
 8007134:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007148:	68d9      	ldr	r1, [r3, #12]
 800714a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	ea40 0301 	orr.w	r3, r0, r1
 8007154:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800715a:	689a      	ldr	r2, [r3, #8]
 800715c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	431a      	orrs	r2, r3
 8007164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007168:	695b      	ldr	r3, [r3, #20]
 800716a:	431a      	orrs	r2, r3
 800716c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007170:	69db      	ldr	r3, [r3, #28]
 8007172:	4313      	orrs	r3, r2
 8007174:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007184:	f021 010c 	bic.w	r1, r1, #12
 8007188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007192:	430b      	orrs	r3, r1
 8007194:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	695b      	ldr	r3, [r3, #20]
 800719e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80071a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071a6:	6999      	ldr	r1, [r3, #24]
 80071a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	ea40 0301 	orr.w	r3, r0, r1
 80071b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80071b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	4b8f      	ldr	r3, [pc, #572]	; (80073f8 <UART_SetConfig+0x2cc>)
 80071bc:	429a      	cmp	r2, r3
 80071be:	d005      	beq.n	80071cc <UART_SetConfig+0xa0>
 80071c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	4b8d      	ldr	r3, [pc, #564]	; (80073fc <UART_SetConfig+0x2d0>)
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d104      	bne.n	80071d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80071cc:	f7fd fc66 	bl	8004a9c <HAL_RCC_GetPCLK2Freq>
 80071d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80071d4:	e003      	b.n	80071de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80071d6:	f7fd fc4d 	bl	8004a74 <HAL_RCC_GetPCLK1Freq>
 80071da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071e2:	69db      	ldr	r3, [r3, #28]
 80071e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071e8:	f040 810c 	bne.w	8007404 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071f0:	2200      	movs	r2, #0
 80071f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80071f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80071fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80071fe:	4622      	mov	r2, r4
 8007200:	462b      	mov	r3, r5
 8007202:	1891      	adds	r1, r2, r2
 8007204:	65b9      	str	r1, [r7, #88]	; 0x58
 8007206:	415b      	adcs	r3, r3
 8007208:	65fb      	str	r3, [r7, #92]	; 0x5c
 800720a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800720e:	4621      	mov	r1, r4
 8007210:	eb12 0801 	adds.w	r8, r2, r1
 8007214:	4629      	mov	r1, r5
 8007216:	eb43 0901 	adc.w	r9, r3, r1
 800721a:	f04f 0200 	mov.w	r2, #0
 800721e:	f04f 0300 	mov.w	r3, #0
 8007222:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007226:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800722a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800722e:	4690      	mov	r8, r2
 8007230:	4699      	mov	r9, r3
 8007232:	4623      	mov	r3, r4
 8007234:	eb18 0303 	adds.w	r3, r8, r3
 8007238:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800723c:	462b      	mov	r3, r5
 800723e:	eb49 0303 	adc.w	r3, r9, r3
 8007242:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007252:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007256:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800725a:	460b      	mov	r3, r1
 800725c:	18db      	adds	r3, r3, r3
 800725e:	653b      	str	r3, [r7, #80]	; 0x50
 8007260:	4613      	mov	r3, r2
 8007262:	eb42 0303 	adc.w	r3, r2, r3
 8007266:	657b      	str	r3, [r7, #84]	; 0x54
 8007268:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800726c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007270:	f7f9 f80e 	bl	8000290 <__aeabi_uldivmod>
 8007274:	4602      	mov	r2, r0
 8007276:	460b      	mov	r3, r1
 8007278:	4b61      	ldr	r3, [pc, #388]	; (8007400 <UART_SetConfig+0x2d4>)
 800727a:	fba3 2302 	umull	r2, r3, r3, r2
 800727e:	095b      	lsrs	r3, r3, #5
 8007280:	011c      	lsls	r4, r3, #4
 8007282:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007286:	2200      	movs	r2, #0
 8007288:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800728c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007290:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007294:	4642      	mov	r2, r8
 8007296:	464b      	mov	r3, r9
 8007298:	1891      	adds	r1, r2, r2
 800729a:	64b9      	str	r1, [r7, #72]	; 0x48
 800729c:	415b      	adcs	r3, r3
 800729e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80072a4:	4641      	mov	r1, r8
 80072a6:	eb12 0a01 	adds.w	sl, r2, r1
 80072aa:	4649      	mov	r1, r9
 80072ac:	eb43 0b01 	adc.w	fp, r3, r1
 80072b0:	f04f 0200 	mov.w	r2, #0
 80072b4:	f04f 0300 	mov.w	r3, #0
 80072b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80072bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80072c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072c4:	4692      	mov	sl, r2
 80072c6:	469b      	mov	fp, r3
 80072c8:	4643      	mov	r3, r8
 80072ca:	eb1a 0303 	adds.w	r3, sl, r3
 80072ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80072d2:	464b      	mov	r3, r9
 80072d4:	eb4b 0303 	adc.w	r3, fp, r3
 80072d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80072dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80072ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80072f0:	460b      	mov	r3, r1
 80072f2:	18db      	adds	r3, r3, r3
 80072f4:	643b      	str	r3, [r7, #64]	; 0x40
 80072f6:	4613      	mov	r3, r2
 80072f8:	eb42 0303 	adc.w	r3, r2, r3
 80072fc:	647b      	str	r3, [r7, #68]	; 0x44
 80072fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007302:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007306:	f7f8 ffc3 	bl	8000290 <__aeabi_uldivmod>
 800730a:	4602      	mov	r2, r0
 800730c:	460b      	mov	r3, r1
 800730e:	4611      	mov	r1, r2
 8007310:	4b3b      	ldr	r3, [pc, #236]	; (8007400 <UART_SetConfig+0x2d4>)
 8007312:	fba3 2301 	umull	r2, r3, r3, r1
 8007316:	095b      	lsrs	r3, r3, #5
 8007318:	2264      	movs	r2, #100	; 0x64
 800731a:	fb02 f303 	mul.w	r3, r2, r3
 800731e:	1acb      	subs	r3, r1, r3
 8007320:	00db      	lsls	r3, r3, #3
 8007322:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007326:	4b36      	ldr	r3, [pc, #216]	; (8007400 <UART_SetConfig+0x2d4>)
 8007328:	fba3 2302 	umull	r2, r3, r3, r2
 800732c:	095b      	lsrs	r3, r3, #5
 800732e:	005b      	lsls	r3, r3, #1
 8007330:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007334:	441c      	add	r4, r3
 8007336:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800733a:	2200      	movs	r2, #0
 800733c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007340:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007344:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007348:	4642      	mov	r2, r8
 800734a:	464b      	mov	r3, r9
 800734c:	1891      	adds	r1, r2, r2
 800734e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007350:	415b      	adcs	r3, r3
 8007352:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007354:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007358:	4641      	mov	r1, r8
 800735a:	1851      	adds	r1, r2, r1
 800735c:	6339      	str	r1, [r7, #48]	; 0x30
 800735e:	4649      	mov	r1, r9
 8007360:	414b      	adcs	r3, r1
 8007362:	637b      	str	r3, [r7, #52]	; 0x34
 8007364:	f04f 0200 	mov.w	r2, #0
 8007368:	f04f 0300 	mov.w	r3, #0
 800736c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007370:	4659      	mov	r1, fp
 8007372:	00cb      	lsls	r3, r1, #3
 8007374:	4651      	mov	r1, sl
 8007376:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800737a:	4651      	mov	r1, sl
 800737c:	00ca      	lsls	r2, r1, #3
 800737e:	4610      	mov	r0, r2
 8007380:	4619      	mov	r1, r3
 8007382:	4603      	mov	r3, r0
 8007384:	4642      	mov	r2, r8
 8007386:	189b      	adds	r3, r3, r2
 8007388:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800738c:	464b      	mov	r3, r9
 800738e:	460a      	mov	r2, r1
 8007390:	eb42 0303 	adc.w	r3, r2, r3
 8007394:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80073a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80073a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80073ac:	460b      	mov	r3, r1
 80073ae:	18db      	adds	r3, r3, r3
 80073b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80073b2:	4613      	mov	r3, r2
 80073b4:	eb42 0303 	adc.w	r3, r2, r3
 80073b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80073be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80073c2:	f7f8 ff65 	bl	8000290 <__aeabi_uldivmod>
 80073c6:	4602      	mov	r2, r0
 80073c8:	460b      	mov	r3, r1
 80073ca:	4b0d      	ldr	r3, [pc, #52]	; (8007400 <UART_SetConfig+0x2d4>)
 80073cc:	fba3 1302 	umull	r1, r3, r3, r2
 80073d0:	095b      	lsrs	r3, r3, #5
 80073d2:	2164      	movs	r1, #100	; 0x64
 80073d4:	fb01 f303 	mul.w	r3, r1, r3
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	00db      	lsls	r3, r3, #3
 80073dc:	3332      	adds	r3, #50	; 0x32
 80073de:	4a08      	ldr	r2, [pc, #32]	; (8007400 <UART_SetConfig+0x2d4>)
 80073e0:	fba2 2303 	umull	r2, r3, r2, r3
 80073e4:	095b      	lsrs	r3, r3, #5
 80073e6:	f003 0207 	and.w	r2, r3, #7
 80073ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4422      	add	r2, r4
 80073f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80073f4:	e105      	b.n	8007602 <UART_SetConfig+0x4d6>
 80073f6:	bf00      	nop
 80073f8:	40011000 	.word	0x40011000
 80073fc:	40011400 	.word	0x40011400
 8007400:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007404:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007408:	2200      	movs	r2, #0
 800740a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800740e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007412:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007416:	4642      	mov	r2, r8
 8007418:	464b      	mov	r3, r9
 800741a:	1891      	adds	r1, r2, r2
 800741c:	6239      	str	r1, [r7, #32]
 800741e:	415b      	adcs	r3, r3
 8007420:	627b      	str	r3, [r7, #36]	; 0x24
 8007422:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007426:	4641      	mov	r1, r8
 8007428:	1854      	adds	r4, r2, r1
 800742a:	4649      	mov	r1, r9
 800742c:	eb43 0501 	adc.w	r5, r3, r1
 8007430:	f04f 0200 	mov.w	r2, #0
 8007434:	f04f 0300 	mov.w	r3, #0
 8007438:	00eb      	lsls	r3, r5, #3
 800743a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800743e:	00e2      	lsls	r2, r4, #3
 8007440:	4614      	mov	r4, r2
 8007442:	461d      	mov	r5, r3
 8007444:	4643      	mov	r3, r8
 8007446:	18e3      	adds	r3, r4, r3
 8007448:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800744c:	464b      	mov	r3, r9
 800744e:	eb45 0303 	adc.w	r3, r5, r3
 8007452:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007462:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007466:	f04f 0200 	mov.w	r2, #0
 800746a:	f04f 0300 	mov.w	r3, #0
 800746e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007472:	4629      	mov	r1, r5
 8007474:	008b      	lsls	r3, r1, #2
 8007476:	4621      	mov	r1, r4
 8007478:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800747c:	4621      	mov	r1, r4
 800747e:	008a      	lsls	r2, r1, #2
 8007480:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007484:	f7f8 ff04 	bl	8000290 <__aeabi_uldivmod>
 8007488:	4602      	mov	r2, r0
 800748a:	460b      	mov	r3, r1
 800748c:	4b60      	ldr	r3, [pc, #384]	; (8007610 <UART_SetConfig+0x4e4>)
 800748e:	fba3 2302 	umull	r2, r3, r3, r2
 8007492:	095b      	lsrs	r3, r3, #5
 8007494:	011c      	lsls	r4, r3, #4
 8007496:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800749a:	2200      	movs	r2, #0
 800749c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80074a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80074a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80074a8:	4642      	mov	r2, r8
 80074aa:	464b      	mov	r3, r9
 80074ac:	1891      	adds	r1, r2, r2
 80074ae:	61b9      	str	r1, [r7, #24]
 80074b0:	415b      	adcs	r3, r3
 80074b2:	61fb      	str	r3, [r7, #28]
 80074b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074b8:	4641      	mov	r1, r8
 80074ba:	1851      	adds	r1, r2, r1
 80074bc:	6139      	str	r1, [r7, #16]
 80074be:	4649      	mov	r1, r9
 80074c0:	414b      	adcs	r3, r1
 80074c2:	617b      	str	r3, [r7, #20]
 80074c4:	f04f 0200 	mov.w	r2, #0
 80074c8:	f04f 0300 	mov.w	r3, #0
 80074cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074d0:	4659      	mov	r1, fp
 80074d2:	00cb      	lsls	r3, r1, #3
 80074d4:	4651      	mov	r1, sl
 80074d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074da:	4651      	mov	r1, sl
 80074dc:	00ca      	lsls	r2, r1, #3
 80074de:	4610      	mov	r0, r2
 80074e0:	4619      	mov	r1, r3
 80074e2:	4603      	mov	r3, r0
 80074e4:	4642      	mov	r2, r8
 80074e6:	189b      	adds	r3, r3, r2
 80074e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80074ec:	464b      	mov	r3, r9
 80074ee:	460a      	mov	r2, r1
 80074f0:	eb42 0303 	adc.w	r3, r2, r3
 80074f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80074f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	67bb      	str	r3, [r7, #120]	; 0x78
 8007502:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007504:	f04f 0200 	mov.w	r2, #0
 8007508:	f04f 0300 	mov.w	r3, #0
 800750c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007510:	4649      	mov	r1, r9
 8007512:	008b      	lsls	r3, r1, #2
 8007514:	4641      	mov	r1, r8
 8007516:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800751a:	4641      	mov	r1, r8
 800751c:	008a      	lsls	r2, r1, #2
 800751e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007522:	f7f8 feb5 	bl	8000290 <__aeabi_uldivmod>
 8007526:	4602      	mov	r2, r0
 8007528:	460b      	mov	r3, r1
 800752a:	4b39      	ldr	r3, [pc, #228]	; (8007610 <UART_SetConfig+0x4e4>)
 800752c:	fba3 1302 	umull	r1, r3, r3, r2
 8007530:	095b      	lsrs	r3, r3, #5
 8007532:	2164      	movs	r1, #100	; 0x64
 8007534:	fb01 f303 	mul.w	r3, r1, r3
 8007538:	1ad3      	subs	r3, r2, r3
 800753a:	011b      	lsls	r3, r3, #4
 800753c:	3332      	adds	r3, #50	; 0x32
 800753e:	4a34      	ldr	r2, [pc, #208]	; (8007610 <UART_SetConfig+0x4e4>)
 8007540:	fba2 2303 	umull	r2, r3, r2, r3
 8007544:	095b      	lsrs	r3, r3, #5
 8007546:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800754a:	441c      	add	r4, r3
 800754c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007550:	2200      	movs	r2, #0
 8007552:	673b      	str	r3, [r7, #112]	; 0x70
 8007554:	677a      	str	r2, [r7, #116]	; 0x74
 8007556:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800755a:	4642      	mov	r2, r8
 800755c:	464b      	mov	r3, r9
 800755e:	1891      	adds	r1, r2, r2
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	415b      	adcs	r3, r3
 8007564:	60fb      	str	r3, [r7, #12]
 8007566:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800756a:	4641      	mov	r1, r8
 800756c:	1851      	adds	r1, r2, r1
 800756e:	6039      	str	r1, [r7, #0]
 8007570:	4649      	mov	r1, r9
 8007572:	414b      	adcs	r3, r1
 8007574:	607b      	str	r3, [r7, #4]
 8007576:	f04f 0200 	mov.w	r2, #0
 800757a:	f04f 0300 	mov.w	r3, #0
 800757e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007582:	4659      	mov	r1, fp
 8007584:	00cb      	lsls	r3, r1, #3
 8007586:	4651      	mov	r1, sl
 8007588:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800758c:	4651      	mov	r1, sl
 800758e:	00ca      	lsls	r2, r1, #3
 8007590:	4610      	mov	r0, r2
 8007592:	4619      	mov	r1, r3
 8007594:	4603      	mov	r3, r0
 8007596:	4642      	mov	r2, r8
 8007598:	189b      	adds	r3, r3, r2
 800759a:	66bb      	str	r3, [r7, #104]	; 0x68
 800759c:	464b      	mov	r3, r9
 800759e:	460a      	mov	r2, r1
 80075a0:	eb42 0303 	adc.w	r3, r2, r3
 80075a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	663b      	str	r3, [r7, #96]	; 0x60
 80075b0:	667a      	str	r2, [r7, #100]	; 0x64
 80075b2:	f04f 0200 	mov.w	r2, #0
 80075b6:	f04f 0300 	mov.w	r3, #0
 80075ba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80075be:	4649      	mov	r1, r9
 80075c0:	008b      	lsls	r3, r1, #2
 80075c2:	4641      	mov	r1, r8
 80075c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075c8:	4641      	mov	r1, r8
 80075ca:	008a      	lsls	r2, r1, #2
 80075cc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80075d0:	f7f8 fe5e 	bl	8000290 <__aeabi_uldivmod>
 80075d4:	4602      	mov	r2, r0
 80075d6:	460b      	mov	r3, r1
 80075d8:	4b0d      	ldr	r3, [pc, #52]	; (8007610 <UART_SetConfig+0x4e4>)
 80075da:	fba3 1302 	umull	r1, r3, r3, r2
 80075de:	095b      	lsrs	r3, r3, #5
 80075e0:	2164      	movs	r1, #100	; 0x64
 80075e2:	fb01 f303 	mul.w	r3, r1, r3
 80075e6:	1ad3      	subs	r3, r2, r3
 80075e8:	011b      	lsls	r3, r3, #4
 80075ea:	3332      	adds	r3, #50	; 0x32
 80075ec:	4a08      	ldr	r2, [pc, #32]	; (8007610 <UART_SetConfig+0x4e4>)
 80075ee:	fba2 2303 	umull	r2, r3, r2, r3
 80075f2:	095b      	lsrs	r3, r3, #5
 80075f4:	f003 020f 	and.w	r2, r3, #15
 80075f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4422      	add	r2, r4
 8007600:	609a      	str	r2, [r3, #8]
}
 8007602:	bf00      	nop
 8007604:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007608:	46bd      	mov	sp, r7
 800760a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800760e:	bf00      	nop
 8007610:	51eb851f 	.word	0x51eb851f

08007614 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007614:	b084      	sub	sp, #16
 8007616:	b580      	push	{r7, lr}
 8007618:	b084      	sub	sp, #16
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
 800761e:	f107 001c 	add.w	r0, r7, #28
 8007622:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007628:	2b01      	cmp	r3, #1
 800762a:	d122      	bne.n	8007672 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007630:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007640:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007656:	2b01      	cmp	r3, #1
 8007658:	d105      	bne.n	8007666 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 faa2 	bl	8007bb0 <USB_CoreReset>
 800766c:	4603      	mov	r3, r0
 800766e:	73fb      	strb	r3, [r7, #15]
 8007670:	e01a      	b.n	80076a8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 fa96 	bl	8007bb0 <USB_CoreReset>
 8007684:	4603      	mov	r3, r0
 8007686:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800768a:	2b00      	cmp	r3, #0
 800768c:	d106      	bne.n	800769c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007692:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	639a      	str	r2, [r3, #56]	; 0x38
 800769a:	e005      	b.n	80076a8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80076a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d10b      	bne.n	80076c6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	f043 0206 	orr.w	r2, r3, #6
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	f043 0220 	orr.w	r2, r3, #32
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80076c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3710      	adds	r7, #16
 80076cc:	46bd      	mov	sp, r7
 80076ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076d2:	b004      	add	sp, #16
 80076d4:	4770      	bx	lr

080076d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80076d6:	b480      	push	{r7}
 80076d8:	b083      	sub	sp, #12
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	f023 0201 	bic.w	r2, r3, #1
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80076ea:	2300      	movs	r3, #0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	460b      	mov	r3, r1
 8007702:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007704:	2300      	movs	r3, #0
 8007706:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007714:	78fb      	ldrb	r3, [r7, #3]
 8007716:	2b01      	cmp	r3, #1
 8007718:	d115      	bne.n	8007746 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007726:	2001      	movs	r0, #1
 8007728:	f7fb f868 	bl	80027fc <HAL_Delay>
      ms++;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	3301      	adds	r3, #1
 8007730:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 fa2e 	bl	8007b94 <USB_GetMode>
 8007738:	4603      	mov	r3, r0
 800773a:	2b01      	cmp	r3, #1
 800773c:	d01e      	beq.n	800777c <USB_SetCurrentMode+0x84>
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2b31      	cmp	r3, #49	; 0x31
 8007742:	d9f0      	bls.n	8007726 <USB_SetCurrentMode+0x2e>
 8007744:	e01a      	b.n	800777c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007746:	78fb      	ldrb	r3, [r7, #3]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d115      	bne.n	8007778 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007758:	2001      	movs	r0, #1
 800775a:	f7fb f84f 	bl	80027fc <HAL_Delay>
      ms++;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	3301      	adds	r3, #1
 8007762:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 fa15 	bl	8007b94 <USB_GetMode>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d005      	beq.n	800777c <USB_SetCurrentMode+0x84>
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2b31      	cmp	r3, #49	; 0x31
 8007774:	d9f0      	bls.n	8007758 <USB_SetCurrentMode+0x60>
 8007776:	e001      	b.n	800777c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007778:	2301      	movs	r3, #1
 800777a:	e005      	b.n	8007788 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2b32      	cmp	r3, #50	; 0x32
 8007780:	d101      	bne.n	8007786 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	e000      	b.n	8007788 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007790:	b084      	sub	sp, #16
 8007792:	b580      	push	{r7, lr}
 8007794:	b086      	sub	sp, #24
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
 800779a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800779e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80077a2:	2300      	movs	r3, #0
 80077a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80077aa:	2300      	movs	r3, #0
 80077ac:	613b      	str	r3, [r7, #16]
 80077ae:	e009      	b.n	80077c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	3340      	adds	r3, #64	; 0x40
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	4413      	add	r3, r2
 80077ba:	2200      	movs	r2, #0
 80077bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	3301      	adds	r3, #1
 80077c2:	613b      	str	r3, [r7, #16]
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	2b0e      	cmp	r3, #14
 80077c8:	d9f2      	bls.n	80077b0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80077ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d11c      	bne.n	800780a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	68fa      	ldr	r2, [r7, #12]
 80077da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077de:	f043 0302 	orr.w	r3, r3, #2
 80077e2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007800:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	639a      	str	r2, [r3, #56]	; 0x38
 8007808:	e00b      	b.n	8007822 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800780e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007828:	461a      	mov	r2, r3
 800782a:	2300      	movs	r3, #0
 800782c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007834:	4619      	mov	r1, r3
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800783c:	461a      	mov	r2, r3
 800783e:	680b      	ldr	r3, [r1, #0]
 8007840:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007844:	2b01      	cmp	r3, #1
 8007846:	d10c      	bne.n	8007862 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784a:	2b00      	cmp	r3, #0
 800784c:	d104      	bne.n	8007858 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800784e:	2100      	movs	r1, #0
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 f965 	bl	8007b20 <USB_SetDevSpeed>
 8007856:	e008      	b.n	800786a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007858:	2101      	movs	r1, #1
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 f960 	bl	8007b20 <USB_SetDevSpeed>
 8007860:	e003      	b.n	800786a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007862:	2103      	movs	r1, #3
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 f95b 	bl	8007b20 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800786a:	2110      	movs	r1, #16
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 f8f3 	bl	8007a58 <USB_FlushTxFifo>
 8007872:	4603      	mov	r3, r0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d001      	beq.n	800787c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 f91f 	bl	8007ac0 <USB_FlushRxFifo>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d001      	beq.n	800788c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007892:	461a      	mov	r2, r3
 8007894:	2300      	movs	r3, #0
 8007896:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800789e:	461a      	mov	r2, r3
 80078a0:	2300      	movs	r3, #0
 80078a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078aa:	461a      	mov	r2, r3
 80078ac:	2300      	movs	r3, #0
 80078ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078b0:	2300      	movs	r3, #0
 80078b2:	613b      	str	r3, [r7, #16]
 80078b4:	e043      	b.n	800793e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	015a      	lsls	r2, r3, #5
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	4413      	add	r3, r2
 80078be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078cc:	d118      	bne.n	8007900 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d10a      	bne.n	80078ea <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	015a      	lsls	r2, r3, #5
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	4413      	add	r3, r2
 80078dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078e0:	461a      	mov	r2, r3
 80078e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80078e6:	6013      	str	r3, [r2, #0]
 80078e8:	e013      	b.n	8007912 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	015a      	lsls	r2, r3, #5
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	4413      	add	r3, r2
 80078f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078f6:	461a      	mov	r2, r3
 80078f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80078fc:	6013      	str	r3, [r2, #0]
 80078fe:	e008      	b.n	8007912 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	015a      	lsls	r2, r3, #5
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	4413      	add	r3, r2
 8007908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800790c:	461a      	mov	r2, r3
 800790e:	2300      	movs	r3, #0
 8007910:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	015a      	lsls	r2, r3, #5
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	4413      	add	r3, r2
 800791a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800791e:	461a      	mov	r2, r3
 8007920:	2300      	movs	r3, #0
 8007922:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	015a      	lsls	r2, r3, #5
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	4413      	add	r3, r2
 800792c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007930:	461a      	mov	r2, r3
 8007932:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007936:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	3301      	adds	r3, #1
 800793c:	613b      	str	r3, [r7, #16]
 800793e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007940:	693a      	ldr	r2, [r7, #16]
 8007942:	429a      	cmp	r2, r3
 8007944:	d3b7      	bcc.n	80078b6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007946:	2300      	movs	r3, #0
 8007948:	613b      	str	r3, [r7, #16]
 800794a:	e043      	b.n	80079d4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	015a      	lsls	r2, r3, #5
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	4413      	add	r3, r2
 8007954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800795e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007962:	d118      	bne.n	8007996 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10a      	bne.n	8007980 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	015a      	lsls	r2, r3, #5
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	4413      	add	r3, r2
 8007972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007976:	461a      	mov	r2, r3
 8007978:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800797c:	6013      	str	r3, [r2, #0]
 800797e:	e013      	b.n	80079a8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	015a      	lsls	r2, r3, #5
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	4413      	add	r3, r2
 8007988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800798c:	461a      	mov	r2, r3
 800798e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007992:	6013      	str	r3, [r2, #0]
 8007994:	e008      	b.n	80079a8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	015a      	lsls	r2, r3, #5
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	4413      	add	r3, r2
 800799e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079a2:	461a      	mov	r2, r3
 80079a4:	2300      	movs	r3, #0
 80079a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	015a      	lsls	r2, r3, #5
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	4413      	add	r3, r2
 80079b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079b4:	461a      	mov	r2, r3
 80079b6:	2300      	movs	r3, #0
 80079b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	015a      	lsls	r2, r3, #5
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	4413      	add	r3, r2
 80079c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079c6:	461a      	mov	r2, r3
 80079c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80079cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	3301      	adds	r3, #1
 80079d2:	613b      	str	r3, [r7, #16]
 80079d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d6:	693a      	ldr	r2, [r7, #16]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d3b7      	bcc.n	800794c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80079fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80079fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d105      	bne.n	8007a10 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	699b      	ldr	r3, [r3, #24]
 8007a08:	f043 0210 	orr.w	r2, r3, #16
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	699a      	ldr	r2, [r3, #24]
 8007a14:	4b0f      	ldr	r3, [pc, #60]	; (8007a54 <USB_DevInit+0x2c4>)
 8007a16:	4313      	orrs	r3, r2
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d005      	beq.n	8007a2e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	699b      	ldr	r3, [r3, #24]
 8007a26:	f043 0208 	orr.w	r2, r3, #8
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d107      	bne.n	8007a44 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	699b      	ldr	r3, [r3, #24]
 8007a38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a3c:	f043 0304 	orr.w	r3, r3, #4
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007a44:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3718      	adds	r7, #24
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a50:	b004      	add	sp, #16
 8007a52:	4770      	bx	lr
 8007a54:	803c3800 	.word	0x803c3800

08007a58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a62:	2300      	movs	r3, #0
 8007a64:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	4a13      	ldr	r2, [pc, #76]	; (8007abc <USB_FlushTxFifo+0x64>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d901      	bls.n	8007a78 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007a74:	2303      	movs	r3, #3
 8007a76:	e01b      	b.n	8007ab0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	daf2      	bge.n	8007a66 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007a80:	2300      	movs	r3, #0
 8007a82:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	019b      	lsls	r3, r3, #6
 8007a88:	f043 0220 	orr.w	r2, r3, #32
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	3301      	adds	r3, #1
 8007a94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	4a08      	ldr	r2, [pc, #32]	; (8007abc <USB_FlushTxFifo+0x64>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d901      	bls.n	8007aa2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	e006      	b.n	8007ab0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	f003 0320 	and.w	r3, r3, #32
 8007aaa:	2b20      	cmp	r3, #32
 8007aac:	d0f0      	beq.n	8007a90 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3714      	adds	r7, #20
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr
 8007abc:	00030d40 	.word	0x00030d40

08007ac0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	3301      	adds	r3, #1
 8007ad0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	4a11      	ldr	r2, [pc, #68]	; (8007b1c <USB_FlushRxFifo+0x5c>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d901      	bls.n	8007ade <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007ada:	2303      	movs	r3, #3
 8007adc:	e018      	b.n	8007b10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	daf2      	bge.n	8007acc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2210      	movs	r2, #16
 8007aee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	3301      	adds	r3, #1
 8007af4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	4a08      	ldr	r2, [pc, #32]	; (8007b1c <USB_FlushRxFifo+0x5c>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d901      	bls.n	8007b02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007afe:	2303      	movs	r3, #3
 8007b00:	e006      	b.n	8007b10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	f003 0310 	and.w	r3, r3, #16
 8007b0a:	2b10      	cmp	r3, #16
 8007b0c:	d0f0      	beq.n	8007af0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3714      	adds	r7, #20
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr
 8007b1c:	00030d40 	.word	0x00030d40

08007b20 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b085      	sub	sp, #20
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	460b      	mov	r3, r1
 8007b2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	78fb      	ldrb	r3, [r7, #3]
 8007b3a:	68f9      	ldr	r1, [r7, #12]
 8007b3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b40:	4313      	orrs	r3, r2
 8007b42:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3714      	adds	r7, #20
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr

08007b52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007b52:	b480      	push	{r7}
 8007b54:	b085      	sub	sp, #20
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b6c:	f023 0303 	bic.w	r3, r3, #3
 8007b70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	68fa      	ldr	r2, [r7, #12]
 8007b7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b80:	f043 0302 	orr.w	r3, r3, #2
 8007b84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3714      	adds	r7, #20
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	695b      	ldr	r3, [r3, #20]
 8007ba0:	f003 0301 	and.w	r3, r3, #1
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	4a13      	ldr	r2, [pc, #76]	; (8007c14 <USB_CoreReset+0x64>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d901      	bls.n	8007bce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007bca:	2303      	movs	r3, #3
 8007bcc:	e01b      	b.n	8007c06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	daf2      	bge.n	8007bbc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	f043 0201 	orr.w	r2, r3, #1
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	3301      	adds	r3, #1
 8007bea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	4a09      	ldr	r2, [pc, #36]	; (8007c14 <USB_CoreReset+0x64>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d901      	bls.n	8007bf8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007bf4:	2303      	movs	r3, #3
 8007bf6:	e006      	b.n	8007c06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	f003 0301 	and.w	r3, r3, #1
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d0f0      	beq.n	8007be6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3714      	adds	r7, #20
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	00030d40 	.word	0x00030d40

08007c18 <atoi>:
 8007c18:	220a      	movs	r2, #10
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	f000 b95e 	b.w	8007edc <strtol>

08007c20 <__errno>:
 8007c20:	4b01      	ldr	r3, [pc, #4]	; (8007c28 <__errno+0x8>)
 8007c22:	6818      	ldr	r0, [r3, #0]
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	20000020 	.word	0x20000020

08007c2c <__libc_init_array>:
 8007c2c:	b570      	push	{r4, r5, r6, lr}
 8007c2e:	4d0d      	ldr	r5, [pc, #52]	; (8007c64 <__libc_init_array+0x38>)
 8007c30:	4c0d      	ldr	r4, [pc, #52]	; (8007c68 <__libc_init_array+0x3c>)
 8007c32:	1b64      	subs	r4, r4, r5
 8007c34:	10a4      	asrs	r4, r4, #2
 8007c36:	2600      	movs	r6, #0
 8007c38:	42a6      	cmp	r6, r4
 8007c3a:	d109      	bne.n	8007c50 <__libc_init_array+0x24>
 8007c3c:	4d0b      	ldr	r5, [pc, #44]	; (8007c6c <__libc_init_array+0x40>)
 8007c3e:	4c0c      	ldr	r4, [pc, #48]	; (8007c70 <__libc_init_array+0x44>)
 8007c40:	f001 f92e 	bl	8008ea0 <_init>
 8007c44:	1b64      	subs	r4, r4, r5
 8007c46:	10a4      	asrs	r4, r4, #2
 8007c48:	2600      	movs	r6, #0
 8007c4a:	42a6      	cmp	r6, r4
 8007c4c:	d105      	bne.n	8007c5a <__libc_init_array+0x2e>
 8007c4e:	bd70      	pop	{r4, r5, r6, pc}
 8007c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c54:	4798      	blx	r3
 8007c56:	3601      	adds	r6, #1
 8007c58:	e7ee      	b.n	8007c38 <__libc_init_array+0xc>
 8007c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c5e:	4798      	blx	r3
 8007c60:	3601      	adds	r6, #1
 8007c62:	e7f2      	b.n	8007c4a <__libc_init_array+0x1e>
 8007c64:	08009174 	.word	0x08009174
 8007c68:	08009174 	.word	0x08009174
 8007c6c:	08009174 	.word	0x08009174
 8007c70:	08009178 	.word	0x08009178

08007c74 <memset>:
 8007c74:	4402      	add	r2, r0
 8007c76:	4603      	mov	r3, r0
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d100      	bne.n	8007c7e <memset+0xa>
 8007c7c:	4770      	bx	lr
 8007c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8007c82:	e7f9      	b.n	8007c78 <memset+0x4>

08007c84 <_puts_r>:
 8007c84:	b570      	push	{r4, r5, r6, lr}
 8007c86:	460e      	mov	r6, r1
 8007c88:	4605      	mov	r5, r0
 8007c8a:	b118      	cbz	r0, 8007c94 <_puts_r+0x10>
 8007c8c:	6983      	ldr	r3, [r0, #24]
 8007c8e:	b90b      	cbnz	r3, 8007c94 <_puts_r+0x10>
 8007c90:	f000 fb08 	bl	80082a4 <__sinit>
 8007c94:	69ab      	ldr	r3, [r5, #24]
 8007c96:	68ac      	ldr	r4, [r5, #8]
 8007c98:	b913      	cbnz	r3, 8007ca0 <_puts_r+0x1c>
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	f000 fb02 	bl	80082a4 <__sinit>
 8007ca0:	4b2c      	ldr	r3, [pc, #176]	; (8007d54 <_puts_r+0xd0>)
 8007ca2:	429c      	cmp	r4, r3
 8007ca4:	d120      	bne.n	8007ce8 <_puts_r+0x64>
 8007ca6:	686c      	ldr	r4, [r5, #4]
 8007ca8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007caa:	07db      	lsls	r3, r3, #31
 8007cac:	d405      	bmi.n	8007cba <_puts_r+0x36>
 8007cae:	89a3      	ldrh	r3, [r4, #12]
 8007cb0:	0598      	lsls	r0, r3, #22
 8007cb2:	d402      	bmi.n	8007cba <_puts_r+0x36>
 8007cb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cb6:	f000 fb93 	bl	80083e0 <__retarget_lock_acquire_recursive>
 8007cba:	89a3      	ldrh	r3, [r4, #12]
 8007cbc:	0719      	lsls	r1, r3, #28
 8007cbe:	d51d      	bpl.n	8007cfc <_puts_r+0x78>
 8007cc0:	6923      	ldr	r3, [r4, #16]
 8007cc2:	b1db      	cbz	r3, 8007cfc <_puts_r+0x78>
 8007cc4:	3e01      	subs	r6, #1
 8007cc6:	68a3      	ldr	r3, [r4, #8]
 8007cc8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	60a3      	str	r3, [r4, #8]
 8007cd0:	bb39      	cbnz	r1, 8007d22 <_puts_r+0x9e>
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	da38      	bge.n	8007d48 <_puts_r+0xc4>
 8007cd6:	4622      	mov	r2, r4
 8007cd8:	210a      	movs	r1, #10
 8007cda:	4628      	mov	r0, r5
 8007cdc:	f000 f908 	bl	8007ef0 <__swbuf_r>
 8007ce0:	3001      	adds	r0, #1
 8007ce2:	d011      	beq.n	8007d08 <_puts_r+0x84>
 8007ce4:	250a      	movs	r5, #10
 8007ce6:	e011      	b.n	8007d0c <_puts_r+0x88>
 8007ce8:	4b1b      	ldr	r3, [pc, #108]	; (8007d58 <_puts_r+0xd4>)
 8007cea:	429c      	cmp	r4, r3
 8007cec:	d101      	bne.n	8007cf2 <_puts_r+0x6e>
 8007cee:	68ac      	ldr	r4, [r5, #8]
 8007cf0:	e7da      	b.n	8007ca8 <_puts_r+0x24>
 8007cf2:	4b1a      	ldr	r3, [pc, #104]	; (8007d5c <_puts_r+0xd8>)
 8007cf4:	429c      	cmp	r4, r3
 8007cf6:	bf08      	it	eq
 8007cf8:	68ec      	ldreq	r4, [r5, #12]
 8007cfa:	e7d5      	b.n	8007ca8 <_puts_r+0x24>
 8007cfc:	4621      	mov	r1, r4
 8007cfe:	4628      	mov	r0, r5
 8007d00:	f000 f948 	bl	8007f94 <__swsetup_r>
 8007d04:	2800      	cmp	r0, #0
 8007d06:	d0dd      	beq.n	8007cc4 <_puts_r+0x40>
 8007d08:	f04f 35ff 	mov.w	r5, #4294967295
 8007d0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d0e:	07da      	lsls	r2, r3, #31
 8007d10:	d405      	bmi.n	8007d1e <_puts_r+0x9a>
 8007d12:	89a3      	ldrh	r3, [r4, #12]
 8007d14:	059b      	lsls	r3, r3, #22
 8007d16:	d402      	bmi.n	8007d1e <_puts_r+0x9a>
 8007d18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d1a:	f000 fb62 	bl	80083e2 <__retarget_lock_release_recursive>
 8007d1e:	4628      	mov	r0, r5
 8007d20:	bd70      	pop	{r4, r5, r6, pc}
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	da04      	bge.n	8007d30 <_puts_r+0xac>
 8007d26:	69a2      	ldr	r2, [r4, #24]
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	dc06      	bgt.n	8007d3a <_puts_r+0xb6>
 8007d2c:	290a      	cmp	r1, #10
 8007d2e:	d004      	beq.n	8007d3a <_puts_r+0xb6>
 8007d30:	6823      	ldr	r3, [r4, #0]
 8007d32:	1c5a      	adds	r2, r3, #1
 8007d34:	6022      	str	r2, [r4, #0]
 8007d36:	7019      	strb	r1, [r3, #0]
 8007d38:	e7c5      	b.n	8007cc6 <_puts_r+0x42>
 8007d3a:	4622      	mov	r2, r4
 8007d3c:	4628      	mov	r0, r5
 8007d3e:	f000 f8d7 	bl	8007ef0 <__swbuf_r>
 8007d42:	3001      	adds	r0, #1
 8007d44:	d1bf      	bne.n	8007cc6 <_puts_r+0x42>
 8007d46:	e7df      	b.n	8007d08 <_puts_r+0x84>
 8007d48:	6823      	ldr	r3, [r4, #0]
 8007d4a:	250a      	movs	r5, #10
 8007d4c:	1c5a      	adds	r2, r3, #1
 8007d4e:	6022      	str	r2, [r4, #0]
 8007d50:	701d      	strb	r5, [r3, #0]
 8007d52:	e7db      	b.n	8007d0c <_puts_r+0x88>
 8007d54:	080090f8 	.word	0x080090f8
 8007d58:	08009118 	.word	0x08009118
 8007d5c:	080090d8 	.word	0x080090d8

08007d60 <puts>:
 8007d60:	4b02      	ldr	r3, [pc, #8]	; (8007d6c <puts+0xc>)
 8007d62:	4601      	mov	r1, r0
 8007d64:	6818      	ldr	r0, [r3, #0]
 8007d66:	f7ff bf8d 	b.w	8007c84 <_puts_r>
 8007d6a:	bf00      	nop
 8007d6c:	20000020 	.word	0x20000020

08007d70 <siprintf>:
 8007d70:	b40e      	push	{r1, r2, r3}
 8007d72:	b500      	push	{lr}
 8007d74:	b09c      	sub	sp, #112	; 0x70
 8007d76:	ab1d      	add	r3, sp, #116	; 0x74
 8007d78:	9002      	str	r0, [sp, #8]
 8007d7a:	9006      	str	r0, [sp, #24]
 8007d7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007d80:	4809      	ldr	r0, [pc, #36]	; (8007da8 <siprintf+0x38>)
 8007d82:	9107      	str	r1, [sp, #28]
 8007d84:	9104      	str	r1, [sp, #16]
 8007d86:	4909      	ldr	r1, [pc, #36]	; (8007dac <siprintf+0x3c>)
 8007d88:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d8c:	9105      	str	r1, [sp, #20]
 8007d8e:	6800      	ldr	r0, [r0, #0]
 8007d90:	9301      	str	r3, [sp, #4]
 8007d92:	a902      	add	r1, sp, #8
 8007d94:	f000 fcc8 	bl	8008728 <_svfiprintf_r>
 8007d98:	9b02      	ldr	r3, [sp, #8]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	701a      	strb	r2, [r3, #0]
 8007d9e:	b01c      	add	sp, #112	; 0x70
 8007da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007da4:	b003      	add	sp, #12
 8007da6:	4770      	bx	lr
 8007da8:	20000020 	.word	0x20000020
 8007dac:	ffff0208 	.word	0xffff0208

08007db0 <strncmp>:
 8007db0:	b510      	push	{r4, lr}
 8007db2:	b17a      	cbz	r2, 8007dd4 <strncmp+0x24>
 8007db4:	4603      	mov	r3, r0
 8007db6:	3901      	subs	r1, #1
 8007db8:	1884      	adds	r4, r0, r2
 8007dba:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007dbe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007dc2:	4290      	cmp	r0, r2
 8007dc4:	d101      	bne.n	8007dca <strncmp+0x1a>
 8007dc6:	42a3      	cmp	r3, r4
 8007dc8:	d101      	bne.n	8007dce <strncmp+0x1e>
 8007dca:	1a80      	subs	r0, r0, r2
 8007dcc:	bd10      	pop	{r4, pc}
 8007dce:	2800      	cmp	r0, #0
 8007dd0:	d1f3      	bne.n	8007dba <strncmp+0xa>
 8007dd2:	e7fa      	b.n	8007dca <strncmp+0x1a>
 8007dd4:	4610      	mov	r0, r2
 8007dd6:	e7f9      	b.n	8007dcc <strncmp+0x1c>

08007dd8 <_strtol_l.constprop.0>:
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dde:	d001      	beq.n	8007de4 <_strtol_l.constprop.0+0xc>
 8007de0:	2b24      	cmp	r3, #36	; 0x24
 8007de2:	d906      	bls.n	8007df2 <_strtol_l.constprop.0+0x1a>
 8007de4:	f7ff ff1c 	bl	8007c20 <__errno>
 8007de8:	2316      	movs	r3, #22
 8007dea:	6003      	str	r3, [r0, #0]
 8007dec:	2000      	movs	r0, #0
 8007dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007df2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007ed8 <_strtol_l.constprop.0+0x100>
 8007df6:	460d      	mov	r5, r1
 8007df8:	462e      	mov	r6, r5
 8007dfa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007dfe:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007e02:	f017 0708 	ands.w	r7, r7, #8
 8007e06:	d1f7      	bne.n	8007df8 <_strtol_l.constprop.0+0x20>
 8007e08:	2c2d      	cmp	r4, #45	; 0x2d
 8007e0a:	d132      	bne.n	8007e72 <_strtol_l.constprop.0+0x9a>
 8007e0c:	782c      	ldrb	r4, [r5, #0]
 8007e0e:	2701      	movs	r7, #1
 8007e10:	1cb5      	adds	r5, r6, #2
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d05b      	beq.n	8007ece <_strtol_l.constprop.0+0xf6>
 8007e16:	2b10      	cmp	r3, #16
 8007e18:	d109      	bne.n	8007e2e <_strtol_l.constprop.0+0x56>
 8007e1a:	2c30      	cmp	r4, #48	; 0x30
 8007e1c:	d107      	bne.n	8007e2e <_strtol_l.constprop.0+0x56>
 8007e1e:	782c      	ldrb	r4, [r5, #0]
 8007e20:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007e24:	2c58      	cmp	r4, #88	; 0x58
 8007e26:	d14d      	bne.n	8007ec4 <_strtol_l.constprop.0+0xec>
 8007e28:	786c      	ldrb	r4, [r5, #1]
 8007e2a:	2310      	movs	r3, #16
 8007e2c:	3502      	adds	r5, #2
 8007e2e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007e32:	f108 38ff 	add.w	r8, r8, #4294967295
 8007e36:	f04f 0c00 	mov.w	ip, #0
 8007e3a:	fbb8 f9f3 	udiv	r9, r8, r3
 8007e3e:	4666      	mov	r6, ip
 8007e40:	fb03 8a19 	mls	sl, r3, r9, r8
 8007e44:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007e48:	f1be 0f09 	cmp.w	lr, #9
 8007e4c:	d816      	bhi.n	8007e7c <_strtol_l.constprop.0+0xa4>
 8007e4e:	4674      	mov	r4, lr
 8007e50:	42a3      	cmp	r3, r4
 8007e52:	dd24      	ble.n	8007e9e <_strtol_l.constprop.0+0xc6>
 8007e54:	f1bc 0f00 	cmp.w	ip, #0
 8007e58:	db1e      	blt.n	8007e98 <_strtol_l.constprop.0+0xc0>
 8007e5a:	45b1      	cmp	r9, r6
 8007e5c:	d31c      	bcc.n	8007e98 <_strtol_l.constprop.0+0xc0>
 8007e5e:	d101      	bne.n	8007e64 <_strtol_l.constprop.0+0x8c>
 8007e60:	45a2      	cmp	sl, r4
 8007e62:	db19      	blt.n	8007e98 <_strtol_l.constprop.0+0xc0>
 8007e64:	fb06 4603 	mla	r6, r6, r3, r4
 8007e68:	f04f 0c01 	mov.w	ip, #1
 8007e6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e70:	e7e8      	b.n	8007e44 <_strtol_l.constprop.0+0x6c>
 8007e72:	2c2b      	cmp	r4, #43	; 0x2b
 8007e74:	bf04      	itt	eq
 8007e76:	782c      	ldrbeq	r4, [r5, #0]
 8007e78:	1cb5      	addeq	r5, r6, #2
 8007e7a:	e7ca      	b.n	8007e12 <_strtol_l.constprop.0+0x3a>
 8007e7c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007e80:	f1be 0f19 	cmp.w	lr, #25
 8007e84:	d801      	bhi.n	8007e8a <_strtol_l.constprop.0+0xb2>
 8007e86:	3c37      	subs	r4, #55	; 0x37
 8007e88:	e7e2      	b.n	8007e50 <_strtol_l.constprop.0+0x78>
 8007e8a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007e8e:	f1be 0f19 	cmp.w	lr, #25
 8007e92:	d804      	bhi.n	8007e9e <_strtol_l.constprop.0+0xc6>
 8007e94:	3c57      	subs	r4, #87	; 0x57
 8007e96:	e7db      	b.n	8007e50 <_strtol_l.constprop.0+0x78>
 8007e98:	f04f 3cff 	mov.w	ip, #4294967295
 8007e9c:	e7e6      	b.n	8007e6c <_strtol_l.constprop.0+0x94>
 8007e9e:	f1bc 0f00 	cmp.w	ip, #0
 8007ea2:	da05      	bge.n	8007eb0 <_strtol_l.constprop.0+0xd8>
 8007ea4:	2322      	movs	r3, #34	; 0x22
 8007ea6:	6003      	str	r3, [r0, #0]
 8007ea8:	4646      	mov	r6, r8
 8007eaa:	b942      	cbnz	r2, 8007ebe <_strtol_l.constprop.0+0xe6>
 8007eac:	4630      	mov	r0, r6
 8007eae:	e79e      	b.n	8007dee <_strtol_l.constprop.0+0x16>
 8007eb0:	b107      	cbz	r7, 8007eb4 <_strtol_l.constprop.0+0xdc>
 8007eb2:	4276      	negs	r6, r6
 8007eb4:	2a00      	cmp	r2, #0
 8007eb6:	d0f9      	beq.n	8007eac <_strtol_l.constprop.0+0xd4>
 8007eb8:	f1bc 0f00 	cmp.w	ip, #0
 8007ebc:	d000      	beq.n	8007ec0 <_strtol_l.constprop.0+0xe8>
 8007ebe:	1e69      	subs	r1, r5, #1
 8007ec0:	6011      	str	r1, [r2, #0]
 8007ec2:	e7f3      	b.n	8007eac <_strtol_l.constprop.0+0xd4>
 8007ec4:	2430      	movs	r4, #48	; 0x30
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d1b1      	bne.n	8007e2e <_strtol_l.constprop.0+0x56>
 8007eca:	2308      	movs	r3, #8
 8007ecc:	e7af      	b.n	8007e2e <_strtol_l.constprop.0+0x56>
 8007ece:	2c30      	cmp	r4, #48	; 0x30
 8007ed0:	d0a5      	beq.n	8007e1e <_strtol_l.constprop.0+0x46>
 8007ed2:	230a      	movs	r3, #10
 8007ed4:	e7ab      	b.n	8007e2e <_strtol_l.constprop.0+0x56>
 8007ed6:	bf00      	nop
 8007ed8:	08008fd5 	.word	0x08008fd5

08007edc <strtol>:
 8007edc:	4613      	mov	r3, r2
 8007ede:	460a      	mov	r2, r1
 8007ee0:	4601      	mov	r1, r0
 8007ee2:	4802      	ldr	r0, [pc, #8]	; (8007eec <strtol+0x10>)
 8007ee4:	6800      	ldr	r0, [r0, #0]
 8007ee6:	f7ff bf77 	b.w	8007dd8 <_strtol_l.constprop.0>
 8007eea:	bf00      	nop
 8007eec:	20000020 	.word	0x20000020

08007ef0 <__swbuf_r>:
 8007ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ef2:	460e      	mov	r6, r1
 8007ef4:	4614      	mov	r4, r2
 8007ef6:	4605      	mov	r5, r0
 8007ef8:	b118      	cbz	r0, 8007f02 <__swbuf_r+0x12>
 8007efa:	6983      	ldr	r3, [r0, #24]
 8007efc:	b90b      	cbnz	r3, 8007f02 <__swbuf_r+0x12>
 8007efe:	f000 f9d1 	bl	80082a4 <__sinit>
 8007f02:	4b21      	ldr	r3, [pc, #132]	; (8007f88 <__swbuf_r+0x98>)
 8007f04:	429c      	cmp	r4, r3
 8007f06:	d12b      	bne.n	8007f60 <__swbuf_r+0x70>
 8007f08:	686c      	ldr	r4, [r5, #4]
 8007f0a:	69a3      	ldr	r3, [r4, #24]
 8007f0c:	60a3      	str	r3, [r4, #8]
 8007f0e:	89a3      	ldrh	r3, [r4, #12]
 8007f10:	071a      	lsls	r2, r3, #28
 8007f12:	d52f      	bpl.n	8007f74 <__swbuf_r+0x84>
 8007f14:	6923      	ldr	r3, [r4, #16]
 8007f16:	b36b      	cbz	r3, 8007f74 <__swbuf_r+0x84>
 8007f18:	6923      	ldr	r3, [r4, #16]
 8007f1a:	6820      	ldr	r0, [r4, #0]
 8007f1c:	1ac0      	subs	r0, r0, r3
 8007f1e:	6963      	ldr	r3, [r4, #20]
 8007f20:	b2f6      	uxtb	r6, r6
 8007f22:	4283      	cmp	r3, r0
 8007f24:	4637      	mov	r7, r6
 8007f26:	dc04      	bgt.n	8007f32 <__swbuf_r+0x42>
 8007f28:	4621      	mov	r1, r4
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	f000 f926 	bl	800817c <_fflush_r>
 8007f30:	bb30      	cbnz	r0, 8007f80 <__swbuf_r+0x90>
 8007f32:	68a3      	ldr	r3, [r4, #8]
 8007f34:	3b01      	subs	r3, #1
 8007f36:	60a3      	str	r3, [r4, #8]
 8007f38:	6823      	ldr	r3, [r4, #0]
 8007f3a:	1c5a      	adds	r2, r3, #1
 8007f3c:	6022      	str	r2, [r4, #0]
 8007f3e:	701e      	strb	r6, [r3, #0]
 8007f40:	6963      	ldr	r3, [r4, #20]
 8007f42:	3001      	adds	r0, #1
 8007f44:	4283      	cmp	r3, r0
 8007f46:	d004      	beq.n	8007f52 <__swbuf_r+0x62>
 8007f48:	89a3      	ldrh	r3, [r4, #12]
 8007f4a:	07db      	lsls	r3, r3, #31
 8007f4c:	d506      	bpl.n	8007f5c <__swbuf_r+0x6c>
 8007f4e:	2e0a      	cmp	r6, #10
 8007f50:	d104      	bne.n	8007f5c <__swbuf_r+0x6c>
 8007f52:	4621      	mov	r1, r4
 8007f54:	4628      	mov	r0, r5
 8007f56:	f000 f911 	bl	800817c <_fflush_r>
 8007f5a:	b988      	cbnz	r0, 8007f80 <__swbuf_r+0x90>
 8007f5c:	4638      	mov	r0, r7
 8007f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f60:	4b0a      	ldr	r3, [pc, #40]	; (8007f8c <__swbuf_r+0x9c>)
 8007f62:	429c      	cmp	r4, r3
 8007f64:	d101      	bne.n	8007f6a <__swbuf_r+0x7a>
 8007f66:	68ac      	ldr	r4, [r5, #8]
 8007f68:	e7cf      	b.n	8007f0a <__swbuf_r+0x1a>
 8007f6a:	4b09      	ldr	r3, [pc, #36]	; (8007f90 <__swbuf_r+0xa0>)
 8007f6c:	429c      	cmp	r4, r3
 8007f6e:	bf08      	it	eq
 8007f70:	68ec      	ldreq	r4, [r5, #12]
 8007f72:	e7ca      	b.n	8007f0a <__swbuf_r+0x1a>
 8007f74:	4621      	mov	r1, r4
 8007f76:	4628      	mov	r0, r5
 8007f78:	f000 f80c 	bl	8007f94 <__swsetup_r>
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	d0cb      	beq.n	8007f18 <__swbuf_r+0x28>
 8007f80:	f04f 37ff 	mov.w	r7, #4294967295
 8007f84:	e7ea      	b.n	8007f5c <__swbuf_r+0x6c>
 8007f86:	bf00      	nop
 8007f88:	080090f8 	.word	0x080090f8
 8007f8c:	08009118 	.word	0x08009118
 8007f90:	080090d8 	.word	0x080090d8

08007f94 <__swsetup_r>:
 8007f94:	4b32      	ldr	r3, [pc, #200]	; (8008060 <__swsetup_r+0xcc>)
 8007f96:	b570      	push	{r4, r5, r6, lr}
 8007f98:	681d      	ldr	r5, [r3, #0]
 8007f9a:	4606      	mov	r6, r0
 8007f9c:	460c      	mov	r4, r1
 8007f9e:	b125      	cbz	r5, 8007faa <__swsetup_r+0x16>
 8007fa0:	69ab      	ldr	r3, [r5, #24]
 8007fa2:	b913      	cbnz	r3, 8007faa <__swsetup_r+0x16>
 8007fa4:	4628      	mov	r0, r5
 8007fa6:	f000 f97d 	bl	80082a4 <__sinit>
 8007faa:	4b2e      	ldr	r3, [pc, #184]	; (8008064 <__swsetup_r+0xd0>)
 8007fac:	429c      	cmp	r4, r3
 8007fae:	d10f      	bne.n	8007fd0 <__swsetup_r+0x3c>
 8007fb0:	686c      	ldr	r4, [r5, #4]
 8007fb2:	89a3      	ldrh	r3, [r4, #12]
 8007fb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fb8:	0719      	lsls	r1, r3, #28
 8007fba:	d42c      	bmi.n	8008016 <__swsetup_r+0x82>
 8007fbc:	06dd      	lsls	r5, r3, #27
 8007fbe:	d411      	bmi.n	8007fe4 <__swsetup_r+0x50>
 8007fc0:	2309      	movs	r3, #9
 8007fc2:	6033      	str	r3, [r6, #0]
 8007fc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007fc8:	81a3      	strh	r3, [r4, #12]
 8007fca:	f04f 30ff 	mov.w	r0, #4294967295
 8007fce:	e03e      	b.n	800804e <__swsetup_r+0xba>
 8007fd0:	4b25      	ldr	r3, [pc, #148]	; (8008068 <__swsetup_r+0xd4>)
 8007fd2:	429c      	cmp	r4, r3
 8007fd4:	d101      	bne.n	8007fda <__swsetup_r+0x46>
 8007fd6:	68ac      	ldr	r4, [r5, #8]
 8007fd8:	e7eb      	b.n	8007fb2 <__swsetup_r+0x1e>
 8007fda:	4b24      	ldr	r3, [pc, #144]	; (800806c <__swsetup_r+0xd8>)
 8007fdc:	429c      	cmp	r4, r3
 8007fde:	bf08      	it	eq
 8007fe0:	68ec      	ldreq	r4, [r5, #12]
 8007fe2:	e7e6      	b.n	8007fb2 <__swsetup_r+0x1e>
 8007fe4:	0758      	lsls	r0, r3, #29
 8007fe6:	d512      	bpl.n	800800e <__swsetup_r+0x7a>
 8007fe8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fea:	b141      	cbz	r1, 8007ffe <__swsetup_r+0x6a>
 8007fec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ff0:	4299      	cmp	r1, r3
 8007ff2:	d002      	beq.n	8007ffa <__swsetup_r+0x66>
 8007ff4:	4630      	mov	r0, r6
 8007ff6:	f000 fa5b 	bl	80084b0 <_free_r>
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	6363      	str	r3, [r4, #52]	; 0x34
 8007ffe:	89a3      	ldrh	r3, [r4, #12]
 8008000:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008004:	81a3      	strh	r3, [r4, #12]
 8008006:	2300      	movs	r3, #0
 8008008:	6063      	str	r3, [r4, #4]
 800800a:	6923      	ldr	r3, [r4, #16]
 800800c:	6023      	str	r3, [r4, #0]
 800800e:	89a3      	ldrh	r3, [r4, #12]
 8008010:	f043 0308 	orr.w	r3, r3, #8
 8008014:	81a3      	strh	r3, [r4, #12]
 8008016:	6923      	ldr	r3, [r4, #16]
 8008018:	b94b      	cbnz	r3, 800802e <__swsetup_r+0x9a>
 800801a:	89a3      	ldrh	r3, [r4, #12]
 800801c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008024:	d003      	beq.n	800802e <__swsetup_r+0x9a>
 8008026:	4621      	mov	r1, r4
 8008028:	4630      	mov	r0, r6
 800802a:	f000 fa01 	bl	8008430 <__smakebuf_r>
 800802e:	89a0      	ldrh	r0, [r4, #12]
 8008030:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008034:	f010 0301 	ands.w	r3, r0, #1
 8008038:	d00a      	beq.n	8008050 <__swsetup_r+0xbc>
 800803a:	2300      	movs	r3, #0
 800803c:	60a3      	str	r3, [r4, #8]
 800803e:	6963      	ldr	r3, [r4, #20]
 8008040:	425b      	negs	r3, r3
 8008042:	61a3      	str	r3, [r4, #24]
 8008044:	6923      	ldr	r3, [r4, #16]
 8008046:	b943      	cbnz	r3, 800805a <__swsetup_r+0xc6>
 8008048:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800804c:	d1ba      	bne.n	8007fc4 <__swsetup_r+0x30>
 800804e:	bd70      	pop	{r4, r5, r6, pc}
 8008050:	0781      	lsls	r1, r0, #30
 8008052:	bf58      	it	pl
 8008054:	6963      	ldrpl	r3, [r4, #20]
 8008056:	60a3      	str	r3, [r4, #8]
 8008058:	e7f4      	b.n	8008044 <__swsetup_r+0xb0>
 800805a:	2000      	movs	r0, #0
 800805c:	e7f7      	b.n	800804e <__swsetup_r+0xba>
 800805e:	bf00      	nop
 8008060:	20000020 	.word	0x20000020
 8008064:	080090f8 	.word	0x080090f8
 8008068:	08009118 	.word	0x08009118
 800806c:	080090d8 	.word	0x080090d8

08008070 <__sflush_r>:
 8008070:	898a      	ldrh	r2, [r1, #12]
 8008072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008076:	4605      	mov	r5, r0
 8008078:	0710      	lsls	r0, r2, #28
 800807a:	460c      	mov	r4, r1
 800807c:	d458      	bmi.n	8008130 <__sflush_r+0xc0>
 800807e:	684b      	ldr	r3, [r1, #4]
 8008080:	2b00      	cmp	r3, #0
 8008082:	dc05      	bgt.n	8008090 <__sflush_r+0x20>
 8008084:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008086:	2b00      	cmp	r3, #0
 8008088:	dc02      	bgt.n	8008090 <__sflush_r+0x20>
 800808a:	2000      	movs	r0, #0
 800808c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008090:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008092:	2e00      	cmp	r6, #0
 8008094:	d0f9      	beq.n	800808a <__sflush_r+0x1a>
 8008096:	2300      	movs	r3, #0
 8008098:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800809c:	682f      	ldr	r7, [r5, #0]
 800809e:	602b      	str	r3, [r5, #0]
 80080a0:	d032      	beq.n	8008108 <__sflush_r+0x98>
 80080a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80080a4:	89a3      	ldrh	r3, [r4, #12]
 80080a6:	075a      	lsls	r2, r3, #29
 80080a8:	d505      	bpl.n	80080b6 <__sflush_r+0x46>
 80080aa:	6863      	ldr	r3, [r4, #4]
 80080ac:	1ac0      	subs	r0, r0, r3
 80080ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80080b0:	b10b      	cbz	r3, 80080b6 <__sflush_r+0x46>
 80080b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080b4:	1ac0      	subs	r0, r0, r3
 80080b6:	2300      	movs	r3, #0
 80080b8:	4602      	mov	r2, r0
 80080ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080bc:	6a21      	ldr	r1, [r4, #32]
 80080be:	4628      	mov	r0, r5
 80080c0:	47b0      	blx	r6
 80080c2:	1c43      	adds	r3, r0, #1
 80080c4:	89a3      	ldrh	r3, [r4, #12]
 80080c6:	d106      	bne.n	80080d6 <__sflush_r+0x66>
 80080c8:	6829      	ldr	r1, [r5, #0]
 80080ca:	291d      	cmp	r1, #29
 80080cc:	d82c      	bhi.n	8008128 <__sflush_r+0xb8>
 80080ce:	4a2a      	ldr	r2, [pc, #168]	; (8008178 <__sflush_r+0x108>)
 80080d0:	40ca      	lsrs	r2, r1
 80080d2:	07d6      	lsls	r6, r2, #31
 80080d4:	d528      	bpl.n	8008128 <__sflush_r+0xb8>
 80080d6:	2200      	movs	r2, #0
 80080d8:	6062      	str	r2, [r4, #4]
 80080da:	04d9      	lsls	r1, r3, #19
 80080dc:	6922      	ldr	r2, [r4, #16]
 80080de:	6022      	str	r2, [r4, #0]
 80080e0:	d504      	bpl.n	80080ec <__sflush_r+0x7c>
 80080e2:	1c42      	adds	r2, r0, #1
 80080e4:	d101      	bne.n	80080ea <__sflush_r+0x7a>
 80080e6:	682b      	ldr	r3, [r5, #0]
 80080e8:	b903      	cbnz	r3, 80080ec <__sflush_r+0x7c>
 80080ea:	6560      	str	r0, [r4, #84]	; 0x54
 80080ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080ee:	602f      	str	r7, [r5, #0]
 80080f0:	2900      	cmp	r1, #0
 80080f2:	d0ca      	beq.n	800808a <__sflush_r+0x1a>
 80080f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080f8:	4299      	cmp	r1, r3
 80080fa:	d002      	beq.n	8008102 <__sflush_r+0x92>
 80080fc:	4628      	mov	r0, r5
 80080fe:	f000 f9d7 	bl	80084b0 <_free_r>
 8008102:	2000      	movs	r0, #0
 8008104:	6360      	str	r0, [r4, #52]	; 0x34
 8008106:	e7c1      	b.n	800808c <__sflush_r+0x1c>
 8008108:	6a21      	ldr	r1, [r4, #32]
 800810a:	2301      	movs	r3, #1
 800810c:	4628      	mov	r0, r5
 800810e:	47b0      	blx	r6
 8008110:	1c41      	adds	r1, r0, #1
 8008112:	d1c7      	bne.n	80080a4 <__sflush_r+0x34>
 8008114:	682b      	ldr	r3, [r5, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d0c4      	beq.n	80080a4 <__sflush_r+0x34>
 800811a:	2b1d      	cmp	r3, #29
 800811c:	d001      	beq.n	8008122 <__sflush_r+0xb2>
 800811e:	2b16      	cmp	r3, #22
 8008120:	d101      	bne.n	8008126 <__sflush_r+0xb6>
 8008122:	602f      	str	r7, [r5, #0]
 8008124:	e7b1      	b.n	800808a <__sflush_r+0x1a>
 8008126:	89a3      	ldrh	r3, [r4, #12]
 8008128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800812c:	81a3      	strh	r3, [r4, #12]
 800812e:	e7ad      	b.n	800808c <__sflush_r+0x1c>
 8008130:	690f      	ldr	r7, [r1, #16]
 8008132:	2f00      	cmp	r7, #0
 8008134:	d0a9      	beq.n	800808a <__sflush_r+0x1a>
 8008136:	0793      	lsls	r3, r2, #30
 8008138:	680e      	ldr	r6, [r1, #0]
 800813a:	bf08      	it	eq
 800813c:	694b      	ldreq	r3, [r1, #20]
 800813e:	600f      	str	r7, [r1, #0]
 8008140:	bf18      	it	ne
 8008142:	2300      	movne	r3, #0
 8008144:	eba6 0807 	sub.w	r8, r6, r7
 8008148:	608b      	str	r3, [r1, #8]
 800814a:	f1b8 0f00 	cmp.w	r8, #0
 800814e:	dd9c      	ble.n	800808a <__sflush_r+0x1a>
 8008150:	6a21      	ldr	r1, [r4, #32]
 8008152:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008154:	4643      	mov	r3, r8
 8008156:	463a      	mov	r2, r7
 8008158:	4628      	mov	r0, r5
 800815a:	47b0      	blx	r6
 800815c:	2800      	cmp	r0, #0
 800815e:	dc06      	bgt.n	800816e <__sflush_r+0xfe>
 8008160:	89a3      	ldrh	r3, [r4, #12]
 8008162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008166:	81a3      	strh	r3, [r4, #12]
 8008168:	f04f 30ff 	mov.w	r0, #4294967295
 800816c:	e78e      	b.n	800808c <__sflush_r+0x1c>
 800816e:	4407      	add	r7, r0
 8008170:	eba8 0800 	sub.w	r8, r8, r0
 8008174:	e7e9      	b.n	800814a <__sflush_r+0xda>
 8008176:	bf00      	nop
 8008178:	20400001 	.word	0x20400001

0800817c <_fflush_r>:
 800817c:	b538      	push	{r3, r4, r5, lr}
 800817e:	690b      	ldr	r3, [r1, #16]
 8008180:	4605      	mov	r5, r0
 8008182:	460c      	mov	r4, r1
 8008184:	b913      	cbnz	r3, 800818c <_fflush_r+0x10>
 8008186:	2500      	movs	r5, #0
 8008188:	4628      	mov	r0, r5
 800818a:	bd38      	pop	{r3, r4, r5, pc}
 800818c:	b118      	cbz	r0, 8008196 <_fflush_r+0x1a>
 800818e:	6983      	ldr	r3, [r0, #24]
 8008190:	b90b      	cbnz	r3, 8008196 <_fflush_r+0x1a>
 8008192:	f000 f887 	bl	80082a4 <__sinit>
 8008196:	4b14      	ldr	r3, [pc, #80]	; (80081e8 <_fflush_r+0x6c>)
 8008198:	429c      	cmp	r4, r3
 800819a:	d11b      	bne.n	80081d4 <_fflush_r+0x58>
 800819c:	686c      	ldr	r4, [r5, #4]
 800819e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d0ef      	beq.n	8008186 <_fflush_r+0xa>
 80081a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80081a8:	07d0      	lsls	r0, r2, #31
 80081aa:	d404      	bmi.n	80081b6 <_fflush_r+0x3a>
 80081ac:	0599      	lsls	r1, r3, #22
 80081ae:	d402      	bmi.n	80081b6 <_fflush_r+0x3a>
 80081b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081b2:	f000 f915 	bl	80083e0 <__retarget_lock_acquire_recursive>
 80081b6:	4628      	mov	r0, r5
 80081b8:	4621      	mov	r1, r4
 80081ba:	f7ff ff59 	bl	8008070 <__sflush_r>
 80081be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081c0:	07da      	lsls	r2, r3, #31
 80081c2:	4605      	mov	r5, r0
 80081c4:	d4e0      	bmi.n	8008188 <_fflush_r+0xc>
 80081c6:	89a3      	ldrh	r3, [r4, #12]
 80081c8:	059b      	lsls	r3, r3, #22
 80081ca:	d4dd      	bmi.n	8008188 <_fflush_r+0xc>
 80081cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081ce:	f000 f908 	bl	80083e2 <__retarget_lock_release_recursive>
 80081d2:	e7d9      	b.n	8008188 <_fflush_r+0xc>
 80081d4:	4b05      	ldr	r3, [pc, #20]	; (80081ec <_fflush_r+0x70>)
 80081d6:	429c      	cmp	r4, r3
 80081d8:	d101      	bne.n	80081de <_fflush_r+0x62>
 80081da:	68ac      	ldr	r4, [r5, #8]
 80081dc:	e7df      	b.n	800819e <_fflush_r+0x22>
 80081de:	4b04      	ldr	r3, [pc, #16]	; (80081f0 <_fflush_r+0x74>)
 80081e0:	429c      	cmp	r4, r3
 80081e2:	bf08      	it	eq
 80081e4:	68ec      	ldreq	r4, [r5, #12]
 80081e6:	e7da      	b.n	800819e <_fflush_r+0x22>
 80081e8:	080090f8 	.word	0x080090f8
 80081ec:	08009118 	.word	0x08009118
 80081f0:	080090d8 	.word	0x080090d8

080081f4 <std>:
 80081f4:	2300      	movs	r3, #0
 80081f6:	b510      	push	{r4, lr}
 80081f8:	4604      	mov	r4, r0
 80081fa:	e9c0 3300 	strd	r3, r3, [r0]
 80081fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008202:	6083      	str	r3, [r0, #8]
 8008204:	8181      	strh	r1, [r0, #12]
 8008206:	6643      	str	r3, [r0, #100]	; 0x64
 8008208:	81c2      	strh	r2, [r0, #14]
 800820a:	6183      	str	r3, [r0, #24]
 800820c:	4619      	mov	r1, r3
 800820e:	2208      	movs	r2, #8
 8008210:	305c      	adds	r0, #92	; 0x5c
 8008212:	f7ff fd2f 	bl	8007c74 <memset>
 8008216:	4b05      	ldr	r3, [pc, #20]	; (800822c <std+0x38>)
 8008218:	6263      	str	r3, [r4, #36]	; 0x24
 800821a:	4b05      	ldr	r3, [pc, #20]	; (8008230 <std+0x3c>)
 800821c:	62a3      	str	r3, [r4, #40]	; 0x28
 800821e:	4b05      	ldr	r3, [pc, #20]	; (8008234 <std+0x40>)
 8008220:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008222:	4b05      	ldr	r3, [pc, #20]	; (8008238 <std+0x44>)
 8008224:	6224      	str	r4, [r4, #32]
 8008226:	6323      	str	r3, [r4, #48]	; 0x30
 8008228:	bd10      	pop	{r4, pc}
 800822a:	bf00      	nop
 800822c:	08008c71 	.word	0x08008c71
 8008230:	08008c93 	.word	0x08008c93
 8008234:	08008ccb 	.word	0x08008ccb
 8008238:	08008cef 	.word	0x08008cef

0800823c <_cleanup_r>:
 800823c:	4901      	ldr	r1, [pc, #4]	; (8008244 <_cleanup_r+0x8>)
 800823e:	f000 b8af 	b.w	80083a0 <_fwalk_reent>
 8008242:	bf00      	nop
 8008244:	0800817d 	.word	0x0800817d

08008248 <__sfmoreglue>:
 8008248:	b570      	push	{r4, r5, r6, lr}
 800824a:	2268      	movs	r2, #104	; 0x68
 800824c:	1e4d      	subs	r5, r1, #1
 800824e:	4355      	muls	r5, r2
 8008250:	460e      	mov	r6, r1
 8008252:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008256:	f000 f997 	bl	8008588 <_malloc_r>
 800825a:	4604      	mov	r4, r0
 800825c:	b140      	cbz	r0, 8008270 <__sfmoreglue+0x28>
 800825e:	2100      	movs	r1, #0
 8008260:	e9c0 1600 	strd	r1, r6, [r0]
 8008264:	300c      	adds	r0, #12
 8008266:	60a0      	str	r0, [r4, #8]
 8008268:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800826c:	f7ff fd02 	bl	8007c74 <memset>
 8008270:	4620      	mov	r0, r4
 8008272:	bd70      	pop	{r4, r5, r6, pc}

08008274 <__sfp_lock_acquire>:
 8008274:	4801      	ldr	r0, [pc, #4]	; (800827c <__sfp_lock_acquire+0x8>)
 8008276:	f000 b8b3 	b.w	80083e0 <__retarget_lock_acquire_recursive>
 800827a:	bf00      	nop
 800827c:	20000db1 	.word	0x20000db1

08008280 <__sfp_lock_release>:
 8008280:	4801      	ldr	r0, [pc, #4]	; (8008288 <__sfp_lock_release+0x8>)
 8008282:	f000 b8ae 	b.w	80083e2 <__retarget_lock_release_recursive>
 8008286:	bf00      	nop
 8008288:	20000db1 	.word	0x20000db1

0800828c <__sinit_lock_acquire>:
 800828c:	4801      	ldr	r0, [pc, #4]	; (8008294 <__sinit_lock_acquire+0x8>)
 800828e:	f000 b8a7 	b.w	80083e0 <__retarget_lock_acquire_recursive>
 8008292:	bf00      	nop
 8008294:	20000db2 	.word	0x20000db2

08008298 <__sinit_lock_release>:
 8008298:	4801      	ldr	r0, [pc, #4]	; (80082a0 <__sinit_lock_release+0x8>)
 800829a:	f000 b8a2 	b.w	80083e2 <__retarget_lock_release_recursive>
 800829e:	bf00      	nop
 80082a0:	20000db2 	.word	0x20000db2

080082a4 <__sinit>:
 80082a4:	b510      	push	{r4, lr}
 80082a6:	4604      	mov	r4, r0
 80082a8:	f7ff fff0 	bl	800828c <__sinit_lock_acquire>
 80082ac:	69a3      	ldr	r3, [r4, #24]
 80082ae:	b11b      	cbz	r3, 80082b8 <__sinit+0x14>
 80082b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082b4:	f7ff bff0 	b.w	8008298 <__sinit_lock_release>
 80082b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80082bc:	6523      	str	r3, [r4, #80]	; 0x50
 80082be:	4b13      	ldr	r3, [pc, #76]	; (800830c <__sinit+0x68>)
 80082c0:	4a13      	ldr	r2, [pc, #76]	; (8008310 <__sinit+0x6c>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80082c6:	42a3      	cmp	r3, r4
 80082c8:	bf04      	itt	eq
 80082ca:	2301      	moveq	r3, #1
 80082cc:	61a3      	streq	r3, [r4, #24]
 80082ce:	4620      	mov	r0, r4
 80082d0:	f000 f820 	bl	8008314 <__sfp>
 80082d4:	6060      	str	r0, [r4, #4]
 80082d6:	4620      	mov	r0, r4
 80082d8:	f000 f81c 	bl	8008314 <__sfp>
 80082dc:	60a0      	str	r0, [r4, #8]
 80082de:	4620      	mov	r0, r4
 80082e0:	f000 f818 	bl	8008314 <__sfp>
 80082e4:	2200      	movs	r2, #0
 80082e6:	60e0      	str	r0, [r4, #12]
 80082e8:	2104      	movs	r1, #4
 80082ea:	6860      	ldr	r0, [r4, #4]
 80082ec:	f7ff ff82 	bl	80081f4 <std>
 80082f0:	68a0      	ldr	r0, [r4, #8]
 80082f2:	2201      	movs	r2, #1
 80082f4:	2109      	movs	r1, #9
 80082f6:	f7ff ff7d 	bl	80081f4 <std>
 80082fa:	68e0      	ldr	r0, [r4, #12]
 80082fc:	2202      	movs	r2, #2
 80082fe:	2112      	movs	r1, #18
 8008300:	f7ff ff78 	bl	80081f4 <std>
 8008304:	2301      	movs	r3, #1
 8008306:	61a3      	str	r3, [r4, #24]
 8008308:	e7d2      	b.n	80082b0 <__sinit+0xc>
 800830a:	bf00      	nop
 800830c:	08008fd0 	.word	0x08008fd0
 8008310:	0800823d 	.word	0x0800823d

08008314 <__sfp>:
 8008314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008316:	4607      	mov	r7, r0
 8008318:	f7ff ffac 	bl	8008274 <__sfp_lock_acquire>
 800831c:	4b1e      	ldr	r3, [pc, #120]	; (8008398 <__sfp+0x84>)
 800831e:	681e      	ldr	r6, [r3, #0]
 8008320:	69b3      	ldr	r3, [r6, #24]
 8008322:	b913      	cbnz	r3, 800832a <__sfp+0x16>
 8008324:	4630      	mov	r0, r6
 8008326:	f7ff ffbd 	bl	80082a4 <__sinit>
 800832a:	3648      	adds	r6, #72	; 0x48
 800832c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008330:	3b01      	subs	r3, #1
 8008332:	d503      	bpl.n	800833c <__sfp+0x28>
 8008334:	6833      	ldr	r3, [r6, #0]
 8008336:	b30b      	cbz	r3, 800837c <__sfp+0x68>
 8008338:	6836      	ldr	r6, [r6, #0]
 800833a:	e7f7      	b.n	800832c <__sfp+0x18>
 800833c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008340:	b9d5      	cbnz	r5, 8008378 <__sfp+0x64>
 8008342:	4b16      	ldr	r3, [pc, #88]	; (800839c <__sfp+0x88>)
 8008344:	60e3      	str	r3, [r4, #12]
 8008346:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800834a:	6665      	str	r5, [r4, #100]	; 0x64
 800834c:	f000 f847 	bl	80083de <__retarget_lock_init_recursive>
 8008350:	f7ff ff96 	bl	8008280 <__sfp_lock_release>
 8008354:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008358:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800835c:	6025      	str	r5, [r4, #0]
 800835e:	61a5      	str	r5, [r4, #24]
 8008360:	2208      	movs	r2, #8
 8008362:	4629      	mov	r1, r5
 8008364:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008368:	f7ff fc84 	bl	8007c74 <memset>
 800836c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008370:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008374:	4620      	mov	r0, r4
 8008376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008378:	3468      	adds	r4, #104	; 0x68
 800837a:	e7d9      	b.n	8008330 <__sfp+0x1c>
 800837c:	2104      	movs	r1, #4
 800837e:	4638      	mov	r0, r7
 8008380:	f7ff ff62 	bl	8008248 <__sfmoreglue>
 8008384:	4604      	mov	r4, r0
 8008386:	6030      	str	r0, [r6, #0]
 8008388:	2800      	cmp	r0, #0
 800838a:	d1d5      	bne.n	8008338 <__sfp+0x24>
 800838c:	f7ff ff78 	bl	8008280 <__sfp_lock_release>
 8008390:	230c      	movs	r3, #12
 8008392:	603b      	str	r3, [r7, #0]
 8008394:	e7ee      	b.n	8008374 <__sfp+0x60>
 8008396:	bf00      	nop
 8008398:	08008fd0 	.word	0x08008fd0
 800839c:	ffff0001 	.word	0xffff0001

080083a0 <_fwalk_reent>:
 80083a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083a4:	4606      	mov	r6, r0
 80083a6:	4688      	mov	r8, r1
 80083a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80083ac:	2700      	movs	r7, #0
 80083ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80083b2:	f1b9 0901 	subs.w	r9, r9, #1
 80083b6:	d505      	bpl.n	80083c4 <_fwalk_reent+0x24>
 80083b8:	6824      	ldr	r4, [r4, #0]
 80083ba:	2c00      	cmp	r4, #0
 80083bc:	d1f7      	bne.n	80083ae <_fwalk_reent+0xe>
 80083be:	4638      	mov	r0, r7
 80083c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083c4:	89ab      	ldrh	r3, [r5, #12]
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d907      	bls.n	80083da <_fwalk_reent+0x3a>
 80083ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80083ce:	3301      	adds	r3, #1
 80083d0:	d003      	beq.n	80083da <_fwalk_reent+0x3a>
 80083d2:	4629      	mov	r1, r5
 80083d4:	4630      	mov	r0, r6
 80083d6:	47c0      	blx	r8
 80083d8:	4307      	orrs	r7, r0
 80083da:	3568      	adds	r5, #104	; 0x68
 80083dc:	e7e9      	b.n	80083b2 <_fwalk_reent+0x12>

080083de <__retarget_lock_init_recursive>:
 80083de:	4770      	bx	lr

080083e0 <__retarget_lock_acquire_recursive>:
 80083e0:	4770      	bx	lr

080083e2 <__retarget_lock_release_recursive>:
 80083e2:	4770      	bx	lr

080083e4 <__swhatbuf_r>:
 80083e4:	b570      	push	{r4, r5, r6, lr}
 80083e6:	460e      	mov	r6, r1
 80083e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083ec:	2900      	cmp	r1, #0
 80083ee:	b096      	sub	sp, #88	; 0x58
 80083f0:	4614      	mov	r4, r2
 80083f2:	461d      	mov	r5, r3
 80083f4:	da08      	bge.n	8008408 <__swhatbuf_r+0x24>
 80083f6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80083fa:	2200      	movs	r2, #0
 80083fc:	602a      	str	r2, [r5, #0]
 80083fe:	061a      	lsls	r2, r3, #24
 8008400:	d410      	bmi.n	8008424 <__swhatbuf_r+0x40>
 8008402:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008406:	e00e      	b.n	8008426 <__swhatbuf_r+0x42>
 8008408:	466a      	mov	r2, sp
 800840a:	f000 fc97 	bl	8008d3c <_fstat_r>
 800840e:	2800      	cmp	r0, #0
 8008410:	dbf1      	blt.n	80083f6 <__swhatbuf_r+0x12>
 8008412:	9a01      	ldr	r2, [sp, #4]
 8008414:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008418:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800841c:	425a      	negs	r2, r3
 800841e:	415a      	adcs	r2, r3
 8008420:	602a      	str	r2, [r5, #0]
 8008422:	e7ee      	b.n	8008402 <__swhatbuf_r+0x1e>
 8008424:	2340      	movs	r3, #64	; 0x40
 8008426:	2000      	movs	r0, #0
 8008428:	6023      	str	r3, [r4, #0]
 800842a:	b016      	add	sp, #88	; 0x58
 800842c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008430 <__smakebuf_r>:
 8008430:	898b      	ldrh	r3, [r1, #12]
 8008432:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008434:	079d      	lsls	r5, r3, #30
 8008436:	4606      	mov	r6, r0
 8008438:	460c      	mov	r4, r1
 800843a:	d507      	bpl.n	800844c <__smakebuf_r+0x1c>
 800843c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008440:	6023      	str	r3, [r4, #0]
 8008442:	6123      	str	r3, [r4, #16]
 8008444:	2301      	movs	r3, #1
 8008446:	6163      	str	r3, [r4, #20]
 8008448:	b002      	add	sp, #8
 800844a:	bd70      	pop	{r4, r5, r6, pc}
 800844c:	ab01      	add	r3, sp, #4
 800844e:	466a      	mov	r2, sp
 8008450:	f7ff ffc8 	bl	80083e4 <__swhatbuf_r>
 8008454:	9900      	ldr	r1, [sp, #0]
 8008456:	4605      	mov	r5, r0
 8008458:	4630      	mov	r0, r6
 800845a:	f000 f895 	bl	8008588 <_malloc_r>
 800845e:	b948      	cbnz	r0, 8008474 <__smakebuf_r+0x44>
 8008460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008464:	059a      	lsls	r2, r3, #22
 8008466:	d4ef      	bmi.n	8008448 <__smakebuf_r+0x18>
 8008468:	f023 0303 	bic.w	r3, r3, #3
 800846c:	f043 0302 	orr.w	r3, r3, #2
 8008470:	81a3      	strh	r3, [r4, #12]
 8008472:	e7e3      	b.n	800843c <__smakebuf_r+0xc>
 8008474:	4b0d      	ldr	r3, [pc, #52]	; (80084ac <__smakebuf_r+0x7c>)
 8008476:	62b3      	str	r3, [r6, #40]	; 0x28
 8008478:	89a3      	ldrh	r3, [r4, #12]
 800847a:	6020      	str	r0, [r4, #0]
 800847c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008480:	81a3      	strh	r3, [r4, #12]
 8008482:	9b00      	ldr	r3, [sp, #0]
 8008484:	6163      	str	r3, [r4, #20]
 8008486:	9b01      	ldr	r3, [sp, #4]
 8008488:	6120      	str	r0, [r4, #16]
 800848a:	b15b      	cbz	r3, 80084a4 <__smakebuf_r+0x74>
 800848c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008490:	4630      	mov	r0, r6
 8008492:	f000 fc65 	bl	8008d60 <_isatty_r>
 8008496:	b128      	cbz	r0, 80084a4 <__smakebuf_r+0x74>
 8008498:	89a3      	ldrh	r3, [r4, #12]
 800849a:	f023 0303 	bic.w	r3, r3, #3
 800849e:	f043 0301 	orr.w	r3, r3, #1
 80084a2:	81a3      	strh	r3, [r4, #12]
 80084a4:	89a0      	ldrh	r0, [r4, #12]
 80084a6:	4305      	orrs	r5, r0
 80084a8:	81a5      	strh	r5, [r4, #12]
 80084aa:	e7cd      	b.n	8008448 <__smakebuf_r+0x18>
 80084ac:	0800823d 	.word	0x0800823d

080084b0 <_free_r>:
 80084b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084b2:	2900      	cmp	r1, #0
 80084b4:	d044      	beq.n	8008540 <_free_r+0x90>
 80084b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084ba:	9001      	str	r0, [sp, #4]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f1a1 0404 	sub.w	r4, r1, #4
 80084c2:	bfb8      	it	lt
 80084c4:	18e4      	addlt	r4, r4, r3
 80084c6:	f000 fc95 	bl	8008df4 <__malloc_lock>
 80084ca:	4a1e      	ldr	r2, [pc, #120]	; (8008544 <_free_r+0x94>)
 80084cc:	9801      	ldr	r0, [sp, #4]
 80084ce:	6813      	ldr	r3, [r2, #0]
 80084d0:	b933      	cbnz	r3, 80084e0 <_free_r+0x30>
 80084d2:	6063      	str	r3, [r4, #4]
 80084d4:	6014      	str	r4, [r2, #0]
 80084d6:	b003      	add	sp, #12
 80084d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084dc:	f000 bc90 	b.w	8008e00 <__malloc_unlock>
 80084e0:	42a3      	cmp	r3, r4
 80084e2:	d908      	bls.n	80084f6 <_free_r+0x46>
 80084e4:	6825      	ldr	r5, [r4, #0]
 80084e6:	1961      	adds	r1, r4, r5
 80084e8:	428b      	cmp	r3, r1
 80084ea:	bf01      	itttt	eq
 80084ec:	6819      	ldreq	r1, [r3, #0]
 80084ee:	685b      	ldreq	r3, [r3, #4]
 80084f0:	1949      	addeq	r1, r1, r5
 80084f2:	6021      	streq	r1, [r4, #0]
 80084f4:	e7ed      	b.n	80084d2 <_free_r+0x22>
 80084f6:	461a      	mov	r2, r3
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	b10b      	cbz	r3, 8008500 <_free_r+0x50>
 80084fc:	42a3      	cmp	r3, r4
 80084fe:	d9fa      	bls.n	80084f6 <_free_r+0x46>
 8008500:	6811      	ldr	r1, [r2, #0]
 8008502:	1855      	adds	r5, r2, r1
 8008504:	42a5      	cmp	r5, r4
 8008506:	d10b      	bne.n	8008520 <_free_r+0x70>
 8008508:	6824      	ldr	r4, [r4, #0]
 800850a:	4421      	add	r1, r4
 800850c:	1854      	adds	r4, r2, r1
 800850e:	42a3      	cmp	r3, r4
 8008510:	6011      	str	r1, [r2, #0]
 8008512:	d1e0      	bne.n	80084d6 <_free_r+0x26>
 8008514:	681c      	ldr	r4, [r3, #0]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	6053      	str	r3, [r2, #4]
 800851a:	4421      	add	r1, r4
 800851c:	6011      	str	r1, [r2, #0]
 800851e:	e7da      	b.n	80084d6 <_free_r+0x26>
 8008520:	d902      	bls.n	8008528 <_free_r+0x78>
 8008522:	230c      	movs	r3, #12
 8008524:	6003      	str	r3, [r0, #0]
 8008526:	e7d6      	b.n	80084d6 <_free_r+0x26>
 8008528:	6825      	ldr	r5, [r4, #0]
 800852a:	1961      	adds	r1, r4, r5
 800852c:	428b      	cmp	r3, r1
 800852e:	bf04      	itt	eq
 8008530:	6819      	ldreq	r1, [r3, #0]
 8008532:	685b      	ldreq	r3, [r3, #4]
 8008534:	6063      	str	r3, [r4, #4]
 8008536:	bf04      	itt	eq
 8008538:	1949      	addeq	r1, r1, r5
 800853a:	6021      	streq	r1, [r4, #0]
 800853c:	6054      	str	r4, [r2, #4]
 800853e:	e7ca      	b.n	80084d6 <_free_r+0x26>
 8008540:	b003      	add	sp, #12
 8008542:	bd30      	pop	{r4, r5, pc}
 8008544:	20000db4 	.word	0x20000db4

08008548 <sbrk_aligned>:
 8008548:	b570      	push	{r4, r5, r6, lr}
 800854a:	4e0e      	ldr	r6, [pc, #56]	; (8008584 <sbrk_aligned+0x3c>)
 800854c:	460c      	mov	r4, r1
 800854e:	6831      	ldr	r1, [r6, #0]
 8008550:	4605      	mov	r5, r0
 8008552:	b911      	cbnz	r1, 800855a <sbrk_aligned+0x12>
 8008554:	f000 fb7c 	bl	8008c50 <_sbrk_r>
 8008558:	6030      	str	r0, [r6, #0]
 800855a:	4621      	mov	r1, r4
 800855c:	4628      	mov	r0, r5
 800855e:	f000 fb77 	bl	8008c50 <_sbrk_r>
 8008562:	1c43      	adds	r3, r0, #1
 8008564:	d00a      	beq.n	800857c <sbrk_aligned+0x34>
 8008566:	1cc4      	adds	r4, r0, #3
 8008568:	f024 0403 	bic.w	r4, r4, #3
 800856c:	42a0      	cmp	r0, r4
 800856e:	d007      	beq.n	8008580 <sbrk_aligned+0x38>
 8008570:	1a21      	subs	r1, r4, r0
 8008572:	4628      	mov	r0, r5
 8008574:	f000 fb6c 	bl	8008c50 <_sbrk_r>
 8008578:	3001      	adds	r0, #1
 800857a:	d101      	bne.n	8008580 <sbrk_aligned+0x38>
 800857c:	f04f 34ff 	mov.w	r4, #4294967295
 8008580:	4620      	mov	r0, r4
 8008582:	bd70      	pop	{r4, r5, r6, pc}
 8008584:	20000db8 	.word	0x20000db8

08008588 <_malloc_r>:
 8008588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800858c:	1ccd      	adds	r5, r1, #3
 800858e:	f025 0503 	bic.w	r5, r5, #3
 8008592:	3508      	adds	r5, #8
 8008594:	2d0c      	cmp	r5, #12
 8008596:	bf38      	it	cc
 8008598:	250c      	movcc	r5, #12
 800859a:	2d00      	cmp	r5, #0
 800859c:	4607      	mov	r7, r0
 800859e:	db01      	blt.n	80085a4 <_malloc_r+0x1c>
 80085a0:	42a9      	cmp	r1, r5
 80085a2:	d905      	bls.n	80085b0 <_malloc_r+0x28>
 80085a4:	230c      	movs	r3, #12
 80085a6:	603b      	str	r3, [r7, #0]
 80085a8:	2600      	movs	r6, #0
 80085aa:	4630      	mov	r0, r6
 80085ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085b0:	4e2e      	ldr	r6, [pc, #184]	; (800866c <_malloc_r+0xe4>)
 80085b2:	f000 fc1f 	bl	8008df4 <__malloc_lock>
 80085b6:	6833      	ldr	r3, [r6, #0]
 80085b8:	461c      	mov	r4, r3
 80085ba:	bb34      	cbnz	r4, 800860a <_malloc_r+0x82>
 80085bc:	4629      	mov	r1, r5
 80085be:	4638      	mov	r0, r7
 80085c0:	f7ff ffc2 	bl	8008548 <sbrk_aligned>
 80085c4:	1c43      	adds	r3, r0, #1
 80085c6:	4604      	mov	r4, r0
 80085c8:	d14d      	bne.n	8008666 <_malloc_r+0xde>
 80085ca:	6834      	ldr	r4, [r6, #0]
 80085cc:	4626      	mov	r6, r4
 80085ce:	2e00      	cmp	r6, #0
 80085d0:	d140      	bne.n	8008654 <_malloc_r+0xcc>
 80085d2:	6823      	ldr	r3, [r4, #0]
 80085d4:	4631      	mov	r1, r6
 80085d6:	4638      	mov	r0, r7
 80085d8:	eb04 0803 	add.w	r8, r4, r3
 80085dc:	f000 fb38 	bl	8008c50 <_sbrk_r>
 80085e0:	4580      	cmp	r8, r0
 80085e2:	d13a      	bne.n	800865a <_malloc_r+0xd2>
 80085e4:	6821      	ldr	r1, [r4, #0]
 80085e6:	3503      	adds	r5, #3
 80085e8:	1a6d      	subs	r5, r5, r1
 80085ea:	f025 0503 	bic.w	r5, r5, #3
 80085ee:	3508      	adds	r5, #8
 80085f0:	2d0c      	cmp	r5, #12
 80085f2:	bf38      	it	cc
 80085f4:	250c      	movcc	r5, #12
 80085f6:	4629      	mov	r1, r5
 80085f8:	4638      	mov	r0, r7
 80085fa:	f7ff ffa5 	bl	8008548 <sbrk_aligned>
 80085fe:	3001      	adds	r0, #1
 8008600:	d02b      	beq.n	800865a <_malloc_r+0xd2>
 8008602:	6823      	ldr	r3, [r4, #0]
 8008604:	442b      	add	r3, r5
 8008606:	6023      	str	r3, [r4, #0]
 8008608:	e00e      	b.n	8008628 <_malloc_r+0xa0>
 800860a:	6822      	ldr	r2, [r4, #0]
 800860c:	1b52      	subs	r2, r2, r5
 800860e:	d41e      	bmi.n	800864e <_malloc_r+0xc6>
 8008610:	2a0b      	cmp	r2, #11
 8008612:	d916      	bls.n	8008642 <_malloc_r+0xba>
 8008614:	1961      	adds	r1, r4, r5
 8008616:	42a3      	cmp	r3, r4
 8008618:	6025      	str	r5, [r4, #0]
 800861a:	bf18      	it	ne
 800861c:	6059      	strne	r1, [r3, #4]
 800861e:	6863      	ldr	r3, [r4, #4]
 8008620:	bf08      	it	eq
 8008622:	6031      	streq	r1, [r6, #0]
 8008624:	5162      	str	r2, [r4, r5]
 8008626:	604b      	str	r3, [r1, #4]
 8008628:	4638      	mov	r0, r7
 800862a:	f104 060b 	add.w	r6, r4, #11
 800862e:	f000 fbe7 	bl	8008e00 <__malloc_unlock>
 8008632:	f026 0607 	bic.w	r6, r6, #7
 8008636:	1d23      	adds	r3, r4, #4
 8008638:	1af2      	subs	r2, r6, r3
 800863a:	d0b6      	beq.n	80085aa <_malloc_r+0x22>
 800863c:	1b9b      	subs	r3, r3, r6
 800863e:	50a3      	str	r3, [r4, r2]
 8008640:	e7b3      	b.n	80085aa <_malloc_r+0x22>
 8008642:	6862      	ldr	r2, [r4, #4]
 8008644:	42a3      	cmp	r3, r4
 8008646:	bf0c      	ite	eq
 8008648:	6032      	streq	r2, [r6, #0]
 800864a:	605a      	strne	r2, [r3, #4]
 800864c:	e7ec      	b.n	8008628 <_malloc_r+0xa0>
 800864e:	4623      	mov	r3, r4
 8008650:	6864      	ldr	r4, [r4, #4]
 8008652:	e7b2      	b.n	80085ba <_malloc_r+0x32>
 8008654:	4634      	mov	r4, r6
 8008656:	6876      	ldr	r6, [r6, #4]
 8008658:	e7b9      	b.n	80085ce <_malloc_r+0x46>
 800865a:	230c      	movs	r3, #12
 800865c:	603b      	str	r3, [r7, #0]
 800865e:	4638      	mov	r0, r7
 8008660:	f000 fbce 	bl	8008e00 <__malloc_unlock>
 8008664:	e7a1      	b.n	80085aa <_malloc_r+0x22>
 8008666:	6025      	str	r5, [r4, #0]
 8008668:	e7de      	b.n	8008628 <_malloc_r+0xa0>
 800866a:	bf00      	nop
 800866c:	20000db4 	.word	0x20000db4

08008670 <__ssputs_r>:
 8008670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008674:	688e      	ldr	r6, [r1, #8]
 8008676:	429e      	cmp	r6, r3
 8008678:	4682      	mov	sl, r0
 800867a:	460c      	mov	r4, r1
 800867c:	4690      	mov	r8, r2
 800867e:	461f      	mov	r7, r3
 8008680:	d838      	bhi.n	80086f4 <__ssputs_r+0x84>
 8008682:	898a      	ldrh	r2, [r1, #12]
 8008684:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008688:	d032      	beq.n	80086f0 <__ssputs_r+0x80>
 800868a:	6825      	ldr	r5, [r4, #0]
 800868c:	6909      	ldr	r1, [r1, #16]
 800868e:	eba5 0901 	sub.w	r9, r5, r1
 8008692:	6965      	ldr	r5, [r4, #20]
 8008694:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008698:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800869c:	3301      	adds	r3, #1
 800869e:	444b      	add	r3, r9
 80086a0:	106d      	asrs	r5, r5, #1
 80086a2:	429d      	cmp	r5, r3
 80086a4:	bf38      	it	cc
 80086a6:	461d      	movcc	r5, r3
 80086a8:	0553      	lsls	r3, r2, #21
 80086aa:	d531      	bpl.n	8008710 <__ssputs_r+0xa0>
 80086ac:	4629      	mov	r1, r5
 80086ae:	f7ff ff6b 	bl	8008588 <_malloc_r>
 80086b2:	4606      	mov	r6, r0
 80086b4:	b950      	cbnz	r0, 80086cc <__ssputs_r+0x5c>
 80086b6:	230c      	movs	r3, #12
 80086b8:	f8ca 3000 	str.w	r3, [sl]
 80086bc:	89a3      	ldrh	r3, [r4, #12]
 80086be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086c2:	81a3      	strh	r3, [r4, #12]
 80086c4:	f04f 30ff 	mov.w	r0, #4294967295
 80086c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086cc:	6921      	ldr	r1, [r4, #16]
 80086ce:	464a      	mov	r2, r9
 80086d0:	f000 fb68 	bl	8008da4 <memcpy>
 80086d4:	89a3      	ldrh	r3, [r4, #12]
 80086d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80086da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086de:	81a3      	strh	r3, [r4, #12]
 80086e0:	6126      	str	r6, [r4, #16]
 80086e2:	6165      	str	r5, [r4, #20]
 80086e4:	444e      	add	r6, r9
 80086e6:	eba5 0509 	sub.w	r5, r5, r9
 80086ea:	6026      	str	r6, [r4, #0]
 80086ec:	60a5      	str	r5, [r4, #8]
 80086ee:	463e      	mov	r6, r7
 80086f0:	42be      	cmp	r6, r7
 80086f2:	d900      	bls.n	80086f6 <__ssputs_r+0x86>
 80086f4:	463e      	mov	r6, r7
 80086f6:	6820      	ldr	r0, [r4, #0]
 80086f8:	4632      	mov	r2, r6
 80086fa:	4641      	mov	r1, r8
 80086fc:	f000 fb60 	bl	8008dc0 <memmove>
 8008700:	68a3      	ldr	r3, [r4, #8]
 8008702:	1b9b      	subs	r3, r3, r6
 8008704:	60a3      	str	r3, [r4, #8]
 8008706:	6823      	ldr	r3, [r4, #0]
 8008708:	4433      	add	r3, r6
 800870a:	6023      	str	r3, [r4, #0]
 800870c:	2000      	movs	r0, #0
 800870e:	e7db      	b.n	80086c8 <__ssputs_r+0x58>
 8008710:	462a      	mov	r2, r5
 8008712:	f000 fb7b 	bl	8008e0c <_realloc_r>
 8008716:	4606      	mov	r6, r0
 8008718:	2800      	cmp	r0, #0
 800871a:	d1e1      	bne.n	80086e0 <__ssputs_r+0x70>
 800871c:	6921      	ldr	r1, [r4, #16]
 800871e:	4650      	mov	r0, sl
 8008720:	f7ff fec6 	bl	80084b0 <_free_r>
 8008724:	e7c7      	b.n	80086b6 <__ssputs_r+0x46>
	...

08008728 <_svfiprintf_r>:
 8008728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800872c:	4698      	mov	r8, r3
 800872e:	898b      	ldrh	r3, [r1, #12]
 8008730:	061b      	lsls	r3, r3, #24
 8008732:	b09d      	sub	sp, #116	; 0x74
 8008734:	4607      	mov	r7, r0
 8008736:	460d      	mov	r5, r1
 8008738:	4614      	mov	r4, r2
 800873a:	d50e      	bpl.n	800875a <_svfiprintf_r+0x32>
 800873c:	690b      	ldr	r3, [r1, #16]
 800873e:	b963      	cbnz	r3, 800875a <_svfiprintf_r+0x32>
 8008740:	2140      	movs	r1, #64	; 0x40
 8008742:	f7ff ff21 	bl	8008588 <_malloc_r>
 8008746:	6028      	str	r0, [r5, #0]
 8008748:	6128      	str	r0, [r5, #16]
 800874a:	b920      	cbnz	r0, 8008756 <_svfiprintf_r+0x2e>
 800874c:	230c      	movs	r3, #12
 800874e:	603b      	str	r3, [r7, #0]
 8008750:	f04f 30ff 	mov.w	r0, #4294967295
 8008754:	e0d1      	b.n	80088fa <_svfiprintf_r+0x1d2>
 8008756:	2340      	movs	r3, #64	; 0x40
 8008758:	616b      	str	r3, [r5, #20]
 800875a:	2300      	movs	r3, #0
 800875c:	9309      	str	r3, [sp, #36]	; 0x24
 800875e:	2320      	movs	r3, #32
 8008760:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008764:	f8cd 800c 	str.w	r8, [sp, #12]
 8008768:	2330      	movs	r3, #48	; 0x30
 800876a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008914 <_svfiprintf_r+0x1ec>
 800876e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008772:	f04f 0901 	mov.w	r9, #1
 8008776:	4623      	mov	r3, r4
 8008778:	469a      	mov	sl, r3
 800877a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800877e:	b10a      	cbz	r2, 8008784 <_svfiprintf_r+0x5c>
 8008780:	2a25      	cmp	r2, #37	; 0x25
 8008782:	d1f9      	bne.n	8008778 <_svfiprintf_r+0x50>
 8008784:	ebba 0b04 	subs.w	fp, sl, r4
 8008788:	d00b      	beq.n	80087a2 <_svfiprintf_r+0x7a>
 800878a:	465b      	mov	r3, fp
 800878c:	4622      	mov	r2, r4
 800878e:	4629      	mov	r1, r5
 8008790:	4638      	mov	r0, r7
 8008792:	f7ff ff6d 	bl	8008670 <__ssputs_r>
 8008796:	3001      	adds	r0, #1
 8008798:	f000 80aa 	beq.w	80088f0 <_svfiprintf_r+0x1c8>
 800879c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800879e:	445a      	add	r2, fp
 80087a0:	9209      	str	r2, [sp, #36]	; 0x24
 80087a2:	f89a 3000 	ldrb.w	r3, [sl]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	f000 80a2 	beq.w	80088f0 <_svfiprintf_r+0x1c8>
 80087ac:	2300      	movs	r3, #0
 80087ae:	f04f 32ff 	mov.w	r2, #4294967295
 80087b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087b6:	f10a 0a01 	add.w	sl, sl, #1
 80087ba:	9304      	str	r3, [sp, #16]
 80087bc:	9307      	str	r3, [sp, #28]
 80087be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087c2:	931a      	str	r3, [sp, #104]	; 0x68
 80087c4:	4654      	mov	r4, sl
 80087c6:	2205      	movs	r2, #5
 80087c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087cc:	4851      	ldr	r0, [pc, #324]	; (8008914 <_svfiprintf_r+0x1ec>)
 80087ce:	f7f7 fd0f 	bl	80001f0 <memchr>
 80087d2:	9a04      	ldr	r2, [sp, #16]
 80087d4:	b9d8      	cbnz	r0, 800880e <_svfiprintf_r+0xe6>
 80087d6:	06d0      	lsls	r0, r2, #27
 80087d8:	bf44      	itt	mi
 80087da:	2320      	movmi	r3, #32
 80087dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087e0:	0711      	lsls	r1, r2, #28
 80087e2:	bf44      	itt	mi
 80087e4:	232b      	movmi	r3, #43	; 0x2b
 80087e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087ea:	f89a 3000 	ldrb.w	r3, [sl]
 80087ee:	2b2a      	cmp	r3, #42	; 0x2a
 80087f0:	d015      	beq.n	800881e <_svfiprintf_r+0xf6>
 80087f2:	9a07      	ldr	r2, [sp, #28]
 80087f4:	4654      	mov	r4, sl
 80087f6:	2000      	movs	r0, #0
 80087f8:	f04f 0c0a 	mov.w	ip, #10
 80087fc:	4621      	mov	r1, r4
 80087fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008802:	3b30      	subs	r3, #48	; 0x30
 8008804:	2b09      	cmp	r3, #9
 8008806:	d94e      	bls.n	80088a6 <_svfiprintf_r+0x17e>
 8008808:	b1b0      	cbz	r0, 8008838 <_svfiprintf_r+0x110>
 800880a:	9207      	str	r2, [sp, #28]
 800880c:	e014      	b.n	8008838 <_svfiprintf_r+0x110>
 800880e:	eba0 0308 	sub.w	r3, r0, r8
 8008812:	fa09 f303 	lsl.w	r3, r9, r3
 8008816:	4313      	orrs	r3, r2
 8008818:	9304      	str	r3, [sp, #16]
 800881a:	46a2      	mov	sl, r4
 800881c:	e7d2      	b.n	80087c4 <_svfiprintf_r+0x9c>
 800881e:	9b03      	ldr	r3, [sp, #12]
 8008820:	1d19      	adds	r1, r3, #4
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	9103      	str	r1, [sp, #12]
 8008826:	2b00      	cmp	r3, #0
 8008828:	bfbb      	ittet	lt
 800882a:	425b      	neglt	r3, r3
 800882c:	f042 0202 	orrlt.w	r2, r2, #2
 8008830:	9307      	strge	r3, [sp, #28]
 8008832:	9307      	strlt	r3, [sp, #28]
 8008834:	bfb8      	it	lt
 8008836:	9204      	strlt	r2, [sp, #16]
 8008838:	7823      	ldrb	r3, [r4, #0]
 800883a:	2b2e      	cmp	r3, #46	; 0x2e
 800883c:	d10c      	bne.n	8008858 <_svfiprintf_r+0x130>
 800883e:	7863      	ldrb	r3, [r4, #1]
 8008840:	2b2a      	cmp	r3, #42	; 0x2a
 8008842:	d135      	bne.n	80088b0 <_svfiprintf_r+0x188>
 8008844:	9b03      	ldr	r3, [sp, #12]
 8008846:	1d1a      	adds	r2, r3, #4
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	9203      	str	r2, [sp, #12]
 800884c:	2b00      	cmp	r3, #0
 800884e:	bfb8      	it	lt
 8008850:	f04f 33ff 	movlt.w	r3, #4294967295
 8008854:	3402      	adds	r4, #2
 8008856:	9305      	str	r3, [sp, #20]
 8008858:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008924 <_svfiprintf_r+0x1fc>
 800885c:	7821      	ldrb	r1, [r4, #0]
 800885e:	2203      	movs	r2, #3
 8008860:	4650      	mov	r0, sl
 8008862:	f7f7 fcc5 	bl	80001f0 <memchr>
 8008866:	b140      	cbz	r0, 800887a <_svfiprintf_r+0x152>
 8008868:	2340      	movs	r3, #64	; 0x40
 800886a:	eba0 000a 	sub.w	r0, r0, sl
 800886e:	fa03 f000 	lsl.w	r0, r3, r0
 8008872:	9b04      	ldr	r3, [sp, #16]
 8008874:	4303      	orrs	r3, r0
 8008876:	3401      	adds	r4, #1
 8008878:	9304      	str	r3, [sp, #16]
 800887a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800887e:	4826      	ldr	r0, [pc, #152]	; (8008918 <_svfiprintf_r+0x1f0>)
 8008880:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008884:	2206      	movs	r2, #6
 8008886:	f7f7 fcb3 	bl	80001f0 <memchr>
 800888a:	2800      	cmp	r0, #0
 800888c:	d038      	beq.n	8008900 <_svfiprintf_r+0x1d8>
 800888e:	4b23      	ldr	r3, [pc, #140]	; (800891c <_svfiprintf_r+0x1f4>)
 8008890:	bb1b      	cbnz	r3, 80088da <_svfiprintf_r+0x1b2>
 8008892:	9b03      	ldr	r3, [sp, #12]
 8008894:	3307      	adds	r3, #7
 8008896:	f023 0307 	bic.w	r3, r3, #7
 800889a:	3308      	adds	r3, #8
 800889c:	9303      	str	r3, [sp, #12]
 800889e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088a0:	4433      	add	r3, r6
 80088a2:	9309      	str	r3, [sp, #36]	; 0x24
 80088a4:	e767      	b.n	8008776 <_svfiprintf_r+0x4e>
 80088a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80088aa:	460c      	mov	r4, r1
 80088ac:	2001      	movs	r0, #1
 80088ae:	e7a5      	b.n	80087fc <_svfiprintf_r+0xd4>
 80088b0:	2300      	movs	r3, #0
 80088b2:	3401      	adds	r4, #1
 80088b4:	9305      	str	r3, [sp, #20]
 80088b6:	4619      	mov	r1, r3
 80088b8:	f04f 0c0a 	mov.w	ip, #10
 80088bc:	4620      	mov	r0, r4
 80088be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088c2:	3a30      	subs	r2, #48	; 0x30
 80088c4:	2a09      	cmp	r2, #9
 80088c6:	d903      	bls.n	80088d0 <_svfiprintf_r+0x1a8>
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d0c5      	beq.n	8008858 <_svfiprintf_r+0x130>
 80088cc:	9105      	str	r1, [sp, #20]
 80088ce:	e7c3      	b.n	8008858 <_svfiprintf_r+0x130>
 80088d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80088d4:	4604      	mov	r4, r0
 80088d6:	2301      	movs	r3, #1
 80088d8:	e7f0      	b.n	80088bc <_svfiprintf_r+0x194>
 80088da:	ab03      	add	r3, sp, #12
 80088dc:	9300      	str	r3, [sp, #0]
 80088de:	462a      	mov	r2, r5
 80088e0:	4b0f      	ldr	r3, [pc, #60]	; (8008920 <_svfiprintf_r+0x1f8>)
 80088e2:	a904      	add	r1, sp, #16
 80088e4:	4638      	mov	r0, r7
 80088e6:	f3af 8000 	nop.w
 80088ea:	1c42      	adds	r2, r0, #1
 80088ec:	4606      	mov	r6, r0
 80088ee:	d1d6      	bne.n	800889e <_svfiprintf_r+0x176>
 80088f0:	89ab      	ldrh	r3, [r5, #12]
 80088f2:	065b      	lsls	r3, r3, #25
 80088f4:	f53f af2c 	bmi.w	8008750 <_svfiprintf_r+0x28>
 80088f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088fa:	b01d      	add	sp, #116	; 0x74
 80088fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008900:	ab03      	add	r3, sp, #12
 8008902:	9300      	str	r3, [sp, #0]
 8008904:	462a      	mov	r2, r5
 8008906:	4b06      	ldr	r3, [pc, #24]	; (8008920 <_svfiprintf_r+0x1f8>)
 8008908:	a904      	add	r1, sp, #16
 800890a:	4638      	mov	r0, r7
 800890c:	f000 f87a 	bl	8008a04 <_printf_i>
 8008910:	e7eb      	b.n	80088ea <_svfiprintf_r+0x1c2>
 8008912:	bf00      	nop
 8008914:	08009138 	.word	0x08009138
 8008918:	08009142 	.word	0x08009142
 800891c:	00000000 	.word	0x00000000
 8008920:	08008671 	.word	0x08008671
 8008924:	0800913e 	.word	0x0800913e

08008928 <_printf_common>:
 8008928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800892c:	4616      	mov	r6, r2
 800892e:	4699      	mov	r9, r3
 8008930:	688a      	ldr	r2, [r1, #8]
 8008932:	690b      	ldr	r3, [r1, #16]
 8008934:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008938:	4293      	cmp	r3, r2
 800893a:	bfb8      	it	lt
 800893c:	4613      	movlt	r3, r2
 800893e:	6033      	str	r3, [r6, #0]
 8008940:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008944:	4607      	mov	r7, r0
 8008946:	460c      	mov	r4, r1
 8008948:	b10a      	cbz	r2, 800894e <_printf_common+0x26>
 800894a:	3301      	adds	r3, #1
 800894c:	6033      	str	r3, [r6, #0]
 800894e:	6823      	ldr	r3, [r4, #0]
 8008950:	0699      	lsls	r1, r3, #26
 8008952:	bf42      	ittt	mi
 8008954:	6833      	ldrmi	r3, [r6, #0]
 8008956:	3302      	addmi	r3, #2
 8008958:	6033      	strmi	r3, [r6, #0]
 800895a:	6825      	ldr	r5, [r4, #0]
 800895c:	f015 0506 	ands.w	r5, r5, #6
 8008960:	d106      	bne.n	8008970 <_printf_common+0x48>
 8008962:	f104 0a19 	add.w	sl, r4, #25
 8008966:	68e3      	ldr	r3, [r4, #12]
 8008968:	6832      	ldr	r2, [r6, #0]
 800896a:	1a9b      	subs	r3, r3, r2
 800896c:	42ab      	cmp	r3, r5
 800896e:	dc26      	bgt.n	80089be <_printf_common+0x96>
 8008970:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008974:	1e13      	subs	r3, r2, #0
 8008976:	6822      	ldr	r2, [r4, #0]
 8008978:	bf18      	it	ne
 800897a:	2301      	movne	r3, #1
 800897c:	0692      	lsls	r2, r2, #26
 800897e:	d42b      	bmi.n	80089d8 <_printf_common+0xb0>
 8008980:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008984:	4649      	mov	r1, r9
 8008986:	4638      	mov	r0, r7
 8008988:	47c0      	blx	r8
 800898a:	3001      	adds	r0, #1
 800898c:	d01e      	beq.n	80089cc <_printf_common+0xa4>
 800898e:	6823      	ldr	r3, [r4, #0]
 8008990:	68e5      	ldr	r5, [r4, #12]
 8008992:	6832      	ldr	r2, [r6, #0]
 8008994:	f003 0306 	and.w	r3, r3, #6
 8008998:	2b04      	cmp	r3, #4
 800899a:	bf08      	it	eq
 800899c:	1aad      	subeq	r5, r5, r2
 800899e:	68a3      	ldr	r3, [r4, #8]
 80089a0:	6922      	ldr	r2, [r4, #16]
 80089a2:	bf0c      	ite	eq
 80089a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089a8:	2500      	movne	r5, #0
 80089aa:	4293      	cmp	r3, r2
 80089ac:	bfc4      	itt	gt
 80089ae:	1a9b      	subgt	r3, r3, r2
 80089b0:	18ed      	addgt	r5, r5, r3
 80089b2:	2600      	movs	r6, #0
 80089b4:	341a      	adds	r4, #26
 80089b6:	42b5      	cmp	r5, r6
 80089b8:	d11a      	bne.n	80089f0 <_printf_common+0xc8>
 80089ba:	2000      	movs	r0, #0
 80089bc:	e008      	b.n	80089d0 <_printf_common+0xa8>
 80089be:	2301      	movs	r3, #1
 80089c0:	4652      	mov	r2, sl
 80089c2:	4649      	mov	r1, r9
 80089c4:	4638      	mov	r0, r7
 80089c6:	47c0      	blx	r8
 80089c8:	3001      	adds	r0, #1
 80089ca:	d103      	bne.n	80089d4 <_printf_common+0xac>
 80089cc:	f04f 30ff 	mov.w	r0, #4294967295
 80089d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089d4:	3501      	adds	r5, #1
 80089d6:	e7c6      	b.n	8008966 <_printf_common+0x3e>
 80089d8:	18e1      	adds	r1, r4, r3
 80089da:	1c5a      	adds	r2, r3, #1
 80089dc:	2030      	movs	r0, #48	; 0x30
 80089de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80089e2:	4422      	add	r2, r4
 80089e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80089e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80089ec:	3302      	adds	r3, #2
 80089ee:	e7c7      	b.n	8008980 <_printf_common+0x58>
 80089f0:	2301      	movs	r3, #1
 80089f2:	4622      	mov	r2, r4
 80089f4:	4649      	mov	r1, r9
 80089f6:	4638      	mov	r0, r7
 80089f8:	47c0      	blx	r8
 80089fa:	3001      	adds	r0, #1
 80089fc:	d0e6      	beq.n	80089cc <_printf_common+0xa4>
 80089fe:	3601      	adds	r6, #1
 8008a00:	e7d9      	b.n	80089b6 <_printf_common+0x8e>
	...

08008a04 <_printf_i>:
 8008a04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a08:	7e0f      	ldrb	r7, [r1, #24]
 8008a0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a0c:	2f78      	cmp	r7, #120	; 0x78
 8008a0e:	4691      	mov	r9, r2
 8008a10:	4680      	mov	r8, r0
 8008a12:	460c      	mov	r4, r1
 8008a14:	469a      	mov	sl, r3
 8008a16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008a1a:	d807      	bhi.n	8008a2c <_printf_i+0x28>
 8008a1c:	2f62      	cmp	r7, #98	; 0x62
 8008a1e:	d80a      	bhi.n	8008a36 <_printf_i+0x32>
 8008a20:	2f00      	cmp	r7, #0
 8008a22:	f000 80d8 	beq.w	8008bd6 <_printf_i+0x1d2>
 8008a26:	2f58      	cmp	r7, #88	; 0x58
 8008a28:	f000 80a3 	beq.w	8008b72 <_printf_i+0x16e>
 8008a2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a34:	e03a      	b.n	8008aac <_printf_i+0xa8>
 8008a36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a3a:	2b15      	cmp	r3, #21
 8008a3c:	d8f6      	bhi.n	8008a2c <_printf_i+0x28>
 8008a3e:	a101      	add	r1, pc, #4	; (adr r1, 8008a44 <_printf_i+0x40>)
 8008a40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a44:	08008a9d 	.word	0x08008a9d
 8008a48:	08008ab1 	.word	0x08008ab1
 8008a4c:	08008a2d 	.word	0x08008a2d
 8008a50:	08008a2d 	.word	0x08008a2d
 8008a54:	08008a2d 	.word	0x08008a2d
 8008a58:	08008a2d 	.word	0x08008a2d
 8008a5c:	08008ab1 	.word	0x08008ab1
 8008a60:	08008a2d 	.word	0x08008a2d
 8008a64:	08008a2d 	.word	0x08008a2d
 8008a68:	08008a2d 	.word	0x08008a2d
 8008a6c:	08008a2d 	.word	0x08008a2d
 8008a70:	08008bbd 	.word	0x08008bbd
 8008a74:	08008ae1 	.word	0x08008ae1
 8008a78:	08008b9f 	.word	0x08008b9f
 8008a7c:	08008a2d 	.word	0x08008a2d
 8008a80:	08008a2d 	.word	0x08008a2d
 8008a84:	08008bdf 	.word	0x08008bdf
 8008a88:	08008a2d 	.word	0x08008a2d
 8008a8c:	08008ae1 	.word	0x08008ae1
 8008a90:	08008a2d 	.word	0x08008a2d
 8008a94:	08008a2d 	.word	0x08008a2d
 8008a98:	08008ba7 	.word	0x08008ba7
 8008a9c:	682b      	ldr	r3, [r5, #0]
 8008a9e:	1d1a      	adds	r2, r3, #4
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	602a      	str	r2, [r5, #0]
 8008aa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008aa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008aac:	2301      	movs	r3, #1
 8008aae:	e0a3      	b.n	8008bf8 <_printf_i+0x1f4>
 8008ab0:	6820      	ldr	r0, [r4, #0]
 8008ab2:	6829      	ldr	r1, [r5, #0]
 8008ab4:	0606      	lsls	r6, r0, #24
 8008ab6:	f101 0304 	add.w	r3, r1, #4
 8008aba:	d50a      	bpl.n	8008ad2 <_printf_i+0xce>
 8008abc:	680e      	ldr	r6, [r1, #0]
 8008abe:	602b      	str	r3, [r5, #0]
 8008ac0:	2e00      	cmp	r6, #0
 8008ac2:	da03      	bge.n	8008acc <_printf_i+0xc8>
 8008ac4:	232d      	movs	r3, #45	; 0x2d
 8008ac6:	4276      	negs	r6, r6
 8008ac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008acc:	485e      	ldr	r0, [pc, #376]	; (8008c48 <_printf_i+0x244>)
 8008ace:	230a      	movs	r3, #10
 8008ad0:	e019      	b.n	8008b06 <_printf_i+0x102>
 8008ad2:	680e      	ldr	r6, [r1, #0]
 8008ad4:	602b      	str	r3, [r5, #0]
 8008ad6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008ada:	bf18      	it	ne
 8008adc:	b236      	sxthne	r6, r6
 8008ade:	e7ef      	b.n	8008ac0 <_printf_i+0xbc>
 8008ae0:	682b      	ldr	r3, [r5, #0]
 8008ae2:	6820      	ldr	r0, [r4, #0]
 8008ae4:	1d19      	adds	r1, r3, #4
 8008ae6:	6029      	str	r1, [r5, #0]
 8008ae8:	0601      	lsls	r1, r0, #24
 8008aea:	d501      	bpl.n	8008af0 <_printf_i+0xec>
 8008aec:	681e      	ldr	r6, [r3, #0]
 8008aee:	e002      	b.n	8008af6 <_printf_i+0xf2>
 8008af0:	0646      	lsls	r6, r0, #25
 8008af2:	d5fb      	bpl.n	8008aec <_printf_i+0xe8>
 8008af4:	881e      	ldrh	r6, [r3, #0]
 8008af6:	4854      	ldr	r0, [pc, #336]	; (8008c48 <_printf_i+0x244>)
 8008af8:	2f6f      	cmp	r7, #111	; 0x6f
 8008afa:	bf0c      	ite	eq
 8008afc:	2308      	moveq	r3, #8
 8008afe:	230a      	movne	r3, #10
 8008b00:	2100      	movs	r1, #0
 8008b02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b06:	6865      	ldr	r5, [r4, #4]
 8008b08:	60a5      	str	r5, [r4, #8]
 8008b0a:	2d00      	cmp	r5, #0
 8008b0c:	bfa2      	ittt	ge
 8008b0e:	6821      	ldrge	r1, [r4, #0]
 8008b10:	f021 0104 	bicge.w	r1, r1, #4
 8008b14:	6021      	strge	r1, [r4, #0]
 8008b16:	b90e      	cbnz	r6, 8008b1c <_printf_i+0x118>
 8008b18:	2d00      	cmp	r5, #0
 8008b1a:	d04d      	beq.n	8008bb8 <_printf_i+0x1b4>
 8008b1c:	4615      	mov	r5, r2
 8008b1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008b22:	fb03 6711 	mls	r7, r3, r1, r6
 8008b26:	5dc7      	ldrb	r7, [r0, r7]
 8008b28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008b2c:	4637      	mov	r7, r6
 8008b2e:	42bb      	cmp	r3, r7
 8008b30:	460e      	mov	r6, r1
 8008b32:	d9f4      	bls.n	8008b1e <_printf_i+0x11a>
 8008b34:	2b08      	cmp	r3, #8
 8008b36:	d10b      	bne.n	8008b50 <_printf_i+0x14c>
 8008b38:	6823      	ldr	r3, [r4, #0]
 8008b3a:	07de      	lsls	r6, r3, #31
 8008b3c:	d508      	bpl.n	8008b50 <_printf_i+0x14c>
 8008b3e:	6923      	ldr	r3, [r4, #16]
 8008b40:	6861      	ldr	r1, [r4, #4]
 8008b42:	4299      	cmp	r1, r3
 8008b44:	bfde      	ittt	le
 8008b46:	2330      	movle	r3, #48	; 0x30
 8008b48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008b50:	1b52      	subs	r2, r2, r5
 8008b52:	6122      	str	r2, [r4, #16]
 8008b54:	f8cd a000 	str.w	sl, [sp]
 8008b58:	464b      	mov	r3, r9
 8008b5a:	aa03      	add	r2, sp, #12
 8008b5c:	4621      	mov	r1, r4
 8008b5e:	4640      	mov	r0, r8
 8008b60:	f7ff fee2 	bl	8008928 <_printf_common>
 8008b64:	3001      	adds	r0, #1
 8008b66:	d14c      	bne.n	8008c02 <_printf_i+0x1fe>
 8008b68:	f04f 30ff 	mov.w	r0, #4294967295
 8008b6c:	b004      	add	sp, #16
 8008b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b72:	4835      	ldr	r0, [pc, #212]	; (8008c48 <_printf_i+0x244>)
 8008b74:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008b78:	6829      	ldr	r1, [r5, #0]
 8008b7a:	6823      	ldr	r3, [r4, #0]
 8008b7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008b80:	6029      	str	r1, [r5, #0]
 8008b82:	061d      	lsls	r5, r3, #24
 8008b84:	d514      	bpl.n	8008bb0 <_printf_i+0x1ac>
 8008b86:	07df      	lsls	r7, r3, #31
 8008b88:	bf44      	itt	mi
 8008b8a:	f043 0320 	orrmi.w	r3, r3, #32
 8008b8e:	6023      	strmi	r3, [r4, #0]
 8008b90:	b91e      	cbnz	r6, 8008b9a <_printf_i+0x196>
 8008b92:	6823      	ldr	r3, [r4, #0]
 8008b94:	f023 0320 	bic.w	r3, r3, #32
 8008b98:	6023      	str	r3, [r4, #0]
 8008b9a:	2310      	movs	r3, #16
 8008b9c:	e7b0      	b.n	8008b00 <_printf_i+0xfc>
 8008b9e:	6823      	ldr	r3, [r4, #0]
 8008ba0:	f043 0320 	orr.w	r3, r3, #32
 8008ba4:	6023      	str	r3, [r4, #0]
 8008ba6:	2378      	movs	r3, #120	; 0x78
 8008ba8:	4828      	ldr	r0, [pc, #160]	; (8008c4c <_printf_i+0x248>)
 8008baa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008bae:	e7e3      	b.n	8008b78 <_printf_i+0x174>
 8008bb0:	0659      	lsls	r1, r3, #25
 8008bb2:	bf48      	it	mi
 8008bb4:	b2b6      	uxthmi	r6, r6
 8008bb6:	e7e6      	b.n	8008b86 <_printf_i+0x182>
 8008bb8:	4615      	mov	r5, r2
 8008bba:	e7bb      	b.n	8008b34 <_printf_i+0x130>
 8008bbc:	682b      	ldr	r3, [r5, #0]
 8008bbe:	6826      	ldr	r6, [r4, #0]
 8008bc0:	6961      	ldr	r1, [r4, #20]
 8008bc2:	1d18      	adds	r0, r3, #4
 8008bc4:	6028      	str	r0, [r5, #0]
 8008bc6:	0635      	lsls	r5, r6, #24
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	d501      	bpl.n	8008bd0 <_printf_i+0x1cc>
 8008bcc:	6019      	str	r1, [r3, #0]
 8008bce:	e002      	b.n	8008bd6 <_printf_i+0x1d2>
 8008bd0:	0670      	lsls	r0, r6, #25
 8008bd2:	d5fb      	bpl.n	8008bcc <_printf_i+0x1c8>
 8008bd4:	8019      	strh	r1, [r3, #0]
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	6123      	str	r3, [r4, #16]
 8008bda:	4615      	mov	r5, r2
 8008bdc:	e7ba      	b.n	8008b54 <_printf_i+0x150>
 8008bde:	682b      	ldr	r3, [r5, #0]
 8008be0:	1d1a      	adds	r2, r3, #4
 8008be2:	602a      	str	r2, [r5, #0]
 8008be4:	681d      	ldr	r5, [r3, #0]
 8008be6:	6862      	ldr	r2, [r4, #4]
 8008be8:	2100      	movs	r1, #0
 8008bea:	4628      	mov	r0, r5
 8008bec:	f7f7 fb00 	bl	80001f0 <memchr>
 8008bf0:	b108      	cbz	r0, 8008bf6 <_printf_i+0x1f2>
 8008bf2:	1b40      	subs	r0, r0, r5
 8008bf4:	6060      	str	r0, [r4, #4]
 8008bf6:	6863      	ldr	r3, [r4, #4]
 8008bf8:	6123      	str	r3, [r4, #16]
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c00:	e7a8      	b.n	8008b54 <_printf_i+0x150>
 8008c02:	6923      	ldr	r3, [r4, #16]
 8008c04:	462a      	mov	r2, r5
 8008c06:	4649      	mov	r1, r9
 8008c08:	4640      	mov	r0, r8
 8008c0a:	47d0      	blx	sl
 8008c0c:	3001      	adds	r0, #1
 8008c0e:	d0ab      	beq.n	8008b68 <_printf_i+0x164>
 8008c10:	6823      	ldr	r3, [r4, #0]
 8008c12:	079b      	lsls	r3, r3, #30
 8008c14:	d413      	bmi.n	8008c3e <_printf_i+0x23a>
 8008c16:	68e0      	ldr	r0, [r4, #12]
 8008c18:	9b03      	ldr	r3, [sp, #12]
 8008c1a:	4298      	cmp	r0, r3
 8008c1c:	bfb8      	it	lt
 8008c1e:	4618      	movlt	r0, r3
 8008c20:	e7a4      	b.n	8008b6c <_printf_i+0x168>
 8008c22:	2301      	movs	r3, #1
 8008c24:	4632      	mov	r2, r6
 8008c26:	4649      	mov	r1, r9
 8008c28:	4640      	mov	r0, r8
 8008c2a:	47d0      	blx	sl
 8008c2c:	3001      	adds	r0, #1
 8008c2e:	d09b      	beq.n	8008b68 <_printf_i+0x164>
 8008c30:	3501      	adds	r5, #1
 8008c32:	68e3      	ldr	r3, [r4, #12]
 8008c34:	9903      	ldr	r1, [sp, #12]
 8008c36:	1a5b      	subs	r3, r3, r1
 8008c38:	42ab      	cmp	r3, r5
 8008c3a:	dcf2      	bgt.n	8008c22 <_printf_i+0x21e>
 8008c3c:	e7eb      	b.n	8008c16 <_printf_i+0x212>
 8008c3e:	2500      	movs	r5, #0
 8008c40:	f104 0619 	add.w	r6, r4, #25
 8008c44:	e7f5      	b.n	8008c32 <_printf_i+0x22e>
 8008c46:	bf00      	nop
 8008c48:	08009149 	.word	0x08009149
 8008c4c:	0800915a 	.word	0x0800915a

08008c50 <_sbrk_r>:
 8008c50:	b538      	push	{r3, r4, r5, lr}
 8008c52:	4d06      	ldr	r5, [pc, #24]	; (8008c6c <_sbrk_r+0x1c>)
 8008c54:	2300      	movs	r3, #0
 8008c56:	4604      	mov	r4, r0
 8008c58:	4608      	mov	r0, r1
 8008c5a:	602b      	str	r3, [r5, #0]
 8008c5c:	f7f9 fa1a 	bl	8002094 <_sbrk>
 8008c60:	1c43      	adds	r3, r0, #1
 8008c62:	d102      	bne.n	8008c6a <_sbrk_r+0x1a>
 8008c64:	682b      	ldr	r3, [r5, #0]
 8008c66:	b103      	cbz	r3, 8008c6a <_sbrk_r+0x1a>
 8008c68:	6023      	str	r3, [r4, #0]
 8008c6a:	bd38      	pop	{r3, r4, r5, pc}
 8008c6c:	20000dbc 	.word	0x20000dbc

08008c70 <__sread>:
 8008c70:	b510      	push	{r4, lr}
 8008c72:	460c      	mov	r4, r1
 8008c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c78:	f000 f8f8 	bl	8008e6c <_read_r>
 8008c7c:	2800      	cmp	r0, #0
 8008c7e:	bfab      	itete	ge
 8008c80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c82:	89a3      	ldrhlt	r3, [r4, #12]
 8008c84:	181b      	addge	r3, r3, r0
 8008c86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c8a:	bfac      	ite	ge
 8008c8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c8e:	81a3      	strhlt	r3, [r4, #12]
 8008c90:	bd10      	pop	{r4, pc}

08008c92 <__swrite>:
 8008c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c96:	461f      	mov	r7, r3
 8008c98:	898b      	ldrh	r3, [r1, #12]
 8008c9a:	05db      	lsls	r3, r3, #23
 8008c9c:	4605      	mov	r5, r0
 8008c9e:	460c      	mov	r4, r1
 8008ca0:	4616      	mov	r6, r2
 8008ca2:	d505      	bpl.n	8008cb0 <__swrite+0x1e>
 8008ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ca8:	2302      	movs	r3, #2
 8008caa:	2200      	movs	r2, #0
 8008cac:	f000 f868 	bl	8008d80 <_lseek_r>
 8008cb0:	89a3      	ldrh	r3, [r4, #12]
 8008cb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008cba:	81a3      	strh	r3, [r4, #12]
 8008cbc:	4632      	mov	r2, r6
 8008cbe:	463b      	mov	r3, r7
 8008cc0:	4628      	mov	r0, r5
 8008cc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cc6:	f000 b817 	b.w	8008cf8 <_write_r>

08008cca <__sseek>:
 8008cca:	b510      	push	{r4, lr}
 8008ccc:	460c      	mov	r4, r1
 8008cce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cd2:	f000 f855 	bl	8008d80 <_lseek_r>
 8008cd6:	1c43      	adds	r3, r0, #1
 8008cd8:	89a3      	ldrh	r3, [r4, #12]
 8008cda:	bf15      	itete	ne
 8008cdc:	6560      	strne	r0, [r4, #84]	; 0x54
 8008cde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008ce2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008ce6:	81a3      	strheq	r3, [r4, #12]
 8008ce8:	bf18      	it	ne
 8008cea:	81a3      	strhne	r3, [r4, #12]
 8008cec:	bd10      	pop	{r4, pc}

08008cee <__sclose>:
 8008cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cf2:	f000 b813 	b.w	8008d1c <_close_r>
	...

08008cf8 <_write_r>:
 8008cf8:	b538      	push	{r3, r4, r5, lr}
 8008cfa:	4d07      	ldr	r5, [pc, #28]	; (8008d18 <_write_r+0x20>)
 8008cfc:	4604      	mov	r4, r0
 8008cfe:	4608      	mov	r0, r1
 8008d00:	4611      	mov	r1, r2
 8008d02:	2200      	movs	r2, #0
 8008d04:	602a      	str	r2, [r5, #0]
 8008d06:	461a      	mov	r2, r3
 8008d08:	f7f9 f973 	bl	8001ff2 <_write>
 8008d0c:	1c43      	adds	r3, r0, #1
 8008d0e:	d102      	bne.n	8008d16 <_write_r+0x1e>
 8008d10:	682b      	ldr	r3, [r5, #0]
 8008d12:	b103      	cbz	r3, 8008d16 <_write_r+0x1e>
 8008d14:	6023      	str	r3, [r4, #0]
 8008d16:	bd38      	pop	{r3, r4, r5, pc}
 8008d18:	20000dbc 	.word	0x20000dbc

08008d1c <_close_r>:
 8008d1c:	b538      	push	{r3, r4, r5, lr}
 8008d1e:	4d06      	ldr	r5, [pc, #24]	; (8008d38 <_close_r+0x1c>)
 8008d20:	2300      	movs	r3, #0
 8008d22:	4604      	mov	r4, r0
 8008d24:	4608      	mov	r0, r1
 8008d26:	602b      	str	r3, [r5, #0]
 8008d28:	f7f9 f97f 	bl	800202a <_close>
 8008d2c:	1c43      	adds	r3, r0, #1
 8008d2e:	d102      	bne.n	8008d36 <_close_r+0x1a>
 8008d30:	682b      	ldr	r3, [r5, #0]
 8008d32:	b103      	cbz	r3, 8008d36 <_close_r+0x1a>
 8008d34:	6023      	str	r3, [r4, #0]
 8008d36:	bd38      	pop	{r3, r4, r5, pc}
 8008d38:	20000dbc 	.word	0x20000dbc

08008d3c <_fstat_r>:
 8008d3c:	b538      	push	{r3, r4, r5, lr}
 8008d3e:	4d07      	ldr	r5, [pc, #28]	; (8008d5c <_fstat_r+0x20>)
 8008d40:	2300      	movs	r3, #0
 8008d42:	4604      	mov	r4, r0
 8008d44:	4608      	mov	r0, r1
 8008d46:	4611      	mov	r1, r2
 8008d48:	602b      	str	r3, [r5, #0]
 8008d4a:	f7f9 f97a 	bl	8002042 <_fstat>
 8008d4e:	1c43      	adds	r3, r0, #1
 8008d50:	d102      	bne.n	8008d58 <_fstat_r+0x1c>
 8008d52:	682b      	ldr	r3, [r5, #0]
 8008d54:	b103      	cbz	r3, 8008d58 <_fstat_r+0x1c>
 8008d56:	6023      	str	r3, [r4, #0]
 8008d58:	bd38      	pop	{r3, r4, r5, pc}
 8008d5a:	bf00      	nop
 8008d5c:	20000dbc 	.word	0x20000dbc

08008d60 <_isatty_r>:
 8008d60:	b538      	push	{r3, r4, r5, lr}
 8008d62:	4d06      	ldr	r5, [pc, #24]	; (8008d7c <_isatty_r+0x1c>)
 8008d64:	2300      	movs	r3, #0
 8008d66:	4604      	mov	r4, r0
 8008d68:	4608      	mov	r0, r1
 8008d6a:	602b      	str	r3, [r5, #0]
 8008d6c:	f7f9 f979 	bl	8002062 <_isatty>
 8008d70:	1c43      	adds	r3, r0, #1
 8008d72:	d102      	bne.n	8008d7a <_isatty_r+0x1a>
 8008d74:	682b      	ldr	r3, [r5, #0]
 8008d76:	b103      	cbz	r3, 8008d7a <_isatty_r+0x1a>
 8008d78:	6023      	str	r3, [r4, #0]
 8008d7a:	bd38      	pop	{r3, r4, r5, pc}
 8008d7c:	20000dbc 	.word	0x20000dbc

08008d80 <_lseek_r>:
 8008d80:	b538      	push	{r3, r4, r5, lr}
 8008d82:	4d07      	ldr	r5, [pc, #28]	; (8008da0 <_lseek_r+0x20>)
 8008d84:	4604      	mov	r4, r0
 8008d86:	4608      	mov	r0, r1
 8008d88:	4611      	mov	r1, r2
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	602a      	str	r2, [r5, #0]
 8008d8e:	461a      	mov	r2, r3
 8008d90:	f7f9 f972 	bl	8002078 <_lseek>
 8008d94:	1c43      	adds	r3, r0, #1
 8008d96:	d102      	bne.n	8008d9e <_lseek_r+0x1e>
 8008d98:	682b      	ldr	r3, [r5, #0]
 8008d9a:	b103      	cbz	r3, 8008d9e <_lseek_r+0x1e>
 8008d9c:	6023      	str	r3, [r4, #0]
 8008d9e:	bd38      	pop	{r3, r4, r5, pc}
 8008da0:	20000dbc 	.word	0x20000dbc

08008da4 <memcpy>:
 8008da4:	440a      	add	r2, r1
 8008da6:	4291      	cmp	r1, r2
 8008da8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008dac:	d100      	bne.n	8008db0 <memcpy+0xc>
 8008dae:	4770      	bx	lr
 8008db0:	b510      	push	{r4, lr}
 8008db2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008db6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008dba:	4291      	cmp	r1, r2
 8008dbc:	d1f9      	bne.n	8008db2 <memcpy+0xe>
 8008dbe:	bd10      	pop	{r4, pc}

08008dc0 <memmove>:
 8008dc0:	4288      	cmp	r0, r1
 8008dc2:	b510      	push	{r4, lr}
 8008dc4:	eb01 0402 	add.w	r4, r1, r2
 8008dc8:	d902      	bls.n	8008dd0 <memmove+0x10>
 8008dca:	4284      	cmp	r4, r0
 8008dcc:	4623      	mov	r3, r4
 8008dce:	d807      	bhi.n	8008de0 <memmove+0x20>
 8008dd0:	1e43      	subs	r3, r0, #1
 8008dd2:	42a1      	cmp	r1, r4
 8008dd4:	d008      	beq.n	8008de8 <memmove+0x28>
 8008dd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008dda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008dde:	e7f8      	b.n	8008dd2 <memmove+0x12>
 8008de0:	4402      	add	r2, r0
 8008de2:	4601      	mov	r1, r0
 8008de4:	428a      	cmp	r2, r1
 8008de6:	d100      	bne.n	8008dea <memmove+0x2a>
 8008de8:	bd10      	pop	{r4, pc}
 8008dea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008dee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008df2:	e7f7      	b.n	8008de4 <memmove+0x24>

08008df4 <__malloc_lock>:
 8008df4:	4801      	ldr	r0, [pc, #4]	; (8008dfc <__malloc_lock+0x8>)
 8008df6:	f7ff baf3 	b.w	80083e0 <__retarget_lock_acquire_recursive>
 8008dfa:	bf00      	nop
 8008dfc:	20000db0 	.word	0x20000db0

08008e00 <__malloc_unlock>:
 8008e00:	4801      	ldr	r0, [pc, #4]	; (8008e08 <__malloc_unlock+0x8>)
 8008e02:	f7ff baee 	b.w	80083e2 <__retarget_lock_release_recursive>
 8008e06:	bf00      	nop
 8008e08:	20000db0 	.word	0x20000db0

08008e0c <_realloc_r>:
 8008e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e10:	4680      	mov	r8, r0
 8008e12:	4614      	mov	r4, r2
 8008e14:	460e      	mov	r6, r1
 8008e16:	b921      	cbnz	r1, 8008e22 <_realloc_r+0x16>
 8008e18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e1c:	4611      	mov	r1, r2
 8008e1e:	f7ff bbb3 	b.w	8008588 <_malloc_r>
 8008e22:	b92a      	cbnz	r2, 8008e30 <_realloc_r+0x24>
 8008e24:	f7ff fb44 	bl	80084b0 <_free_r>
 8008e28:	4625      	mov	r5, r4
 8008e2a:	4628      	mov	r0, r5
 8008e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e30:	f000 f82e 	bl	8008e90 <_malloc_usable_size_r>
 8008e34:	4284      	cmp	r4, r0
 8008e36:	4607      	mov	r7, r0
 8008e38:	d802      	bhi.n	8008e40 <_realloc_r+0x34>
 8008e3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008e3e:	d812      	bhi.n	8008e66 <_realloc_r+0x5a>
 8008e40:	4621      	mov	r1, r4
 8008e42:	4640      	mov	r0, r8
 8008e44:	f7ff fba0 	bl	8008588 <_malloc_r>
 8008e48:	4605      	mov	r5, r0
 8008e4a:	2800      	cmp	r0, #0
 8008e4c:	d0ed      	beq.n	8008e2a <_realloc_r+0x1e>
 8008e4e:	42bc      	cmp	r4, r7
 8008e50:	4622      	mov	r2, r4
 8008e52:	4631      	mov	r1, r6
 8008e54:	bf28      	it	cs
 8008e56:	463a      	movcs	r2, r7
 8008e58:	f7ff ffa4 	bl	8008da4 <memcpy>
 8008e5c:	4631      	mov	r1, r6
 8008e5e:	4640      	mov	r0, r8
 8008e60:	f7ff fb26 	bl	80084b0 <_free_r>
 8008e64:	e7e1      	b.n	8008e2a <_realloc_r+0x1e>
 8008e66:	4635      	mov	r5, r6
 8008e68:	e7df      	b.n	8008e2a <_realloc_r+0x1e>
	...

08008e6c <_read_r>:
 8008e6c:	b538      	push	{r3, r4, r5, lr}
 8008e6e:	4d07      	ldr	r5, [pc, #28]	; (8008e8c <_read_r+0x20>)
 8008e70:	4604      	mov	r4, r0
 8008e72:	4608      	mov	r0, r1
 8008e74:	4611      	mov	r1, r2
 8008e76:	2200      	movs	r2, #0
 8008e78:	602a      	str	r2, [r5, #0]
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	f7f9 f89c 	bl	8001fb8 <_read>
 8008e80:	1c43      	adds	r3, r0, #1
 8008e82:	d102      	bne.n	8008e8a <_read_r+0x1e>
 8008e84:	682b      	ldr	r3, [r5, #0]
 8008e86:	b103      	cbz	r3, 8008e8a <_read_r+0x1e>
 8008e88:	6023      	str	r3, [r4, #0]
 8008e8a:	bd38      	pop	{r3, r4, r5, pc}
 8008e8c:	20000dbc 	.word	0x20000dbc

08008e90 <_malloc_usable_size_r>:
 8008e90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e94:	1f18      	subs	r0, r3, #4
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	bfbc      	itt	lt
 8008e9a:	580b      	ldrlt	r3, [r1, r0]
 8008e9c:	18c0      	addlt	r0, r0, r3
 8008e9e:	4770      	bx	lr

08008ea0 <_init>:
 8008ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ea2:	bf00      	nop
 8008ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ea6:	bc08      	pop	{r3}
 8008ea8:	469e      	mov	lr, r3
 8008eaa:	4770      	bx	lr

08008eac <_fini>:
 8008eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eae:	bf00      	nop
 8008eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eb2:	bc08      	pop	{r3}
 8008eb4:	469e      	mov	lr, r3
 8008eb6:	4770      	bx	lr

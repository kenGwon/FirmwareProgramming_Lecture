
07.PWM_FAN_CONTROL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b84  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  08009d34  08009d34  00019d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0a4  0800a0a4  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0a4  0800a0a4  0001a0a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0ac  0800a0ac  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0ac  0800a0ac  0001a0ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0b0  0800a0b0  0001a0b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800a0b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          00000d40  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000dc8  20000dc8  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b913  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037a4  00000000  00000000  0003b9cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001728  00000000  00000000  0003f170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015c8  00000000  00000000  00040898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027ab2  00000000  00000000  00041e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c204  00000000  00000000  00069912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e75ce  00000000  00000000  00085b16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016d0e4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006d58  00000000  00000000  0016d134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009d1c 	.word	0x08009d1c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	08009d1c 	.word	0x08009d1c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b974 	b.w	8000d7c <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	468e      	mov	lr, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d14d      	bne.n	8000b56 <__udivmoddi4+0xaa>
 8000aba:	428a      	cmp	r2, r1
 8000abc:	4694      	mov	ip, r2
 8000abe:	d969      	bls.n	8000b94 <__udivmoddi4+0xe8>
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	b152      	cbz	r2, 8000adc <__udivmoddi4+0x30>
 8000ac6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aca:	f1c2 0120 	rsb	r1, r2, #32
 8000ace:	fa20 f101 	lsr.w	r1, r0, r1
 8000ad2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad6:	ea41 0e03 	orr.w	lr, r1, r3
 8000ada:	4094      	lsls	r4, r2
 8000adc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae0:	0c21      	lsrs	r1, r4, #16
 8000ae2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ae6:	fa1f f78c 	uxth.w	r7, ip
 8000aea:	fb08 e316 	mls	r3, r8, r6, lr
 8000aee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000af2:	fb06 f107 	mul.w	r1, r6, r7
 8000af6:	4299      	cmp	r1, r3
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x64>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b02:	f080 811f 	bcs.w	8000d44 <__udivmoddi4+0x298>
 8000b06:	4299      	cmp	r1, r3
 8000b08:	f240 811c 	bls.w	8000d44 <__udivmoddi4+0x298>
 8000b0c:	3e02      	subs	r6, #2
 8000b0e:	4463      	add	r3, ip
 8000b10:	1a5b      	subs	r3, r3, r1
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b18:	fb08 3310 	mls	r3, r8, r0, r3
 8000b1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b20:	fb00 f707 	mul.w	r7, r0, r7
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x92>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b30:	f080 810a 	bcs.w	8000d48 <__udivmoddi4+0x29c>
 8000b34:	42a7      	cmp	r7, r4
 8000b36:	f240 8107 	bls.w	8000d48 <__udivmoddi4+0x29c>
 8000b3a:	4464      	add	r4, ip
 8000b3c:	3802      	subs	r0, #2
 8000b3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b42:	1be4      	subs	r4, r4, r7
 8000b44:	2600      	movs	r6, #0
 8000b46:	b11d      	cbz	r5, 8000b50 <__udivmoddi4+0xa4>
 8000b48:	40d4      	lsrs	r4, r2
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b50:	4631      	mov	r1, r6
 8000b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d909      	bls.n	8000b6e <__udivmoddi4+0xc2>
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	f000 80ef 	beq.w	8000d3e <__udivmoddi4+0x292>
 8000b60:	2600      	movs	r6, #0
 8000b62:	e9c5 0100 	strd	r0, r1, [r5]
 8000b66:	4630      	mov	r0, r6
 8000b68:	4631      	mov	r1, r6
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	fab3 f683 	clz	r6, r3
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	d14a      	bne.n	8000c0c <__udivmoddi4+0x160>
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d302      	bcc.n	8000b80 <__udivmoddi4+0xd4>
 8000b7a:	4282      	cmp	r2, r0
 8000b7c:	f200 80f9 	bhi.w	8000d72 <__udivmoddi4+0x2c6>
 8000b80:	1a84      	subs	r4, r0, r2
 8000b82:	eb61 0303 	sbc.w	r3, r1, r3
 8000b86:	2001      	movs	r0, #1
 8000b88:	469e      	mov	lr, r3
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	d0e0      	beq.n	8000b50 <__udivmoddi4+0xa4>
 8000b8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b92:	e7dd      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000b94:	b902      	cbnz	r2, 8000b98 <__udivmoddi4+0xec>
 8000b96:	deff      	udf	#255	; 0xff
 8000b98:	fab2 f282 	clz	r2, r2
 8000b9c:	2a00      	cmp	r2, #0
 8000b9e:	f040 8092 	bne.w	8000cc6 <__udivmoddi4+0x21a>
 8000ba2:	eba1 010c 	sub.w	r1, r1, ip
 8000ba6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000baa:	fa1f fe8c 	uxth.w	lr, ip
 8000bae:	2601      	movs	r6, #1
 8000bb0:	0c20      	lsrs	r0, r4, #16
 8000bb2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bb6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bbe:	fb0e f003 	mul.w	r0, lr, r3
 8000bc2:	4288      	cmp	r0, r1
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x12c>
 8000bc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bca:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x12a>
 8000bd0:	4288      	cmp	r0, r1
 8000bd2:	f200 80cb 	bhi.w	8000d6c <__udivmoddi4+0x2c0>
 8000bd6:	4643      	mov	r3, r8
 8000bd8:	1a09      	subs	r1, r1, r0
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000be0:	fb07 1110 	mls	r1, r7, r0, r1
 8000be4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000be8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bec:	45a6      	cmp	lr, r4
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x156>
 8000bf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bf8:	d202      	bcs.n	8000c00 <__udivmoddi4+0x154>
 8000bfa:	45a6      	cmp	lr, r4
 8000bfc:	f200 80bb 	bhi.w	8000d76 <__udivmoddi4+0x2ca>
 8000c00:	4608      	mov	r0, r1
 8000c02:	eba4 040e 	sub.w	r4, r4, lr
 8000c06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c0a:	e79c      	b.n	8000b46 <__udivmoddi4+0x9a>
 8000c0c:	f1c6 0720 	rsb	r7, r6, #32
 8000c10:	40b3      	lsls	r3, r6
 8000c12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c22:	431c      	orrs	r4, r3
 8000c24:	40f9      	lsrs	r1, r7
 8000c26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c32:	0c20      	lsrs	r0, r4, #16
 8000c34:	fa1f fe8c 	uxth.w	lr, ip
 8000c38:	fb09 1118 	mls	r1, r9, r8, r1
 8000c3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c40:	fb08 f00e 	mul.w	r0, r8, lr
 8000c44:	4288      	cmp	r0, r1
 8000c46:	fa02 f206 	lsl.w	r2, r2, r6
 8000c4a:	d90b      	bls.n	8000c64 <__udivmoddi4+0x1b8>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c54:	f080 8088 	bcs.w	8000d68 <__udivmoddi4+0x2bc>
 8000c58:	4288      	cmp	r0, r1
 8000c5a:	f240 8085 	bls.w	8000d68 <__udivmoddi4+0x2bc>
 8000c5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c62:	4461      	add	r1, ip
 8000c64:	1a09      	subs	r1, r1, r0
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c78:	458e      	cmp	lr, r1
 8000c7a:	d908      	bls.n	8000c8e <__udivmoddi4+0x1e2>
 8000c7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c84:	d26c      	bcs.n	8000d60 <__udivmoddi4+0x2b4>
 8000c86:	458e      	cmp	lr, r1
 8000c88:	d96a      	bls.n	8000d60 <__udivmoddi4+0x2b4>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	4461      	add	r1, ip
 8000c8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c92:	fba0 9402 	umull	r9, r4, r0, r2
 8000c96:	eba1 010e 	sub.w	r1, r1, lr
 8000c9a:	42a1      	cmp	r1, r4
 8000c9c:	46c8      	mov	r8, r9
 8000c9e:	46a6      	mov	lr, r4
 8000ca0:	d356      	bcc.n	8000d50 <__udivmoddi4+0x2a4>
 8000ca2:	d053      	beq.n	8000d4c <__udivmoddi4+0x2a0>
 8000ca4:	b15d      	cbz	r5, 8000cbe <__udivmoddi4+0x212>
 8000ca6:	ebb3 0208 	subs.w	r2, r3, r8
 8000caa:	eb61 010e 	sbc.w	r1, r1, lr
 8000cae:	fa01 f707 	lsl.w	r7, r1, r7
 8000cb2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cb6:	40f1      	lsrs	r1, r6
 8000cb8:	431f      	orrs	r7, r3
 8000cba:	e9c5 7100 	strd	r7, r1, [r5]
 8000cbe:	2600      	movs	r6, #0
 8000cc0:	4631      	mov	r1, r6
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	f1c2 0320 	rsb	r3, r2, #32
 8000cca:	40d8      	lsrs	r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cd4:	4091      	lsls	r1, r2
 8000cd6:	4301      	orrs	r1, r0
 8000cd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cdc:	fa1f fe8c 	uxth.w	lr, ip
 8000ce0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ce4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ce8:	0c0b      	lsrs	r3, r1, #16
 8000cea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cee:	fb00 f60e 	mul.w	r6, r0, lr
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x260>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d02:	d22f      	bcs.n	8000d64 <__udivmoddi4+0x2b8>
 8000d04:	429e      	cmp	r6, r3
 8000d06:	d92d      	bls.n	8000d64 <__udivmoddi4+0x2b8>
 8000d08:	3802      	subs	r0, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	b289      	uxth	r1, r1
 8000d10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d14:	fb07 3316 	mls	r3, r7, r6, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x28a>
 8000d24:	eb1c 0101 	adds.w	r1, ip, r1
 8000d28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d2c:	d216      	bcs.n	8000d5c <__udivmoddi4+0x2b0>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d914      	bls.n	8000d5c <__udivmoddi4+0x2b0>
 8000d32:	3e02      	subs	r6, #2
 8000d34:	4461      	add	r1, ip
 8000d36:	1ac9      	subs	r1, r1, r3
 8000d38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d3c:	e738      	b.n	8000bb0 <__udivmoddi4+0x104>
 8000d3e:	462e      	mov	r6, r5
 8000d40:	4628      	mov	r0, r5
 8000d42:	e705      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000d44:	4606      	mov	r6, r0
 8000d46:	e6e3      	b.n	8000b10 <__udivmoddi4+0x64>
 8000d48:	4618      	mov	r0, r3
 8000d4a:	e6f8      	b.n	8000b3e <__udivmoddi4+0x92>
 8000d4c:	454b      	cmp	r3, r9
 8000d4e:	d2a9      	bcs.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d50:	ebb9 0802 	subs.w	r8, r9, r2
 8000d54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d58:	3801      	subs	r0, #1
 8000d5a:	e7a3      	b.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d5c:	4646      	mov	r6, r8
 8000d5e:	e7ea      	b.n	8000d36 <__udivmoddi4+0x28a>
 8000d60:	4620      	mov	r0, r4
 8000d62:	e794      	b.n	8000c8e <__udivmoddi4+0x1e2>
 8000d64:	4640      	mov	r0, r8
 8000d66:	e7d1      	b.n	8000d0c <__udivmoddi4+0x260>
 8000d68:	46d0      	mov	r8, sl
 8000d6a:	e77b      	b.n	8000c64 <__udivmoddi4+0x1b8>
 8000d6c:	3b02      	subs	r3, #2
 8000d6e:	4461      	add	r1, ip
 8000d70:	e732      	b.n	8000bd8 <__udivmoddi4+0x12c>
 8000d72:	4630      	mov	r0, r6
 8000d74:	e709      	b.n	8000b8a <__udivmoddi4+0xde>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	e742      	b.n	8000c02 <__udivmoddi4+0x156>

08000d7c <__aeabi_idiv0>:
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <DHT11_processing>:
	
}

int dht11time = 150; // 전역변수 상태
void DHT11_processing(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
	uint8_t i_RH, d_RH, i_Tmp, d_Tmp;
	char lcd_buff[20];

	if (TIM10_10ms_counter >= dht11time)
 8000d86:	4b23      	ldr	r3, [pc, #140]	; (8000e14 <DHT11_processing+0x94>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	4b23      	ldr	r3, [pc, #140]	; (8000e18 <DHT11_processing+0x98>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	db3b      	blt.n	8000e0a <DHT11_processing+0x8a>
	{
		TIM10_10ms_counter = 0;
 8000d92:	4b20      	ldr	r3, [pc, #128]	; (8000e14 <DHT11_processing+0x94>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]

		DHT11_trriger(); // DHT11과 MCU의 Hand-shaking과정이다.
 8000d98:	f000 f85a 	bl	8000e50 <DHT11_trriger>
		DHT11_DataLine_Input();
 8000d9c:	f000 f86e 	bl	8000e7c <DHT11_DataLine_Input>
		DHT11_dumi_read();
 8000da0:	f000 f8dc 	bl	8000f5c <DHT11_dumi_read>

		// 여기부터 DHT11가 수집한 데이터를 읽어오는 것이다.
		i_RH = DHT11_rx_Data();
 8000da4:	f000 f8a4 	bl	8000ef0 <DHT11_rx_Data>
 8000da8:	4603      	mov	r3, r0
 8000daa:	75fb      	strb	r3, [r7, #23]
		d_RH = DHT11_rx_Data();
 8000dac:	f000 f8a0 	bl	8000ef0 <DHT11_rx_Data>
 8000db0:	4603      	mov	r3, r0
 8000db2:	75bb      	strb	r3, [r7, #22]
		i_Tmp = DHT11_rx_Data();
 8000db4:	f000 f89c 	bl	8000ef0 <DHT11_rx_Data>
 8000db8:	4603      	mov	r3, r0
 8000dba:	757b      	strb	r3, [r7, #21]
		d_Tmp = DHT11_rx_Data();
 8000dbc:	f000 f898 	bl	8000ef0 <DHT11_rx_Data>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	753b      	strb	r3, [r7, #20]

		DHT11_DataLine_Output();
 8000dc4:	f000 f876 	bl	8000eb4 <DHT11_DataLine_Output>
		HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_SET);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2101      	movs	r1, #1
 8000dcc:	4813      	ldr	r0, [pc, #76]	; (8000e1c <DHT11_processing+0x9c>)
 8000dce:	f003 fa05 	bl	80041dc <HAL_GPIO_WritePin>

		if (DHT11_print_flag)
 8000dd2:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <DHT11_processing+0xa0>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d017      	beq.n	8000e0a <DHT11_processing+0x8a>
		{
			printf("[Tmp]%d\n",(int)i_Tmp);
 8000dda:	7d7b      	ldrb	r3, [r7, #21]
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4811      	ldr	r0, [pc, #68]	; (8000e24 <DHT11_processing+0xa4>)
 8000de0:	f007 fd1c 	bl	800881c <iprintf>
			printf("[Wet]%d\n",(int)i_RH);
 8000de4:	7dfb      	ldrb	r3, [r7, #23]
 8000de6:	4619      	mov	r1, r3
 8000de8:	480f      	ldr	r0, [pc, #60]	; (8000e28 <DHT11_processing+0xa8>)
 8000dea:	f007 fd17 	bl	800881c <iprintf>

			sprintf(lcd_buff, "Tmp: %d Wet: %d", (int)i_Tmp, (int)i_RH);
 8000dee:	7d7a      	ldrb	r2, [r7, #21]
 8000df0:	7dfb      	ldrb	r3, [r7, #23]
 8000df2:	4638      	mov	r0, r7
 8000df4:	490d      	ldr	r1, [pc, #52]	; (8000e2c <DHT11_processing+0xac>)
 8000df6:	f007 fd9f 	bl	8008938 <siprintf>
			move_cursor(0,0);
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f000 fc81 	bl	8001704 <move_cursor>
			lcd_string(lcd_buff);
 8000e02:	463b      	mov	r3, r7
 8000e04:	4618      	mov	r0, r3
 8000e06:	f000 fc68 	bl	80016da <lcd_string>
		}

		//	FND_update(i_Tmp*100 + i_RH);
	}
}
 8000e0a:	bf00      	nop
 8000e0c:	3718      	adds	r7, #24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000a2c 	.word	0x20000a2c
 8000e18:	20000004 	.word	0x20000004
 8000e1c:	40020000 	.word	0x40020000
 8000e20:	20000000 	.word	0x20000000
 8000e24:	08009d34 	.word	0x08009d34
 8000e28:	08009d40 	.word	0x08009d40
 8000e2c:	08009d4c 	.word	0x08009d4c

08000e30 <DHT11_Init>:

void DHT11_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_SET);
 8000e34:	2201      	movs	r2, #1
 8000e36:	2101      	movs	r1, #1
 8000e38:	4804      	ldr	r0, [pc, #16]	; (8000e4c <DHT11_Init+0x1c>)
 8000e3a:	f003 f9cf 	bl	80041dc <HAL_GPIO_WritePin>
	HAL_Delay(3000); // 초기화 할때는 딱 한번만 일어나기 때문에 hal_delay()를 줘도 상관 없다.
 8000e3e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e42:	f002 fb17 	bl	8003474 <HAL_Delay>
	return;
 8000e46:	bf00      	nop
}
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40020000 	.word	0x40020000

08000e50 <DHT11_trriger>:


void DHT11_trriger(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2101      	movs	r1, #1
 8000e58:	4807      	ldr	r0, [pc, #28]	; (8000e78 <DHT11_trriger+0x28>)
 8000e5a:	f003 f9bf 	bl	80041dc <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000e5e:	2014      	movs	r0, #20
 8000e60:	f002 fb08 	bl	8003474 <HAL_Delay>
	
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_SET);
 8000e64:	2201      	movs	r2, #1
 8000e66:	2101      	movs	r1, #1
 8000e68:	4803      	ldr	r0, [pc, #12]	; (8000e78 <DHT11_trriger+0x28>)
 8000e6a:	f003 f9b7 	bl	80041dc <HAL_GPIO_WritePin>
	delay_us(7);
 8000e6e:	2007      	movs	r0, #7
 8000e70:	f000 fde4 	bl	8001a3c <delay_us>
	return;
 8000e74:	bf00      	nop
}
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40020000 	.word	0x40020000

08000e7c <DHT11_DataLine_Input>:


void DHT11_DataLine_Input(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
	
	/*Configure GPIO pin : PH0 */
  GPIO_InitStruct.Pin = DHT11_DATA_RIN;
 8000e90:	2301      	movs	r3, #1
 8000e92:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;			//Change Output to Input
 8000e94:	2300      	movs	r3, #0
 8000e96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4803      	ldr	r0, [pc, #12]	; (8000eb0 <DHT11_DataLine_Input+0x34>)
 8000ea2:	f002 ffd7 	bl	8003e54 <HAL_GPIO_Init>
	
	return;
 8000ea6:	bf00      	nop
}
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40020000 	.word	0x40020000

08000eb4 <DHT11_DataLine_Output>:


void DHT11_DataLine_Output(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
	
	/*Configure GPIO pin : PH0 */
  GPIO_InitStruct.Pin = DHT11_DATA_RIN;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;			//Change Input to Output 
 8000ecc:	2301      	movs	r3, #1
 8000ece:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	4619      	mov	r1, r3
 8000edc:	4803      	ldr	r0, [pc, #12]	; (8000eec <DHT11_DataLine_Output+0x38>)
 8000ede:	f002 ffb9 	bl	8003e54 <HAL_GPIO_Init>
	
	return;
 8000ee2:	bf00      	nop
}
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40020000 	.word	0x40020000

08000ef0 <DHT11_rx_Data>:


uint8_t DHT11_rx_Data(void) // 이 함수가 데이터시트를 코드로 옮기는 핵심 포인트 함수이다. 0과 1을 판별하는 법..
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
	uint8_t rx_data = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	71fb      	strb	r3, [r7, #7]
	
	for(int i = 0; i < 8; i++) // 8비트 받아야 하니까 for문을 8번 돌린다.
 8000efa:	2300      	movs	r3, #0
 8000efc:	603b      	str	r3, [r7, #0]
 8000efe:	e023      	b.n	8000f48 <DHT11_rx_Data+0x58>
	{
		//when Input Data == 0
		while( 0 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f00:	bf00      	nop
 8000f02:	2101      	movs	r1, #1
 8000f04:	4814      	ldr	r0, [pc, #80]	; (8000f58 <DHT11_rx_Data+0x68>)
 8000f06:	f003 f951 	bl	80041ac <HAL_GPIO_ReadPin>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d0f8      	beq.n	8000f02 <DHT11_rx_Data+0x12>
#if 1
		delay_us(40); // 0인지 1인지 구분해야 하니까 둘의 중간 값 정도인 40마이크로 세컨드 만큼 딜레이를 주고 그 다음에 오는 if문을 통해 0인지 1인지 판단하겠다는 것이다. (0이면 26마이크로 세컨드만 유지되고, 1이면 70마이크로 세컨트가 유지되기 때문)
 8000f10:	2028      	movs	r0, #40	; 0x28
 8000f12:	f000 fd93 	bl	8001a3c <delay_us>
#else  // org
		delay_us(16);
#endif
		rx_data<<=1; // 한 비트를 좌로 쉬프트 시킨다. 총 8비트를 쌓아가야 하니까...
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	71fb      	strb	r3, [r7, #7]
		
		//when Input Data == 1
		if(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN))
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	480e      	ldr	r0, [pc, #56]	; (8000f58 <DHT11_rx_Data+0x68>)
 8000f20:	f003 f944 	bl	80041ac <HAL_GPIO_ReadPin>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <DHT11_rx_Data+0x42>
		{
			rx_data |= 1;
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	71fb      	strb	r3, [r7, #7]
			// 단 하나의 비트만 1로 바꿔주는 것이기 때문에 그냥 상수 대입 시키는 식으로 하면 안된다.
			// 이렇게 00000000000000000000000000000001 값과 OR비트 연산을 해주면
			// rx_data는 8비트 이기 때문에 00000001과 OR 연산되어 끝자리 비트만 0에서 1로 바뀌는 효과가 발생하게 된
		}
		while( 1 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f32:	bf00      	nop
 8000f34:	2101      	movs	r1, #1
 8000f36:	4808      	ldr	r0, [pc, #32]	; (8000f58 <DHT11_rx_Data+0x68>)
 8000f38:	f003 f938 	bl	80041ac <HAL_GPIO_ReadPin>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d0f8      	beq.n	8000f34 <DHT11_rx_Data+0x44>
	for(int i = 0; i < 8; i++) // 8비트 받아야 하니까 for문을 8번 돌린다.
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	3301      	adds	r3, #1
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	2b07      	cmp	r3, #7
 8000f4c:	ddd8      	ble.n	8000f00 <DHT11_rx_Data+0x10>
	}
	return rx_data;
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40020000 	.word	0x40020000

08000f5c <DHT11_dumi_read>:


void DHT11_dumi_read(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	while( 1 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f60:	bf00      	nop
 8000f62:	2101      	movs	r1, #1
 8000f64:	480b      	ldr	r0, [pc, #44]	; (8000f94 <DHT11_dumi_read+0x38>)
 8000f66:	f003 f921 	bl	80041ac <HAL_GPIO_ReadPin>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d0f8      	beq.n	8000f62 <DHT11_dumi_read+0x6>
	while( 0 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f70:	bf00      	nop
 8000f72:	2101      	movs	r1, #1
 8000f74:	4807      	ldr	r0, [pc, #28]	; (8000f94 <DHT11_dumi_read+0x38>)
 8000f76:	f003 f919 	bl	80041ac <HAL_GPIO_ReadPin>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d0f8      	beq.n	8000f72 <DHT11_dumi_read+0x16>
	while( 1 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f80:	bf00      	nop
 8000f82:	2101      	movs	r1, #1
 8000f84:	4803      	ldr	r0, [pc, #12]	; (8000f94 <DHT11_dumi_read+0x38>)
 8000f86:	f003 f911 	bl	80041ac <HAL_GPIO_ReadPin>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d0f8      	beq.n	8000f82 <DHT11_dumi_read+0x26>
	return;
 8000f90:	bf00      	nop
}
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40020000 	.word	0x40020000

08000f98 <Get_Button>:
/*
 * desc: 사용자가 한번 버튼을 누를때마다(떼는 행동 포함) led의 on/off상태를 바꾸는 것이 목표
 * return: 완전히 눌렀다 떼면 BUTTON_RELEASE(1) 상태를 리턴
 * */
int Get_Button(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t button_number)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	807b      	strh	r3, [r7, #2]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	707b      	strb	r3, [r7, #1]
	unsigned char curr_state;
	curr_state = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin); // curr_state에는 0 또는 1의 상태가 걸리게 됨
 8000fa8:	887b      	ldrh	r3, [r7, #2]
 8000faa:	4619      	mov	r1, r3
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f003 f8fd 	bl	80041ac <HAL_GPIO_ReadPin>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	73fb      	strb	r3, [r7, #15]

	// 원치않는 노이즈를 디바운스? 채터링? 하는 if문 코드
	if (curr_state == BUTTON_PRESS && button_status[button_number] == BUTTON_RELEASE) // 처음 노이즈가 발생하는 상황을 체크
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d10d      	bne.n	8000fd8 <Get_Button+0x40>
 8000fbc:	787b      	ldrb	r3, [r7, #1]
 8000fbe:	4a11      	ldr	r2, [pc, #68]	; (8001004 <Get_Button+0x6c>)
 8000fc0:	5cd3      	ldrb	r3, [r2, r3]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d108      	bne.n	8000fd8 <Get_Button+0x40>
	{
		HAL_Delay(100); // 노이즈가 지나가기를 기다리는 것
 8000fc6:	2064      	movs	r0, #100	; 0x64
 8000fc8:	f002 fa54 	bl	8003474 <HAL_Delay>
		button_status[button_number] = BUTTON_PRESS;
 8000fcc:	787b      	ldrb	r3, [r7, #1]
 8000fce:	4a0d      	ldr	r2, [pc, #52]	; (8001004 <Get_Button+0x6c>)
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	54d1      	strb	r1, [r2, r3]
		return BUTTON_RELEASE; // 버튼이 눌려진 상태이나 아직은 noise상태로 인정
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e011      	b.n	8000ffc <Get_Button+0x64>
	}
	else if (curr_state == BUTTON_RELEASE && button_status[button_number] == BUTTON_PRESS) // 이전에 버튼이 눌려진 상태였고, 지금은 버튼을 뗀 상태이면
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d10d      	bne.n	8000ffa <Get_Button+0x62>
 8000fde:	787b      	ldrb	r3, [r7, #1]
 8000fe0:	4a08      	ldr	r2, [pc, #32]	; (8001004 <Get_Button+0x6c>)
 8000fe2:	5cd3      	ldrb	r3, [r2, r3]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d108      	bne.n	8000ffa <Get_Button+0x62>
	{
		button_status[button_number] = BUTTON_RELEASE; // button_status_table을 초기화 하고
 8000fe8:	787b      	ldrb	r3, [r7, #1]
 8000fea:	4a06      	ldr	r2, [pc, #24]	; (8001004 <Get_Button+0x6c>)
 8000fec:	2101      	movs	r1, #1
 8000fee:	54d1      	strb	r1, [r2, r3]
		HAL_Delay(30);
 8000ff0:	201e      	movs	r0, #30
 8000ff2:	f002 fa3f 	bl	8003474 <HAL_Delay>
		return BUTTON_PRESS; // 버튼을 한번 눌렀다 뗀 것으로 인정
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	e000      	b.n	8000ffc <Get_Button+0x64>
	}
	return BUTTON_RELEASE;
 8000ffa:	2301      	movs	r3, #1
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000008 	.word	0x20000008

08001008 <dcmotor_processing>:

/*
 * desc: main.c의 while(1)문에서 돌아가는 함수. 현재 모드가 매뉴얼 모드면 매뉴얼 모드 컨트롤 함수를 실행하고, 현재 모드가 오토 모드면 오토 모드 컨트롤 함수를 실행한다.
 */
void dcmotor_processing(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	if (dcmotor_manual_auto_flag == 0)
 800100c:	4b09      	ldr	r3, [pc, #36]	; (8001034 <dcmotor_processing+0x2c>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d102      	bne.n	800101a <dcmotor_processing+0x12>
	{
		dcmotor_pwm_manual_control();
 8001014:	f000 f812 	bl	800103c <dcmotor_pwm_manual_control>
 8001018:	e001      	b.n	800101e <dcmotor_processing+0x16>
	}
	else
	{
		dcmotor_pwm_auto_control();
 800101a:	f000 f905 	bl	8001228 <dcmotor_pwm_auto_control>
	}

	// dcmotor의 현재 상태를 출력해주는 I2C LCD 디스플레이에 쓰레기 값이 출력되는 것을 막기 위해, 1초마다 LCD의 모든 칸을 공백으로 초기화 해주는 함수를 실행한다.
	// (임시방편임. 원래는 i2c_lcd.c단에서 수정하는게 맞을듯?)
	if (TIM10_10ms_fan_lcd_display_clear >= 100)
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <dcmotor_processing+0x30>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b63      	cmp	r3, #99	; 0x63
 8001024:	dd04      	ble.n	8001030 <dcmotor_processing+0x28>
	{
		TIM10_10ms_fan_lcd_display_clear = 0;
 8001026:	4b04      	ldr	r3, [pc, #16]	; (8001038 <dcmotor_processing+0x30>)
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
		clear_dcmotor_lcd_display();
 800102c:	f000 f9c4 	bl	80013b8 <clear_dcmotor_lcd_display>
	}
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	200000a6 	.word	0x200000a6
 8001038:	20000a3c 	.word	0x20000a3c

0800103c <dcmotor_pwm_manual_control>:

/*
 * desc: 매뉴얼 모드 상태에서 dcmotor의 동작방식을 결정한다.
 */
void dcmotor_pwm_manual_control(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
	dcmotor_lcd_display();
 8001040:	f000 f9e0 	bl	8001404 <dcmotor_lcd_display>

	// dcmotor가 stop 상태라면 그에 맞는 값을 모터 드라이버에 입력해주고,
	// dcmotor가 start 상태라면 그에 맞는 값을 모터 드라이버에 입력해준다.
	if (!dcmotor_start_stop_flag)
 8001044:	4b6f      	ldr	r3, [pc, #444]	; (8001204 <dcmotor_pwm_manual_control+0x1c8>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d117      	bne.n	800107c <dcmotor_pwm_manual_control+0x40>
	{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 800104c:	2200      	movs	r2, #0
 800104e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001052:	486d      	ldr	r0, [pc, #436]	; (8001208 <dcmotor_pwm_manual_control+0x1cc>)
 8001054:	f003 f8c2 	bl	80041dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 8001058:	2200      	movs	r2, #0
 800105a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800105e:	486a      	ldr	r0, [pc, #424]	; (8001208 <dcmotor_pwm_manual_control+0x1cc>)
 8001060:	f003 f8bc 	bl	80041dc <HAL_GPIO_WritePin>

		// 동작 상태가 아니므로 "선풍기의 세기를 알리는 LED Bar"와 "정회전 역회전을 알리는 led"를 모두 끈다.
		HAL_GPIO_WritePin(GPIOD, 0xff, 0);
 8001064:	2200      	movs	r2, #0
 8001066:	21ff      	movs	r1, #255	; 0xff
 8001068:	4868      	ldr	r0, [pc, #416]	; (800120c <dcmotor_pwm_manual_control+0x1d0>)
 800106a:	f003 f8b7 	bl	80041dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FAN_ROTATE_DERECTION_LED_GPIO_Port, FAN_ROTATE_DERECTION_LED_Pin, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001074:	4864      	ldr	r0, [pc, #400]	; (8001208 <dcmotor_pwm_manual_control+0x1cc>)
 8001076:	f003 f8b1 	bl	80041dc <HAL_GPIO_WritePin>
 800107a:	e027      	b.n	80010cc <dcmotor_pwm_manual_control+0x90>
	}
	else
	{
		// dcmotor가 start 상태이면서 정방향 회전중이라면, 그에 맞는 값을 모터 드라이버에 넣어주고
		// dcmotor가 start 상태이면서 역방향 회전중이라면, 그에 맞는 값을 모터 드라이버에 넣어준다.
		if (!dcmotor_forward_backward_flag)
 800107c:	4b64      	ldr	r3, [pc, #400]	; (8001210 <dcmotor_pwm_manual_control+0x1d4>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d10c      	bne.n	800109e <dcmotor_pwm_manual_control+0x62>
		{
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8001084:	2201      	movs	r2, #1
 8001086:	f44f 7180 	mov.w	r1, #256	; 0x100
 800108a:	485f      	ldr	r0, [pc, #380]	; (8001208 <dcmotor_pwm_manual_control+0x1cc>)
 800108c:	f003 f8a6 	bl	80041dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 8001090:	2200      	movs	r2, #0
 8001092:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001096:	485c      	ldr	r0, [pc, #368]	; (8001208 <dcmotor_pwm_manual_control+0x1cc>)
 8001098:	f003 f8a0 	bl	80041dc <HAL_GPIO_WritePin>
 800109c:	e00b      	b.n	80010b6 <dcmotor_pwm_manual_control+0x7a>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a4:	4858      	ldr	r0, [pc, #352]	; (8001208 <dcmotor_pwm_manual_control+0x1cc>)
 80010a6:	f003 f899 	bl	80041dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 80010aa:	2201      	movs	r2, #1
 80010ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b0:	4855      	ldr	r0, [pc, #340]	; (8001208 <dcmotor_pwm_manual_control+0x1cc>)
 80010b2:	f003 f893 	bl	80041dc <HAL_GPIO_WritePin>
		}

		// 동작 상태가 맞으므로 "선풍기의 세기를 알리는 LED Bar"와 "정회전 역회전을 알리는 led"를 모두 켠다.
		dcmotor_ledbar_control(Get_Current_ChannelControlRegister_Value());
 80010b6:	f000 fa81 	bl	80015bc <Get_Current_ChannelControlRegister_Value>
 80010ba:	4603      	mov	r3, r0
 80010bc:	4618      	mov	r0, r3
 80010be:	f000 fa51 	bl	8001564 <dcmotor_ledbar_control>
		FAN_ROTATE_DERECTION_LED_control(dcmotor_forward_backward_flag);
 80010c2:	4b53      	ldr	r3, [pc, #332]	; (8001210 <dcmotor_pwm_manual_control+0x1d4>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 fa22 	bl	8001510 <FAN_ROTATE_DERECTION_LED_control>
	}

	// BUTTON0: dcmotor의 start/stop 상태를 토글한다.
	if (Get_Button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 80010cc:	2200      	movs	r2, #0
 80010ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010d2:	484d      	ldr	r0, [pc, #308]	; (8001208 <dcmotor_pwm_manual_control+0x1cc>)
 80010d4:	f7ff ff60 	bl	8000f98 <Get_Button>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d10e      	bne.n	80010fc <dcmotor_pwm_manual_control+0xc0>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); // 작동 로직과 관계 없는 함수 실행 확인용 테스트 코드.
 80010de:	2101      	movs	r1, #1
 80010e0:	484c      	ldr	r0, [pc, #304]	; (8001214 <dcmotor_pwm_manual_control+0x1d8>)
 80010e2:	f003 f894 	bl	800420e <HAL_GPIO_TogglePin>

		// dcmotor의 start/stop 상태를 의미하는 플래그 변수를 활용하여, 버튼을 눌렀을 때 상태가 반전되도록 한다.
		if (!dcmotor_start_stop_flag)
 80010e6:	4b47      	ldr	r3, [pc, #284]	; (8001204 <dcmotor_pwm_manual_control+0x1c8>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d103      	bne.n	80010f6 <dcmotor_pwm_manual_control+0xba>
		{
			dcmotor_start_stop_flag = 1;
 80010ee:	4b45      	ldr	r3, [pc, #276]	; (8001204 <dcmotor_pwm_manual_control+0x1c8>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	701a      	strb	r2, [r3, #0]
 80010f4:	e002      	b.n	80010fc <dcmotor_pwm_manual_control+0xc0>
		}
		else
		{
			dcmotor_start_stop_flag = 0;
 80010f6:	4b43      	ldr	r3, [pc, #268]	; (8001204 <dcmotor_pwm_manual_control+0x1c8>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]
		}
	}

	// BUTTON1: 듀티 사이클을 상승시켜 선풍기의 회전 속도를 가속한다.
	if (Get_Button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 80010fc:	2201      	movs	r2, #1
 80010fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001102:	4841      	ldr	r0, [pc, #260]	; (8001208 <dcmotor_pwm_manual_control+0x1cc>)
 8001104:	f7ff ff48 	bl	8000f98 <Get_Button>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d121      	bne.n	8001152 <dcmotor_pwm_manual_control+0x116>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7); // 작동 로직과 관계 없는 함수 실행 확인용 테스트 코드.
 800110e:	2180      	movs	r1, #128	; 0x80
 8001110:	4840      	ldr	r0, [pc, #256]	; (8001214 <dcmotor_pwm_manual_control+0x1d8>)
 8001112:	f003 f87c 	bl	800420e <HAL_GPIO_TogglePin>

		ChannelControlRegister_UP_Value = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_1);
 8001116:	4b40      	ldr	r3, [pc, #256]	; (8001218 <dcmotor_pwm_manual_control+0x1dc>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800111c:	b29a      	uxth	r2, r3
 800111e:	4b3f      	ldr	r3, [pc, #252]	; (800121c <dcmotor_pwm_manual_control+0x1e0>)
 8001120:	801a      	strh	r2, [r3, #0]
		ChannelControlRegister_UP_Value += 10;
 8001122:	4b3e      	ldr	r3, [pc, #248]	; (800121c <dcmotor_pwm_manual_control+0x1e0>)
 8001124:	881b      	ldrh	r3, [r3, #0]
 8001126:	330a      	adds	r3, #10
 8001128:	b29a      	uxth	r2, r3
 800112a:	4b3c      	ldr	r3, [pc, #240]	; (800121c <dcmotor_pwm_manual_control+0x1e0>)
 800112c:	801a      	strh	r2, [r3, #0]

		if (ChannelControlRegister_UP_Value > 100) // ChannelControlRegister_UP_Value의 쓰레시 홀드(최대치 상한): 듀디사이클 최대 상한치는 100%(풀 스피드)
 800112e:	4b3b      	ldr	r3, [pc, #236]	; (800121c <dcmotor_pwm_manual_control+0x1e0>)
 8001130:	881b      	ldrh	r3, [r3, #0]
 8001132:	2b64      	cmp	r3, #100	; 0x64
 8001134:	d902      	bls.n	800113c <dcmotor_pwm_manual_control+0x100>
		{
			ChannelControlRegister_UP_Value = 100;
 8001136:	4b39      	ldr	r3, [pc, #228]	; (800121c <dcmotor_pwm_manual_control+0x1e0>)
 8001138:	2264      	movs	r2, #100	; 0x64
 800113a:	801a      	strh	r2, [r3, #0]
		}

		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, ChannelControlRegister_UP_Value);
 800113c:	4b37      	ldr	r3, [pc, #220]	; (800121c <dcmotor_pwm_manual_control+0x1e0>)
 800113e:	881a      	ldrh	r2, [r3, #0]
 8001140:	4b35      	ldr	r3, [pc, #212]	; (8001218 <dcmotor_pwm_manual_control+0x1dc>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	635a      	str	r2, [r3, #52]	; 0x34

		dcmotor_ledbar_control(Get_Current_ChannelControlRegister_Value());
 8001146:	f000 fa39 	bl	80015bc <Get_Current_ChannelControlRegister_Value>
 800114a:	4603      	mov	r3, r0
 800114c:	4618      	mov	r0, r3
 800114e:	f000 fa09 	bl	8001564 <dcmotor_ledbar_control>
	}

	// BUTTON2: 듀티 사이클을 하락시켜 선풍기의 회전 속도를 감속한다.
	if (Get_Button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 8001152:	2202      	movs	r2, #2
 8001154:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001158:	482b      	ldr	r0, [pc, #172]	; (8001208 <dcmotor_pwm_manual_control+0x1cc>)
 800115a:	f7ff ff1d 	bl	8000f98 <Get_Button>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d122      	bne.n	80011aa <dcmotor_pwm_manual_control+0x16e>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); // LED1
 8001164:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001168:	482a      	ldr	r0, [pc, #168]	; (8001214 <dcmotor_pwm_manual_control+0x1d8>)
 800116a:	f003 f850 	bl	800420e <HAL_GPIO_TogglePin>

		ChannelControlRegister_DOWN_Value = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_1);
 800116e:	4b2a      	ldr	r3, [pc, #168]	; (8001218 <dcmotor_pwm_manual_control+0x1dc>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001174:	b29a      	uxth	r2, r3
 8001176:	4b2a      	ldr	r3, [pc, #168]	; (8001220 <dcmotor_pwm_manual_control+0x1e4>)
 8001178:	801a      	strh	r2, [r3, #0]
		ChannelControlRegister_DOWN_Value -= 10;
 800117a:	4b29      	ldr	r3, [pc, #164]	; (8001220 <dcmotor_pwm_manual_control+0x1e4>)
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	3b0a      	subs	r3, #10
 8001180:	b29a      	uxth	r2, r3
 8001182:	4b27      	ldr	r3, [pc, #156]	; (8001220 <dcmotor_pwm_manual_control+0x1e4>)
 8001184:	801a      	strh	r2, [r3, #0]

		if (ChannelControlRegister_DOWN_Value < 60) // ChannelControlRegister_DOWN_Value의 쓰레시 홀드(최대치 하한): 듀디사이클 펄스 최대 하한치는 60%
 8001186:	4b26      	ldr	r3, [pc, #152]	; (8001220 <dcmotor_pwm_manual_control+0x1e4>)
 8001188:	881b      	ldrh	r3, [r3, #0]
 800118a:	2b3b      	cmp	r3, #59	; 0x3b
 800118c:	d802      	bhi.n	8001194 <dcmotor_pwm_manual_control+0x158>
		{
			ChannelControlRegister_DOWN_Value = 60;
 800118e:	4b24      	ldr	r3, [pc, #144]	; (8001220 <dcmotor_pwm_manual_control+0x1e4>)
 8001190:	223c      	movs	r2, #60	; 0x3c
 8001192:	801a      	strh	r2, [r3, #0]
		}

		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, ChannelControlRegister_DOWN_Value);
 8001194:	4b22      	ldr	r3, [pc, #136]	; (8001220 <dcmotor_pwm_manual_control+0x1e4>)
 8001196:	881a      	ldrh	r2, [r3, #0]
 8001198:	4b1f      	ldr	r3, [pc, #124]	; (8001218 <dcmotor_pwm_manual_control+0x1dc>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	635a      	str	r2, [r3, #52]	; 0x34

		dcmotor_ledbar_control(Get_Current_ChannelControlRegister_Value());
 800119e:	f000 fa0d 	bl	80015bc <Get_Current_ChannelControlRegister_Value>
 80011a2:	4603      	mov	r3, r0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f000 f9dd 	bl	8001564 <dcmotor_ledbar_control>
	}

	// BUTTON3: 모터 드라이버에 입력신호를 바꿔서 dcmotor의 회전 방향을 정회전/역회전 두가지 상태 중 하나로 조작한다.
	if (Get_Button(BUTTON3_GPIO_Port, BUTTON3_Pin, 3) == BUTTON_PRESS)
 80011aa:	2203      	movs	r2, #3
 80011ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011b0:	4815      	ldr	r0, [pc, #84]	; (8001208 <dcmotor_pwm_manual_control+0x1cc>)
 80011b2:	f7ff fef1 	bl	8000f98 <Get_Button>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d114      	bne.n	80011e6 <dcmotor_pwm_manual_control+0x1aa>
	{

		// dcmotor의 정회전/역회전 상태를 의미하는 플래그 변수를 활용하여
		// 플래그 변수가 정회전 상태를 가리키게 되면, 모터 드라이버에 해당하는 값을 입력해주고, 정회전 상태에 해당하는 상태로 led깜빡이가 깜빡거릴 수 있도록 플래그변수를 매개변수로 담아 관련 함수를 한번 호출해준다,
		// 플래그 변수가 역회전 상태를 가리키게 되면, 모터 드라이버에 해당하는 값을 입력해주고, 역회전 상태에 해당하는 상태로 led깜빡이가 깜빡거릴 수 있도록 플래그변수를 매개변수로 담아 관련 함수를 한번 호출해준다
		if (!dcmotor_forward_backward_flag)
 80011bc:	4b14      	ldr	r3, [pc, #80]	; (8001210 <dcmotor_pwm_manual_control+0x1d4>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d108      	bne.n	80011d6 <dcmotor_pwm_manual_control+0x19a>
		{
			dcmotor_forward_backward_flag = 1;
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <dcmotor_pwm_manual_control+0x1d4>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	701a      	strb	r2, [r3, #0]
			FAN_ROTATE_DERECTION_LED_control(dcmotor_forward_backward_flag);
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <dcmotor_pwm_manual_control+0x1d4>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 f99e 	bl	8001510 <FAN_ROTATE_DERECTION_LED_control>
 80011d4:	e007      	b.n	80011e6 <dcmotor_pwm_manual_control+0x1aa>
		}
		else
		{
			dcmotor_forward_backward_flag = 0;
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <dcmotor_pwm_manual_control+0x1d4>)
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]
			FAN_ROTATE_DERECTION_LED_control(dcmotor_forward_backward_flag);
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <dcmotor_pwm_manual_control+0x1d4>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f000 f995 	bl	8001510 <FAN_ROTATE_DERECTION_LED_control>
		}

	}

	// BUTTON4: dcmotor의 매뉴얼/오토 상태를 의미하는 플래그 변수를 활용하여, dcmotor의 상태를 오토모드로 변경한다.
	if (Get_Button(BUTTON4_GPIO_Port, BUTTON4_Pin, 4) == BUTTON_PRESS)
 80011e6:	2204      	movs	r2, #4
 80011e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ec:	4809      	ldr	r0, [pc, #36]	; (8001214 <dcmotor_pwm_manual_control+0x1d8>)
 80011ee:	f7ff fed3 	bl	8000f98 <Get_Button>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d102      	bne.n	80011fe <dcmotor_pwm_manual_control+0x1c2>
	{
		dcmotor_manual_auto_flag = 1;
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <dcmotor_pwm_manual_control+0x1e8>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	701a      	strb	r2, [r3, #0]
	}
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	200000a4 	.word	0x200000a4
 8001208:	40021000 	.word	0x40021000
 800120c:	40020c00 	.word	0x40020c00
 8001210:	200000a5 	.word	0x200000a5
 8001214:	40020400 	.word	0x40020400
 8001218:	200003b8 	.word	0x200003b8
 800121c:	200000a8 	.word	0x200000a8
 8001220:	200000aa 	.word	0x200000aa
 8001224:	200000a6 	.word	0x200000a6

08001228 <dcmotor_pwm_auto_control>:

/*
 * desc: 오토 모드 상태에서 dcmotor의 동작방식을 결정한다.
 */
void dcmotor_pwm_auto_control(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	dcmotor_lcd_display();
 800122c:	f000 f8ea 	bl	8001404 <dcmotor_lcd_display>

	// 오토 모드에서 남은 시간은 기본 30초로 셋팅되어 있으며, 1초마다 1씩 감소한다.
	if (TIM10_10ms_fan_auto_mode >= 100)
 8001230:	4b59      	ldr	r3, [pc, #356]	; (8001398 <dcmotor_pwm_auto_control+0x170>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b63      	cmp	r3, #99	; 0x63
 8001236:	dd26      	ble.n	8001286 <dcmotor_pwm_auto_control+0x5e>
	{
		TIM10_10ms_fan_auto_mode = 0;
 8001238:	4b57      	ldr	r3, [pc, #348]	; (8001398 <dcmotor_pwm_auto_control+0x170>)
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
		auto_mode_remain_time--;
 800123e:	4b57      	ldr	r3, [pc, #348]	; (800139c <dcmotor_pwm_auto_control+0x174>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	3b01      	subs	r3, #1
 8001244:	4a55      	ldr	r2, [pc, #340]	; (800139c <dcmotor_pwm_auto_control+0x174>)
 8001246:	6013      	str	r3, [r2, #0]

		// 오토모드에서 시간이 남아있으면, 선풍기는 정방향으로만 회전하도록 한다.
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8001248:	2201      	movs	r2, #1
 800124a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800124e:	4854      	ldr	r0, [pc, #336]	; (80013a0 <dcmotor_pwm_auto_control+0x178>)
 8001250:	f002 ffc4 	bl	80041dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 8001254:	2200      	movs	r2, #0
 8001256:	f44f 7100 	mov.w	r1, #512	; 0x200
 800125a:	4851      	ldr	r0, [pc, #324]	; (80013a0 <dcmotor_pwm_auto_control+0x178>)
 800125c:	f002 ffbe 	bl	80041dc <HAL_GPIO_WritePin>

		if (auto_mode_remain_time < 0)
 8001260:	4b4e      	ldr	r3, [pc, #312]	; (800139c <dcmotor_pwm_auto_control+0x174>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	da0e      	bge.n	8001286 <dcmotor_pwm_auto_control+0x5e>
		{
			// 오토모드에서 남은 시간이 0초가 되면, 모터 드라이버에 대한 입력 값을 1 1로 주어서 break상태로 만든다.
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8001268:	2201      	movs	r2, #1
 800126a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800126e:	484c      	ldr	r0, [pc, #304]	; (80013a0 <dcmotor_pwm_auto_control+0x178>)
 8001270:	f002 ffb4 	bl	80041dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 8001274:	2201      	movs	r2, #1
 8001276:	f44f 7100 	mov.w	r1, #512	; 0x200
 800127a:	4849      	ldr	r0, [pc, #292]	; (80013a0 <dcmotor_pwm_auto_control+0x178>)
 800127c:	f002 ffae 	bl	80041dc <HAL_GPIO_WritePin>

			auto_mode_remain_time = 0; // 남은시간이 마이너스로 떨어지는거 방지
 8001280:	4b46      	ldr	r3, [pc, #280]	; (800139c <dcmotor_pwm_auto_control+0x174>)
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
		}
	}

	// BUTTON0: 남은시간이 10초 증가한다.
	if (Get_Button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 8001286:	2200      	movs	r2, #0
 8001288:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800128c:	4844      	ldr	r0, [pc, #272]	; (80013a0 <dcmotor_pwm_auto_control+0x178>)
 800128e:	f7ff fe83 	bl	8000f98 <Get_Button>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d104      	bne.n	80012a2 <dcmotor_pwm_auto_control+0x7a>
	{
		auto_mode_remain_time += 10;
 8001298:	4b40      	ldr	r3, [pc, #256]	; (800139c <dcmotor_pwm_auto_control+0x174>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	330a      	adds	r3, #10
 800129e:	4a3f      	ldr	r2, [pc, #252]	; (800139c <dcmotor_pwm_auto_control+0x174>)
 80012a0:	6013      	str	r3, [r2, #0]
	}

	// BUTTON1: 남은시간이 10초 감소한다.
	if (Get_Button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 80012a2:	2201      	movs	r2, #1
 80012a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012a8:	483d      	ldr	r0, [pc, #244]	; (80013a0 <dcmotor_pwm_auto_control+0x178>)
 80012aa:	f7ff fe75 	bl	8000f98 <Get_Button>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d10b      	bne.n	80012cc <dcmotor_pwm_auto_control+0xa4>
	{
		auto_mode_remain_time -= 10;
 80012b4:	4b39      	ldr	r3, [pc, #228]	; (800139c <dcmotor_pwm_auto_control+0x174>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	3b0a      	subs	r3, #10
 80012ba:	4a38      	ldr	r2, [pc, #224]	; (800139c <dcmotor_pwm_auto_control+0x174>)
 80012bc:	6013      	str	r3, [r2, #0]
		if (auto_mode_remain_time < 0) auto_mode_remain_time = 0; // 남은시간이 마이너스로 떨어지는거 방지
 80012be:	4b37      	ldr	r3, [pc, #220]	; (800139c <dcmotor_pwm_auto_control+0x174>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	da02      	bge.n	80012cc <dcmotor_pwm_auto_control+0xa4>
 80012c6:	4b35      	ldr	r3, [pc, #212]	; (800139c <dcmotor_pwm_auto_control+0x174>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
	}

	// BUTTON2: 듀티 사이클을 상승시켜 선풍기의 회전 속도를 가속한다.
	if (Get_Button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 80012cc:	2202      	movs	r2, #2
 80012ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012d2:	4833      	ldr	r0, [pc, #204]	; (80013a0 <dcmotor_pwm_auto_control+0x178>)
 80012d4:	f7ff fe60 	bl	8000f98 <Get_Button>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d121      	bne.n	8001322 <dcmotor_pwm_auto_control+0xfa>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7); // 작동 로직과 관계 없는 함수 실행 확인용 테스트 코드.
 80012de:	2180      	movs	r1, #128	; 0x80
 80012e0:	4830      	ldr	r0, [pc, #192]	; (80013a4 <dcmotor_pwm_auto_control+0x17c>)
 80012e2:	f002 ff94 	bl	800420e <HAL_GPIO_TogglePin>

		ChannelControlRegister_UP_Value = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_1);
 80012e6:	4b30      	ldr	r3, [pc, #192]	; (80013a8 <dcmotor_pwm_auto_control+0x180>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	4b2f      	ldr	r3, [pc, #188]	; (80013ac <dcmotor_pwm_auto_control+0x184>)
 80012f0:	801a      	strh	r2, [r3, #0]
		ChannelControlRegister_UP_Value += 10;
 80012f2:	4b2e      	ldr	r3, [pc, #184]	; (80013ac <dcmotor_pwm_auto_control+0x184>)
 80012f4:	881b      	ldrh	r3, [r3, #0]
 80012f6:	330a      	adds	r3, #10
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	4b2c      	ldr	r3, [pc, #176]	; (80013ac <dcmotor_pwm_auto_control+0x184>)
 80012fc:	801a      	strh	r2, [r3, #0]

		if (ChannelControlRegister_UP_Value > 100) // ChannelControlRegister_UP_Value의 쓰레시 홀드(최대 상한치): 듀디사이클 최대 상한치는 100%(풀스피트)
 80012fe:	4b2b      	ldr	r3, [pc, #172]	; (80013ac <dcmotor_pwm_auto_control+0x184>)
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	2b64      	cmp	r3, #100	; 0x64
 8001304:	d902      	bls.n	800130c <dcmotor_pwm_auto_control+0xe4>
		{
			ChannelControlRegister_UP_Value = 99;
 8001306:	4b29      	ldr	r3, [pc, #164]	; (80013ac <dcmotor_pwm_auto_control+0x184>)
 8001308:	2263      	movs	r2, #99	; 0x63
 800130a:	801a      	strh	r2, [r3, #0]
		}

		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, ChannelControlRegister_UP_Value);
 800130c:	4b27      	ldr	r3, [pc, #156]	; (80013ac <dcmotor_pwm_auto_control+0x184>)
 800130e:	881a      	ldrh	r2, [r3, #0]
 8001310:	4b25      	ldr	r3, [pc, #148]	; (80013a8 <dcmotor_pwm_auto_control+0x180>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	635a      	str	r2, [r3, #52]	; 0x34

		dcmotor_ledbar_control(Get_Current_ChannelControlRegister_Value());
 8001316:	f000 f951 	bl	80015bc <Get_Current_ChannelControlRegister_Value>
 800131a:	4603      	mov	r3, r0
 800131c:	4618      	mov	r0, r3
 800131e:	f000 f921 	bl	8001564 <dcmotor_ledbar_control>
	}

	// BUTTON2: 듀티 사이클을 하락시켜 선풍기의 회전 속도를 감속한다.
	if (Get_Button(BUTTON3_GPIO_Port, BUTTON3_Pin, 3) == BUTTON_PRESS)
 8001322:	2203      	movs	r2, #3
 8001324:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001328:	481d      	ldr	r0, [pc, #116]	; (80013a0 <dcmotor_pwm_auto_control+0x178>)
 800132a:	f7ff fe35 	bl	8000f98 <Get_Button>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d122      	bne.n	800137a <dcmotor_pwm_auto_control+0x152>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); // LED1
 8001334:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001338:	481a      	ldr	r0, [pc, #104]	; (80013a4 <dcmotor_pwm_auto_control+0x17c>)
 800133a:	f002 ff68 	bl	800420e <HAL_GPIO_TogglePin>

		ChannelControlRegister_DOWN_Value = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_1);
 800133e:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <dcmotor_pwm_auto_control+0x180>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001344:	b29a      	uxth	r2, r3
 8001346:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <dcmotor_pwm_auto_control+0x188>)
 8001348:	801a      	strh	r2, [r3, #0]
		ChannelControlRegister_DOWN_Value -= 10;
 800134a:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <dcmotor_pwm_auto_control+0x188>)
 800134c:	881b      	ldrh	r3, [r3, #0]
 800134e:	3b0a      	subs	r3, #10
 8001350:	b29a      	uxth	r2, r3
 8001352:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <dcmotor_pwm_auto_control+0x188>)
 8001354:	801a      	strh	r2, [r3, #0]

		if (ChannelControlRegister_DOWN_Value < 60) // ChannelControlRegister_DOWN_Value의 쓰레시 홀드(최대 하한치): 듀디사이클 펄스 최대 하한치는 60%
 8001356:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <dcmotor_pwm_auto_control+0x188>)
 8001358:	881b      	ldrh	r3, [r3, #0]
 800135a:	2b3b      	cmp	r3, #59	; 0x3b
 800135c:	d802      	bhi.n	8001364 <dcmotor_pwm_auto_control+0x13c>
		{
			ChannelControlRegister_DOWN_Value = 60;
 800135e:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <dcmotor_pwm_auto_control+0x188>)
 8001360:	223c      	movs	r2, #60	; 0x3c
 8001362:	801a      	strh	r2, [r3, #0]
		}

		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, ChannelControlRegister_DOWN_Value);
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <dcmotor_pwm_auto_control+0x188>)
 8001366:	881a      	ldrh	r2, [r3, #0]
 8001368:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <dcmotor_pwm_auto_control+0x180>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	635a      	str	r2, [r3, #52]	; 0x34

		dcmotor_ledbar_control(Get_Current_ChannelControlRegister_Value());
 800136e:	f000 f925 	bl	80015bc <Get_Current_ChannelControlRegister_Value>
 8001372:	4603      	mov	r3, r0
 8001374:	4618      	mov	r0, r3
 8001376:	f000 f8f5 	bl	8001564 <dcmotor_ledbar_control>
	}

	// BUTTON4: dcmotor의 매뉴얼/오토 상태를 의미하는 플래그 변수를 활용하여, dcmotor의 상태를 매뉴얼 모드로 변경한다.
	if (Get_Button(BUTTON4_GPIO_Port, BUTTON4_Pin, 4) == BUTTON_PRESS)
 800137a:	2204      	movs	r2, #4
 800137c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001380:	4808      	ldr	r0, [pc, #32]	; (80013a4 <dcmotor_pwm_auto_control+0x17c>)
 8001382:	f7ff fe09 	bl	8000f98 <Get_Button>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d102      	bne.n	8001392 <dcmotor_pwm_auto_control+0x16a>
	{
		dcmotor_manual_auto_flag = 0;
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <dcmotor_pwm_auto_control+0x18c>)
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]
	}
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000a38 	.word	0x20000a38
 800139c:	20000010 	.word	0x20000010
 80013a0:	40021000 	.word	0x40021000
 80013a4:	40020400 	.word	0x40020400
 80013a8:	200003b8 	.word	0x200003b8
 80013ac:	200000a8 	.word	0x200000a8
 80013b0:	200000aa 	.word	0x200000aa
 80013b4:	200000a6 	.word	0x200000a6

080013b8 <clear_dcmotor_lcd_display>:

/*
 * desc: dcmotor의 현재 상태를 출력해주는 I2C LCD 디스플레이에 쓰레기 값이 출력되는 것을 막기 위해 LCD의 모든 칸을 공백으로 초기화 해준다.(임시방편임. 원래는 i2c_lcd.c단에서 수정하는게 맞을듯?)
 */
void clear_dcmotor_lcd_display(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	; 0x28
 80013bc:	af00      	add	r7, sp, #0
	char lcd_buff_1[20], lcd_buff_2[20];

	sprintf(lcd_buff_1, "                    ");
 80013be:	f107 0314 	add.w	r3, r7, #20
 80013c2:	490f      	ldr	r1, [pc, #60]	; (8001400 <clear_dcmotor_lcd_display+0x48>)
 80013c4:	4618      	mov	r0, r3
 80013c6:	f007 fab7 	bl	8008938 <siprintf>
	move_cursor(0, 0);
 80013ca:	2100      	movs	r1, #0
 80013cc:	2000      	movs	r0, #0
 80013ce:	f000 f999 	bl	8001704 <move_cursor>
	lcd_string(lcd_buff_1);
 80013d2:	f107 0314 	add.w	r3, r7, #20
 80013d6:	4618      	mov	r0, r3
 80013d8:	f000 f97f 	bl	80016da <lcd_string>

	sprintf(lcd_buff_2, "                    ");
 80013dc:	463b      	mov	r3, r7
 80013de:	4908      	ldr	r1, [pc, #32]	; (8001400 <clear_dcmotor_lcd_display+0x48>)
 80013e0:	4618      	mov	r0, r3
 80013e2:	f007 faa9 	bl	8008938 <siprintf>
	move_cursor(1, 0);
 80013e6:	2100      	movs	r1, #0
 80013e8:	2001      	movs	r0, #1
 80013ea:	f000 f98b 	bl	8001704 <move_cursor>
	lcd_string(lcd_buff_2);
 80013ee:	463b      	mov	r3, r7
 80013f0:	4618      	mov	r0, r3
 80013f2:	f000 f972 	bl	80016da <lcd_string>
}
 80013f6:	bf00      	nop
 80013f8:	3728      	adds	r7, #40	; 0x28
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	08009d5c 	.word	0x08009d5c

08001404 <dcmotor_lcd_display>:

/*
 * desc: dcmotor의 현재 상태에 맞는 정보를 I2C_LCD display에 출력한다.
 */
void dcmotor_lcd_display(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08c      	sub	sp, #48	; 0x30
 8001408:	af00      	add	r7, sp, #0
	int manual_mode_curr_duty_cycle;
	int auto_mode_remain_time_lv;
	char lcd_buff_1[20], lcd_buff_2[20];

	if (!dcmotor_manual_auto_flag) // 매뉴얼 모드가 실행 중인 경우
 800140a:	4b38      	ldr	r3, [pc, #224]	; (80014ec <dcmotor_lcd_display+0xe8>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d135      	bne.n	800147e <dcmotor_lcd_display+0x7a>
	{
		manual_mode_curr_duty_cycle = Get_Current_ChannelControlRegister_Value();
 8001412:	f000 f8d3 	bl	80015bc <Get_Current_ChannelControlRegister_Value>
 8001416:	4603      	mov	r3, r0
 8001418:	62bb      	str	r3, [r7, #40]	; 0x28

		if (!dcmotor_start_stop_flag)
 800141a:	4b35      	ldr	r3, [pc, #212]	; (80014f0 <dcmotor_lcd_display+0xec>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d10f      	bne.n	8001442 <dcmotor_lcd_display+0x3e>
		{
			sprintf(lcd_buff_1, "Manual Mode stop!");
 8001422:	f107 0314 	add.w	r3, r7, #20
 8001426:	4933      	ldr	r1, [pc, #204]	; (80014f4 <dcmotor_lcd_display+0xf0>)
 8001428:	4618      	mov	r0, r3
 800142a:	f007 fa85 	bl	8008938 <siprintf>
			move_cursor(0, 0);
 800142e:	2100      	movs	r1, #0
 8001430:	2000      	movs	r0, #0
 8001432:	f000 f967 	bl	8001704 <move_cursor>
			lcd_string(lcd_buff_1);
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	4618      	mov	r0, r3
 800143c:	f000 f94d 	bl	80016da <lcd_string>
 8001440:	e00e      	b.n	8001460 <dcmotor_lcd_display+0x5c>
		}
		else
		{
			sprintf(lcd_buff_1, "Manual Mode run!");
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	492c      	ldr	r1, [pc, #176]	; (80014f8 <dcmotor_lcd_display+0xf4>)
 8001448:	4618      	mov	r0, r3
 800144a:	f007 fa75 	bl	8008938 <siprintf>
			move_cursor(0, 0);
 800144e:	2100      	movs	r1, #0
 8001450:	2000      	movs	r0, #0
 8001452:	f000 f957 	bl	8001704 <move_cursor>
			lcd_string(lcd_buff_1);
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	4618      	mov	r0, r3
 800145c:	f000 f93d 	bl	80016da <lcd_string>
		}


		sprintf(lcd_buff_2, "duty cycle: %d", manual_mode_curr_duty_cycle);
 8001460:	463b      	mov	r3, r7
 8001462:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001464:	4925      	ldr	r1, [pc, #148]	; (80014fc <dcmotor_lcd_display+0xf8>)
 8001466:	4618      	mov	r0, r3
 8001468:	f007 fa66 	bl	8008938 <siprintf>
		move_cursor(1, 0);
 800146c:	2100      	movs	r1, #0
 800146e:	2001      	movs	r0, #1
 8001470:	f000 f948 	bl	8001704 <move_cursor>
		lcd_string(lcd_buff_2);
 8001474:	463b      	mov	r3, r7
 8001476:	4618      	mov	r0, r3
 8001478:	f000 f92f 	bl	80016da <lcd_string>

		sprintf(lcd_buff_2, "remain_time: %ds", auto_mode_remain_time_lv);
		move_cursor(1,0);
		lcd_string(lcd_buff_2);
	}
}
 800147c:	e032      	b.n	80014e4 <dcmotor_lcd_display+0xe0>
		auto_mode_remain_time_lv = auto_mode_remain_time; // 오토모드 남은시간 전역변수를 지역변수(lv: local variable)로 값 대피
 800147e:	4b20      	ldr	r3, [pc, #128]	; (8001500 <dcmotor_lcd_display+0xfc>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (auto_mode_remain_time_lv > 0)
 8001484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001486:	2b00      	cmp	r3, #0
 8001488:	dd0f      	ble.n	80014aa <dcmotor_lcd_display+0xa6>
			sprintf(lcd_buff_1, "Auto Mode run!");
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	491d      	ldr	r1, [pc, #116]	; (8001504 <dcmotor_lcd_display+0x100>)
 8001490:	4618      	mov	r0, r3
 8001492:	f007 fa51 	bl	8008938 <siprintf>
			move_cursor(0, 0);
 8001496:	2100      	movs	r1, #0
 8001498:	2000      	movs	r0, #0
 800149a:	f000 f933 	bl	8001704 <move_cursor>
			lcd_string(lcd_buff_1);
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 f919 	bl	80016da <lcd_string>
 80014a8:	e00e      	b.n	80014c8 <dcmotor_lcd_display+0xc4>
			sprintf(lcd_buff_1, "Auto Mode stop!");
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	4916      	ldr	r1, [pc, #88]	; (8001508 <dcmotor_lcd_display+0x104>)
 80014b0:	4618      	mov	r0, r3
 80014b2:	f007 fa41 	bl	8008938 <siprintf>
			move_cursor(0, 0);
 80014b6:	2100      	movs	r1, #0
 80014b8:	2000      	movs	r0, #0
 80014ba:	f000 f923 	bl	8001704 <move_cursor>
			lcd_string(lcd_buff_1);
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 f909 	bl	80016da <lcd_string>
		sprintf(lcd_buff_2, "remain_time: %ds", auto_mode_remain_time_lv);
 80014c8:	463b      	mov	r3, r7
 80014ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014cc:	490f      	ldr	r1, [pc, #60]	; (800150c <dcmotor_lcd_display+0x108>)
 80014ce:	4618      	mov	r0, r3
 80014d0:	f007 fa32 	bl	8008938 <siprintf>
		move_cursor(1,0);
 80014d4:	2100      	movs	r1, #0
 80014d6:	2001      	movs	r0, #1
 80014d8:	f000 f914 	bl	8001704 <move_cursor>
		lcd_string(lcd_buff_2);
 80014dc:	463b      	mov	r3, r7
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 f8fb 	bl	80016da <lcd_string>
}
 80014e4:	bf00      	nop
 80014e6:	3730      	adds	r7, #48	; 0x30
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	200000a6 	.word	0x200000a6
 80014f0:	200000a4 	.word	0x200000a4
 80014f4:	08009d74 	.word	0x08009d74
 80014f8:	08009d88 	.word	0x08009d88
 80014fc:	08009d9c 	.word	0x08009d9c
 8001500:	20000010 	.word	0x20000010
 8001504:	08009dac 	.word	0x08009dac
 8001508:	08009dbc 	.word	0x08009dbc
 800150c:	08009dcc 	.word	0x08009dcc

08001510 <FAN_ROTATE_DERECTION_LED_control>:
/*
 * desc: dcmotor의 정방향/역방향 상태에 따라, led의 점멸 간격이 달라지도록 한다.
 *       새로 부착한 led는 PE13번 포트에 GPIO_OUTPUT으로 연결하였으며, 유저 레이블을 FAN_ROTATE_DERECTION_LED로 명명했다.
 */
void FAN_ROTATE_DERECTION_LED_control(uint8_t forward_backwrd_dcmotor)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
	if (!forward_backwrd_dcmotor) // 역방향 회전 중이라면
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d10c      	bne.n	800153a <FAN_ROTATE_DERECTION_LED_control+0x2a>
	{
		if (TIM10_10ms_fan_rotate_direction_led >= 5) // 50ms마다 점멸
 8001520:	4b0e      	ldr	r3, [pc, #56]	; (800155c <FAN_ROTATE_DERECTION_LED_control+0x4c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b04      	cmp	r3, #4
 8001526:	dd14      	ble.n	8001552 <FAN_ROTATE_DERECTION_LED_control+0x42>
		{
			TIM10_10ms_fan_rotate_direction_led = 0;
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <FAN_ROTATE_DERECTION_LED_control+0x4c>)
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(FAN_ROTATE_DERECTION_LED_GPIO_Port, FAN_ROTATE_DERECTION_LED_Pin);
 800152e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001532:	480b      	ldr	r0, [pc, #44]	; (8001560 <FAN_ROTATE_DERECTION_LED_control+0x50>)
 8001534:	f002 fe6b 	bl	800420e <HAL_GPIO_TogglePin>
		{
			TIM10_10ms_fan_rotate_direction_led = 0;
			HAL_GPIO_TogglePin(FAN_ROTATE_DERECTION_LED_GPIO_Port, FAN_ROTATE_DERECTION_LED_Pin);
		}
	}
}
 8001538:	e00b      	b.n	8001552 <FAN_ROTATE_DERECTION_LED_control+0x42>
		if (TIM10_10ms_fan_rotate_direction_led >= 10) // 100ms마다 점멸
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <FAN_ROTATE_DERECTION_LED_control+0x4c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2b09      	cmp	r3, #9
 8001540:	dd07      	ble.n	8001552 <FAN_ROTATE_DERECTION_LED_control+0x42>
			TIM10_10ms_fan_rotate_direction_led = 0;
 8001542:	4b06      	ldr	r3, [pc, #24]	; (800155c <FAN_ROTATE_DERECTION_LED_control+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(FAN_ROTATE_DERECTION_LED_GPIO_Port, FAN_ROTATE_DERECTION_LED_Pin);
 8001548:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800154c:	4804      	ldr	r0, [pc, #16]	; (8001560 <FAN_ROTATE_DERECTION_LED_control+0x50>)
 800154e:	f002 fe5e 	bl	800420e <HAL_GPIO_TogglePin>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000a34 	.word	0x20000a34
 8001560:	40021000 	.word	0x40021000

08001564 <dcmotor_ledbar_control>:
 * desc: dcmotor에 인가 되고 있는 듀티 사이클의 크기에 따라, ledbar에 들어오는 불빛의 갯수를 결정한다.
 *       이 코드의 경우 dcmotor의 최저 듀티 사이클인 60% 상태에서도 최소 2칸의 불빛이 들어오도록 했으며,
 *       dcmotor의 최대 듀티 사이클인 100% 상태에서도 최대 7칸 까지만 불빛이 들어오도록 했다.
 */
void dcmotor_ledbar_control(uint16_t Current_ChannelControlRegister_Value)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	80fb      	strh	r3, [r7, #6]
	int ledbar_level;

	ledbar_level = (Current_ChannelControlRegister_Value - 44) / 8;
 800156e:	88fb      	ldrh	r3, [r7, #6]
 8001570:	3b2c      	subs	r3, #44	; 0x2c
 8001572:	2b00      	cmp	r3, #0
 8001574:	da00      	bge.n	8001578 <dcmotor_ledbar_control+0x14>
 8001576:	3307      	adds	r3, #7
 8001578:	10db      	asrs	r3, r3, #3
 800157a:	60bb      	str	r3, [r7, #8]

	HAL_GPIO_WritePin(GPIOD, 0xff, 0);
 800157c:	2200      	movs	r2, #0
 800157e:	21ff      	movs	r1, #255	; 0xff
 8001580:	480d      	ldr	r0, [pc, #52]	; (80015b8 <dcmotor_ledbar_control+0x54>)
 8001582:	f002 fe2b 	bl	80041dc <HAL_GPIO_WritePin>

	for (int i = 0; i < ledbar_level; i++)
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	e00c      	b.n	80015a6 <dcmotor_ledbar_control+0x42>
	{
		HAL_GPIO_WritePin(GPIOD, 0x00|(0x80 >> i), 1);
 800158c:	2280      	movs	r2, #128	; 0x80
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	fa42 f303 	asr.w	r3, r2, r3
 8001594:	b29b      	uxth	r3, r3
 8001596:	2201      	movs	r2, #1
 8001598:	4619      	mov	r1, r3
 800159a:	4807      	ldr	r0, [pc, #28]	; (80015b8 <dcmotor_ledbar_control+0x54>)
 800159c:	f002 fe1e 	bl	80041dc <HAL_GPIO_WritePin>
	for (int i = 0; i < ledbar_level; i++)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	3301      	adds	r3, #1
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	dbee      	blt.n	800158c <dcmotor_ledbar_control+0x28>
	}
}
 80015ae:	bf00      	nop
 80015b0:	bf00      	nop
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40020c00 	.word	0x40020c00

080015bc <Get_Current_ChannelControlRegister_Value>:
 * desc: __HAL_TIM_GET_COMPARE(__HANDLE__, __CHANNEL__) 함수가 리턴하는 값의 자료형은 16비트일 수도 있고 32비트 일수도 있다.
 *       dcmotor에서 쓰고 있는 TIM4 타이머는 16비트 타이머이기 때문에, Channel Control Register가 16비트라는 뜻이고, 위 함수는 16비트 값을 리턴한다.
 *       (그냥 위에 함수 그대로 써도 되는데, 함수이름도 안와닿고 16비트 값을 받고 있다는 것을 명시하고 싶어서 그냥 만들어봤음)
 */
uint16_t Get_Current_ChannelControlRegister_Value(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_1);
 80015c0:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <Get_Current_ChannelControlRegister_Value+0x18>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015c6:	b29b      	uxth	r3, r3
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	200003b8 	.word	0x200003b8

080015d8 <lcd_command>:
#endif

}

void lcd_command(uint8_t command)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af02      	add	r7, sp, #8
 80015de:	4603      	mov	r3, r0
 80015e0:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = command & 0xf0;
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	f023 030f 	bic.w	r3, r3, #15
 80015e8:	73fb      	strb	r3, [r7, #15]
	low_nibble = (command<<4) & 0xf0;
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	011b      	lsls	r3, r3, #4
 80015ee:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	f043 030c 	orr.w	r3, r3, #12
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
 80015fc:	f043 0308 	orr.w	r3, r3, #8
 8001600:	b2db      	uxtb	r3, r3
 8001602:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 8001604:	7bbb      	ldrb	r3, [r7, #14]
 8001606:	f043 030c 	orr.w	r3, r3, #12
 800160a:	b2db      	uxtb	r3, r3
 800160c:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 800160e:	7bbb      	ldrb	r3, [r7, #14]
 8001610:	f043 0308 	orr.w	r3, r3, #8
 8001614:	b2db      	uxtb	r3, r3
 8001616:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 8001618:	bf00      	nop
 800161a:	f107 0208 	add.w	r2, r7, #8
 800161e:	2364      	movs	r3, #100	; 0x64
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	2304      	movs	r3, #4
 8001624:	214e      	movs	r1, #78	; 0x4e
 8001626:	4805      	ldr	r0, [pc, #20]	; (800163c <lcd_command+0x64>)
 8001628:	f002 ff50 	bl	80044cc <HAL_I2C_Master_Transmit>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f3      	bne.n	800161a <lcd_command+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 8001632:	bf00      	nop
}
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	200002d4 	.word	0x200002d4

08001640 <lcd_data>:

// 1 byte write... 딱 한개의 캐릭터만 찍는 것이다.
void lcd_data(uint8_t data)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af02      	add	r7, sp, #8
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = data & 0xf0;
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	f023 030f 	bic.w	r3, r3, #15
 8001650:	73fb      	strb	r3, [r7, #15]
	low_nibble = (data<<4) & 0xf0;
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	011b      	lsls	r3, r3, #4
 8001656:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8001658:	7bfb      	ldrb	r3, [r7, #15]
 800165a:	f043 030d 	orr.w	r3, r3, #13
 800165e:	b2db      	uxtb	r3, r3
 8001660:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 8001662:	7bfb      	ldrb	r3, [r7, #15]
 8001664:	f043 0309 	orr.w	r3, r3, #9
 8001668:	b2db      	uxtb	r3, r3
 800166a:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 800166c:	7bbb      	ldrb	r3, [r7, #14]
 800166e:	f043 030d 	orr.w	r3, r3, #13
 8001672:	b2db      	uxtb	r3, r3
 8001674:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 8001676:	7bbb      	ldrb	r3, [r7, #14]
 8001678:	f043 0309 	orr.w	r3, r3, #9
 800167c:	b2db      	uxtb	r3, r3
 800167e:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 8001680:	bf00      	nop
 8001682:	f107 0208 	add.w	r2, r7, #8
 8001686:	2364      	movs	r3, #100	; 0x64
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	2304      	movs	r3, #4
 800168c:	214e      	movs	r1, #78	; 0x4e
 800168e:	4805      	ldr	r0, [pc, #20]	; (80016a4 <lcd_data+0x64>)
 8001690:	f002 ff1c 	bl	80044cc <HAL_I2C_Master_Transmit>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f3      	bne.n	8001682 <lcd_data+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 800169a:	bf00      	nop
}
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	200002d4 	.word	0x200002d4

080016a8 <i2c_lcd_init>:

// lcd 초기화
void i2c_lcd_init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0

	lcd_command(0x33);
 80016ac:	2033      	movs	r0, #51	; 0x33
 80016ae:	f7ff ff93 	bl	80015d8 <lcd_command>
	lcd_command(0x32);
 80016b2:	2032      	movs	r0, #50	; 0x32
 80016b4:	f7ff ff90 	bl	80015d8 <lcd_command>
	lcd_command(0x28);	//Function Set 4-bit mode
 80016b8:	2028      	movs	r0, #40	; 0x28
 80016ba:	f7ff ff8d 	bl	80015d8 <lcd_command>
	lcd_command(DISPLAY_ON);
 80016be:	200c      	movs	r0, #12
 80016c0:	f7ff ff8a 	bl	80015d8 <lcd_command>
	lcd_command(0x06);	//Entry mode set
 80016c4:	2006      	movs	r0, #6
 80016c6:	f7ff ff87 	bl	80015d8 <lcd_command>
	lcd_command(CLEAR_DISPLAY);
 80016ca:	2001      	movs	r0, #1
 80016cc:	f7ff ff84 	bl	80015d8 <lcd_command>
	HAL_Delay(2);
 80016d0:	2002      	movs	r0, #2
 80016d2:	f001 fecf 	bl	8003474 <HAL_Delay>
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}

080016da <lcd_string>:

// null을 만날때 까지 string을 LCD에 출력
void lcd_string(uint8_t *str)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
	while(*str) // 널문자를 만날 때까지
 80016e2:	e006      	b.n	80016f2 <lcd_string+0x18>
	{
		lcd_data(*str++);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	1c5a      	adds	r2, r3, #1
 80016e8:	607a      	str	r2, [r7, #4]
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ffa7 	bl	8001640 <lcd_data>
	while(*str) // 널문자를 만날 때까지
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1f4      	bne.n	80016e4 <lcd_string+0xa>
	}
}
 80016fa:	bf00      	nop
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <move_cursor>:

// 해당 줄,col으로 이동 하는 함수
void move_cursor(uint8_t row, uint8_t column)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	460a      	mov	r2, r1
 800170e:	71fb      	strb	r3, [r7, #7]
 8001710:	4613      	mov	r3, r2
 8001712:	71bb      	strb	r3, [r7, #6]
	lcd_command(0x80 | row<<6 | column);
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	019b      	lsls	r3, r3, #6
 8001718:	b2da      	uxtb	r2, r3
 800171a:	79bb      	ldrb	r3, [r7, #6]
 800171c:	4313      	orrs	r3, r2
 800171e:	b2db      	uxtb	r3, r3
 8001720:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001724:	b2db      	uxtb	r3, r3
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff ff56 	bl	80015d8 <lcd_command>
	return;
 800172c:	bf00      	nop
}
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <led_all_on>:

	fp[func_index]();
}

void led_all_on(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|
//			GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, 1);
	HAL_GPIO_WritePin(GPIOD, 0xff, 1);
 8001738:	2201      	movs	r2, #1
 800173a:	21ff      	movs	r1, #255	; 0xff
 800173c:	4802      	ldr	r0, [pc, #8]	; (8001748 <led_all_on+0x14>)
 800173e:	f002 fd4d 	bl	80041dc <HAL_GPIO_WritePin>
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40020c00 	.word	0x40020c00

0800174c <led_all_off>:

void led_all_off(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|
//				GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, 0);
	HAL_GPIO_WritePin(GPIOD, 0xff, 0);
 8001750:	2200      	movs	r2, #0
 8001752:	21ff      	movs	r1, #255	; 0xff
 8001754:	4802      	ldr	r0, [pc, #8]	; (8001760 <led_all_off+0x14>)
 8001756:	f002 fd41 	bl	80041dc <HAL_GPIO_WritePin>
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40020c00 	.word	0x40020c00

08001764 <led_on_up>:

void led_on_up(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
	//	static int i = 0;
	int i = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	607b      	str	r3, [r7, #4]
	t1ms_counter = 0;
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <led_on_up+0x50>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]

	led_all_off();
 8001774:	f7ff ffea 	bl	800174c <led_all_off>

	while(i < 8)
 8001778:	e014      	b.n	80017a4 <led_on_up+0x40>
	{
		if (t1ms_counter >= 200)
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <led_on_up+0x50>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2bc7      	cmp	r3, #199	; 0xc7
 8001780:	dd10      	ble.n	80017a4 <led_on_up+0x40>
		{
			t1ms_counter = 0;
 8001782:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <led_on_up+0x50>)
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
			led_all_off();
 8001788:	f7ff ffe0 	bl	800174c <led_all_off>
			HAL_GPIO_WritePin(GPIOD, 0x01 << i++, 1);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	607a      	str	r2, [r7, #4]
 8001792:	2201      	movs	r2, #1
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	b29b      	uxth	r3, r3
 800179a:	2201      	movs	r2, #1
 800179c:	4619      	mov	r1, r3
 800179e:	4806      	ldr	r0, [pc, #24]	; (80017b8 <led_on_up+0x54>)
 80017a0:	f002 fd1c 	bl	80041dc <HAL_GPIO_WritePin>
	while(i < 8)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b07      	cmp	r3, #7
 80017a8:	dde7      	ble.n	800177a <led_on_up+0x16>
		}
	}
}
 80017aa:	bf00      	nop
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000a28 	.word	0x20000a28
 80017b8:	40020c00 	.word	0x40020c00

080017bc <led_on_down>:

void led_on_down(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
	int i = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	607b      	str	r3, [r7, #4]
	t1ms_counter = 0;
 80017c6:	4b11      	ldr	r3, [pc, #68]	; (800180c <led_on_down+0x50>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]

	led_all_off();
 80017cc:	f7ff ffbe 	bl	800174c <led_all_off>

	while(i < 8)
 80017d0:	e014      	b.n	80017fc <led_on_down+0x40>
	{
		if (t1ms_counter >= 200)
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <led_on_down+0x50>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2bc7      	cmp	r3, #199	; 0xc7
 80017d8:	dd10      	ble.n	80017fc <led_on_down+0x40>
		{
			t1ms_counter = 0;
 80017da:	4b0c      	ldr	r3, [pc, #48]	; (800180c <led_on_down+0x50>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
			led_all_off();
 80017e0:	f7ff ffb4 	bl	800174c <led_all_off>
			HAL_GPIO_WritePin(GPIOD, 0x80 >> i++, 1);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	607a      	str	r2, [r7, #4]
 80017ea:	2280      	movs	r2, #128	; 0x80
 80017ec:	fa42 f303 	asr.w	r3, r2, r3
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	2201      	movs	r2, #1
 80017f4:	4619      	mov	r1, r3
 80017f6:	4806      	ldr	r0, [pc, #24]	; (8001810 <led_on_down+0x54>)
 80017f8:	f002 fcf0 	bl	80041dc <HAL_GPIO_WritePin>
	while(i < 8)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b07      	cmp	r3, #7
 8001800:	dde7      	ble.n	80017d2 <led_on_down+0x16>
		}
	}
}
 8001802:	bf00      	nop
 8001804:	bf00      	nop
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000a28 	.word	0x20000a28
 8001810:	40020c00 	.word	0x40020c00

08001814 <led_keepon_up>:

void led_keepon_up(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
	int i = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]
	t1ms_counter = 0;
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <led_keepon_up+0x4c>)
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]

	led_all_off();
 8001824:	f7ff ff92 	bl	800174c <led_all_off>

	while (i < 8)
 8001828:	e012      	b.n	8001850 <led_keepon_up+0x3c>
	{
		if (t1ms_counter >= 200)
 800182a:	4b0d      	ldr	r3, [pc, #52]	; (8001860 <led_keepon_up+0x4c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2bc7      	cmp	r3, #199	; 0xc7
 8001830:	dd0e      	ble.n	8001850 <led_keepon_up+0x3c>
		{
			t1ms_counter = 0;
 8001832:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <led_keepon_up+0x4c>)
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, 0x01 << i++, 1);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	1c5a      	adds	r2, r3, #1
 800183c:	607a      	str	r2, [r7, #4]
 800183e:	2201      	movs	r2, #1
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	b29b      	uxth	r3, r3
 8001846:	2201      	movs	r2, #1
 8001848:	4619      	mov	r1, r3
 800184a:	4806      	ldr	r0, [pc, #24]	; (8001864 <led_keepon_up+0x50>)
 800184c:	f002 fcc6 	bl	80041dc <HAL_GPIO_WritePin>
	while (i < 8)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b07      	cmp	r3, #7
 8001854:	dde9      	ble.n	800182a <led_keepon_up+0x16>
		}
	}
}
 8001856:	bf00      	nop
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000a28 	.word	0x20000a28
 8001864:	40020c00 	.word	0x40020c00

08001868 <led_keepon_down>:

void led_keepon_down(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
	int i = 0;
 800186e:	2300      	movs	r3, #0
 8001870:	607b      	str	r3, [r7, #4]
	t1ms_counter = 0;
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <led_keepon_down+0x4c>)
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]

	led_all_off();
 8001878:	f7ff ff68 	bl	800174c <led_all_off>

	while (i < 8)
 800187c:	e012      	b.n	80018a4 <led_keepon_down+0x3c>
	{
		if (t1ms_counter >= 200)
 800187e:	4b0d      	ldr	r3, [pc, #52]	; (80018b4 <led_keepon_down+0x4c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2bc7      	cmp	r3, #199	; 0xc7
 8001884:	dd0e      	ble.n	80018a4 <led_keepon_down+0x3c>
		{
			t1ms_counter = 0;
 8001886:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <led_keepon_down+0x4c>)
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, 0x80 >> i++, 1);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	1c5a      	adds	r2, r3, #1
 8001890:	607a      	str	r2, [r7, #4]
 8001892:	2280      	movs	r2, #128	; 0x80
 8001894:	fa42 f303 	asr.w	r3, r2, r3
 8001898:	b29b      	uxth	r3, r3
 800189a:	2201      	movs	r2, #1
 800189c:	4619      	mov	r1, r3
 800189e:	4806      	ldr	r0, [pc, #24]	; (80018b8 <led_keepon_down+0x50>)
 80018a0:	f002 fc9c 	bl	80041dc <HAL_GPIO_WritePin>
	while (i < 8)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b07      	cmp	r3, #7
 80018a8:	dde9      	ble.n	800187e <led_keepon_down+0x16>
		}
	}
}
 80018aa:	bf00      	nop
 80018ac:	bf00      	nop
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000a28 	.word	0x20000a28
 80018b8:	40020c00 	.word	0x40020c00

080018bc <led_flower_on>:

void led_flower_on(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
	int i = 0, delay = 300;
 80018c2:	2300      	movs	r3, #0
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80018ca:	603b      	str	r3, [r7, #0]
	t1ms_counter = 0;
 80018cc:	4b19      	ldr	r3, [pc, #100]	; (8001934 <led_flower_on+0x78>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]

	led_all_off();
 80018d2:	f7ff ff3b 	bl	800174c <led_all_off>

	while(i < 4)
 80018d6:	e024      	b.n	8001922 <led_flower_on+0x66>
	{
		if (t1ms_counter >= delay)
 80018d8:	4b16      	ldr	r3, [pc, #88]	; (8001934 <led_flower_on+0x78>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	dc1f      	bgt.n	8001922 <led_flower_on+0x66>
		{
			t1ms_counter = 0;
 80018e2:	4b14      	ldr	r3, [pc, #80]	; (8001934 <led_flower_on+0x78>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, 0x01 << (4 + i), 1);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3304      	adds	r3, #4
 80018ec:	2201      	movs	r2, #1
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	2201      	movs	r2, #1
 80018f6:	4619      	mov	r1, r3
 80018f8:	480f      	ldr	r0, [pc, #60]	; (8001938 <led_flower_on+0x7c>)
 80018fa:	f002 fc6f 	bl	80041dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, 0x01 << (3 - i), 1);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f1c3 0303 	rsb	r3, r3, #3
 8001904:	2201      	movs	r2, #1
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	b29b      	uxth	r3, r3
 800190c:	2201      	movs	r2, #1
 800190e:	4619      	mov	r1, r3
 8001910:	4809      	ldr	r0, [pc, #36]	; (8001938 <led_flower_on+0x7c>)
 8001912:	f002 fc63 	bl	80041dc <HAL_GPIO_WritePin>
			i++;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	3301      	adds	r3, #1
 800191a:	607b      	str	r3, [r7, #4]
			delay += 100;
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	3364      	adds	r3, #100	; 0x64
 8001920:	603b      	str	r3, [r7, #0]
	while(i < 4)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b03      	cmp	r3, #3
 8001926:	ddd7      	ble.n	80018d8 <led_flower_on+0x1c>
		}
	}
}
 8001928:	bf00      	nop
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000a28 	.word	0x20000a28
 8001938:	40020c00 	.word	0x40020c00

0800193c <led_flower_off>:

void led_flower_off(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
	int i = 0, delay = 700;
 8001942:	2300      	movs	r3, #0
 8001944:	607b      	str	r3, [r7, #4]
 8001946:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800194a:	603b      	str	r3, [r7, #0]
	t1ms_counter = 0;
 800194c:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <led_flower_off+0x74>)
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]

	led_all_on();
 8001952:	f7ff feef 	bl	8001734 <led_all_on>

	while(i < 4)
 8001956:	e023      	b.n	80019a0 <led_flower_off+0x64>
	{
		if (t1ms_counter >= delay)
 8001958:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <led_flower_off+0x74>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	dc1e      	bgt.n	80019a0 <led_flower_off+0x64>
		{
			t1ms_counter = 0;
 8001962:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <led_flower_off+0x74>)
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, 0x01 << (0 + i), 0);
 8001968:	2201      	movs	r2, #1
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	b29b      	uxth	r3, r3
 8001972:	2200      	movs	r2, #0
 8001974:	4619      	mov	r1, r3
 8001976:	480f      	ldr	r0, [pc, #60]	; (80019b4 <led_flower_off+0x78>)
 8001978:	f002 fc30 	bl	80041dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, 0x01 << (7 - i), 0);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f1c3 0307 	rsb	r3, r3, #7
 8001982:	2201      	movs	r2, #1
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	b29b      	uxth	r3, r3
 800198a:	2200      	movs	r2, #0
 800198c:	4619      	mov	r1, r3
 800198e:	4809      	ldr	r0, [pc, #36]	; (80019b4 <led_flower_off+0x78>)
 8001990:	f002 fc24 	bl	80041dc <HAL_GPIO_WritePin>
			i++;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3301      	adds	r3, #1
 8001998:	607b      	str	r3, [r7, #4]
			delay -= 100;
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	3b64      	subs	r3, #100	; 0x64
 800199e:	603b      	str	r3, [r7, #0]
	while(i < 4)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	ddd8      	ble.n	8001958 <led_flower_off+0x1c>
		}
	}
}
 80019a6:	bf00      	nop
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000a28 	.word	0x20000a28
 80019b4:	40020c00 	.word	0x40020c00

080019b8 <HAL_STSTICK_Handler>:
// call by SysTick_Handler of stm32f4xx_it.c
// ARM default timer
// enter here every 1ms
volatile int t1ms_counter = 0;
void HAL_STSTICK_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
	t1ms_counter++; // 1ms timer
 80019bc:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <HAL_STSTICK_Handler+0x18>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	3301      	adds	r3, #1
 80019c2:	4a03      	ldr	r2, [pc, #12]	; (80019d0 <HAL_STSTICK_Handler+0x18>)
 80019c4:	6013      	str	r3, [r2, #0]
}
 80019c6:	bf00      	nop
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	20000a28 	.word	0x20000a28

080019d4 <HAL_TIM_PeriodElapsedCallback>:
volatile int TIM10_10ms_ultrasonic = 0;
volatile int TIM10_10ms_fan_rotate_direction_led = 0;
volatile int TIM10_10ms_fan_auto_mode = 0;
volatile int TIM10_10ms_fan_lcd_display_clear = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a10      	ldr	r2, [pc, #64]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d118      	bne.n	8001a18 <HAL_TIM_PeriodElapsedCallback+0x44>
	{
		TIM10_10ms_counter++; // timer for LED
 80019e6:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	3301      	adds	r3, #1
 80019ec:	4a0e      	ldr	r2, [pc, #56]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80019ee:	6013      	str	r3, [r2, #0]
		TIM10_10ms_ultrasonic++; // timer for ultrasonic trigger
 80019f0:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	3301      	adds	r3, #1
 80019f6:	4a0d      	ldr	r2, [pc, #52]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80019f8:	6013      	str	r3, [r2, #0]
		TIM10_10ms_fan_rotate_direction_led++; // timer for fan_rotate_direction_led toggle
 80019fa:	4b0d      	ldr	r3, [pc, #52]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	3301      	adds	r3, #1
 8001a00:	4a0b      	ldr	r2, [pc, #44]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001a02:	6013      	str	r3, [r2, #0]
		TIM10_10ms_fan_auto_mode++; // timer for Auto mode fan remain time check
 8001a04:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	4a0a      	ldr	r2, [pc, #40]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001a0c:	6013      	str	r3, [r2, #0]
		TIM10_10ms_fan_lcd_display_clear++;
 8001a0e:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	3301      	adds	r3, #1
 8001a14:	4a08      	ldr	r2, [pc, #32]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001a16:	6013      	str	r3, [r2, #0]
	}
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	40014400 	.word	0x40014400
 8001a28:	20000a2c 	.word	0x20000a2c
 8001a2c:	20000a30 	.word	0x20000a30
 8001a30:	20000a34 	.word	0x20000a34
 8001a34:	20000a38 	.word	0x20000a38
 8001a38:	20000a3c 	.word	0x20000a3c

08001a3c <delay_us>:

// function implement that extern from DHT11.c
void delay_us (unsigned long us)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim11, 0); // tim11 clear // H/W counter...
 8001a44:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <delay_us+0x2c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	625a      	str	r2, [r3, #36]	; 0x24

	while(__HAL_TIM_GET_COUNTER(&htim11) < us)
 8001a4c:	bf00      	nop
 8001a4e:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <delay_us+0x2c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d8f9      	bhi.n	8001a4e <delay_us+0x12>
		;

}
 8001a5a:	bf00      	nop
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	20000448 	.word	0x20000448

08001a6c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8001a74:	1d39      	adds	r1, r7, #4
 8001a76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	4803      	ldr	r0, [pc, #12]	; (8001a8c <__io_putchar+0x20>)
 8001a7e:	f005 fb6a 	bl	8007156 <HAL_UART_Transmit>

  return ch;
 8001a82:	687b      	ldr	r3, [r7, #4]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20000490 	.word	0x20000490

08001a90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a94:	f001 fc7c 	bl	8003390 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a98:	f000 f85e 	bl	8001b58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a9c:	f000 fb42 	bl	8002124 <MX_GPIO_Init>
  MX_ETH_Init();
 8001aa0:	f000 f8c4 	bl	8001c2c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001aa4:	f000 fabc 	bl	8002020 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001aa8:	f000 fb0e 	bl	80020c8 <MX_USB_OTG_FS_PCD_Init>
  MX_USART6_UART_Init();
 8001aac:	f000 fae2 	bl	8002074 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 8001ab0:	f000 fa6e 	bl	8001f90 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001ab4:	f000 fa90 	bl	8001fd8 <MX_TIM11_Init>
  MX_TIM3_Init();
 8001ab8:	f000 f9a0 	bl	8001dfc <MX_TIM3_Init>
  MX_I2C1_Init();
 8001abc:	f000 f904 	bl	8001cc8 <MX_I2C1_Init>
  MX_TIM4_Init();
 8001ac0:	f000 f9f0 	bl	8001ea4 <MX_TIM4_Init>
  MX_TIM2_Init();
 8001ac4:	f000 f940 	bl	8001d48 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  printf("main() start!!\n");
 8001ac8:	4818      	ldr	r0, [pc, #96]	; (8001b2c <main+0x9c>)
 8001aca:	f006 ff2d 	bl	8008928 <puts>

  DHT11_Init();
 8001ace:	f7ff f9af 	bl	8000e30 <DHT11_Init>
  i2c_lcd_init();
 8001ad2:	f7ff fde9 	bl	80016a8 <i2c_lcd_init>

  HAL_UART_Receive_IT(&huart3, &rx_data, 1); // activate interrupt from RX huart3
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	4915      	ldr	r1, [pc, #84]	; (8001b30 <main+0xa0>)
 8001ada:	4816      	ldr	r0, [pc, #88]	; (8001b34 <main+0xa4>)
 8001adc:	f005 fbcd 	bl	800727a <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1); // activate interrupt from RX huart6
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	4915      	ldr	r1, [pc, #84]	; (8001b38 <main+0xa8>)
 8001ae4:	4815      	ldr	r0, [pc, #84]	; (8001b3c <main+0xac>)
 8001ae6:	f005 fbc8 	bl	800727a <HAL_UART_Receive_IT>

  HAL_TIM_Base_Start_IT(&htim10); // add_kenGwon_1011
 8001aea:	4815      	ldr	r0, [pc, #84]	; (8001b40 <main+0xb0>)
 8001aec:	f003 fe76 	bl	80057dc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11); // add_kenGwon_1011
 8001af0:	4814      	ldr	r0, [pc, #80]	; (8001b44 <main+0xb4>)
 8001af2:	f003 fe73 	bl	80057dc <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1); // for count pulse(InputCapture between rising edge & falling edge) add_kenGwon_1012
 8001af6:	2100      	movs	r1, #0
 8001af8:	4813      	ldr	r0, [pc, #76]	; (8001b48 <main+0xb8>)
 8001afa:	f004 f95d 	bl	8005db8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1); // for DC motor PWM control add_kenGwon_1013
 8001afe:	2100      	movs	r1, #0
 8001b00:	4812      	ldr	r0, [pc, #72]	; (8001b4c <main+0xbc>)
 8001b02:	f003 fff3 	bl	8005aec <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //for SERVO motor PWM control add_kenGwon_1013
 8001b06:	2100      	movs	r1, #0
 8001b08:	4811      	ldr	r0, [pc, #68]	; (8001b50 <main+0xc0>)
 8001b0a:	f003 ff27 	bl	800595c <HAL_TIM_PWM_Start>
//  i2c_lcd_main();
//  DHT11_main();
//  servo_motor_test_main();
//  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 1);

  TIM10_10ms_counter = 0;
 8001b0e:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <main+0xc4>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]

  while (1)
  {
	  pc_command_processing();
 8001b14:	f001 f980 	bl	8002e18 <pc_command_processing>
	  bt_command_processing();
 8001b18:	f001 fae6 	bl	80030e8 <bt_command_processing>

	  DHT11_processing();
 8001b1c:	f7ff f930 	bl	8000d80 <DHT11_processing>
	  ultrasonic_processing();
 8001b20:	f001 fb92 	bl	8003248 <ultrasonic_processing>

	  dcmotor_processing();
 8001b24:	f7ff fa70 	bl	8001008 <dcmotor_processing>
	  pc_command_processing();
 8001b28:	e7f4      	b.n	8001b14 <main+0x84>
 8001b2a:	bf00      	nop
 8001b2c:	08009de0 	.word	0x08009de0
 8001b30:	20000a24 	.word	0x20000a24
 8001b34:	20000490 	.word	0x20000490
 8001b38:	20000a25 	.word	0x20000a25
 8001b3c:	200004d4 	.word	0x200004d4
 8001b40:	20000400 	.word	0x20000400
 8001b44:	20000448 	.word	0x20000448
 8001b48:	20000370 	.word	0x20000370
 8001b4c:	200003b8 	.word	0x200003b8
 8001b50:	20000328 	.word	0x20000328
 8001b54:	20000a2c 	.word	0x20000a2c

08001b58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b094      	sub	sp, #80	; 0x50
 8001b5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b5e:	f107 0320 	add.w	r3, r7, #32
 8001b62:	2230      	movs	r2, #48	; 0x30
 8001b64:	2100      	movs	r1, #0
 8001b66:	4618      	mov	r0, r3
 8001b68:	f006 fe50 	bl	800880c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b6c:	f107 030c 	add.w	r3, r7, #12
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	4b28      	ldr	r3, [pc, #160]	; (8001c24 <SystemClock_Config+0xcc>)
 8001b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b84:	4a27      	ldr	r2, [pc, #156]	; (8001c24 <SystemClock_Config+0xcc>)
 8001b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b8a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b8c:	4b25      	ldr	r3, [pc, #148]	; (8001c24 <SystemClock_Config+0xcc>)
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b94:	60bb      	str	r3, [r7, #8]
 8001b96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b98:	2300      	movs	r3, #0
 8001b9a:	607b      	str	r3, [r7, #4]
 8001b9c:	4b22      	ldr	r3, [pc, #136]	; (8001c28 <SystemClock_Config+0xd0>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a21      	ldr	r2, [pc, #132]	; (8001c28 <SystemClock_Config+0xd0>)
 8001ba2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ba6:	6013      	str	r3, [r2, #0]
 8001ba8:	4b1f      	ldr	r3, [pc, #124]	; (8001c28 <SystemClock_Config+0xd0>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bb0:	607b      	str	r3, [r7, #4]
 8001bb2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001bb8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bc2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001bc8:	2304      	movs	r3, #4
 8001bca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001bcc:	23a8      	movs	r3, #168	; 0xa8
 8001bce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001bd4:	2307      	movs	r3, #7
 8001bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bd8:	f107 0320 	add.w	r3, r7, #32
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f003 f915 	bl	8004e0c <HAL_RCC_OscConfig>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001be8:	f000 fbd8 	bl	800239c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bec:	230f      	movs	r3, #15
 8001bee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bf8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bfc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c02:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c04:	f107 030c 	add.w	r3, r7, #12
 8001c08:	2105      	movs	r1, #5
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f003 fb76 	bl	80052fc <HAL_RCC_ClockConfig>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c16:	f000 fbc1 	bl	800239c <Error_Handler>
  }
}
 8001c1a:	bf00      	nop
 8001c1c:	3750      	adds	r7, #80	; 0x50
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40007000 	.word	0x40007000

08001c2c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001c30:	4b1f      	ldr	r3, [pc, #124]	; (8001cb0 <MX_ETH_Init+0x84>)
 8001c32:	4a20      	ldr	r2, [pc, #128]	; (8001cb4 <MX_ETH_Init+0x88>)
 8001c34:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001c36:	4b20      	ldr	r3, [pc, #128]	; (8001cb8 <MX_ETH_Init+0x8c>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001c3c:	4b1e      	ldr	r3, [pc, #120]	; (8001cb8 <MX_ETH_Init+0x8c>)
 8001c3e:	2280      	movs	r2, #128	; 0x80
 8001c40:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001c42:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <MX_ETH_Init+0x8c>)
 8001c44:	22e1      	movs	r2, #225	; 0xe1
 8001c46:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001c48:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <MX_ETH_Init+0x8c>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001c4e:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <MX_ETH_Init+0x8c>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001c54:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <MX_ETH_Init+0x8c>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001c5a:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <MX_ETH_Init+0x84>)
 8001c5c:	4a16      	ldr	r2, [pc, #88]	; (8001cb8 <MX_ETH_Init+0x8c>)
 8001c5e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001c60:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <MX_ETH_Init+0x84>)
 8001c62:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001c66:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001c68:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <MX_ETH_Init+0x84>)
 8001c6a:	4a14      	ldr	r2, [pc, #80]	; (8001cbc <MX_ETH_Init+0x90>)
 8001c6c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <MX_ETH_Init+0x84>)
 8001c70:	4a13      	ldr	r2, [pc, #76]	; (8001cc0 <MX_ETH_Init+0x94>)
 8001c72:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001c74:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <MX_ETH_Init+0x84>)
 8001c76:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001c7a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001c7c:	480c      	ldr	r0, [pc, #48]	; (8001cb0 <MX_ETH_Init+0x84>)
 8001c7e:	f001 fdc1 	bl	8003804 <HAL_ETH_Init>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001c88:	f000 fb88 	bl	800239c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001c8c:	2238      	movs	r2, #56	; 0x38
 8001c8e:	2100      	movs	r1, #0
 8001c90:	480c      	ldr	r0, [pc, #48]	; (8001cc4 <MX_ETH_Init+0x98>)
 8001c92:	f006 fdbb 	bl	800880c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001c96:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <MX_ETH_Init+0x98>)
 8001c98:	2221      	movs	r2, #33	; 0x21
 8001c9a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001c9c:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <MX_ETH_Init+0x98>)
 8001c9e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001ca2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001ca4:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <MX_ETH_Init+0x98>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000224 	.word	0x20000224
 8001cb4:	40028000 	.word	0x40028000
 8001cb8:	20000a40 	.word	0x20000a40
 8001cbc:	20000184 	.word	0x20000184
 8001cc0:	200000e4 	.word	0x200000e4
 8001cc4:	200000ac 	.word	0x200000ac

08001cc8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ccc:	4b1b      	ldr	r3, [pc, #108]	; (8001d3c <MX_I2C1_Init+0x74>)
 8001cce:	4a1c      	ldr	r2, [pc, #112]	; (8001d40 <MX_I2C1_Init+0x78>)
 8001cd0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001cd2:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <MX_I2C1_Init+0x74>)
 8001cd4:	4a1b      	ldr	r2, [pc, #108]	; (8001d44 <MX_I2C1_Init+0x7c>)
 8001cd6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cd8:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <MX_I2C1_Init+0x74>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001cde:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <MX_I2C1_Init+0x74>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ce4:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <MX_I2C1_Init+0x74>)
 8001ce6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cec:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <MX_I2C1_Init+0x74>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001cf2:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <MX_I2C1_Init+0x74>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cf8:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <MX_I2C1_Init+0x74>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cfe:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <MX_I2C1_Init+0x74>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d04:	480d      	ldr	r0, [pc, #52]	; (8001d3c <MX_I2C1_Init+0x74>)
 8001d06:	f002 fa9d 	bl	8004244 <HAL_I2C_Init>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d10:	f000 fb44 	bl	800239c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d14:	2100      	movs	r1, #0
 8001d16:	4809      	ldr	r0, [pc, #36]	; (8001d3c <MX_I2C1_Init+0x74>)
 8001d18:	f002 fedf 	bl	8004ada <HAL_I2CEx_ConfigAnalogFilter>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001d22:	f000 fb3b 	bl	800239c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d26:	2100      	movs	r1, #0
 8001d28:	4804      	ldr	r0, [pc, #16]	; (8001d3c <MX_I2C1_Init+0x74>)
 8001d2a:	f002 ff12 	bl	8004b52 <HAL_I2CEx_ConfigDigitalFilter>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001d34:	f000 fb32 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	200002d4 	.word	0x200002d4
 8001d40:	40005400 	.word	0x40005400
 8001d44:	000186a0 	.word	0x000186a0

08001d48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08a      	sub	sp, #40	; 0x28
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d4e:	f107 0320 	add.w	r3, r7, #32
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d58:	1d3b      	adds	r3, r7, #4
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	605a      	str	r2, [r3, #4]
 8001d60:	609a      	str	r2, [r3, #8]
 8001d62:	60da      	str	r2, [r3, #12]
 8001d64:	611a      	str	r2, [r3, #16]
 8001d66:	615a      	str	r2, [r3, #20]
 8001d68:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d6a:	4b23      	ldr	r3, [pc, #140]	; (8001df8 <MX_TIM2_Init+0xb0>)
 8001d6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d70:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 8001d72:	4b21      	ldr	r3, [pc, #132]	; (8001df8 <MX_TIM2_Init+0xb0>)
 8001d74:	f240 628f 	movw	r2, #1679	; 0x68f
 8001d78:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d7a:	4b1f      	ldr	r3, [pc, #124]	; (8001df8 <MX_TIM2_Init+0xb0>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001d80:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <MX_TIM2_Init+0xb0>)
 8001d82:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d88:	4b1b      	ldr	r3, [pc, #108]	; (8001df8 <MX_TIM2_Init+0xb0>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d8e:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <MX_TIM2_Init+0xb0>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d94:	4818      	ldr	r0, [pc, #96]	; (8001df8 <MX_TIM2_Init+0xb0>)
 8001d96:	f003 fd91 	bl	80058bc <HAL_TIM_PWM_Init>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001da0:	f000 fafc 	bl	800239c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da4:	2300      	movs	r3, #0
 8001da6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da8:	2300      	movs	r3, #0
 8001daa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dac:	f107 0320 	add.w	r3, r7, #32
 8001db0:	4619      	mov	r1, r3
 8001db2:	4811      	ldr	r0, [pc, #68]	; (8001df8 <MX_TIM2_Init+0xb0>)
 8001db4:	f005 f8f2 	bl	8006f9c <HAL_TIMEx_MasterConfigSynchronization>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001dbe:	f000 faed 	bl	800239c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dc2:	2360      	movs	r3, #96	; 0x60
 8001dc4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8001dc6:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001dca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dd4:	1d3b      	adds	r3, r7, #4
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4807      	ldr	r0, [pc, #28]	; (8001df8 <MX_TIM2_Init+0xb0>)
 8001ddc:	f004 fab8 	bl	8006350 <HAL_TIM_PWM_ConfigChannel>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001de6:	f000 fad9 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001dea:	4803      	ldr	r0, [pc, #12]	; (8001df8 <MX_TIM2_Init+0xb0>)
 8001dec:	f000 fcec 	bl	80027c8 <HAL_TIM_MspPostInit>

}
 8001df0:	bf00      	nop
 8001df2:	3728      	adds	r7, #40	; 0x28
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000328 	.word	0x20000328

08001dfc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e02:	f107 0310 	add.w	r3, r7, #16
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001e0c:	463b      	mov	r3, r7
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]
 8001e14:	609a      	str	r2, [r3, #8]
 8001e16:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e18:	4b20      	ldr	r3, [pc, #128]	; (8001e9c <MX_TIM3_Init+0xa0>)
 8001e1a:	4a21      	ldr	r2, [pc, #132]	; (8001ea0 <MX_TIM3_Init+0xa4>)
 8001e1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001e1e:	4b1f      	ldr	r3, [pc, #124]	; (8001e9c <MX_TIM3_Init+0xa0>)
 8001e20:	2253      	movs	r2, #83	; 0x53
 8001e22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e24:	4b1d      	ldr	r3, [pc, #116]	; (8001e9c <MX_TIM3_Init+0xa0>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001e2a:	4b1c      	ldr	r3, [pc, #112]	; (8001e9c <MX_TIM3_Init+0xa0>)
 8001e2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e32:	4b1a      	ldr	r3, [pc, #104]	; (8001e9c <MX_TIM3_Init+0xa0>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e38:	4b18      	ldr	r3, [pc, #96]	; (8001e9c <MX_TIM3_Init+0xa0>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001e3e:	4817      	ldr	r0, [pc, #92]	; (8001e9c <MX_TIM3_Init+0xa0>)
 8001e40:	f003 ff6a 	bl	8005d18 <HAL_TIM_IC_Init>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001e4a:	f000 faa7 	bl	800239c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e56:	f107 0310 	add.w	r3, r7, #16
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	480f      	ldr	r0, [pc, #60]	; (8001e9c <MX_TIM3_Init+0xa0>)
 8001e5e:	f005 f89d 	bl	8006f9c <HAL_TIMEx_MasterConfigSynchronization>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001e68:	f000 fa98 	bl	800239c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001e6c:	230a      	movs	r3, #10
 8001e6e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001e70:	2301      	movs	r3, #1
 8001e72:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001e7c:	463b      	mov	r3, r7
 8001e7e:	2200      	movs	r2, #0
 8001e80:	4619      	mov	r1, r3
 8001e82:	4806      	ldr	r0, [pc, #24]	; (8001e9c <MX_TIM3_Init+0xa0>)
 8001e84:	f004 f9c8 	bl	8006218 <HAL_TIM_IC_ConfigChannel>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001e8e:	f000 fa85 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e92:	bf00      	nop
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000370 	.word	0x20000370
 8001ea0:	40000400 	.word	0x40000400

08001ea4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08e      	sub	sp, #56	; 0x38
 8001ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]
 8001eb4:	609a      	str	r2, [r3, #8]
 8001eb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eb8:	f107 0320 	add.w	r3, r7, #32
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ec2:	1d3b      	adds	r3, r7, #4
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	611a      	str	r2, [r3, #16]
 8001ed0:	615a      	str	r2, [r3, #20]
 8001ed2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ed4:	4b2c      	ldr	r3, [pc, #176]	; (8001f88 <MX_TIM4_Init+0xe4>)
 8001ed6:	4a2d      	ldr	r2, [pc, #180]	; (8001f8c <MX_TIM4_Init+0xe8>)
 8001ed8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 8001eda:	4b2b      	ldr	r3, [pc, #172]	; (8001f88 <MX_TIM4_Init+0xe4>)
 8001edc:	f240 3247 	movw	r2, #839	; 0x347
 8001ee0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ee2:	4b29      	ldr	r3, [pc, #164]	; (8001f88 <MX_TIM4_Init+0xe4>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8001ee8:	4b27      	ldr	r3, [pc, #156]	; (8001f88 <MX_TIM4_Init+0xe4>)
 8001eea:	2263      	movs	r2, #99	; 0x63
 8001eec:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eee:	4b26      	ldr	r3, [pc, #152]	; (8001f88 <MX_TIM4_Init+0xe4>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ef4:	4b24      	ldr	r3, [pc, #144]	; (8001f88 <MX_TIM4_Init+0xe4>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001efa:	4823      	ldr	r0, [pc, #140]	; (8001f88 <MX_TIM4_Init+0xe4>)
 8001efc:	f003 fc1e 	bl	800573c <HAL_TIM_Base_Init>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001f06:	f000 fa49 	bl	800239c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f0e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f14:	4619      	mov	r1, r3
 8001f16:	481c      	ldr	r0, [pc, #112]	; (8001f88 <MX_TIM4_Init+0xe4>)
 8001f18:	f004 fadc 	bl	80064d4 <HAL_TIM_ConfigClockSource>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001f22:	f000 fa3b 	bl	800239c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001f26:	4818      	ldr	r0, [pc, #96]	; (8001f88 <MX_TIM4_Init+0xe4>)
 8001f28:	f003 fcc8 	bl	80058bc <HAL_TIM_PWM_Init>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001f32:	f000 fa33 	bl	800239c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f36:	2300      	movs	r3, #0
 8001f38:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f3e:	f107 0320 	add.w	r3, r7, #32
 8001f42:	4619      	mov	r1, r3
 8001f44:	4810      	ldr	r0, [pc, #64]	; (8001f88 <MX_TIM4_Init+0xe4>)
 8001f46:	f005 f829 	bl	8006f9c <HAL_TIMEx_MasterConfigSynchronization>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001f50:	f000 fa24 	bl	800239c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f54:	2360      	movs	r3, #96	; 0x60
 8001f56:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 70-1;
 8001f58:	2345      	movs	r3, #69	; 0x45
 8001f5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001f60:	2304      	movs	r3, #4
 8001f62:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f64:	1d3b      	adds	r3, r7, #4
 8001f66:	2200      	movs	r2, #0
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4807      	ldr	r0, [pc, #28]	; (8001f88 <MX_TIM4_Init+0xe4>)
 8001f6c:	f004 f9f0 	bl	8006350 <HAL_TIM_PWM_ConfigChannel>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001f76:	f000 fa11 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001f7a:	4803      	ldr	r0, [pc, #12]	; (8001f88 <MX_TIM4_Init+0xe4>)
 8001f7c:	f000 fc24 	bl	80027c8 <HAL_TIM_MspPostInit>

}
 8001f80:	bf00      	nop
 8001f82:	3738      	adds	r7, #56	; 0x38
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	200003b8 	.word	0x200003b8
 8001f8c:	40000800 	.word	0x40000800

08001f90 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001f94:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <MX_TIM10_Init+0x40>)
 8001f96:	4a0f      	ldr	r2, [pc, #60]	; (8001fd4 <MX_TIM10_Init+0x44>)
 8001f98:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 8001f9a:	4b0d      	ldr	r3, [pc, #52]	; (8001fd0 <MX_TIM10_Init+0x40>)
 8001f9c:	22a7      	movs	r2, #167	; 0xa7
 8001f9e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <MX_TIM10_Init+0x40>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 8001fa6:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <MX_TIM10_Init+0x40>)
 8001fa8:	f242 720f 	movw	r2, #9999	; 0x270f
 8001fac:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fae:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <MX_TIM10_Init+0x40>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fb4:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <MX_TIM10_Init+0x40>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001fba:	4805      	ldr	r0, [pc, #20]	; (8001fd0 <MX_TIM10_Init+0x40>)
 8001fbc:	f003 fbbe 	bl	800573c <HAL_TIM_Base_Init>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001fc6:	f000 f9e9 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000400 	.word	0x20000400
 8001fd4:	40014400 	.word	0x40014400

08001fd8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001fdc:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <MX_TIM11_Init+0x40>)
 8001fde:	4a0f      	ldr	r2, [pc, #60]	; (800201c <MX_TIM11_Init+0x44>)
 8001fe0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 8001fe2:	4b0d      	ldr	r3, [pc, #52]	; (8002018 <MX_TIM11_Init+0x40>)
 8001fe4:	22a7      	movs	r2, #167	; 0xa7
 8001fe6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <MX_TIM11_Init+0x40>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001fee:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <MX_TIM11_Init+0x40>)
 8001ff0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ff4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff6:	4b08      	ldr	r3, [pc, #32]	; (8002018 <MX_TIM11_Init+0x40>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ffc:	4b06      	ldr	r3, [pc, #24]	; (8002018 <MX_TIM11_Init+0x40>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002002:	4805      	ldr	r0, [pc, #20]	; (8002018 <MX_TIM11_Init+0x40>)
 8002004:	f003 fb9a 	bl	800573c <HAL_TIM_Base_Init>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800200e:	f000 f9c5 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000448 	.word	0x20000448
 800201c:	40014800 	.word	0x40014800

08002020 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002024:	4b11      	ldr	r3, [pc, #68]	; (800206c <MX_USART3_UART_Init+0x4c>)
 8002026:	4a12      	ldr	r2, [pc, #72]	; (8002070 <MX_USART3_UART_Init+0x50>)
 8002028:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800202a:	4b10      	ldr	r3, [pc, #64]	; (800206c <MX_USART3_UART_Init+0x4c>)
 800202c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002030:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002032:	4b0e      	ldr	r3, [pc, #56]	; (800206c <MX_USART3_UART_Init+0x4c>)
 8002034:	2200      	movs	r2, #0
 8002036:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002038:	4b0c      	ldr	r3, [pc, #48]	; (800206c <MX_USART3_UART_Init+0x4c>)
 800203a:	2200      	movs	r2, #0
 800203c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800203e:	4b0b      	ldr	r3, [pc, #44]	; (800206c <MX_USART3_UART_Init+0x4c>)
 8002040:	2200      	movs	r2, #0
 8002042:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002044:	4b09      	ldr	r3, [pc, #36]	; (800206c <MX_USART3_UART_Init+0x4c>)
 8002046:	220c      	movs	r2, #12
 8002048:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800204a:	4b08      	ldr	r3, [pc, #32]	; (800206c <MX_USART3_UART_Init+0x4c>)
 800204c:	2200      	movs	r2, #0
 800204e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002050:	4b06      	ldr	r3, [pc, #24]	; (800206c <MX_USART3_UART_Init+0x4c>)
 8002052:	2200      	movs	r2, #0
 8002054:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002056:	4805      	ldr	r0, [pc, #20]	; (800206c <MX_USART3_UART_Init+0x4c>)
 8002058:	f005 f830 	bl	80070bc <HAL_UART_Init>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002062:	f000 f99b 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000490 	.word	0x20000490
 8002070:	40004800 	.word	0x40004800

08002074 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002078:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <MX_USART6_UART_Init+0x4c>)
 800207a:	4a12      	ldr	r2, [pc, #72]	; (80020c4 <MX_USART6_UART_Init+0x50>)
 800207c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800207e:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <MX_USART6_UART_Init+0x4c>)
 8002080:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002084:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002086:	4b0e      	ldr	r3, [pc, #56]	; (80020c0 <MX_USART6_UART_Init+0x4c>)
 8002088:	2200      	movs	r2, #0
 800208a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800208c:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <MX_USART6_UART_Init+0x4c>)
 800208e:	2200      	movs	r2, #0
 8002090:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002092:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <MX_USART6_UART_Init+0x4c>)
 8002094:	2200      	movs	r2, #0
 8002096:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002098:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <MX_USART6_UART_Init+0x4c>)
 800209a:	220c      	movs	r2, #12
 800209c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800209e:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <MX_USART6_UART_Init+0x4c>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80020a4:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <MX_USART6_UART_Init+0x4c>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80020aa:	4805      	ldr	r0, [pc, #20]	; (80020c0 <MX_USART6_UART_Init+0x4c>)
 80020ac:	f005 f806 	bl	80070bc <HAL_UART_Init>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80020b6:	f000 f971 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	200004d4 	.word	0x200004d4
 80020c4:	40011400 	.word	0x40011400

080020c8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80020cc:	4b14      	ldr	r3, [pc, #80]	; (8002120 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80020d2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80020d4:	4b12      	ldr	r3, [pc, #72]	; (8002120 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020d6:	2204      	movs	r2, #4
 80020d8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80020da:	4b11      	ldr	r3, [pc, #68]	; (8002120 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020dc:	2202      	movs	r2, #2
 80020de:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80020e0:	4b0f      	ldr	r3, [pc, #60]	; (8002120 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80020e6:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020e8:	2202      	movs	r2, #2
 80020ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80020ec:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020ee:	2201      	movs	r2, #1
 80020f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80020f2:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80020f8:	4b09      	ldr	r3, [pc, #36]	; (8002120 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80020fe:	4b08      	ldr	r3, [pc, #32]	; (8002120 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002100:	2201      	movs	r2, #1
 8002102:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002104:	4b06      	ldr	r3, [pc, #24]	; (8002120 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002106:	2200      	movs	r2, #0
 8002108:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800210a:	4805      	ldr	r0, [pc, #20]	; (8002120 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800210c:	f002 fd60 	bl	8004bd0 <HAL_PCD_Init>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002116:	f000 f941 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	20000518 	.word	0x20000518

08002124 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b08e      	sub	sp, #56	; 0x38
 8002128:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	605a      	str	r2, [r3, #4]
 8002134:	609a      	str	r2, [r3, #8]
 8002136:	60da      	str	r2, [r3, #12]
 8002138:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	623b      	str	r3, [r7, #32]
 800213e:	4b8f      	ldr	r3, [pc, #572]	; (800237c <MX_GPIO_Init+0x258>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	4a8e      	ldr	r2, [pc, #568]	; (800237c <MX_GPIO_Init+0x258>)
 8002144:	f043 0304 	orr.w	r3, r3, #4
 8002148:	6313      	str	r3, [r2, #48]	; 0x30
 800214a:	4b8c      	ldr	r3, [pc, #560]	; (800237c <MX_GPIO_Init+0x258>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	f003 0304 	and.w	r3, r3, #4
 8002152:	623b      	str	r3, [r7, #32]
 8002154:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
 800215a:	4b88      	ldr	r3, [pc, #544]	; (800237c <MX_GPIO_Init+0x258>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	4a87      	ldr	r2, [pc, #540]	; (800237c <MX_GPIO_Init+0x258>)
 8002160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002164:	6313      	str	r3, [r2, #48]	; 0x30
 8002166:	4b85      	ldr	r3, [pc, #532]	; (800237c <MX_GPIO_Init+0x258>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800216e:	61fb      	str	r3, [r7, #28]
 8002170:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	61bb      	str	r3, [r7, #24]
 8002176:	4b81      	ldr	r3, [pc, #516]	; (800237c <MX_GPIO_Init+0x258>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	4a80      	ldr	r2, [pc, #512]	; (800237c <MX_GPIO_Init+0x258>)
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	6313      	str	r3, [r2, #48]	; 0x30
 8002182:	4b7e      	ldr	r3, [pc, #504]	; (800237c <MX_GPIO_Init+0x258>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	61bb      	str	r3, [r7, #24]
 800218c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	617b      	str	r3, [r7, #20]
 8002192:	4b7a      	ldr	r3, [pc, #488]	; (800237c <MX_GPIO_Init+0x258>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	4a79      	ldr	r2, [pc, #484]	; (800237c <MX_GPIO_Init+0x258>)
 8002198:	f043 0302 	orr.w	r3, r3, #2
 800219c:	6313      	str	r3, [r2, #48]	; 0x30
 800219e:	4b77      	ldr	r3, [pc, #476]	; (800237c <MX_GPIO_Init+0x258>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
 80021ae:	4b73      	ldr	r3, [pc, #460]	; (800237c <MX_GPIO_Init+0x258>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	4a72      	ldr	r2, [pc, #456]	; (800237c <MX_GPIO_Init+0x258>)
 80021b4:	f043 0320 	orr.w	r3, r3, #32
 80021b8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ba:	4b70      	ldr	r3, [pc, #448]	; (800237c <MX_GPIO_Init+0x258>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	f003 0320 	and.w	r3, r3, #32
 80021c2:	613b      	str	r3, [r7, #16]
 80021c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	4b6c      	ldr	r3, [pc, #432]	; (800237c <MX_GPIO_Init+0x258>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	4a6b      	ldr	r2, [pc, #428]	; (800237c <MX_GPIO_Init+0x258>)
 80021d0:	f043 0310 	orr.w	r3, r3, #16
 80021d4:	6313      	str	r3, [r2, #48]	; 0x30
 80021d6:	4b69      	ldr	r3, [pc, #420]	; (800237c <MX_GPIO_Init+0x258>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	f003 0310 	and.w	r3, r3, #16
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	4b65      	ldr	r3, [pc, #404]	; (800237c <MX_GPIO_Init+0x258>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	4a64      	ldr	r2, [pc, #400]	; (800237c <MX_GPIO_Init+0x258>)
 80021ec:	f043 0308 	orr.w	r3, r3, #8
 80021f0:	6313      	str	r3, [r2, #48]	; 0x30
 80021f2:	4b62      	ldr	r3, [pc, #392]	; (800237c <MX_GPIO_Init+0x258>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	60bb      	str	r3, [r7, #8]
 80021fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	607b      	str	r3, [r7, #4]
 8002202:	4b5e      	ldr	r3, [pc, #376]	; (800237c <MX_GPIO_Init+0x258>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	4a5d      	ldr	r2, [pc, #372]	; (800237c <MX_GPIO_Init+0x258>)
 8002208:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800220c:	6313      	str	r3, [r2, #48]	; 0x30
 800220e:	4b5b      	ldr	r3, [pc, #364]	; (800237c <MX_GPIO_Init+0x258>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002216:	607b      	str	r3, [r7, #4]
 8002218:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 800221a:	2200      	movs	r2, #0
 800221c:	2101      	movs	r1, #1
 800221e:	4858      	ldr	r0, [pc, #352]	; (8002380 <MX_GPIO_Init+0x25c>)
 8002220:	f001 ffdc 	bl	80041dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002224:	2200      	movs	r2, #0
 8002226:	f244 0181 	movw	r1, #16513	; 0x4081
 800222a:	4856      	ldr	r0, [pc, #344]	; (8002384 <MX_GPIO_Init+0x260>)
 800222c:	f001 ffd6 	bl	80041dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, GPIO_PIN_RESET);
 8002230:	2200      	movs	r2, #0
 8002232:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002236:	4854      	ldr	r0, [pc, #336]	; (8002388 <MX_GPIO_Init+0x264>)
 8002238:	f001 ffd0 	bl	80041dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, IN1_DCMOTOR_Pin|IN2_DCMOTOR_Pin|FAN_ROTATE_DERECTION_LED_Pin, GPIO_PIN_RESET);
 800223c:	2200      	movs	r2, #0
 800223e:	f44f 510c 	mov.w	r1, #8960	; 0x2300
 8002242:	4852      	ldr	r0, [pc, #328]	; (800238c <MX_GPIO_Init+0x268>)
 8002244:	f001 ffca 	bl	80041dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002248:	2200      	movs	r2, #0
 800224a:	2140      	movs	r1, #64	; 0x40
 800224c:	4850      	ldr	r0, [pc, #320]	; (8002390 <MX_GPIO_Init+0x26c>)
 800224e:	f001 ffc5 	bl	80041dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002252:	2200      	movs	r2, #0
 8002254:	21ff      	movs	r1, #255	; 0xff
 8002256:	484f      	ldr	r0, [pc, #316]	; (8002394 <MX_GPIO_Init+0x270>)
 8002258:	f001 ffc0 	bl	80041dc <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800225c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002262:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002266:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800226c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002270:	4619      	mov	r1, r3
 8002272:	4849      	ldr	r0, [pc, #292]	; (8002398 <MX_GPIO_Init+0x274>)
 8002274:	f001 fdee 	bl	8003e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8002278:	2301      	movs	r3, #1
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800227c:	2301      	movs	r3, #1
 800227e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002284:	2300      	movs	r3, #0
 8002286:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8002288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800228c:	4619      	mov	r1, r3
 800228e:	483c      	ldr	r0, [pc, #240]	; (8002380 <MX_GPIO_Init+0x25c>)
 8002290:	f001 fde0 	bl	8003e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002294:	f244 0381 	movw	r3, #16513	; 0x4081
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800229a:	2301      	movs	r3, #1
 800229c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a2:	2300      	movs	r3, #0
 80022a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022aa:	4619      	mov	r1, r3
 80022ac:	4835      	ldr	r0, [pc, #212]	; (8002384 <MX_GPIO_Init+0x260>)
 80022ae:	f001 fdd1 	bl	8003e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULTRASONIC_TRIGGER_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIGGER_Pin;
 80022b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b8:	2301      	movs	r3, #1
 80022ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c0:	2300      	movs	r3, #0
 80022c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ULTRASONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 80022c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c8:	4619      	mov	r1, r3
 80022ca:	482f      	ldr	r0, [pc, #188]	; (8002388 <MX_GPIO_Init+0x264>)
 80022cc:	f001 fdc2 	bl	8003e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_DCMOTOR_Pin IN2_DCMOTOR_Pin FAN_ROTATE_DERECTION_LED_Pin */
  GPIO_InitStruct.Pin = IN1_DCMOTOR_Pin|IN2_DCMOTOR_Pin|FAN_ROTATE_DERECTION_LED_Pin;
 80022d0:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d6:	2301      	movs	r3, #1
 80022d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022de:	2300      	movs	r3, #0
 80022e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022e6:	4619      	mov	r1, r3
 80022e8:	4828      	ldr	r0, [pc, #160]	; (800238c <MX_GPIO_Init+0x268>)
 80022ea:	f001 fdb3 	bl	8003e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin|BUTTON0_Pin;
 80022ee:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022f4:	2300      	movs	r3, #0
 80022f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002300:	4619      	mov	r1, r3
 8002302:	4822      	ldr	r0, [pc, #136]	; (800238c <MX_GPIO_Init+0x268>)
 8002304:	f001 fda6 	bl	8003e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON4_Pin */
  GPIO_InitStruct.Pin = BUTTON4_Pin;
 8002308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800230e:	2300      	movs	r3, #0
 8002310:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002312:	2300      	movs	r3, #0
 8002314:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BUTTON4_GPIO_Port, &GPIO_InitStruct);
 8002316:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800231a:	4619      	mov	r1, r3
 800231c:	4819      	ldr	r0, [pc, #100]	; (8002384 <MX_GPIO_Init+0x260>)
 800231e:	f001 fd99 	bl	8003e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002322:	2340      	movs	r3, #64	; 0x40
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002326:	2301      	movs	r3, #1
 8002328:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	2300      	movs	r3, #0
 800232c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232e:	2300      	movs	r3, #0
 8002330:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002336:	4619      	mov	r1, r3
 8002338:	4815      	ldr	r0, [pc, #84]	; (8002390 <MX_GPIO_Init+0x26c>)
 800233a:	f001 fd8b 	bl	8003e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800233e:	2380      	movs	r3, #128	; 0x80
 8002340:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002342:	2300      	movs	r3, #0
 8002344:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800234a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800234e:	4619      	mov	r1, r3
 8002350:	480f      	ldr	r0, [pc, #60]	; (8002390 <MX_GPIO_Init+0x26c>)
 8002352:	f001 fd7f 	bl	8003e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002356:	23ff      	movs	r3, #255	; 0xff
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800235a:	2301      	movs	r3, #1
 800235c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002362:	2300      	movs	r3, #0
 8002364:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800236a:	4619      	mov	r1, r3
 800236c:	4809      	ldr	r0, [pc, #36]	; (8002394 <MX_GPIO_Init+0x270>)
 800236e:	f001 fd71 	bl	8003e54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002372:	bf00      	nop
 8002374:	3738      	adds	r7, #56	; 0x38
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40023800 	.word	0x40023800
 8002380:	40020000 	.word	0x40020000
 8002384:	40020400 	.word	0x40020400
 8002388:	40021400 	.word	0x40021400
 800238c:	40021000 	.word	0x40021000
 8002390:	40021800 	.word	0x40021800
 8002394:	40020c00 	.word	0x40020c00
 8002398:	40020800 	.word	0x40020800

0800239c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023a0:	b672      	cpsid	i
}
 80023a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023a4:	e7fe      	b.n	80023a4 <Error_Handler+0x8>
	...

080023a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	607b      	str	r3, [r7, #4]
 80023b2:	4b10      	ldr	r3, [pc, #64]	; (80023f4 <HAL_MspInit+0x4c>)
 80023b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b6:	4a0f      	ldr	r2, [pc, #60]	; (80023f4 <HAL_MspInit+0x4c>)
 80023b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023bc:	6453      	str	r3, [r2, #68]	; 0x44
 80023be:	4b0d      	ldr	r3, [pc, #52]	; (80023f4 <HAL_MspInit+0x4c>)
 80023c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023c6:	607b      	str	r3, [r7, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	603b      	str	r3, [r7, #0]
 80023ce:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <HAL_MspInit+0x4c>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	4a08      	ldr	r2, [pc, #32]	; (80023f4 <HAL_MspInit+0x4c>)
 80023d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d8:	6413      	str	r3, [r2, #64]	; 0x40
 80023da:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <HAL_MspInit+0x4c>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e2:	603b      	str	r3, [r7, #0]
 80023e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	40023800 	.word	0x40023800

080023f8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b08e      	sub	sp, #56	; 0x38
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002400:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	605a      	str	r2, [r3, #4]
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	60da      	str	r2, [r3, #12]
 800240e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a55      	ldr	r2, [pc, #340]	; (800256c <HAL_ETH_MspInit+0x174>)
 8002416:	4293      	cmp	r3, r2
 8002418:	f040 80a4 	bne.w	8002564 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800241c:	2300      	movs	r3, #0
 800241e:	623b      	str	r3, [r7, #32]
 8002420:	4b53      	ldr	r3, [pc, #332]	; (8002570 <HAL_ETH_MspInit+0x178>)
 8002422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002424:	4a52      	ldr	r2, [pc, #328]	; (8002570 <HAL_ETH_MspInit+0x178>)
 8002426:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800242a:	6313      	str	r3, [r2, #48]	; 0x30
 800242c:	4b50      	ldr	r3, [pc, #320]	; (8002570 <HAL_ETH_MspInit+0x178>)
 800242e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002434:	623b      	str	r3, [r7, #32]
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	2300      	movs	r3, #0
 800243a:	61fb      	str	r3, [r7, #28]
 800243c:	4b4c      	ldr	r3, [pc, #304]	; (8002570 <HAL_ETH_MspInit+0x178>)
 800243e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002440:	4a4b      	ldr	r2, [pc, #300]	; (8002570 <HAL_ETH_MspInit+0x178>)
 8002442:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002446:	6313      	str	r3, [r2, #48]	; 0x30
 8002448:	4b49      	ldr	r3, [pc, #292]	; (8002570 <HAL_ETH_MspInit+0x178>)
 800244a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002450:	61fb      	str	r3, [r7, #28]
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	2300      	movs	r3, #0
 8002456:	61bb      	str	r3, [r7, #24]
 8002458:	4b45      	ldr	r3, [pc, #276]	; (8002570 <HAL_ETH_MspInit+0x178>)
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	4a44      	ldr	r2, [pc, #272]	; (8002570 <HAL_ETH_MspInit+0x178>)
 800245e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002462:	6313      	str	r3, [r2, #48]	; 0x30
 8002464:	4b42      	ldr	r3, [pc, #264]	; (8002570 <HAL_ETH_MspInit+0x178>)
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800246c:	61bb      	str	r3, [r7, #24]
 800246e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]
 8002474:	4b3e      	ldr	r3, [pc, #248]	; (8002570 <HAL_ETH_MspInit+0x178>)
 8002476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002478:	4a3d      	ldr	r2, [pc, #244]	; (8002570 <HAL_ETH_MspInit+0x178>)
 800247a:	f043 0304 	orr.w	r3, r3, #4
 800247e:	6313      	str	r3, [r2, #48]	; 0x30
 8002480:	4b3b      	ldr	r3, [pc, #236]	; (8002570 <HAL_ETH_MspInit+0x178>)
 8002482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800248c:	2300      	movs	r3, #0
 800248e:	613b      	str	r3, [r7, #16]
 8002490:	4b37      	ldr	r3, [pc, #220]	; (8002570 <HAL_ETH_MspInit+0x178>)
 8002492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002494:	4a36      	ldr	r2, [pc, #216]	; (8002570 <HAL_ETH_MspInit+0x178>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	6313      	str	r3, [r2, #48]	; 0x30
 800249c:	4b34      	ldr	r3, [pc, #208]	; (8002570 <HAL_ETH_MspInit+0x178>)
 800249e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024a8:	2300      	movs	r3, #0
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	4b30      	ldr	r3, [pc, #192]	; (8002570 <HAL_ETH_MspInit+0x178>)
 80024ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b0:	4a2f      	ldr	r2, [pc, #188]	; (8002570 <HAL_ETH_MspInit+0x178>)
 80024b2:	f043 0302 	orr.w	r3, r3, #2
 80024b6:	6313      	str	r3, [r2, #48]	; 0x30
 80024b8:	4b2d      	ldr	r3, [pc, #180]	; (8002570 <HAL_ETH_MspInit+0x178>)
 80024ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80024c4:	2300      	movs	r3, #0
 80024c6:	60bb      	str	r3, [r7, #8]
 80024c8:	4b29      	ldr	r3, [pc, #164]	; (8002570 <HAL_ETH_MspInit+0x178>)
 80024ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024cc:	4a28      	ldr	r2, [pc, #160]	; (8002570 <HAL_ETH_MspInit+0x178>)
 80024ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024d2:	6313      	str	r3, [r2, #48]	; 0x30
 80024d4:	4b26      	ldr	r3, [pc, #152]	; (8002570 <HAL_ETH_MspInit+0x178>)
 80024d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80024e0:	2332      	movs	r3, #50	; 0x32
 80024e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e4:	2302      	movs	r3, #2
 80024e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ec:	2303      	movs	r3, #3
 80024ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80024f0:	230b      	movs	r3, #11
 80024f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024f8:	4619      	mov	r1, r3
 80024fa:	481e      	ldr	r0, [pc, #120]	; (8002574 <HAL_ETH_MspInit+0x17c>)
 80024fc:	f001 fcaa 	bl	8003e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002500:	2386      	movs	r3, #134	; 0x86
 8002502:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002504:	2302      	movs	r3, #2
 8002506:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002508:	2300      	movs	r3, #0
 800250a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800250c:	2303      	movs	r3, #3
 800250e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002510:	230b      	movs	r3, #11
 8002512:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002518:	4619      	mov	r1, r3
 800251a:	4817      	ldr	r0, [pc, #92]	; (8002578 <HAL_ETH_MspInit+0x180>)
 800251c:	f001 fc9a 	bl	8003e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002520:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002524:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002526:	2302      	movs	r3, #2
 8002528:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800252e:	2303      	movs	r3, #3
 8002530:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002532:	230b      	movs	r3, #11
 8002534:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800253a:	4619      	mov	r1, r3
 800253c:	480f      	ldr	r0, [pc, #60]	; (800257c <HAL_ETH_MspInit+0x184>)
 800253e:	f001 fc89 	bl	8003e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002542:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002546:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002548:	2302      	movs	r3, #2
 800254a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254c:	2300      	movs	r3, #0
 800254e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002550:	2303      	movs	r3, #3
 8002552:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002554:	230b      	movs	r3, #11
 8002556:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800255c:	4619      	mov	r1, r3
 800255e:	4808      	ldr	r0, [pc, #32]	; (8002580 <HAL_ETH_MspInit+0x188>)
 8002560:	f001 fc78 	bl	8003e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002564:	bf00      	nop
 8002566:	3738      	adds	r7, #56	; 0x38
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40028000 	.word	0x40028000
 8002570:	40023800 	.word	0x40023800
 8002574:	40020800 	.word	0x40020800
 8002578:	40020000 	.word	0x40020000
 800257c:	40020400 	.word	0x40020400
 8002580:	40021800 	.word	0x40021800

08002584 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b08a      	sub	sp, #40	; 0x28
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800258c:	f107 0314 	add.w	r3, r7, #20
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	605a      	str	r2, [r3, #4]
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	60da      	str	r2, [r3, #12]
 800259a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a19      	ldr	r2, [pc, #100]	; (8002608 <HAL_I2C_MspInit+0x84>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d12c      	bne.n	8002600 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	4b18      	ldr	r3, [pc, #96]	; (800260c <HAL_I2C_MspInit+0x88>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	4a17      	ldr	r2, [pc, #92]	; (800260c <HAL_I2C_MspInit+0x88>)
 80025b0:	f043 0302 	orr.w	r3, r3, #2
 80025b4:	6313      	str	r3, [r2, #48]	; 0x30
 80025b6:	4b15      	ldr	r3, [pc, #84]	; (800260c <HAL_I2C_MspInit+0x88>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	613b      	str	r3, [r7, #16]
 80025c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025c8:	2312      	movs	r3, #18
 80025ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025cc:	2300      	movs	r3, #0
 80025ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d0:	2303      	movs	r3, #3
 80025d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025d4:	2304      	movs	r3, #4
 80025d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d8:	f107 0314 	add.w	r3, r7, #20
 80025dc:	4619      	mov	r1, r3
 80025de:	480c      	ldr	r0, [pc, #48]	; (8002610 <HAL_I2C_MspInit+0x8c>)
 80025e0:	f001 fc38 	bl	8003e54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025e4:	2300      	movs	r3, #0
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	4b08      	ldr	r3, [pc, #32]	; (800260c <HAL_I2C_MspInit+0x88>)
 80025ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ec:	4a07      	ldr	r2, [pc, #28]	; (800260c <HAL_I2C_MspInit+0x88>)
 80025ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025f2:	6413      	str	r3, [r2, #64]	; 0x40
 80025f4:	4b05      	ldr	r3, [pc, #20]	; (800260c <HAL_I2C_MspInit+0x88>)
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002600:	bf00      	nop
 8002602:	3728      	adds	r7, #40	; 0x28
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40005400 	.word	0x40005400
 800260c:	40023800 	.word	0x40023800
 8002610:	40020400 	.word	0x40020400

08002614 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002624:	d115      	bne.n	8002652 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	4b0c      	ldr	r3, [pc, #48]	; (800265c <HAL_TIM_PWM_MspInit+0x48>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	4a0b      	ldr	r2, [pc, #44]	; (800265c <HAL_TIM_PWM_MspInit+0x48>)
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	6413      	str	r3, [r2, #64]	; 0x40
 8002636:	4b09      	ldr	r3, [pc, #36]	; (800265c <HAL_TIM_PWM_MspInit+0x48>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002642:	2200      	movs	r2, #0
 8002644:	2100      	movs	r1, #0
 8002646:	201c      	movs	r0, #28
 8002648:	f001 f813 	bl	8003672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800264c:	201c      	movs	r0, #28
 800264e:	f001 f82c 	bl	80036aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002652:	bf00      	nop
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40023800 	.word	0x40023800

08002660 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b08a      	sub	sp, #40	; 0x28
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002668:	f107 0314 	add.w	r3, r7, #20
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a1d      	ldr	r2, [pc, #116]	; (80026f4 <HAL_TIM_IC_MspInit+0x94>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d133      	bne.n	80026ea <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	4b1c      	ldr	r3, [pc, #112]	; (80026f8 <HAL_TIM_IC_MspInit+0x98>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	4a1b      	ldr	r2, [pc, #108]	; (80026f8 <HAL_TIM_IC_MspInit+0x98>)
 800268c:	f043 0302 	orr.w	r3, r3, #2
 8002690:	6413      	str	r3, [r2, #64]	; 0x40
 8002692:	4b19      	ldr	r3, [pc, #100]	; (80026f8 <HAL_TIM_IC_MspInit+0x98>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	613b      	str	r3, [r7, #16]
 800269c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	4b15      	ldr	r3, [pc, #84]	; (80026f8 <HAL_TIM_IC_MspInit+0x98>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	4a14      	ldr	r2, [pc, #80]	; (80026f8 <HAL_TIM_IC_MspInit+0x98>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	6313      	str	r3, [r2, #48]	; 0x30
 80026ae:	4b12      	ldr	r3, [pc, #72]	; (80026f8 <HAL_TIM_IC_MspInit+0x98>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ULTRASONIC_TIM3_CH1_Pin;
 80026ba:	2340      	movs	r3, #64	; 0x40
 80026bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026be:	2302      	movs	r3, #2
 80026c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c6:	2300      	movs	r3, #0
 80026c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026ca:	2302      	movs	r3, #2
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULTRASONIC_TIM3_CH1_GPIO_Port, &GPIO_InitStruct);
 80026ce:	f107 0314 	add.w	r3, r7, #20
 80026d2:	4619      	mov	r1, r3
 80026d4:	4809      	ldr	r0, [pc, #36]	; (80026fc <HAL_TIM_IC_MspInit+0x9c>)
 80026d6:	f001 fbbd 	bl	8003e54 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80026da:	2200      	movs	r2, #0
 80026dc:	2100      	movs	r1, #0
 80026de:	201d      	movs	r0, #29
 80026e0:	f000 ffc7 	bl	8003672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80026e4:	201d      	movs	r0, #29
 80026e6:	f000 ffe0 	bl	80036aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80026ea:	bf00      	nop
 80026ec:	3728      	adds	r7, #40	; 0x28
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40000400 	.word	0x40000400
 80026f8:	40023800 	.word	0x40023800
 80026fc:	40020000 	.word	0x40020000

08002700 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a2a      	ldr	r2, [pc, #168]	; (80027b8 <HAL_TIM_Base_MspInit+0xb8>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d116      	bne.n	8002740 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	4b29      	ldr	r3, [pc, #164]	; (80027bc <HAL_TIM_Base_MspInit+0xbc>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	4a28      	ldr	r2, [pc, #160]	; (80027bc <HAL_TIM_Base_MspInit+0xbc>)
 800271c:	f043 0304 	orr.w	r3, r3, #4
 8002720:	6413      	str	r3, [r2, #64]	; 0x40
 8002722:	4b26      	ldr	r3, [pc, #152]	; (80027bc <HAL_TIM_Base_MspInit+0xbc>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	f003 0304 	and.w	r3, r3, #4
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800272e:	2200      	movs	r2, #0
 8002730:	2100      	movs	r1, #0
 8002732:	201e      	movs	r0, #30
 8002734:	f000 ff9d 	bl	8003672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002738:	201e      	movs	r0, #30
 800273a:	f000 ffb6 	bl	80036aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800273e:	e036      	b.n	80027ae <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a1e      	ldr	r2, [pc, #120]	; (80027c0 <HAL_TIM_Base_MspInit+0xc0>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d116      	bne.n	8002778 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	4b1b      	ldr	r3, [pc, #108]	; (80027bc <HAL_TIM_Base_MspInit+0xbc>)
 8002750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002752:	4a1a      	ldr	r2, [pc, #104]	; (80027bc <HAL_TIM_Base_MspInit+0xbc>)
 8002754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002758:	6453      	str	r3, [r2, #68]	; 0x44
 800275a:	4b18      	ldr	r3, [pc, #96]	; (80027bc <HAL_TIM_Base_MspInit+0xbc>)
 800275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002762:	613b      	str	r3, [r7, #16]
 8002764:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002766:	2200      	movs	r2, #0
 8002768:	2100      	movs	r1, #0
 800276a:	2019      	movs	r0, #25
 800276c:	f000 ff81 	bl	8003672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002770:	2019      	movs	r0, #25
 8002772:	f000 ff9a 	bl	80036aa <HAL_NVIC_EnableIRQ>
}
 8002776:	e01a      	b.n	80027ae <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a11      	ldr	r2, [pc, #68]	; (80027c4 <HAL_TIM_Base_MspInit+0xc4>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d115      	bne.n	80027ae <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	4b0d      	ldr	r3, [pc, #52]	; (80027bc <HAL_TIM_Base_MspInit+0xbc>)
 8002788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278a:	4a0c      	ldr	r2, [pc, #48]	; (80027bc <HAL_TIM_Base_MspInit+0xbc>)
 800278c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002790:	6453      	str	r3, [r2, #68]	; 0x44
 8002792:	4b0a      	ldr	r3, [pc, #40]	; (80027bc <HAL_TIM_Base_MspInit+0xbc>)
 8002794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002796:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800279e:	2200      	movs	r2, #0
 80027a0:	2100      	movs	r1, #0
 80027a2:	201a      	movs	r0, #26
 80027a4:	f000 ff65 	bl	8003672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80027a8:	201a      	movs	r0, #26
 80027aa:	f000 ff7e 	bl	80036aa <HAL_NVIC_EnableIRQ>
}
 80027ae:	bf00      	nop
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40000800 	.word	0x40000800
 80027bc:	40023800 	.word	0x40023800
 80027c0:	40014400 	.word	0x40014400
 80027c4:	40014800 	.word	0x40014800

080027c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08a      	sub	sp, #40	; 0x28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d0:	f107 0314 	add.w	r3, r7, #20
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	60da      	str	r2, [r3, #12]
 80027de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027e8:	d11e      	bne.n	8002828 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	613b      	str	r3, [r7, #16]
 80027ee:	4b22      	ldr	r3, [pc, #136]	; (8002878 <HAL_TIM_MspPostInit+0xb0>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	4a21      	ldr	r2, [pc, #132]	; (8002878 <HAL_TIM_MspPostInit+0xb0>)
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	6313      	str	r3, [r2, #48]	; 0x30
 80027fa:	4b1f      	ldr	r3, [pc, #124]	; (8002878 <HAL_TIM_MspPostInit+0xb0>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_CH1_SERVO_Pin;
 8002806:	2320      	movs	r3, #32
 8002808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280a:	2302      	movs	r3, #2
 800280c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280e:	2300      	movs	r3, #0
 8002810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002812:	2300      	movs	r3, #0
 8002814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002816:	2301      	movs	r3, #1
 8002818:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM2_CH1_SERVO_GPIO_Port, &GPIO_InitStruct);
 800281a:	f107 0314 	add.w	r3, r7, #20
 800281e:	4619      	mov	r1, r3
 8002820:	4816      	ldr	r0, [pc, #88]	; (800287c <HAL_TIM_MspPostInit+0xb4>)
 8002822:	f001 fb17 	bl	8003e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002826:	e023      	b.n	8002870 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a14      	ldr	r2, [pc, #80]	; (8002880 <HAL_TIM_MspPostInit+0xb8>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d11e      	bne.n	8002870 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	4b10      	ldr	r3, [pc, #64]	; (8002878 <HAL_TIM_MspPostInit+0xb0>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	4a0f      	ldr	r2, [pc, #60]	; (8002878 <HAL_TIM_MspPostInit+0xb0>)
 800283c:	f043 0308 	orr.w	r3, r3, #8
 8002840:	6313      	str	r3, [r2, #48]	; 0x30
 8002842:	4b0d      	ldr	r3, [pc, #52]	; (8002878 <HAL_TIM_MspPostInit+0xb0>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800284e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002854:	2302      	movs	r3, #2
 8002856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002858:	2300      	movs	r3, #0
 800285a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285c:	2300      	movs	r3, #0
 800285e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002860:	2302      	movs	r3, #2
 8002862:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002864:	f107 0314 	add.w	r3, r7, #20
 8002868:	4619      	mov	r1, r3
 800286a:	4806      	ldr	r0, [pc, #24]	; (8002884 <HAL_TIM_MspPostInit+0xbc>)
 800286c:	f001 faf2 	bl	8003e54 <HAL_GPIO_Init>
}
 8002870:	bf00      	nop
 8002872:	3728      	adds	r7, #40	; 0x28
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40023800 	.word	0x40023800
 800287c:	40020000 	.word	0x40020000
 8002880:	40000800 	.word	0x40000800
 8002884:	40020c00 	.word	0x40020c00

08002888 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b08c      	sub	sp, #48	; 0x30
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002890:	f107 031c 	add.w	r3, r7, #28
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	60da      	str	r2, [r3, #12]
 800289e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a3a      	ldr	r2, [pc, #232]	; (8002990 <HAL_UART_MspInit+0x108>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d135      	bne.n	8002916 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	61bb      	str	r3, [r7, #24]
 80028ae:	4b39      	ldr	r3, [pc, #228]	; (8002994 <HAL_UART_MspInit+0x10c>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	4a38      	ldr	r2, [pc, #224]	; (8002994 <HAL_UART_MspInit+0x10c>)
 80028b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028b8:	6413      	str	r3, [r2, #64]	; 0x40
 80028ba:	4b36      	ldr	r3, [pc, #216]	; (8002994 <HAL_UART_MspInit+0x10c>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028c2:	61bb      	str	r3, [r7, #24]
 80028c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	617b      	str	r3, [r7, #20]
 80028ca:	4b32      	ldr	r3, [pc, #200]	; (8002994 <HAL_UART_MspInit+0x10c>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	4a31      	ldr	r2, [pc, #196]	; (8002994 <HAL_UART_MspInit+0x10c>)
 80028d0:	f043 0308 	orr.w	r3, r3, #8
 80028d4:	6313      	str	r3, [r2, #48]	; 0x30
 80028d6:	4b2f      	ldr	r3, [pc, #188]	; (8002994 <HAL_UART_MspInit+0x10c>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	f003 0308 	and.w	r3, r3, #8
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80028e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e8:	2302      	movs	r3, #2
 80028ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f0:	2303      	movs	r3, #3
 80028f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028f4:	2307      	movs	r3, #7
 80028f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028f8:	f107 031c 	add.w	r3, r7, #28
 80028fc:	4619      	mov	r1, r3
 80028fe:	4826      	ldr	r0, [pc, #152]	; (8002998 <HAL_UART_MspInit+0x110>)
 8002900:	f001 faa8 	bl	8003e54 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002904:	2200      	movs	r2, #0
 8002906:	2100      	movs	r1, #0
 8002908:	2027      	movs	r0, #39	; 0x27
 800290a:	f000 feb2 	bl	8003672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800290e:	2027      	movs	r0, #39	; 0x27
 8002910:	f000 fecb 	bl	80036aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002914:	e038      	b.n	8002988 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART6)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a20      	ldr	r2, [pc, #128]	; (800299c <HAL_UART_MspInit+0x114>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d133      	bne.n	8002988 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002920:	2300      	movs	r3, #0
 8002922:	613b      	str	r3, [r7, #16]
 8002924:	4b1b      	ldr	r3, [pc, #108]	; (8002994 <HAL_UART_MspInit+0x10c>)
 8002926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002928:	4a1a      	ldr	r2, [pc, #104]	; (8002994 <HAL_UART_MspInit+0x10c>)
 800292a:	f043 0320 	orr.w	r3, r3, #32
 800292e:	6453      	str	r3, [r2, #68]	; 0x44
 8002930:	4b18      	ldr	r3, [pc, #96]	; (8002994 <HAL_UART_MspInit+0x10c>)
 8002932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002934:	f003 0320 	and.w	r3, r3, #32
 8002938:	613b      	str	r3, [r7, #16]
 800293a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800293c:	2300      	movs	r3, #0
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	4b14      	ldr	r3, [pc, #80]	; (8002994 <HAL_UART_MspInit+0x10c>)
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	4a13      	ldr	r2, [pc, #76]	; (8002994 <HAL_UART_MspInit+0x10c>)
 8002946:	f043 0304 	orr.w	r3, r3, #4
 800294a:	6313      	str	r3, [r2, #48]	; 0x30
 800294c:	4b11      	ldr	r3, [pc, #68]	; (8002994 <HAL_UART_MspInit+0x10c>)
 800294e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002958:	23c0      	movs	r3, #192	; 0xc0
 800295a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295c:	2302      	movs	r3, #2
 800295e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002960:	2300      	movs	r3, #0
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002964:	2303      	movs	r3, #3
 8002966:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002968:	2308      	movs	r3, #8
 800296a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800296c:	f107 031c 	add.w	r3, r7, #28
 8002970:	4619      	mov	r1, r3
 8002972:	480b      	ldr	r0, [pc, #44]	; (80029a0 <HAL_UART_MspInit+0x118>)
 8002974:	f001 fa6e 	bl	8003e54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002978:	2200      	movs	r2, #0
 800297a:	2100      	movs	r1, #0
 800297c:	2047      	movs	r0, #71	; 0x47
 800297e:	f000 fe78 	bl	8003672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002982:	2047      	movs	r0, #71	; 0x47
 8002984:	f000 fe91 	bl	80036aa <HAL_NVIC_EnableIRQ>
}
 8002988:	bf00      	nop
 800298a:	3730      	adds	r7, #48	; 0x30
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40004800 	.word	0x40004800
 8002994:	40023800 	.word	0x40023800
 8002998:	40020c00 	.word	0x40020c00
 800299c:	40011400 	.word	0x40011400
 80029a0:	40020800 	.word	0x40020800

080029a4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08a      	sub	sp, #40	; 0x28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ac:	f107 0314 	add.w	r3, r7, #20
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	60da      	str	r2, [r3, #12]
 80029ba:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029c4:	d13f      	bne.n	8002a46 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	613b      	str	r3, [r7, #16]
 80029ca:	4b21      	ldr	r3, [pc, #132]	; (8002a50 <HAL_PCD_MspInit+0xac>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	4a20      	ldr	r2, [pc, #128]	; (8002a50 <HAL_PCD_MspInit+0xac>)
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	6313      	str	r3, [r2, #48]	; 0x30
 80029d6:	4b1e      	ldr	r3, [pc, #120]	; (8002a50 <HAL_PCD_MspInit+0xac>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	613b      	str	r3, [r7, #16]
 80029e0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80029e2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80029e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e8:	2302      	movs	r3, #2
 80029ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f0:	2303      	movs	r3, #3
 80029f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80029f4:	230a      	movs	r3, #10
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f8:	f107 0314 	add.w	r3, r7, #20
 80029fc:	4619      	mov	r1, r3
 80029fe:	4815      	ldr	r0, [pc, #84]	; (8002a54 <HAL_PCD_MspInit+0xb0>)
 8002a00:	f001 fa28 	bl	8003e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002a04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002a12:	f107 0314 	add.w	r3, r7, #20
 8002a16:	4619      	mov	r1, r3
 8002a18:	480e      	ldr	r0, [pc, #56]	; (8002a54 <HAL_PCD_MspInit+0xb0>)
 8002a1a:	f001 fa1b 	bl	8003e54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002a1e:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <HAL_PCD_MspInit+0xac>)
 8002a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a22:	4a0b      	ldr	r2, [pc, #44]	; (8002a50 <HAL_PCD_MspInit+0xac>)
 8002a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a28:	6353      	str	r3, [r2, #52]	; 0x34
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	4b08      	ldr	r3, [pc, #32]	; (8002a50 <HAL_PCD_MspInit+0xac>)
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a32:	4a07      	ldr	r2, [pc, #28]	; (8002a50 <HAL_PCD_MspInit+0xac>)
 8002a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a38:	6453      	str	r3, [r2, #68]	; 0x44
 8002a3a:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <HAL_PCD_MspInit+0xac>)
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002a46:	bf00      	nop
 8002a48:	3728      	adds	r7, #40	; 0x28
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40023800 	.word	0x40023800
 8002a54:	40020000 	.word	0x40020000

08002a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a5c:	e7fe      	b.n	8002a5c <NMI_Handler+0x4>

08002a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a62:	e7fe      	b.n	8002a62 <HardFault_Handler+0x4>

08002a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a68:	e7fe      	b.n	8002a68 <MemManage_Handler+0x4>

08002a6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a6e:	e7fe      	b.n	8002a6e <BusFault_Handler+0x4>

08002a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a74:	e7fe      	b.n	8002a74 <UsageFault_Handler+0x4>

08002a76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a76:	b480      	push	{r7}
 8002a78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a7a:	bf00      	nop
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a88:	bf00      	nop
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a92:	b480      	push	{r7}
 8002a94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a96:	bf00      	nop
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002aa4:	f000 fcc6 	bl	8003434 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_STSTICK_Handler(); // ADD_kenGwon_231006
 8002aa8:	f7fe ff86 	bl	80019b8 <HAL_STSTICK_Handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002aac:	bf00      	nop
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002ab4:	4802      	ldr	r0, [pc, #8]	; (8002ac0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002ab6:	f003 faa7 	bl	8006008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002aba:	bf00      	nop
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	20000400 	.word	0x20000400

08002ac4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002ac8:	4802      	ldr	r0, [pc, #8]	; (8002ad4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002aca:	f003 fa9d 	bl	8006008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20000448 	.word	0x20000448

08002ad8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002adc:	4802      	ldr	r0, [pc, #8]	; (8002ae8 <TIM2_IRQHandler+0x10>)
 8002ade:	f003 fa93 	bl	8006008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002ae2:	bf00      	nop
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20000328 	.word	0x20000328

08002aec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002af0:	4802      	ldr	r0, [pc, #8]	; (8002afc <TIM3_IRQHandler+0x10>)
 8002af2:	f003 fa89 	bl	8006008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002af6:	bf00      	nop
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	20000370 	.word	0x20000370

08002b00 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002b04:	4802      	ldr	r0, [pc, #8]	; (8002b10 <TIM4_IRQHandler+0x10>)
 8002b06:	f003 fa7f 	bl	8006008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002b0a:	bf00      	nop
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	200003b8 	.word	0x200003b8

08002b14 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002b18:	4802      	ldr	r0, [pc, #8]	; (8002b24 <USART3_IRQHandler+0x10>)
 8002b1a:	f004 fbdf 	bl	80072dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	20000490 	.word	0x20000490

08002b28 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002b2c:	4802      	ldr	r0, [pc, #8]	; (8002b38 <USART6_IRQHandler+0x10>)
 8002b2e:	f004 fbd5 	bl	80072dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002b32:	bf00      	nop
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	200004d4 	.word	0x200004d4

08002b3c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b48:	2300      	movs	r3, #0
 8002b4a:	617b      	str	r3, [r7, #20]
 8002b4c:	e00a      	b.n	8002b64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b4e:	f3af 8000 	nop.w
 8002b52:	4601      	mov	r1, r0
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	1c5a      	adds	r2, r3, #1
 8002b58:	60ba      	str	r2, [r7, #8]
 8002b5a:	b2ca      	uxtb	r2, r1
 8002b5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	3301      	adds	r3, #1
 8002b62:	617b      	str	r3, [r7, #20]
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	dbf0      	blt.n	8002b4e <_read+0x12>
  }

  return len;
 8002b6c:	687b      	ldr	r3, [r7, #4]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3718      	adds	r7, #24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b086      	sub	sp, #24
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	60f8      	str	r0, [r7, #12]
 8002b7e:	60b9      	str	r1, [r7, #8]
 8002b80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	e009      	b.n	8002b9c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	1c5a      	adds	r2, r3, #1
 8002b8c:	60ba      	str	r2, [r7, #8]
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fe ff6b 	bl	8001a6c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	617b      	str	r3, [r7, #20]
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	dbf1      	blt.n	8002b88 <_write+0x12>
  }
  return len;
 8002ba4:	687b      	ldr	r3, [r7, #4]
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <_close>:

int _close(int file)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b083      	sub	sp, #12
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002bb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
 8002bce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bd6:	605a      	str	r2, [r3, #4]
  return 0;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <_isatty>:

int _isatty(int file)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002bee:	2301      	movs	r3, #1
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
	...

08002c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c20:	4a14      	ldr	r2, [pc, #80]	; (8002c74 <_sbrk+0x5c>)
 8002c22:	4b15      	ldr	r3, [pc, #84]	; (8002c78 <_sbrk+0x60>)
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c2c:	4b13      	ldr	r3, [pc, #76]	; (8002c7c <_sbrk+0x64>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d102      	bne.n	8002c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c34:	4b11      	ldr	r3, [pc, #68]	; (8002c7c <_sbrk+0x64>)
 8002c36:	4a12      	ldr	r2, [pc, #72]	; (8002c80 <_sbrk+0x68>)
 8002c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c3a:	4b10      	ldr	r3, [pc, #64]	; (8002c7c <_sbrk+0x64>)
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4413      	add	r3, r2
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d207      	bcs.n	8002c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c48:	f005 fdb6 	bl	80087b8 <__errno>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	220c      	movs	r2, #12
 8002c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c52:	f04f 33ff 	mov.w	r3, #4294967295
 8002c56:	e009      	b.n	8002c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c58:	4b08      	ldr	r3, [pc, #32]	; (8002c7c <_sbrk+0x64>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c5e:	4b07      	ldr	r3, [pc, #28]	; (8002c7c <_sbrk+0x64>)
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4413      	add	r3, r2
 8002c66:	4a05      	ldr	r2, [pc, #20]	; (8002c7c <_sbrk+0x64>)
 8002c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3718      	adds	r7, #24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	20030000 	.word	0x20030000
 8002c78:	00000400 	.word	0x00000400
 8002c7c:	20000a48 	.word	0x20000a48
 8002c80:	20000dc8 	.word	0x20000dc8

08002c84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c88:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <SystemInit+0x20>)
 8002c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8e:	4a05      	ldr	r2, [pc, #20]	; (8002ca4 <SystemInit+0x20>)
 8002c90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c98:	bf00      	nop
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	e000ed00 	.word	0xe000ed00

08002ca8 <HAL_UART_RxCpltCallback>:
volatile int bt_rx_index = 0; // bt_rx_buff의 save위치
volatile int bt_newline_detect_flag = 0; // \n을 만났다는 것을 알려주는 플래그변수..


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ca8:	b590      	push	{r4, r7, lr}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]

#if 1

	if (huart == &huart3)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a4c      	ldr	r2, [pc, #304]	; (8002de4 <HAL_UART_RxCpltCallback+0x13c>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d160      	bne.n	8002d7a <HAL_UART_RxCpltCallback+0xd2>
	{
		if ((queue_rear+1)%QUEUE_MAX != queue_front)
 8002cb8:	4b4b      	ldr	r3, [pc, #300]	; (8002de8 <HAL_UART_RxCpltCallback+0x140>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	1c59      	adds	r1, r3, #1
 8002cbe:	4b4b      	ldr	r3, [pc, #300]	; (8002dec <HAL_UART_RxCpltCallback+0x144>)
 8002cc0:	fb83 2301 	smull	r2, r3, r3, r1
 8002cc4:	10da      	asrs	r2, r3, #3
 8002cc6:	17cb      	asrs	r3, r1, #31
 8002cc8:	1ad2      	subs	r2, r2, r3
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	1aca      	subs	r2, r1, r3
 8002cd4:	4b46      	ldr	r3, [pc, #280]	; (8002df0 <HAL_UART_RxCpltCallback+0x148>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d049      	beq.n	8002d70 <HAL_UART_RxCpltCallback+0xc8>
		{
			if (rx_index < COMMAND_LENGTH)
 8002cdc:	4b45      	ldr	r3, [pc, #276]	; (8002df4 <HAL_UART_RxCpltCallback+0x14c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b27      	cmp	r3, #39	; 0x27
 8002ce2:	dc3f      	bgt.n	8002d64 <HAL_UART_RxCpltCallback+0xbc>
			{
				if (rx_data == '\n' || rx_data == '\r')
 8002ce4:	4b44      	ldr	r3, [pc, #272]	; (8002df8 <HAL_UART_RxCpltCallback+0x150>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b0a      	cmp	r3, #10
 8002cea:	d003      	beq.n	8002cf4 <HAL_UART_RxCpltCallback+0x4c>
 8002cec:	4b42      	ldr	r3, [pc, #264]	; (8002df8 <HAL_UART_RxCpltCallback+0x150>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b0d      	cmp	r3, #13
 8002cf2:	d124      	bne.n	8002d3e <HAL_UART_RxCpltCallback+0x96>
				{
					rx_buff[queue_rear][rx_index] = '\0';
 8002cf4:	4b3c      	ldr	r3, [pc, #240]	; (8002de8 <HAL_UART_RxCpltCallback+0x140>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	4b3e      	ldr	r3, [pc, #248]	; (8002df4 <HAL_UART_RxCpltCallback+0x14c>)
 8002cfa:	6819      	ldr	r1, [r3, #0]
 8002cfc:	483f      	ldr	r0, [pc, #252]	; (8002dfc <HAL_UART_RxCpltCallback+0x154>)
 8002cfe:	4613      	mov	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4403      	add	r3, r0
 8002d08:	440b      	add	r3, r1
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	701a      	strb	r2, [r3, #0]
					rx_index = 0;
 8002d0e:	4b39      	ldr	r3, [pc, #228]	; (8002df4 <HAL_UART_RxCpltCallback+0x14c>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
					queue_rear++;
 8002d14:	4b34      	ldr	r3, [pc, #208]	; (8002de8 <HAL_UART_RxCpltCallback+0x140>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	4a33      	ldr	r2, [pc, #204]	; (8002de8 <HAL_UART_RxCpltCallback+0x140>)
 8002d1c:	6013      	str	r3, [r2, #0]
					queue_rear %= QUEUE_MAX;
 8002d1e:	4b32      	ldr	r3, [pc, #200]	; (8002de8 <HAL_UART_RxCpltCallback+0x140>)
 8002d20:	6819      	ldr	r1, [r3, #0]
 8002d22:	4b32      	ldr	r3, [pc, #200]	; (8002dec <HAL_UART_RxCpltCallback+0x144>)
 8002d24:	fb83 2301 	smull	r2, r3, r3, r1
 8002d28:	10da      	asrs	r2, r3, #3
 8002d2a:	17cb      	asrs	r3, r1, #31
 8002d2c:	1ad2      	subs	r2, r2, r3
 8002d2e:	4613      	mov	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4413      	add	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	1aca      	subs	r2, r1, r3
 8002d38:	4b2b      	ldr	r3, [pc, #172]	; (8002de8 <HAL_UART_RxCpltCallback+0x140>)
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	e018      	b.n	8002d70 <HAL_UART_RxCpltCallback+0xc8>
				}
				else
				{
					rx_buff[queue_rear][rx_index++] = rx_data;
 8002d3e:	4b2a      	ldr	r3, [pc, #168]	; (8002de8 <HAL_UART_RxCpltCallback+0x140>)
 8002d40:	6819      	ldr	r1, [r3, #0]
 8002d42:	4b2c      	ldr	r3, [pc, #176]	; (8002df4 <HAL_UART_RxCpltCallback+0x14c>)
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	1c53      	adds	r3, r2, #1
 8002d48:	482a      	ldr	r0, [pc, #168]	; (8002df4 <HAL_UART_RxCpltCallback+0x14c>)
 8002d4a:	6003      	str	r3, [r0, #0]
 8002d4c:	4b2a      	ldr	r3, [pc, #168]	; (8002df8 <HAL_UART_RxCpltCallback+0x150>)
 8002d4e:	781c      	ldrb	r4, [r3, #0]
 8002d50:	482a      	ldr	r0, [pc, #168]	; (8002dfc <HAL_UART_RxCpltCallback+0x154>)
 8002d52:	460b      	mov	r3, r1
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	440b      	add	r3, r1
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	4403      	add	r3, r0
 8002d5c:	4413      	add	r3, r2
 8002d5e:	4622      	mov	r2, r4
 8002d60:	701a      	strb	r2, [r3, #0]
 8002d62:	e005      	b.n	8002d70 <HAL_UART_RxCpltCallback+0xc8>
				}
			}
			else
			{
				rx_index = 0;
 8002d64:	4b23      	ldr	r3, [pc, #140]	; (8002df4 <HAL_UART_RxCpltCallback+0x14c>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
				printf("Message Overflow !!!\n");
 8002d6a:	4825      	ldr	r0, [pc, #148]	; (8002e00 <HAL_UART_RxCpltCallback+0x158>)
 8002d6c:	f005 fddc 	bl	8008928 <puts>
		{

		}

		// 주의: 반드시 HAL_UART_Receive_IT() 함수를 call 해줘야 다음 인터럽트가 이어서 발생이 가능해진다.
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8002d70:	2201      	movs	r2, #1
 8002d72:	4921      	ldr	r1, [pc, #132]	; (8002df8 <HAL_UART_RxCpltCallback+0x150>)
 8002d74:	481b      	ldr	r0, [pc, #108]	; (8002de4 <HAL_UART_RxCpltCallback+0x13c>)
 8002d76:	f004 fa80 	bl	800727a <HAL_UART_Receive_IT>
		// 주의: 반드시 HAL_UART_Receive_IT() 함수를 call 해줘야 다음 인터럽트가 이어서 발생이 가능해진다.
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);
	}
#endif

	if (huart == &huart6) // Bluetooth와 연결된 uart
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a21      	ldr	r2, [pc, #132]	; (8002e04 <HAL_UART_RxCpltCallback+0x15c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d12c      	bne.n	8002ddc <HAL_UART_RxCpltCallback+0x134>
	{
		if (bt_rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 8002d82:	4b21      	ldr	r3, [pc, #132]	; (8002e08 <HAL_UART_RxCpltCallback+0x160>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2b27      	cmp	r3, #39	; 0x27
 8002d88:	dc1d      	bgt.n	8002dc6 <HAL_UART_RxCpltCallback+0x11e>
		{
			if(bt_rx_data == '\n' || bt_rx_data == '\r')
 8002d8a:	4b20      	ldr	r3, [pc, #128]	; (8002e0c <HAL_UART_RxCpltCallback+0x164>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	2b0a      	cmp	r3, #10
 8002d90:	d003      	beq.n	8002d9a <HAL_UART_RxCpltCallback+0xf2>
 8002d92:	4b1e      	ldr	r3, [pc, #120]	; (8002e0c <HAL_UART_RxCpltCallback+0x164>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b0d      	cmp	r3, #13
 8002d98:	d10b      	bne.n	8002db2 <HAL_UART_RxCpltCallback+0x10a>
			{
				bt_rx_buff[bt_rx_index] = 0; // '\0'
 8002d9a:	4b1b      	ldr	r3, [pc, #108]	; (8002e08 <HAL_UART_RxCpltCallback+0x160>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a1c      	ldr	r2, [pc, #112]	; (8002e10 <HAL_UART_RxCpltCallback+0x168>)
 8002da0:	2100      	movs	r1, #0
 8002da2:	54d1      	strb	r1, [r2, r3]
				bt_newline_detect_flag = 1;
 8002da4:	4b1b      	ldr	r3, [pc, #108]	; (8002e14 <HAL_UART_RxCpltCallback+0x16c>)
 8002da6:	2201      	movs	r2, #1
 8002da8:	601a      	str	r2, [r3, #0]
				bt_rx_index = 0; // 다음 메시지 저장을 위해서 rx_index값을 0으로 한다.
 8002daa:	4b17      	ldr	r3, [pc, #92]	; (8002e08 <HAL_UART_RxCpltCallback+0x160>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	e00f      	b.n	8002dd2 <HAL_UART_RxCpltCallback+0x12a>
			}
			else
			{
				bt_rx_buff[bt_rx_index++] = bt_rx_data;
 8002db2:	4b15      	ldr	r3, [pc, #84]	; (8002e08 <HAL_UART_RxCpltCallback+0x160>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	1c5a      	adds	r2, r3, #1
 8002db8:	4913      	ldr	r1, [pc, #76]	; (8002e08 <HAL_UART_RxCpltCallback+0x160>)
 8002dba:	600a      	str	r2, [r1, #0]
 8002dbc:	4a13      	ldr	r2, [pc, #76]	; (8002e0c <HAL_UART_RxCpltCallback+0x164>)
 8002dbe:	7811      	ldrb	r1, [r2, #0]
 8002dc0:	4a13      	ldr	r2, [pc, #76]	; (8002e10 <HAL_UART_RxCpltCallback+0x168>)
 8002dc2:	54d1      	strb	r1, [r2, r3]
 8002dc4:	e005      	b.n	8002dd2 <HAL_UART_RxCpltCallback+0x12a>
			}
		}
		else
		{
			bt_rx_index = 0;
 8002dc6:	4b10      	ldr	r3, [pc, #64]	; (8002e08 <HAL_UART_RxCpltCallback+0x160>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
			printf("Message Overflow !!!\n");
 8002dcc:	480c      	ldr	r0, [pc, #48]	; (8002e00 <HAL_UART_RxCpltCallback+0x158>)
 8002dce:	f005 fdab 	bl	8008928 <puts>
		}

		// 주의: 반드시 HAL_UART_Receive_IT() 함수를 call 해줘야 다음 인터럽트가 이어서 발생이 가능해진다.
		HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	490d      	ldr	r1, [pc, #52]	; (8002e0c <HAL_UART_RxCpltCallback+0x164>)
 8002dd6:	480b      	ldr	r0, [pc, #44]	; (8002e04 <HAL_UART_RxCpltCallback+0x15c>)
 8002dd8:	f004 fa4f 	bl	800727a <HAL_UART_Receive_IT>
	}
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd90      	pop	{r4, r7, pc}
 8002de4:	20000490 	.word	0x20000490
 8002de8:	20000d70 	.word	0x20000d70
 8002dec:	66666667 	.word	0x66666667
 8002df0:	20000d6c 	.word	0x20000d6c
 8002df4:	20000d74 	.word	0x20000d74
 8002df8:	20000a24 	.word	0x20000a24
 8002dfc:	20000a4c 	.word	0x20000a4c
 8002e00:	08009df0 	.word	0x08009df0
 8002e04:	200004d4 	.word	0x200004d4
 8002e08:	20000da0 	.word	0x20000da0
 8002e0c:	20000a25 	.word	0x20000a25
 8002e10:	20000d78 	.word	0x20000d78
 8002e14:	20000da4 	.word	0x20000da4

08002e18 <pc_command_processing>:

void pc_command_processing(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
	if (queue_front != queue_rear) // 원형쿠로 구성한게 아니기 때무네, 뉴라인 플래그가 서 있을 때만 완전한 문장이 들어왔다고 판단하고 함수가 진해오디어야 하낟.
 8002e1c:	4b9e      	ldr	r3, [pc, #632]	; (8003098 <pc_command_processing+0x280>)
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	4b9e      	ldr	r3, [pc, #632]	; (800309c <pc_command_processing+0x284>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	f000 8136 	beq.w	8003096 <pc_command_processing+0x27e>
	{
		queue_front++;
 8002e2a:	4b9b      	ldr	r3, [pc, #620]	; (8003098 <pc_command_processing+0x280>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	4a99      	ldr	r2, [pc, #612]	; (8003098 <pc_command_processing+0x280>)
 8002e32:	6013      	str	r3, [r2, #0]
		queue_front %= QUEUE_MAX;
 8002e34:	4b98      	ldr	r3, [pc, #608]	; (8003098 <pc_command_processing+0x280>)
 8002e36:	6819      	ldr	r1, [r3, #0]
 8002e38:	4b99      	ldr	r3, [pc, #612]	; (80030a0 <pc_command_processing+0x288>)
 8002e3a:	fb83 2301 	smull	r2, r3, r3, r1
 8002e3e:	10da      	asrs	r2, r3, #3
 8002e40:	17cb      	asrs	r3, r1, #31
 8002e42:	1ad2      	subs	r2, r2, r3
 8002e44:	4613      	mov	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	1aca      	subs	r2, r1, r3
 8002e4e:	4b92      	ldr	r3, [pc, #584]	; (8003098 <pc_command_processing+0x280>)
 8002e50:	601a      	str	r2, [r3, #0]
//		newline_detect_flag = 0;

		printf("%s\n", rx_buff[queue_front - 1]);
 8002e52:	4b91      	ldr	r3, [pc, #580]	; (8003098 <pc_command_processing+0x280>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	1e5a      	subs	r2, r3, #1
 8002e58:	4613      	mov	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	4a90      	ldr	r2, [pc, #576]	; (80030a4 <pc_command_processing+0x28c>)
 8002e62:	4413      	add	r3, r2
 8002e64:	4618      	mov	r0, r3
 8002e66:	f005 fd5f 	bl	8008928 <puts>

		if (!strncmp(rx_buff[queue_front - 1], "led_all_on", strlen("led_all_on"))) // 느낌표가 들어갔다!! strcmp는 같으면 0을 리턴하기 때문에 if문에 진입하려먼 !not을 통해서 1(true)로 뒤집어 줘야 한다.
 8002e6a:	4b8b      	ldr	r3, [pc, #556]	; (8003098 <pc_command_processing+0x280>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	1e5a      	subs	r2, r3, #1
 8002e70:	4613      	mov	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	4a8a      	ldr	r2, [pc, #552]	; (80030a4 <pc_command_processing+0x28c>)
 8002e7a:	4413      	add	r3, r2
 8002e7c:	220a      	movs	r2, #10
 8002e7e:	498a      	ldr	r1, [pc, #552]	; (80030a8 <pc_command_processing+0x290>)
 8002e80:	4618      	mov	r0, r3
 8002e82:	f005 fd79 	bl	8008978 <strncmp>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d102      	bne.n	8002e92 <pc_command_processing+0x7a>
		{
			led_all_on();
 8002e8c:	f7fe fc52 	bl	8001734 <led_all_on>
			return;
 8002e90:	e101      	b.n	8003096 <pc_command_processing+0x27e>
		}
		if (!strncmp(rx_buff[queue_front - 1], "led_all_off", strlen("led_all_off")))
 8002e92:	4b81      	ldr	r3, [pc, #516]	; (8003098 <pc_command_processing+0x280>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	1e5a      	subs	r2, r3, #1
 8002e98:	4613      	mov	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	4a80      	ldr	r2, [pc, #512]	; (80030a4 <pc_command_processing+0x28c>)
 8002ea2:	4413      	add	r3, r2
 8002ea4:	220b      	movs	r2, #11
 8002ea6:	4981      	ldr	r1, [pc, #516]	; (80030ac <pc_command_processing+0x294>)
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f005 fd65 	bl	8008978 <strncmp>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d102      	bne.n	8002eba <pc_command_processing+0xa2>
		{
			led_all_off();
 8002eb4:	f7fe fc4a 	bl	800174c <led_all_off>
			return;
 8002eb8:	e0ed      	b.n	8003096 <pc_command_processing+0x27e>
		}
		if (!strncmp(rx_buff[queue_front - 1], "led_on_up", strlen("led_on_up")))
 8002eba:	4b77      	ldr	r3, [pc, #476]	; (8003098 <pc_command_processing+0x280>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	1e5a      	subs	r2, r3, #1
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	4a76      	ldr	r2, [pc, #472]	; (80030a4 <pc_command_processing+0x28c>)
 8002eca:	4413      	add	r3, r2
 8002ecc:	2209      	movs	r2, #9
 8002ece:	4978      	ldr	r1, [pc, #480]	; (80030b0 <pc_command_processing+0x298>)
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f005 fd51 	bl	8008978 <strncmp>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d102      	bne.n	8002ee2 <pc_command_processing+0xca>
		{
			led_on_up();
 8002edc:	f7fe fc42 	bl	8001764 <led_on_up>
			return;
 8002ee0:	e0d9      	b.n	8003096 <pc_command_processing+0x27e>
		}
		if (!strncmp(rx_buff[queue_front - 1], "led_on_down", strlen("led_on_down")))
 8002ee2:	4b6d      	ldr	r3, [pc, #436]	; (8003098 <pc_command_processing+0x280>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	1e5a      	subs	r2, r3, #1
 8002ee8:	4613      	mov	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	4a6c      	ldr	r2, [pc, #432]	; (80030a4 <pc_command_processing+0x28c>)
 8002ef2:	4413      	add	r3, r2
 8002ef4:	220b      	movs	r2, #11
 8002ef6:	496f      	ldr	r1, [pc, #444]	; (80030b4 <pc_command_processing+0x29c>)
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f005 fd3d 	bl	8008978 <strncmp>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d102      	bne.n	8002f0a <pc_command_processing+0xf2>
		{
			led_on_down();
 8002f04:	f7fe fc5a 	bl	80017bc <led_on_down>
			return;
 8002f08:	e0c5      	b.n	8003096 <pc_command_processing+0x27e>
		}
		if (!strncmp(rx_buff[queue_front - 1], "led_keepon_up", strlen("led_keepon_up")))
 8002f0a:	4b63      	ldr	r3, [pc, #396]	; (8003098 <pc_command_processing+0x280>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	1e5a      	subs	r2, r3, #1
 8002f10:	4613      	mov	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4a62      	ldr	r2, [pc, #392]	; (80030a4 <pc_command_processing+0x28c>)
 8002f1a:	4413      	add	r3, r2
 8002f1c:	220d      	movs	r2, #13
 8002f1e:	4966      	ldr	r1, [pc, #408]	; (80030b8 <pc_command_processing+0x2a0>)
 8002f20:	4618      	mov	r0, r3
 8002f22:	f005 fd29 	bl	8008978 <strncmp>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d102      	bne.n	8002f32 <pc_command_processing+0x11a>
		{
			led_keepon_up();
 8002f2c:	f7fe fc72 	bl	8001814 <led_keepon_up>
			return;
 8002f30:	e0b1      	b.n	8003096 <pc_command_processing+0x27e>
		}
		if (!strncmp(rx_buff[queue_front - 1], "led_keepon_down", strlen("led_keepon_down")))
 8002f32:	4b59      	ldr	r3, [pc, #356]	; (8003098 <pc_command_processing+0x280>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	1e5a      	subs	r2, r3, #1
 8002f38:	4613      	mov	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4413      	add	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	4a58      	ldr	r2, [pc, #352]	; (80030a4 <pc_command_processing+0x28c>)
 8002f42:	4413      	add	r3, r2
 8002f44:	220f      	movs	r2, #15
 8002f46:	495d      	ldr	r1, [pc, #372]	; (80030bc <pc_command_processing+0x2a4>)
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f005 fd15 	bl	8008978 <strncmp>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d102      	bne.n	8002f5a <pc_command_processing+0x142>
		{
			led_keepon_down();
 8002f54:	f7fe fc88 	bl	8001868 <led_keepon_down>
			return;
 8002f58:	e09d      	b.n	8003096 <pc_command_processing+0x27e>
		}
		if (!strncmp(rx_buff[queue_front - 1], "led_flower_on", strlen("led_flower_on")))
 8002f5a:	4b4f      	ldr	r3, [pc, #316]	; (8003098 <pc_command_processing+0x280>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	1e5a      	subs	r2, r3, #1
 8002f60:	4613      	mov	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	4a4e      	ldr	r2, [pc, #312]	; (80030a4 <pc_command_processing+0x28c>)
 8002f6a:	4413      	add	r3, r2
 8002f6c:	220d      	movs	r2, #13
 8002f6e:	4954      	ldr	r1, [pc, #336]	; (80030c0 <pc_command_processing+0x2a8>)
 8002f70:	4618      	mov	r0, r3
 8002f72:	f005 fd01 	bl	8008978 <strncmp>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d102      	bne.n	8002f82 <pc_command_processing+0x16a>
		{
			led_flower_on();
 8002f7c:	f7fe fc9e 	bl	80018bc <led_flower_on>
			return;
 8002f80:	e089      	b.n	8003096 <pc_command_processing+0x27e>
		}
		if (!strncmp(rx_buff[queue_front - 1], "led_flower_off", strlen("led_flower_off")))
 8002f82:	4b45      	ldr	r3, [pc, #276]	; (8003098 <pc_command_processing+0x280>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	1e5a      	subs	r2, r3, #1
 8002f88:	4613      	mov	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	4a44      	ldr	r2, [pc, #272]	; (80030a4 <pc_command_processing+0x28c>)
 8002f92:	4413      	add	r3, r2
 8002f94:	220e      	movs	r2, #14
 8002f96:	494b      	ldr	r1, [pc, #300]	; (80030c4 <pc_command_processing+0x2ac>)
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f005 fced 	bl	8008978 <strncmp>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d102      	bne.n	8002faa <pc_command_processing+0x192>
		{
			led_flower_off();
 8002fa4:	f7fe fcca 	bl	800193c <led_flower_off>
			return;
 8002fa8:	e075      	b.n	8003096 <pc_command_processing+0x27e>
		}


		if (!strncmp(rx_buff[queue_front - 1], "dht11time", strlen("dht11time")))
 8002faa:	4b3b      	ldr	r3, [pc, #236]	; (8003098 <pc_command_processing+0x280>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	1e5a      	subs	r2, r3, #1
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	4a3a      	ldr	r2, [pc, #232]	; (80030a4 <pc_command_processing+0x28c>)
 8002fba:	4413      	add	r3, r2
 8002fbc:	2209      	movs	r2, #9
 8002fbe:	4942      	ldr	r1, [pc, #264]	; (80030c8 <pc_command_processing+0x2b0>)
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f005 fcd9 	bl	8008978 <strncmp>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d110      	bne.n	8002fee <pc_command_processing+0x1d6>
		{
			dht11time = atoi(rx_buff[queue_front - 1] + 9);
 8002fcc:	4b32      	ldr	r3, [pc, #200]	; (8003098 <pc_command_processing+0x280>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	1e5a      	subs	r2, r3, #1
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	4a32      	ldr	r2, [pc, #200]	; (80030a4 <pc_command_processing+0x28c>)
 8002fdc:	4413      	add	r3, r2
 8002fde:	3309      	adds	r3, #9
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f005 fbe5 	bl	80087b0 <atoi>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	4a38      	ldr	r2, [pc, #224]	; (80030cc <pc_command_processing+0x2b4>)
 8002fea:	6013      	str	r3, [r2, #0]
			return;
 8002fec:	e053      	b.n	8003096 <pc_command_processing+0x27e>
		}

		if (!strncmp(rx_buff[queue_front - 1], "dht11_on", strlen("dht11_on")))
 8002fee:	4b2a      	ldr	r3, [pc, #168]	; (8003098 <pc_command_processing+0x280>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	1e5a      	subs	r2, r3, #1
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	4a29      	ldr	r2, [pc, #164]	; (80030a4 <pc_command_processing+0x28c>)
 8002ffe:	4413      	add	r3, r2
 8003000:	2208      	movs	r2, #8
 8003002:	4933      	ldr	r1, [pc, #204]	; (80030d0 <pc_command_processing+0x2b8>)
 8003004:	4618      	mov	r0, r3
 8003006:	f005 fcb7 	bl	8008978 <strncmp>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d103      	bne.n	8003018 <pc_command_processing+0x200>
		{
			DHT11_print_flag = 1;
 8003010:	4b30      	ldr	r3, [pc, #192]	; (80030d4 <pc_command_processing+0x2bc>)
 8003012:	2201      	movs	r2, #1
 8003014:	601a      	str	r2, [r3, #0]
			return;
 8003016:	e03e      	b.n	8003096 <pc_command_processing+0x27e>
		}
		if (!strncmp(rx_buff[queue_front - 1], "dht11_off", strlen("dht11_off")))
 8003018:	4b1f      	ldr	r3, [pc, #124]	; (8003098 <pc_command_processing+0x280>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	1e5a      	subs	r2, r3, #1
 800301e:	4613      	mov	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	4a1f      	ldr	r2, [pc, #124]	; (80030a4 <pc_command_processing+0x28c>)
 8003028:	4413      	add	r3, r2
 800302a:	2209      	movs	r2, #9
 800302c:	492a      	ldr	r1, [pc, #168]	; (80030d8 <pc_command_processing+0x2c0>)
 800302e:	4618      	mov	r0, r3
 8003030:	f005 fca2 	bl	8008978 <strncmp>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d103      	bne.n	8003042 <pc_command_processing+0x22a>
		{
			DHT11_print_flag = 0;
 800303a:	4b26      	ldr	r3, [pc, #152]	; (80030d4 <pc_command_processing+0x2bc>)
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]
			return;
 8003040:	e029      	b.n	8003096 <pc_command_processing+0x27e>
		}
		if (!strncmp(rx_buff[queue_front - 1], "ultra_on", strlen("ultra_on")))
 8003042:	4b15      	ldr	r3, [pc, #84]	; (8003098 <pc_command_processing+0x280>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	1e5a      	subs	r2, r3, #1
 8003048:	4613      	mov	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4413      	add	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	4a14      	ldr	r2, [pc, #80]	; (80030a4 <pc_command_processing+0x28c>)
 8003052:	4413      	add	r3, r2
 8003054:	2208      	movs	r2, #8
 8003056:	4921      	ldr	r1, [pc, #132]	; (80030dc <pc_command_processing+0x2c4>)
 8003058:	4618      	mov	r0, r3
 800305a:	f005 fc8d 	bl	8008978 <strncmp>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d103      	bne.n	800306c <pc_command_processing+0x254>
		{
			ultrasonic_print_flag = 1;
 8003064:	4b1e      	ldr	r3, [pc, #120]	; (80030e0 <pc_command_processing+0x2c8>)
 8003066:	2201      	movs	r2, #1
 8003068:	601a      	str	r2, [r3, #0]
			return;
 800306a:	e014      	b.n	8003096 <pc_command_processing+0x27e>
		}
		if (!strncmp(rx_buff[queue_front - 1], "ultra_off", strlen("ultra_off")))
 800306c:	4b0a      	ldr	r3, [pc, #40]	; (8003098 <pc_command_processing+0x280>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	1e5a      	subs	r2, r3, #1
 8003072:	4613      	mov	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	4a0a      	ldr	r2, [pc, #40]	; (80030a4 <pc_command_processing+0x28c>)
 800307c:	4413      	add	r3, r2
 800307e:	2209      	movs	r2, #9
 8003080:	4918      	ldr	r1, [pc, #96]	; (80030e4 <pc_command_processing+0x2cc>)
 8003082:	4618      	mov	r0, r3
 8003084:	f005 fc78 	bl	8008978 <strncmp>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d103      	bne.n	8003096 <pc_command_processing+0x27e>
		{
			ultrasonic_print_flag = 0;
 800308e:	4b14      	ldr	r3, [pc, #80]	; (80030e0 <pc_command_processing+0x2c8>)
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]
			return;
 8003094:	bf00      	nop
		}


	}
}
 8003096:	bd80      	pop	{r7, pc}
 8003098:	20000d6c 	.word	0x20000d6c
 800309c:	20000d70 	.word	0x20000d70
 80030a0:	66666667 	.word	0x66666667
 80030a4:	20000a4c 	.word	0x20000a4c
 80030a8:	08009e08 	.word	0x08009e08
 80030ac:	08009e14 	.word	0x08009e14
 80030b0:	08009e20 	.word	0x08009e20
 80030b4:	08009e2c 	.word	0x08009e2c
 80030b8:	08009e38 	.word	0x08009e38
 80030bc:	08009e48 	.word	0x08009e48
 80030c0:	08009e58 	.word	0x08009e58
 80030c4:	08009e68 	.word	0x08009e68
 80030c8:	08009e78 	.word	0x08009e78
 80030cc:	20000004 	.word	0x20000004
 80030d0:	08009e84 	.word	0x08009e84
 80030d4:	20000000 	.word	0x20000000
 80030d8:	08009e90 	.word	0x08009e90
 80030dc:	08009e9c 	.word	0x08009e9c
 80030e0:	20000018 	.word	0x20000018
 80030e4:	08009ea8 	.word	0x08009ea8

080030e8 <bt_command_processing>:

void bt_command_processing(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
	if (bt_newline_detect_flag) // 원형쿠로 구성한게 아니기 때무네, 뉴라인 플래그가 서 있을 때만 완전한 문장이 들어왔다고 판단하고 함수가 진해오디어야 하낟.
 80030ec:	4b31      	ldr	r3, [pc, #196]	; (80031b4 <bt_command_processing+0xcc>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d05d      	beq.n	80031b0 <bt_command_processing+0xc8>
	{
		bt_newline_detect_flag = 0;
 80030f4:	4b2f      	ldr	r3, [pc, #188]	; (80031b4 <bt_command_processing+0xcc>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	601a      	str	r2, [r3, #0]
		printf("%s\n", bt_rx_buff);
 80030fa:	482f      	ldr	r0, [pc, #188]	; (80031b8 <bt_command_processing+0xd0>)
 80030fc:	f005 fc14 	bl	8008928 <puts>
		if (!strncmp(bt_rx_buff, "ledallon", strlen("ledallon"))) // 느낌표가 들어갔다!! strcmp는 같으면 0을 리턴하기 때문에 if문에 진입하려먼 !not을 통해서 1(true)로 뒤집어 줘야 한다.
 8003100:	2208      	movs	r2, #8
 8003102:	492e      	ldr	r1, [pc, #184]	; (80031bc <bt_command_processing+0xd4>)
 8003104:	482c      	ldr	r0, [pc, #176]	; (80031b8 <bt_command_processing+0xd0>)
 8003106:	f005 fc37 	bl	8008978 <strncmp>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d102      	bne.n	8003116 <bt_command_processing+0x2e>
		{
			led_all_on();
 8003110:	f7fe fb10 	bl	8001734 <led_all_on>
			return;
 8003114:	e04c      	b.n	80031b0 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "ledalloff", strlen("ledalloff")))
 8003116:	2209      	movs	r2, #9
 8003118:	4929      	ldr	r1, [pc, #164]	; (80031c0 <bt_command_processing+0xd8>)
 800311a:	4827      	ldr	r0, [pc, #156]	; (80031b8 <bt_command_processing+0xd0>)
 800311c:	f005 fc2c 	bl	8008978 <strncmp>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d102      	bne.n	800312c <bt_command_processing+0x44>
		{
			led_all_off();
 8003126:	f7fe fb11 	bl	800174c <led_all_off>
			return;
 800312a:	e041      	b.n	80031b0 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_on_up", strlen("led_on_up")))
 800312c:	2209      	movs	r2, #9
 800312e:	4925      	ldr	r1, [pc, #148]	; (80031c4 <bt_command_processing+0xdc>)
 8003130:	4821      	ldr	r0, [pc, #132]	; (80031b8 <bt_command_processing+0xd0>)
 8003132:	f005 fc21 	bl	8008978 <strncmp>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d102      	bne.n	8003142 <bt_command_processing+0x5a>
		{
			led_on_up();
 800313c:	f7fe fb12 	bl	8001764 <led_on_up>
			return;
 8003140:	e036      	b.n	80031b0 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_on_down", strlen("led_on_down")))
 8003142:	220b      	movs	r2, #11
 8003144:	4920      	ldr	r1, [pc, #128]	; (80031c8 <bt_command_processing+0xe0>)
 8003146:	481c      	ldr	r0, [pc, #112]	; (80031b8 <bt_command_processing+0xd0>)
 8003148:	f005 fc16 	bl	8008978 <strncmp>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d102      	bne.n	8003158 <bt_command_processing+0x70>
		{
			led_on_down();
 8003152:	f7fe fb33 	bl	80017bc <led_on_down>
			return;
 8003156:	e02b      	b.n	80031b0 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_keepon_up", strlen("led_keepon_up")))
 8003158:	220d      	movs	r2, #13
 800315a:	491c      	ldr	r1, [pc, #112]	; (80031cc <bt_command_processing+0xe4>)
 800315c:	4816      	ldr	r0, [pc, #88]	; (80031b8 <bt_command_processing+0xd0>)
 800315e:	f005 fc0b 	bl	8008978 <strncmp>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d102      	bne.n	800316e <bt_command_processing+0x86>
		{
			led_keepon_up();
 8003168:	f7fe fb54 	bl	8001814 <led_keepon_up>
			return;
 800316c:	e020      	b.n	80031b0 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_keepon_down", strlen("led_keepon_down")))
 800316e:	220f      	movs	r2, #15
 8003170:	4917      	ldr	r1, [pc, #92]	; (80031d0 <bt_command_processing+0xe8>)
 8003172:	4811      	ldr	r0, [pc, #68]	; (80031b8 <bt_command_processing+0xd0>)
 8003174:	f005 fc00 	bl	8008978 <strncmp>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d102      	bne.n	8003184 <bt_command_processing+0x9c>
		{
			led_keepon_down();
 800317e:	f7fe fb73 	bl	8001868 <led_keepon_down>
			return;
 8003182:	e015      	b.n	80031b0 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_flower_on", strlen("led_flower_on")))
 8003184:	220d      	movs	r2, #13
 8003186:	4913      	ldr	r1, [pc, #76]	; (80031d4 <bt_command_processing+0xec>)
 8003188:	480b      	ldr	r0, [pc, #44]	; (80031b8 <bt_command_processing+0xd0>)
 800318a:	f005 fbf5 	bl	8008978 <strncmp>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d102      	bne.n	800319a <bt_command_processing+0xb2>
		{
			led_flower_on();
 8003194:	f7fe fb92 	bl	80018bc <led_flower_on>
			return;
 8003198:	e00a      	b.n	80031b0 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_flower_off", strlen("led_flower_off")))
 800319a:	220e      	movs	r2, #14
 800319c:	490e      	ldr	r1, [pc, #56]	; (80031d8 <bt_command_processing+0xf0>)
 800319e:	4806      	ldr	r0, [pc, #24]	; (80031b8 <bt_command_processing+0xd0>)
 80031a0:	f005 fbea 	bl	8008978 <strncmp>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d102      	bne.n	80031b0 <bt_command_processing+0xc8>
		{
			led_flower_off();
 80031aa:	f7fe fbc7 	bl	800193c <led_flower_off>
			return;
 80031ae:	bf00      	nop
		}
	}
}
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	20000da4 	.word	0x20000da4
 80031b8:	20000d78 	.word	0x20000d78
 80031bc:	08009eb4 	.word	0x08009eb4
 80031c0:	08009ec0 	.word	0x08009ec0
 80031c4:	08009e20 	.word	0x08009e20
 80031c8:	08009e2c 	.word	0x08009e2c
 80031cc:	08009e38 	.word	0x08009e38
 80031d0:	08009e48 	.word	0x08009e48
 80031d4:	08009e58 	.word	0x08009e58
 80031d8:	08009e68 	.word	0x08009e68

080031dc <HAL_TIM_IC_CaptureCallback>:
volatile int ultrasonic_print_flag = 1;

// 1. Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c에 가서 가져온 call-back function
// 2. 초음파 센서의 ECHO핀의 상승edge와 하강edge 발생 시 이 함수로 들어온다!!!
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a13      	ldr	r2, [pc, #76]	; (8003238 <HAL_TIM_IC_CaptureCallback+0x5c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d11f      	bne.n	800322e <HAL_TIM_IC_CaptureCallback+0x52>
	{
		if (is_first_capture == 0) // 상승엣지 때문에 콜백 펑션에 들어온 경우
 80031ee:	4b13      	ldr	r3, [pc, #76]	; (800323c <HAL_TIM_IC_CaptureCallback+0x60>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d107      	bne.n	8003208 <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			__HAL_TIM_SET_COUNTER(htim, 0); // 펄스를 셀 카운터를 초기화 하고 세기 시작하는 것이다.
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2200      	movs	r2, #0
 80031fe:	625a      	str	r2, [r3, #36]	; 0x24
			is_first_capture = 1; // 다음에 콜백 펑선이 불릴 때는 당연히 하강 엣지일 때 일 것이므로 플래그변수를 1로 셋팅해준다.
 8003200:	4b0e      	ldr	r3, [pc, #56]	; (800323c <HAL_TIM_IC_CaptureCallback+0x60>)
 8003202:	2201      	movs	r2, #1
 8003204:	701a      	strb	r2, [r3, #0]
			is_first_capture = 0; // 이제 다음 펄스를 또 카운트 하기 위해서 플래그 변수를 초기화 해준다.
			distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // 상승엣지부터 하강엣지까지 펄스가 몇번 카운트 되었는지 그 값을 읽어온다.
			ic_cpt_finish_flag = 1; // 초음파 측정완료
		}
	}
}
 8003206:	e012      	b.n	800322e <HAL_TIM_IC_CaptureCallback+0x52>
		else if (is_first_capture == 1) // 하강 엣지 때문에 콜백 펑션에 들어온 경우
 8003208:	4b0c      	ldr	r3, [pc, #48]	; (800323c <HAL_TIM_IC_CaptureCallback+0x60>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b01      	cmp	r3, #1
 8003210:	d10d      	bne.n	800322e <HAL_TIM_IC_CaptureCallback+0x52>
			is_first_capture = 0; // 이제 다음 펄스를 또 카운트 하기 위해서 플래그 변수를 초기화 해준다.
 8003212:	4b0a      	ldr	r3, [pc, #40]	; (800323c <HAL_TIM_IC_CaptureCallback+0x60>)
 8003214:	2200      	movs	r2, #0
 8003216:	701a      	strb	r2, [r3, #0]
			distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // 상승엣지부터 하강엣지까지 펄스가 몇번 카운트 되었는지 그 값을 읽어온다.
 8003218:	2100      	movs	r1, #0
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f003 fa22 	bl	8006664 <HAL_TIM_ReadCapturedValue>
 8003220:	4603      	mov	r3, r0
 8003222:	461a      	mov	r2, r3
 8003224:	4b06      	ldr	r3, [pc, #24]	; (8003240 <HAL_TIM_IC_CaptureCallback+0x64>)
 8003226:	601a      	str	r2, [r3, #0]
			ic_cpt_finish_flag = 1; // 초음파 측정완료
 8003228:	4b06      	ldr	r3, [pc, #24]	; (8003244 <HAL_TIM_IC_CaptureCallback+0x68>)
 800322a:	2201      	movs	r2, #1
 800322c:	601a      	str	r2, [r3, #0]
}
 800322e:	bf00      	nop
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40000400 	.word	0x40000400
 800323c:	20000db0 	.word	0x20000db0
 8003240:	20000da8 	.word	0x20000da8
 8003244:	20000dac 	.word	0x20000dac

08003248 <ultrasonic_processing>:

void ultrasonic_processing(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
	int distance_lv; // 전역변수 값을 바로 쓰지 않고 지역변수에 복사하여 사용하는 것이 안전하기 때문에 별도의 지역변수를 선언함
	char lcd_buff[20];

	if (TIM10_10ms_ultrasonic >= 100) // 10ms가 100개면 1초
 800324e:	4b26      	ldr	r3, [pc, #152]	; (80032e8 <ultrasonic_processing+0xa0>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b63      	cmp	r3, #99	; 0x63
 8003254:	dd3e      	ble.n	80032d4 <ultrasonic_processing+0x8c>
	{
		TIM10_10ms_ultrasonic = 0;
 8003256:	4b24      	ldr	r3, [pc, #144]	; (80032e8 <ultrasonic_processing+0xa0>)
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]
		make_trigger();
 800325c:	f000 f850 	bl	8003300 <make_trigger>
		if (ic_cpt_finish_flag) // 초음파 측정이 완료 되었다면..
 8003260:	4b22      	ldr	r3, [pc, #136]	; (80032ec <ultrasonic_processing+0xa4>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d035      	beq.n	80032d4 <ultrasonic_processing+0x8c>
		{
			ic_cpt_finish_flag = 0;
 8003268:	4b20      	ldr	r3, [pc, #128]	; (80032ec <ultrasonic_processing+0xa4>)
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]
			distance_lv = distance; // 전역변수 값을 바로 쓰지 않고 지역변수에 복사하여 사용하는 것임
 800326e:	4b20      	ldr	r3, [pc, #128]	; (80032f0 <ultrasonic_processing+0xa8>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	617b      	str	r3, [r7, #20]
			distance_lv = distance_lv * 0.034 / 2; // 1us마다 0.034cm를 이동한다. 그리고 초음파 센서가 리턴한 distance값은 왕복 거리이기 때문에 /2를 해서 편도 거리를 얻어낸다.
 8003274:	6978      	ldr	r0, [r7, #20]
 8003276:	f7fd f95d 	bl	8000534 <__aeabi_i2d>
 800327a:	a319      	add	r3, pc, #100	; (adr r3, 80032e0 <ultrasonic_processing+0x98>)
 800327c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003280:	f7fd f9c2 	bl	8000608 <__aeabi_dmul>
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	4610      	mov	r0, r2
 800328a:	4619      	mov	r1, r3
 800328c:	f04f 0200 	mov.w	r2, #0
 8003290:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003294:	f7fd fae2 	bl	800085c <__aeabi_ddiv>
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	4610      	mov	r0, r2
 800329e:	4619      	mov	r1, r3
 80032a0:	f7fd fbc4 	bl	8000a2c <__aeabi_d2iz>
 80032a4:	4603      	mov	r3, r0
 80032a6:	617b      	str	r3, [r7, #20]

			if (ultrasonic_print_flag)
 80032a8:	4b12      	ldr	r3, [pc, #72]	; (80032f4 <ultrasonic_processing+0xac>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d011      	beq.n	80032d4 <ultrasonic_processing+0x8c>
			{
				printf("distance_lv: %dcm\n", distance_lv);
 80032b0:	6979      	ldr	r1, [r7, #20]
 80032b2:	4811      	ldr	r0, [pc, #68]	; (80032f8 <ultrasonic_processing+0xb0>)
 80032b4:	f005 fab2 	bl	800881c <iprintf>
				sprintf(lcd_buff, "distance: %dcm", distance_lv);
 80032b8:	463b      	mov	r3, r7
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	490f      	ldr	r1, [pc, #60]	; (80032fc <ultrasonic_processing+0xb4>)
 80032be:	4618      	mov	r0, r3
 80032c0:	f005 fb3a 	bl	8008938 <siprintf>
				move_cursor(1,0);
 80032c4:	2100      	movs	r1, #0
 80032c6:	2001      	movs	r0, #1
 80032c8:	f7fe fa1c 	bl	8001704 <move_cursor>
				lcd_string(lcd_buff);
 80032cc:	463b      	mov	r3, r7
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fe fa03 	bl	80016da <lcd_string>
			}
		}
	}
}
 80032d4:	bf00      	nop
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	f3af 8000 	nop.w
 80032e0:	b020c49c 	.word	0xb020c49c
 80032e4:	3fa16872 	.word	0x3fa16872
 80032e8:	20000a30 	.word	0x20000a30
 80032ec:	20000dac 	.word	0x20000dac
 80032f0:	20000da8 	.word	0x20000da8
 80032f4:	20000018 	.word	0x20000018
 80032f8:	08009ecc 	.word	0x08009ecc
 80032fc:	08009ee0 	.word	0x08009ee0

08003300 <make_trigger>:

void make_trigger(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, 0);
 8003304:	2200      	movs	r2, #0
 8003306:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800330a:	480b      	ldr	r0, [pc, #44]	; (8003338 <make_trigger+0x38>)
 800330c:	f000 ff66 	bl	80041dc <HAL_GPIO_WritePin>
	delay_us(2);
 8003310:	2002      	movs	r0, #2
 8003312:	f7fe fb93 	bl	8001a3c <delay_us>
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, 1);
 8003316:	2201      	movs	r2, #1
 8003318:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800331c:	4806      	ldr	r0, [pc, #24]	; (8003338 <make_trigger+0x38>)
 800331e:	f000 ff5d 	bl	80041dc <HAL_GPIO_WritePin>
	delay_us(10);
 8003322:	200a      	movs	r0, #10
 8003324:	f7fe fb8a 	bl	8001a3c <delay_us>
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, 0);
 8003328:	2200      	movs	r2, #0
 800332a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800332e:	4802      	ldr	r0, [pc, #8]	; (8003338 <make_trigger+0x38>)
 8003330:	f000 ff54 	bl	80041dc <HAL_GPIO_WritePin>
	// 위 5줄의 코드 라인을 통해 초음파 센서에서 요구하는 트리거 신호의 전기적 파형을 MCU가 날릴 수 있도록 구현했다.

}
 8003334:	bf00      	nop
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40021400 	.word	0x40021400

0800333c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800333c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003374 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003340:	480d      	ldr	r0, [pc, #52]	; (8003378 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003342:	490e      	ldr	r1, [pc, #56]	; (800337c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003344:	4a0e      	ldr	r2, [pc, #56]	; (8003380 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003348:	e002      	b.n	8003350 <LoopCopyDataInit>

0800334a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800334a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800334c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800334e:	3304      	adds	r3, #4

08003350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003354:	d3f9      	bcc.n	800334a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003356:	4a0b      	ldr	r2, [pc, #44]	; (8003384 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003358:	4c0b      	ldr	r4, [pc, #44]	; (8003388 <LoopFillZerobss+0x26>)
  movs r3, #0
 800335a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800335c:	e001      	b.n	8003362 <LoopFillZerobss>

0800335e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800335e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003360:	3204      	adds	r2, #4

08003362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003364:	d3fb      	bcc.n	800335e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003366:	f7ff fc8d 	bl	8002c84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800336a:	f005 fa2b 	bl	80087c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800336e:	f7fe fb8f 	bl	8001a90 <main>
  bx  lr    
 8003372:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003374:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800337c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003380:	0800a0b4 	.word	0x0800a0b4
  ldr r2, =_sbss
 8003384:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003388:	20000dc8 	.word	0x20000dc8

0800338c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800338c:	e7fe      	b.n	800338c <ADC_IRQHandler>
	...

08003390 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003394:	4b0e      	ldr	r3, [pc, #56]	; (80033d0 <HAL_Init+0x40>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a0d      	ldr	r2, [pc, #52]	; (80033d0 <HAL_Init+0x40>)
 800339a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800339e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033a0:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <HAL_Init+0x40>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a0a      	ldr	r2, [pc, #40]	; (80033d0 <HAL_Init+0x40>)
 80033a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033ac:	4b08      	ldr	r3, [pc, #32]	; (80033d0 <HAL_Init+0x40>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a07      	ldr	r2, [pc, #28]	; (80033d0 <HAL_Init+0x40>)
 80033b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033b8:	2003      	movs	r0, #3
 80033ba:	f000 f94f 	bl	800365c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033be:	2000      	movs	r0, #0
 80033c0:	f000 f808 	bl	80033d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033c4:	f7fe fff0 	bl	80023a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	40023c00 	.word	0x40023c00

080033d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033dc:	4b12      	ldr	r3, [pc, #72]	; (8003428 <HAL_InitTick+0x54>)
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	4b12      	ldr	r3, [pc, #72]	; (800342c <HAL_InitTick+0x58>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	4619      	mov	r1, r3
 80033e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80033ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 f967 	bl	80036c6 <HAL_SYSTICK_Config>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e00e      	b.n	8003420 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b0f      	cmp	r3, #15
 8003406:	d80a      	bhi.n	800341e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003408:	2200      	movs	r2, #0
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	f04f 30ff 	mov.w	r0, #4294967295
 8003410:	f000 f92f 	bl	8003672 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003414:	4a06      	ldr	r2, [pc, #24]	; (8003430 <HAL_InitTick+0x5c>)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800341a:	2300      	movs	r3, #0
 800341c:	e000      	b.n	8003420 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
}
 8003420:	4618      	mov	r0, r3
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	20000014 	.word	0x20000014
 800342c:	20000020 	.word	0x20000020
 8003430:	2000001c 	.word	0x2000001c

08003434 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003438:	4b06      	ldr	r3, [pc, #24]	; (8003454 <HAL_IncTick+0x20>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	461a      	mov	r2, r3
 800343e:	4b06      	ldr	r3, [pc, #24]	; (8003458 <HAL_IncTick+0x24>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4413      	add	r3, r2
 8003444:	4a04      	ldr	r2, [pc, #16]	; (8003458 <HAL_IncTick+0x24>)
 8003446:	6013      	str	r3, [r2, #0]
}
 8003448:	bf00      	nop
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	20000020 	.word	0x20000020
 8003458:	20000db4 	.word	0x20000db4

0800345c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  return uwTick;
 8003460:	4b03      	ldr	r3, [pc, #12]	; (8003470 <HAL_GetTick+0x14>)
 8003462:	681b      	ldr	r3, [r3, #0]
}
 8003464:	4618      	mov	r0, r3
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	20000db4 	.word	0x20000db4

08003474 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800347c:	f7ff ffee 	bl	800345c <HAL_GetTick>
 8003480:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348c:	d005      	beq.n	800349a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800348e:	4b0a      	ldr	r3, [pc, #40]	; (80034b8 <HAL_Delay+0x44>)
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	461a      	mov	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4413      	add	r3, r2
 8003498:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800349a:	bf00      	nop
 800349c:	f7ff ffde 	bl	800345c <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d8f7      	bhi.n	800349c <HAL_Delay+0x28>
  {
  }
}
 80034ac:	bf00      	nop
 80034ae:	bf00      	nop
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	20000020 	.word	0x20000020

080034bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034cc:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <__NVIC_SetPriorityGrouping+0x44>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034d8:	4013      	ands	r3, r2
 80034da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034ee:	4a04      	ldr	r2, [pc, #16]	; (8003500 <__NVIC_SetPriorityGrouping+0x44>)
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	60d3      	str	r3, [r2, #12]
}
 80034f4:	bf00      	nop
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	e000ed00 	.word	0xe000ed00

08003504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003508:	4b04      	ldr	r3, [pc, #16]	; (800351c <__NVIC_GetPriorityGrouping+0x18>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	0a1b      	lsrs	r3, r3, #8
 800350e:	f003 0307 	and.w	r3, r3, #7
}
 8003512:	4618      	mov	r0, r3
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	e000ed00 	.word	0xe000ed00

08003520 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	4603      	mov	r3, r0
 8003528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800352a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352e:	2b00      	cmp	r3, #0
 8003530:	db0b      	blt.n	800354a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003532:	79fb      	ldrb	r3, [r7, #7]
 8003534:	f003 021f 	and.w	r2, r3, #31
 8003538:	4907      	ldr	r1, [pc, #28]	; (8003558 <__NVIC_EnableIRQ+0x38>)
 800353a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353e:	095b      	lsrs	r3, r3, #5
 8003540:	2001      	movs	r0, #1
 8003542:	fa00 f202 	lsl.w	r2, r0, r2
 8003546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	e000e100 	.word	0xe000e100

0800355c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	6039      	str	r1, [r7, #0]
 8003566:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356c:	2b00      	cmp	r3, #0
 800356e:	db0a      	blt.n	8003586 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	b2da      	uxtb	r2, r3
 8003574:	490c      	ldr	r1, [pc, #48]	; (80035a8 <__NVIC_SetPriority+0x4c>)
 8003576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357a:	0112      	lsls	r2, r2, #4
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	440b      	add	r3, r1
 8003580:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003584:	e00a      	b.n	800359c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	b2da      	uxtb	r2, r3
 800358a:	4908      	ldr	r1, [pc, #32]	; (80035ac <__NVIC_SetPriority+0x50>)
 800358c:	79fb      	ldrb	r3, [r7, #7]
 800358e:	f003 030f 	and.w	r3, r3, #15
 8003592:	3b04      	subs	r3, #4
 8003594:	0112      	lsls	r2, r2, #4
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	440b      	add	r3, r1
 800359a:	761a      	strb	r2, [r3, #24]
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	e000e100 	.word	0xe000e100
 80035ac:	e000ed00 	.word	0xe000ed00

080035b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b089      	sub	sp, #36	; 0x24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f003 0307 	and.w	r3, r3, #7
 80035c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	f1c3 0307 	rsb	r3, r3, #7
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	bf28      	it	cs
 80035ce:	2304      	movcs	r3, #4
 80035d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	3304      	adds	r3, #4
 80035d6:	2b06      	cmp	r3, #6
 80035d8:	d902      	bls.n	80035e0 <NVIC_EncodePriority+0x30>
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	3b03      	subs	r3, #3
 80035de:	e000      	b.n	80035e2 <NVIC_EncodePriority+0x32>
 80035e0:	2300      	movs	r3, #0
 80035e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e4:	f04f 32ff 	mov.w	r2, #4294967295
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	43da      	mvns	r2, r3
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	401a      	ands	r2, r3
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035f8:	f04f 31ff 	mov.w	r1, #4294967295
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003602:	43d9      	mvns	r1, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003608:	4313      	orrs	r3, r2
         );
}
 800360a:	4618      	mov	r0, r3
 800360c:	3724      	adds	r7, #36	; 0x24
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
	...

08003618 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3b01      	subs	r3, #1
 8003624:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003628:	d301      	bcc.n	800362e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800362a:	2301      	movs	r3, #1
 800362c:	e00f      	b.n	800364e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800362e:	4a0a      	ldr	r2, [pc, #40]	; (8003658 <SysTick_Config+0x40>)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3b01      	subs	r3, #1
 8003634:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003636:	210f      	movs	r1, #15
 8003638:	f04f 30ff 	mov.w	r0, #4294967295
 800363c:	f7ff ff8e 	bl	800355c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003640:	4b05      	ldr	r3, [pc, #20]	; (8003658 <SysTick_Config+0x40>)
 8003642:	2200      	movs	r2, #0
 8003644:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003646:	4b04      	ldr	r3, [pc, #16]	; (8003658 <SysTick_Config+0x40>)
 8003648:	2207      	movs	r2, #7
 800364a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	e000e010 	.word	0xe000e010

0800365c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7ff ff29 	bl	80034bc <__NVIC_SetPriorityGrouping>
}
 800366a:	bf00      	nop
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003672:	b580      	push	{r7, lr}
 8003674:	b086      	sub	sp, #24
 8003676:	af00      	add	r7, sp, #0
 8003678:	4603      	mov	r3, r0
 800367a:	60b9      	str	r1, [r7, #8]
 800367c:	607a      	str	r2, [r7, #4]
 800367e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003680:	2300      	movs	r3, #0
 8003682:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003684:	f7ff ff3e 	bl	8003504 <__NVIC_GetPriorityGrouping>
 8003688:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	68b9      	ldr	r1, [r7, #8]
 800368e:	6978      	ldr	r0, [r7, #20]
 8003690:	f7ff ff8e 	bl	80035b0 <NVIC_EncodePriority>
 8003694:	4602      	mov	r2, r0
 8003696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800369a:	4611      	mov	r1, r2
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff ff5d 	bl	800355c <__NVIC_SetPriority>
}
 80036a2:	bf00      	nop
 80036a4:	3718      	adds	r7, #24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b082      	sub	sp, #8
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	4603      	mov	r3, r0
 80036b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff ff31 	bl	8003520 <__NVIC_EnableIRQ>
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b082      	sub	sp, #8
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7ff ffa2 	bl	8003618 <SysTick_Config>
 80036d4:	4603      	mov	r3, r0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b084      	sub	sp, #16
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ea:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80036ec:	f7ff feb6 	bl	800345c <HAL_GetTick>
 80036f0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d008      	beq.n	8003710 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2280      	movs	r2, #128	; 0x80
 8003702:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e052      	b.n	80037b6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 0216 	bic.w	r2, r2, #22
 800371e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695a      	ldr	r2, [r3, #20]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800372e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003734:	2b00      	cmp	r3, #0
 8003736:	d103      	bne.n	8003740 <HAL_DMA_Abort+0x62>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800373c:	2b00      	cmp	r3, #0
 800373e:	d007      	beq.n	8003750 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0208 	bic.w	r2, r2, #8
 800374e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0201 	bic.w	r2, r2, #1
 800375e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003760:	e013      	b.n	800378a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003762:	f7ff fe7b 	bl	800345c <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b05      	cmp	r3, #5
 800376e:	d90c      	bls.n	800378a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2220      	movs	r2, #32
 8003774:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2203      	movs	r2, #3
 800377a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e015      	b.n	80037b6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1e4      	bne.n	8003762 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800379c:	223f      	movs	r2, #63	; 0x3f
 800379e:	409a      	lsls	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037be:	b480      	push	{r7}
 80037c0:	b083      	sub	sp, #12
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d004      	beq.n	80037dc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2280      	movs	r2, #128	; 0x80
 80037d6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e00c      	b.n	80037f6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2205      	movs	r2, #5
 80037e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0201 	bic.w	r2, r2, #1
 80037f2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
	...

08003804 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e06c      	b.n	80038f0 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800381c:	2b00      	cmp	r3, #0
 800381e:	d106      	bne.n	800382e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2223      	movs	r2, #35	; 0x23
 8003824:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f7fe fde5 	bl	80023f8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800382e:	2300      	movs	r3, #0
 8003830:	60bb      	str	r3, [r7, #8]
 8003832:	4b31      	ldr	r3, [pc, #196]	; (80038f8 <HAL_ETH_Init+0xf4>)
 8003834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003836:	4a30      	ldr	r2, [pc, #192]	; (80038f8 <HAL_ETH_Init+0xf4>)
 8003838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800383c:	6453      	str	r3, [r2, #68]	; 0x44
 800383e:	4b2e      	ldr	r3, [pc, #184]	; (80038f8 <HAL_ETH_Init+0xf4>)
 8003840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003846:	60bb      	str	r3, [r7, #8]
 8003848:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800384a:	4b2c      	ldr	r3, [pc, #176]	; (80038fc <HAL_ETH_Init+0xf8>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	4a2b      	ldr	r2, [pc, #172]	; (80038fc <HAL_ETH_Init+0xf8>)
 8003850:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003854:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003856:	4b29      	ldr	r3, [pc, #164]	; (80038fc <HAL_ETH_Init+0xf8>)
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	4927      	ldr	r1, [pc, #156]	; (80038fc <HAL_ETH_Init+0xf8>)
 8003860:	4313      	orrs	r3, r2
 8003862:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003864:	4b25      	ldr	r3, [pc, #148]	; (80038fc <HAL_ETH_Init+0xf8>)
 8003866:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6812      	ldr	r2, [r2, #0]
 8003876:	f043 0301 	orr.w	r3, r3, #1
 800387a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800387e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003880:	f7ff fdec 	bl	800345c <HAL_GetTick>
 8003884:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003886:	e011      	b.n	80038ac <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003888:	f7ff fde8 	bl	800345c <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003896:	d909      	bls.n	80038ac <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2204      	movs	r2, #4
 800389c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	22e0      	movs	r2, #224	; 0xe0
 80038a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e021      	b.n	80038f0 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1e4      	bne.n	8003888 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f958 	bl	8003b74 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f9ff 	bl	8003cc8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 fa55 	bl	8003d7a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	461a      	mov	r2, r3
 80038d6:	2100      	movs	r1, #0
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 f9bd 	bl	8003c58 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2210      	movs	r2, #16
 80038ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40023800 	.word	0x40023800
 80038fc:	40013800 	.word	0x40013800

08003900 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	4b51      	ldr	r3, [pc, #324]	; (8003a5c <ETH_SetMACConfig+0x15c>)
 8003916:	4013      	ands	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	7c1b      	ldrb	r3, [r3, #16]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d102      	bne.n	8003928 <ETH_SetMACConfig+0x28>
 8003922:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003926:	e000      	b.n	800392a <ETH_SetMACConfig+0x2a>
 8003928:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	7c5b      	ldrb	r3, [r3, #17]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d102      	bne.n	8003938 <ETH_SetMACConfig+0x38>
 8003932:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003936:	e000      	b.n	800393a <ETH_SetMACConfig+0x3a>
 8003938:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800393a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003940:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	7fdb      	ldrb	r3, [r3, #31]
 8003946:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003948:	431a      	orrs	r2, r3
                        macconf->Speed |
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800394e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	7f92      	ldrb	r2, [r2, #30]
 8003954:	2a00      	cmp	r2, #0
 8003956:	d102      	bne.n	800395e <ETH_SetMACConfig+0x5e>
 8003958:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800395c:	e000      	b.n	8003960 <ETH_SetMACConfig+0x60>
 800395e:	2200      	movs	r2, #0
                        macconf->Speed |
 8003960:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	7f1b      	ldrb	r3, [r3, #28]
 8003966:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003968:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800396e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	791b      	ldrb	r3, [r3, #4]
 8003974:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003976:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800397e:	2a00      	cmp	r2, #0
 8003980:	d102      	bne.n	8003988 <ETH_SetMACConfig+0x88>
 8003982:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003986:	e000      	b.n	800398a <ETH_SetMACConfig+0x8a>
 8003988:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800398a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	7bdb      	ldrb	r3, [r3, #15]
 8003990:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003992:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003998:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039a0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80039a2:	4313      	orrs	r3, r2
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80039ba:	2001      	movs	r0, #1
 80039bc:	f7ff fd5a 	bl	8003474 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80039d6:	4013      	ands	r3, r2
 80039d8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039de:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80039e6:	2a00      	cmp	r2, #0
 80039e8:	d101      	bne.n	80039ee <ETH_SetMACConfig+0xee>
 80039ea:	2280      	movs	r2, #128	; 0x80
 80039ec:	e000      	b.n	80039f0 <ETH_SetMACConfig+0xf0>
 80039ee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80039f0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80039f6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80039fe:	2a01      	cmp	r2, #1
 8003a00:	d101      	bne.n	8003a06 <ETH_SetMACConfig+0x106>
 8003a02:	2208      	movs	r2, #8
 8003a04:	e000      	b.n	8003a08 <ETH_SetMACConfig+0x108>
 8003a06:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003a08:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003a10:	2a01      	cmp	r2, #1
 8003a12:	d101      	bne.n	8003a18 <ETH_SetMACConfig+0x118>
 8003a14:	2204      	movs	r2, #4
 8003a16:	e000      	b.n	8003a1a <ETH_SetMACConfig+0x11a>
 8003a18:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003a1a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003a22:	2a01      	cmp	r2, #1
 8003a24:	d101      	bne.n	8003a2a <ETH_SetMACConfig+0x12a>
 8003a26:	2202      	movs	r2, #2
 8003a28:	e000      	b.n	8003a2c <ETH_SetMACConfig+0x12c>
 8003a2a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a44:	2001      	movs	r0, #1
 8003a46:	f7ff fd15 	bl	8003474 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	619a      	str	r2, [r3, #24]
}
 8003a52:	bf00      	nop
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	ff20810f 	.word	0xff20810f

08003a60 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	4b3d      	ldr	r3, [pc, #244]	; (8003b70 <ETH_SetDMAConfig+0x110>)
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	7b1b      	ldrb	r3, [r3, #12]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d102      	bne.n	8003a8c <ETH_SetDMAConfig+0x2c>
 8003a86:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003a8a:	e000      	b.n	8003a8e <ETH_SetDMAConfig+0x2e>
 8003a8c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	7b5b      	ldrb	r3, [r3, #13]
 8003a92:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003a94:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	7f52      	ldrb	r2, [r2, #29]
 8003a9a:	2a00      	cmp	r2, #0
 8003a9c:	d102      	bne.n	8003aa4 <ETH_SetDMAConfig+0x44>
 8003a9e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003aa2:	e000      	b.n	8003aa6 <ETH_SetDMAConfig+0x46>
 8003aa4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003aa6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	7b9b      	ldrb	r3, [r3, #14]
 8003aac:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003aae:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003ab4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	7f1b      	ldrb	r3, [r3, #28]
 8003aba:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003abc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	7f9b      	ldrb	r3, [r3, #30]
 8003ac2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003ac4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003aca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ad2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003af6:	2001      	movs	r0, #1
 8003af8:	f7ff fcbc 	bl	8003474 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b04:	461a      	mov	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	791b      	ldrb	r3, [r3, #4]
 8003b0e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003b14:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003b1a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003b20:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b28:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003b2a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b30:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003b32:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003b38:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	6812      	ldr	r2, [r2, #0]
 8003b3e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b42:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b46:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b54:	2001      	movs	r0, #1
 8003b56:	f7ff fc8d 	bl	8003474 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b62:	461a      	mov	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6013      	str	r3, [r2, #0]
}
 8003b68:	bf00      	nop
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	f8de3f23 	.word	0xf8de3f23

08003b74 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b0a6      	sub	sp, #152	; 0x98
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003b82:	2301      	movs	r3, #1
 8003b84:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003b92:	2301      	movs	r3, #1
 8003b94:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003baa:	2300      	movs	r3, #0
 8003bac:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003bd6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003bda:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003bdc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003be0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003be2:	2300      	movs	r3, #0
 8003be4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003be8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003bec:	4619      	mov	r1, r3
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7ff fe86 	bl	8003900 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003c02:	2301      	movs	r3, #1
 8003c04:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003c06:	2300      	movs	r3, #0
 8003c08:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003c10:	2300      	movs	r3, #0
 8003c12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003c16:	2300      	movs	r3, #0
 8003c18:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003c20:	2301      	movs	r3, #1
 8003c22:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003c24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c28:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003c2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c2e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003c30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c34:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003c36:	2301      	movs	r3, #1
 8003c38:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003c40:	2300      	movs	r3, #0
 8003c42:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003c44:	f107 0308 	add.w	r3, r7, #8
 8003c48:	4619      	mov	r1, r3
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7ff ff08 	bl	8003a60 <ETH_SetDMAConfig>
}
 8003c50:	bf00      	nop
 8003c52:	3798      	adds	r7, #152	; 0x98
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	3305      	adds	r3, #5
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	021b      	lsls	r3, r3, #8
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	3204      	adds	r2, #4
 8003c70:	7812      	ldrb	r2, [r2, #0]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	4b11      	ldr	r3, [pc, #68]	; (8003cc0 <ETH_MACAddressConfig+0x68>)
 8003c7a:	4413      	add	r3, r2
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	3303      	adds	r3, #3
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	061a      	lsls	r2, r3, #24
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	3302      	adds	r3, #2
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	041b      	lsls	r3, r3, #16
 8003c92:	431a      	orrs	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3301      	adds	r3, #1
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	021b      	lsls	r3, r3, #8
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	7812      	ldrb	r2, [r2, #0]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	4b06      	ldr	r3, [pc, #24]	; (8003cc4 <ETH_MACAddressConfig+0x6c>)
 8003caa:	4413      	add	r3, r2
 8003cac:	461a      	mov	r2, r3
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	6013      	str	r3, [r2, #0]
}
 8003cb2:	bf00      	nop
 8003cb4:	371c      	adds	r7, #28
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	40028040 	.word	0x40028040
 8003cc4:	40028044 	.word	0x40028044

08003cc8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	60fb      	str	r3, [r7, #12]
 8003cd4:	e03e      	b.n	8003d54 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68d9      	ldr	r1, [r3, #12]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	4413      	add	r3, r2
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	440b      	add	r3, r1
 8003ce6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	2200      	movs	r2, #0
 8003cec:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003d00:	68b9      	ldr	r1, [r7, #8]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	3206      	adds	r2, #6
 8003d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d80c      	bhi.n	8003d38 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68d9      	ldr	r1, [r3, #12]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	1c5a      	adds	r2, r3, #1
 8003d26:	4613      	mov	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4413      	add	r3, r2
 8003d2c:	00db      	lsls	r3, r3, #3
 8003d2e:	440b      	add	r3, r1
 8003d30:	461a      	mov	r2, r3
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	60da      	str	r2, [r3, #12]
 8003d36:	e004      	b.n	8003d42 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	3301      	adds	r3, #1
 8003d52:	60fb      	str	r3, [r7, #12]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2b03      	cmp	r3, #3
 8003d58:	d9bd      	bls.n	8003cd6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68da      	ldr	r2, [r3, #12]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d6c:	611a      	str	r2, [r3, #16]
}
 8003d6e:	bf00      	nop
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b085      	sub	sp, #20
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003d82:	2300      	movs	r3, #0
 8003d84:	60fb      	str	r3, [r7, #12]
 8003d86:	e046      	b.n	8003e16 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6919      	ldr	r1, [r3, #16]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	440b      	add	r3, r1
 8003d98:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2200      	movs	r2, #0
 8003da4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	2200      	movs	r2, #0
 8003daa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	2200      	movs	r2, #0
 8003db0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	2200      	movs	r2, #0
 8003db6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003dc4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003dcc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003dda:	68b9      	ldr	r1, [r7, #8]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	3212      	adds	r2, #18
 8003de2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d80c      	bhi.n	8003e06 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6919      	ldr	r1, [r3, #16]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	4613      	mov	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	440b      	add	r3, r1
 8003dfe:	461a      	mov	r2, r3
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	60da      	str	r2, [r3, #12]
 8003e04:	e004      	b.n	8003e10 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	3301      	adds	r3, #1
 8003e14:	60fb      	str	r3, [r7, #12]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2b03      	cmp	r3, #3
 8003e1a:	d9b5      	bls.n	8003d88 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	691a      	ldr	r2, [r3, #16]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e46:	60da      	str	r2, [r3, #12]
}
 8003e48:	bf00      	nop
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b089      	sub	sp, #36	; 0x24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e62:	2300      	movs	r3, #0
 8003e64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	61fb      	str	r3, [r7, #28]
 8003e6e:	e177      	b.n	8004160 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e70:	2201      	movs	r2, #1
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	fa02 f303 	lsl.w	r3, r2, r3
 8003e78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	4013      	ands	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	f040 8166 	bne.w	800415a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f003 0303 	and.w	r3, r3, #3
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d005      	beq.n	8003ea6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d130      	bne.n	8003f08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	2203      	movs	r2, #3
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	43db      	mvns	r3, r3
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	68da      	ldr	r2, [r3, #12]
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003edc:	2201      	movs	r2, #1
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	091b      	lsrs	r3, r3, #4
 8003ef2:	f003 0201 	and.w	r2, r3, #1
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f003 0303 	and.w	r3, r3, #3
 8003f10:	2b03      	cmp	r3, #3
 8003f12:	d017      	beq.n	8003f44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	2203      	movs	r2, #3
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	43db      	mvns	r3, r3
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	005b      	lsls	r3, r3, #1
 8003f34:	fa02 f303 	lsl.w	r3, r2, r3
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f003 0303 	and.w	r3, r3, #3
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d123      	bne.n	8003f98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	08da      	lsrs	r2, r3, #3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3208      	adds	r2, #8
 8003f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	f003 0307 	and.w	r3, r3, #7
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	220f      	movs	r2, #15
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	43db      	mvns	r3, r3
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	4013      	ands	r3, r2
 8003f72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	691a      	ldr	r2, [r3, #16]
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	08da      	lsrs	r2, r3, #3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	3208      	adds	r2, #8
 8003f92:	69b9      	ldr	r1, [r7, #24]
 8003f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	2203      	movs	r2, #3
 8003fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa8:	43db      	mvns	r3, r3
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	4013      	ands	r3, r2
 8003fae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f003 0203 	and.w	r2, r3, #3
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 80c0 	beq.w	800415a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60fb      	str	r3, [r7, #12]
 8003fde:	4b66      	ldr	r3, [pc, #408]	; (8004178 <HAL_GPIO_Init+0x324>)
 8003fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe2:	4a65      	ldr	r2, [pc, #404]	; (8004178 <HAL_GPIO_Init+0x324>)
 8003fe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8003fea:	4b63      	ldr	r3, [pc, #396]	; (8004178 <HAL_GPIO_Init+0x324>)
 8003fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ff6:	4a61      	ldr	r2, [pc, #388]	; (800417c <HAL_GPIO_Init+0x328>)
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	089b      	lsrs	r3, r3, #2
 8003ffc:	3302      	adds	r3, #2
 8003ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004002:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	f003 0303 	and.w	r3, r3, #3
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	220f      	movs	r2, #15
 800400e:	fa02 f303 	lsl.w	r3, r2, r3
 8004012:	43db      	mvns	r3, r3
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	4013      	ands	r3, r2
 8004018:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a58      	ldr	r2, [pc, #352]	; (8004180 <HAL_GPIO_Init+0x32c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d037      	beq.n	8004092 <HAL_GPIO_Init+0x23e>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a57      	ldr	r2, [pc, #348]	; (8004184 <HAL_GPIO_Init+0x330>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d031      	beq.n	800408e <HAL_GPIO_Init+0x23a>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a56      	ldr	r2, [pc, #344]	; (8004188 <HAL_GPIO_Init+0x334>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d02b      	beq.n	800408a <HAL_GPIO_Init+0x236>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a55      	ldr	r2, [pc, #340]	; (800418c <HAL_GPIO_Init+0x338>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d025      	beq.n	8004086 <HAL_GPIO_Init+0x232>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a54      	ldr	r2, [pc, #336]	; (8004190 <HAL_GPIO_Init+0x33c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d01f      	beq.n	8004082 <HAL_GPIO_Init+0x22e>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a53      	ldr	r2, [pc, #332]	; (8004194 <HAL_GPIO_Init+0x340>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d019      	beq.n	800407e <HAL_GPIO_Init+0x22a>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a52      	ldr	r2, [pc, #328]	; (8004198 <HAL_GPIO_Init+0x344>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d013      	beq.n	800407a <HAL_GPIO_Init+0x226>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a51      	ldr	r2, [pc, #324]	; (800419c <HAL_GPIO_Init+0x348>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d00d      	beq.n	8004076 <HAL_GPIO_Init+0x222>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a50      	ldr	r2, [pc, #320]	; (80041a0 <HAL_GPIO_Init+0x34c>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d007      	beq.n	8004072 <HAL_GPIO_Init+0x21e>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a4f      	ldr	r2, [pc, #316]	; (80041a4 <HAL_GPIO_Init+0x350>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d101      	bne.n	800406e <HAL_GPIO_Init+0x21a>
 800406a:	2309      	movs	r3, #9
 800406c:	e012      	b.n	8004094 <HAL_GPIO_Init+0x240>
 800406e:	230a      	movs	r3, #10
 8004070:	e010      	b.n	8004094 <HAL_GPIO_Init+0x240>
 8004072:	2308      	movs	r3, #8
 8004074:	e00e      	b.n	8004094 <HAL_GPIO_Init+0x240>
 8004076:	2307      	movs	r3, #7
 8004078:	e00c      	b.n	8004094 <HAL_GPIO_Init+0x240>
 800407a:	2306      	movs	r3, #6
 800407c:	e00a      	b.n	8004094 <HAL_GPIO_Init+0x240>
 800407e:	2305      	movs	r3, #5
 8004080:	e008      	b.n	8004094 <HAL_GPIO_Init+0x240>
 8004082:	2304      	movs	r3, #4
 8004084:	e006      	b.n	8004094 <HAL_GPIO_Init+0x240>
 8004086:	2303      	movs	r3, #3
 8004088:	e004      	b.n	8004094 <HAL_GPIO_Init+0x240>
 800408a:	2302      	movs	r3, #2
 800408c:	e002      	b.n	8004094 <HAL_GPIO_Init+0x240>
 800408e:	2301      	movs	r3, #1
 8004090:	e000      	b.n	8004094 <HAL_GPIO_Init+0x240>
 8004092:	2300      	movs	r3, #0
 8004094:	69fa      	ldr	r2, [r7, #28]
 8004096:	f002 0203 	and.w	r2, r2, #3
 800409a:	0092      	lsls	r2, r2, #2
 800409c:	4093      	lsls	r3, r2
 800409e:	69ba      	ldr	r2, [r7, #24]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040a4:	4935      	ldr	r1, [pc, #212]	; (800417c <HAL_GPIO_Init+0x328>)
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	089b      	lsrs	r3, r3, #2
 80040aa:	3302      	adds	r3, #2
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040b2:	4b3d      	ldr	r3, [pc, #244]	; (80041a8 <HAL_GPIO_Init+0x354>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	43db      	mvns	r3, r3
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	4013      	ands	r3, r2
 80040c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040d6:	4a34      	ldr	r2, [pc, #208]	; (80041a8 <HAL_GPIO_Init+0x354>)
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040dc:	4b32      	ldr	r3, [pc, #200]	; (80041a8 <HAL_GPIO_Init+0x354>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	43db      	mvns	r3, r3
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	4013      	ands	r3, r2
 80040ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d003      	beq.n	8004100 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004100:	4a29      	ldr	r2, [pc, #164]	; (80041a8 <HAL_GPIO_Init+0x354>)
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004106:	4b28      	ldr	r3, [pc, #160]	; (80041a8 <HAL_GPIO_Init+0x354>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	43db      	mvns	r3, r3
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	4013      	ands	r3, r2
 8004114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	4313      	orrs	r3, r2
 8004128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800412a:	4a1f      	ldr	r2, [pc, #124]	; (80041a8 <HAL_GPIO_Init+0x354>)
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004130:	4b1d      	ldr	r3, [pc, #116]	; (80041a8 <HAL_GPIO_Init+0x354>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	43db      	mvns	r3, r3
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	4013      	ands	r3, r2
 800413e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d003      	beq.n	8004154 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	4313      	orrs	r3, r2
 8004152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004154:	4a14      	ldr	r2, [pc, #80]	; (80041a8 <HAL_GPIO_Init+0x354>)
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	3301      	adds	r3, #1
 800415e:	61fb      	str	r3, [r7, #28]
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	2b0f      	cmp	r3, #15
 8004164:	f67f ae84 	bls.w	8003e70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004168:	bf00      	nop
 800416a:	bf00      	nop
 800416c:	3724      	adds	r7, #36	; 0x24
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	40023800 	.word	0x40023800
 800417c:	40013800 	.word	0x40013800
 8004180:	40020000 	.word	0x40020000
 8004184:	40020400 	.word	0x40020400
 8004188:	40020800 	.word	0x40020800
 800418c:	40020c00 	.word	0x40020c00
 8004190:	40021000 	.word	0x40021000
 8004194:	40021400 	.word	0x40021400
 8004198:	40021800 	.word	0x40021800
 800419c:	40021c00 	.word	0x40021c00
 80041a0:	40022000 	.word	0x40022000
 80041a4:	40022400 	.word	0x40022400
 80041a8:	40013c00 	.word	0x40013c00

080041ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	460b      	mov	r3, r1
 80041b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	691a      	ldr	r2, [r3, #16]
 80041bc:	887b      	ldrh	r3, [r7, #2]
 80041be:	4013      	ands	r3, r2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d002      	beq.n	80041ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041c4:	2301      	movs	r3, #1
 80041c6:	73fb      	strb	r3, [r7, #15]
 80041c8:	e001      	b.n	80041ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041ca:	2300      	movs	r3, #0
 80041cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3714      	adds	r7, #20
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	460b      	mov	r3, r1
 80041e6:	807b      	strh	r3, [r7, #2]
 80041e8:	4613      	mov	r3, r2
 80041ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041ec:	787b      	ldrb	r3, [r7, #1]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041f2:	887a      	ldrh	r2, [r7, #2]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041f8:	e003      	b.n	8004202 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041fa:	887b      	ldrh	r3, [r7, #2]
 80041fc:	041a      	lsls	r2, r3, #16
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	619a      	str	r2, [r3, #24]
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800420e:	b480      	push	{r7}
 8004210:	b085      	sub	sp, #20
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	460b      	mov	r3, r1
 8004218:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004220:	887a      	ldrh	r2, [r7, #2]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	4013      	ands	r3, r2
 8004226:	041a      	lsls	r2, r3, #16
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	43d9      	mvns	r1, r3
 800422c:	887b      	ldrh	r3, [r7, #2]
 800422e:	400b      	ands	r3, r1
 8004230:	431a      	orrs	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	619a      	str	r2, [r3, #24]
}
 8004236:	bf00      	nop
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
	...

08004244 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e12b      	b.n	80044ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d106      	bne.n	8004270 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7fe f98a 	bl	8002584 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2224      	movs	r2, #36	; 0x24
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 0201 	bic.w	r2, r2, #1
 8004286:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004296:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042a8:	f001 fa20 	bl	80056ec <HAL_RCC_GetPCLK1Freq>
 80042ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	4a81      	ldr	r2, [pc, #516]	; (80044b8 <HAL_I2C_Init+0x274>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d807      	bhi.n	80042c8 <HAL_I2C_Init+0x84>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4a80      	ldr	r2, [pc, #512]	; (80044bc <HAL_I2C_Init+0x278>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	bf94      	ite	ls
 80042c0:	2301      	movls	r3, #1
 80042c2:	2300      	movhi	r3, #0
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	e006      	b.n	80042d6 <HAL_I2C_Init+0x92>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4a7d      	ldr	r2, [pc, #500]	; (80044c0 <HAL_I2C_Init+0x27c>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	bf94      	ite	ls
 80042d0:	2301      	movls	r3, #1
 80042d2:	2300      	movhi	r3, #0
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e0e7      	b.n	80044ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	4a78      	ldr	r2, [pc, #480]	; (80044c4 <HAL_I2C_Init+0x280>)
 80042e2:	fba2 2303 	umull	r2, r3, r2, r3
 80042e6:	0c9b      	lsrs	r3, r3, #18
 80042e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	4a6a      	ldr	r2, [pc, #424]	; (80044b8 <HAL_I2C_Init+0x274>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d802      	bhi.n	8004318 <HAL_I2C_Init+0xd4>
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	3301      	adds	r3, #1
 8004316:	e009      	b.n	800432c <HAL_I2C_Init+0xe8>
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800431e:	fb02 f303 	mul.w	r3, r2, r3
 8004322:	4a69      	ldr	r2, [pc, #420]	; (80044c8 <HAL_I2C_Init+0x284>)
 8004324:	fba2 2303 	umull	r2, r3, r2, r3
 8004328:	099b      	lsrs	r3, r3, #6
 800432a:	3301      	adds	r3, #1
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6812      	ldr	r2, [r2, #0]
 8004330:	430b      	orrs	r3, r1
 8004332:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800433e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	495c      	ldr	r1, [pc, #368]	; (80044b8 <HAL_I2C_Init+0x274>)
 8004348:	428b      	cmp	r3, r1
 800434a:	d819      	bhi.n	8004380 <HAL_I2C_Init+0x13c>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	1e59      	subs	r1, r3, #1
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	fbb1 f3f3 	udiv	r3, r1, r3
 800435a:	1c59      	adds	r1, r3, #1
 800435c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004360:	400b      	ands	r3, r1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00a      	beq.n	800437c <HAL_I2C_Init+0x138>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	1e59      	subs	r1, r3, #1
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	005b      	lsls	r3, r3, #1
 8004370:	fbb1 f3f3 	udiv	r3, r1, r3
 8004374:	3301      	adds	r3, #1
 8004376:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800437a:	e051      	b.n	8004420 <HAL_I2C_Init+0x1dc>
 800437c:	2304      	movs	r3, #4
 800437e:	e04f      	b.n	8004420 <HAL_I2C_Init+0x1dc>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d111      	bne.n	80043ac <HAL_I2C_Init+0x168>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	1e58      	subs	r0, r3, #1
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6859      	ldr	r1, [r3, #4]
 8004390:	460b      	mov	r3, r1
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	440b      	add	r3, r1
 8004396:	fbb0 f3f3 	udiv	r3, r0, r3
 800439a:	3301      	adds	r3, #1
 800439c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	bf0c      	ite	eq
 80043a4:	2301      	moveq	r3, #1
 80043a6:	2300      	movne	r3, #0
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	e012      	b.n	80043d2 <HAL_I2C_Init+0x18e>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	1e58      	subs	r0, r3, #1
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6859      	ldr	r1, [r3, #4]
 80043b4:	460b      	mov	r3, r1
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	440b      	add	r3, r1
 80043ba:	0099      	lsls	r1, r3, #2
 80043bc:	440b      	add	r3, r1
 80043be:	fbb0 f3f3 	udiv	r3, r0, r3
 80043c2:	3301      	adds	r3, #1
 80043c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	bf0c      	ite	eq
 80043cc:	2301      	moveq	r3, #1
 80043ce:	2300      	movne	r3, #0
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <HAL_I2C_Init+0x196>
 80043d6:	2301      	movs	r3, #1
 80043d8:	e022      	b.n	8004420 <HAL_I2C_Init+0x1dc>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10e      	bne.n	8004400 <HAL_I2C_Init+0x1bc>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	1e58      	subs	r0, r3, #1
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6859      	ldr	r1, [r3, #4]
 80043ea:	460b      	mov	r3, r1
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	440b      	add	r3, r1
 80043f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80043f4:	3301      	adds	r3, #1
 80043f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043fe:	e00f      	b.n	8004420 <HAL_I2C_Init+0x1dc>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	1e58      	subs	r0, r3, #1
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6859      	ldr	r1, [r3, #4]
 8004408:	460b      	mov	r3, r1
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	440b      	add	r3, r1
 800440e:	0099      	lsls	r1, r3, #2
 8004410:	440b      	add	r3, r1
 8004412:	fbb0 f3f3 	udiv	r3, r0, r3
 8004416:	3301      	adds	r3, #1
 8004418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800441c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004420:	6879      	ldr	r1, [r7, #4]
 8004422:	6809      	ldr	r1, [r1, #0]
 8004424:	4313      	orrs	r3, r2
 8004426:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	69da      	ldr	r2, [r3, #28]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	431a      	orrs	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	430a      	orrs	r2, r1
 8004442:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800444e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	6911      	ldr	r1, [r2, #16]
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	68d2      	ldr	r2, [r2, #12]
 800445a:	4311      	orrs	r1, r2
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	6812      	ldr	r2, [r2, #0]
 8004460:	430b      	orrs	r3, r1
 8004462:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	695a      	ldr	r2, [r3, #20]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	431a      	orrs	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f042 0201 	orr.w	r2, r2, #1
 800448e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2220      	movs	r2, #32
 800449a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	000186a0 	.word	0x000186a0
 80044bc:	001e847f 	.word	0x001e847f
 80044c0:	003d08ff 	.word	0x003d08ff
 80044c4:	431bde83 	.word	0x431bde83
 80044c8:	10624dd3 	.word	0x10624dd3

080044cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b088      	sub	sp, #32
 80044d0:	af02      	add	r7, sp, #8
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	607a      	str	r2, [r7, #4]
 80044d6:	461a      	mov	r2, r3
 80044d8:	460b      	mov	r3, r1
 80044da:	817b      	strh	r3, [r7, #10]
 80044dc:	4613      	mov	r3, r2
 80044de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044e0:	f7fe ffbc 	bl	800345c <HAL_GetTick>
 80044e4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b20      	cmp	r3, #32
 80044f0:	f040 80e0 	bne.w	80046b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	2319      	movs	r3, #25
 80044fa:	2201      	movs	r2, #1
 80044fc:	4970      	ldr	r1, [pc, #448]	; (80046c0 <HAL_I2C_Master_Transmit+0x1f4>)
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 f964 	bl	80047cc <I2C_WaitOnFlagUntilTimeout>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800450a:	2302      	movs	r3, #2
 800450c:	e0d3      	b.n	80046b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004514:	2b01      	cmp	r3, #1
 8004516:	d101      	bne.n	800451c <HAL_I2C_Master_Transmit+0x50>
 8004518:	2302      	movs	r3, #2
 800451a:	e0cc      	b.n	80046b6 <HAL_I2C_Master_Transmit+0x1ea>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b01      	cmp	r3, #1
 8004530:	d007      	beq.n	8004542 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f042 0201 	orr.w	r2, r2, #1
 8004540:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004550:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2221      	movs	r2, #33	; 0x21
 8004556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2210      	movs	r2, #16
 800455e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	893a      	ldrh	r2, [r7, #8]
 8004572:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004578:	b29a      	uxth	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	4a50      	ldr	r2, [pc, #320]	; (80046c4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004582:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004584:	8979      	ldrh	r1, [r7, #10]
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	6a3a      	ldr	r2, [r7, #32]
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f000 f89c 	bl	80046c8 <I2C_MasterRequestWrite>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e08d      	b.n	80046b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800459a:	2300      	movs	r3, #0
 800459c:	613b      	str	r3, [r7, #16]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	613b      	str	r3, [r7, #16]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	613b      	str	r3, [r7, #16]
 80045ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80045b0:	e066      	b.n	8004680 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	6a39      	ldr	r1, [r7, #32]
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 f9de 	bl	8004978 <I2C_WaitOnTXEFlagUntilTimeout>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00d      	beq.n	80045de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	d107      	bne.n	80045da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e06b      	b.n	80046b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e2:	781a      	ldrb	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	1c5a      	adds	r2, r3, #1
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	3b01      	subs	r3, #1
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004606:	3b01      	subs	r3, #1
 8004608:	b29a      	uxth	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b04      	cmp	r3, #4
 800461a:	d11b      	bne.n	8004654 <HAL_I2C_Master_Transmit+0x188>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004620:	2b00      	cmp	r3, #0
 8004622:	d017      	beq.n	8004654 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	781a      	ldrb	r2, [r3, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	1c5a      	adds	r2, r3, #1
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463e:	b29b      	uxth	r3, r3
 8004640:	3b01      	subs	r3, #1
 8004642:	b29a      	uxth	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800464c:	3b01      	subs	r3, #1
 800464e:	b29a      	uxth	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	6a39      	ldr	r1, [r7, #32]
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f000 f9ce 	bl	80049fa <I2C_WaitOnBTFFlagUntilTimeout>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00d      	beq.n	8004680 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004668:	2b04      	cmp	r3, #4
 800466a:	d107      	bne.n	800467c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800467a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e01a      	b.n	80046b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004684:	2b00      	cmp	r3, #0
 8004686:	d194      	bne.n	80045b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004696:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2220      	movs	r2, #32
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046b0:	2300      	movs	r3, #0
 80046b2:	e000      	b.n	80046b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80046b4:	2302      	movs	r3, #2
  }
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3718      	adds	r7, #24
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	00100002 	.word	0x00100002
 80046c4:	ffff0000 	.word	0xffff0000

080046c8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b088      	sub	sp, #32
 80046cc:	af02      	add	r7, sp, #8
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	607a      	str	r2, [r7, #4]
 80046d2:	603b      	str	r3, [r7, #0]
 80046d4:	460b      	mov	r3, r1
 80046d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046dc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	2b08      	cmp	r3, #8
 80046e2:	d006      	beq.n	80046f2 <I2C_MasterRequestWrite+0x2a>
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d003      	beq.n	80046f2 <I2C_MasterRequestWrite+0x2a>
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046f0:	d108      	bne.n	8004704 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004700:	601a      	str	r2, [r3, #0]
 8004702:	e00b      	b.n	800471c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004708:	2b12      	cmp	r3, #18
 800470a:	d107      	bne.n	800471c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800471a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f000 f84f 	bl	80047cc <I2C_WaitOnFlagUntilTimeout>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00d      	beq.n	8004750 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800473e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004742:	d103      	bne.n	800474c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f44f 7200 	mov.w	r2, #512	; 0x200
 800474a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e035      	b.n	80047bc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004758:	d108      	bne.n	800476c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800475a:	897b      	ldrh	r3, [r7, #10]
 800475c:	b2db      	uxtb	r3, r3
 800475e:	461a      	mov	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004768:	611a      	str	r2, [r3, #16]
 800476a:	e01b      	b.n	80047a4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800476c:	897b      	ldrh	r3, [r7, #10]
 800476e:	11db      	asrs	r3, r3, #7
 8004770:	b2db      	uxtb	r3, r3
 8004772:	f003 0306 	and.w	r3, r3, #6
 8004776:	b2db      	uxtb	r3, r3
 8004778:	f063 030f 	orn	r3, r3, #15
 800477c:	b2da      	uxtb	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	490e      	ldr	r1, [pc, #56]	; (80047c4 <I2C_MasterRequestWrite+0xfc>)
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 f875 	bl	800487a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e010      	b.n	80047bc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800479a:	897b      	ldrh	r3, [r7, #10]
 800479c:	b2da      	uxtb	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	4907      	ldr	r1, [pc, #28]	; (80047c8 <I2C_MasterRequestWrite+0x100>)
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 f865 	bl	800487a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e000      	b.n	80047bc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3718      	adds	r7, #24
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	00010008 	.word	0x00010008
 80047c8:	00010002 	.word	0x00010002

080047cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	603b      	str	r3, [r7, #0]
 80047d8:	4613      	mov	r3, r2
 80047da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047dc:	e025      	b.n	800482a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e4:	d021      	beq.n	800482a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047e6:	f7fe fe39 	bl	800345c <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d302      	bcc.n	80047fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d116      	bne.n	800482a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2220      	movs	r2, #32
 8004806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	f043 0220 	orr.w	r2, r3, #32
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e023      	b.n	8004872 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	0c1b      	lsrs	r3, r3, #16
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b01      	cmp	r3, #1
 8004832:	d10d      	bne.n	8004850 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	43da      	mvns	r2, r3
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	4013      	ands	r3, r2
 8004840:	b29b      	uxth	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	bf0c      	ite	eq
 8004846:	2301      	moveq	r3, #1
 8004848:	2300      	movne	r3, #0
 800484a:	b2db      	uxtb	r3, r3
 800484c:	461a      	mov	r2, r3
 800484e:	e00c      	b.n	800486a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	43da      	mvns	r2, r3
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	4013      	ands	r3, r2
 800485c:	b29b      	uxth	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	bf0c      	ite	eq
 8004862:	2301      	moveq	r3, #1
 8004864:	2300      	movne	r3, #0
 8004866:	b2db      	uxtb	r3, r3
 8004868:	461a      	mov	r2, r3
 800486a:	79fb      	ldrb	r3, [r7, #7]
 800486c:	429a      	cmp	r2, r3
 800486e:	d0b6      	beq.n	80047de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800487a:	b580      	push	{r7, lr}
 800487c:	b084      	sub	sp, #16
 800487e:	af00      	add	r7, sp, #0
 8004880:	60f8      	str	r0, [r7, #12]
 8004882:	60b9      	str	r1, [r7, #8]
 8004884:	607a      	str	r2, [r7, #4]
 8004886:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004888:	e051      	b.n	800492e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004898:	d123      	bne.n	80048e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2220      	movs	r2, #32
 80048be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	f043 0204 	orr.w	r2, r3, #4
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e046      	b.n	8004970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e8:	d021      	beq.n	800492e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ea:	f7fe fdb7 	bl	800345c <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d302      	bcc.n	8004900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d116      	bne.n	800492e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2220      	movs	r2, #32
 800490a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	f043 0220 	orr.w	r2, r3, #32
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e020      	b.n	8004970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	0c1b      	lsrs	r3, r3, #16
 8004932:	b2db      	uxtb	r3, r3
 8004934:	2b01      	cmp	r3, #1
 8004936:	d10c      	bne.n	8004952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	43da      	mvns	r2, r3
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	4013      	ands	r3, r2
 8004944:	b29b      	uxth	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	bf14      	ite	ne
 800494a:	2301      	movne	r3, #1
 800494c:	2300      	moveq	r3, #0
 800494e:	b2db      	uxtb	r3, r3
 8004950:	e00b      	b.n	800496a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	43da      	mvns	r2, r3
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	4013      	ands	r3, r2
 800495e:	b29b      	uxth	r3, r3
 8004960:	2b00      	cmp	r3, #0
 8004962:	bf14      	ite	ne
 8004964:	2301      	movne	r3, #1
 8004966:	2300      	moveq	r3, #0
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d18d      	bne.n	800488a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004984:	e02d      	b.n	80049e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f000 f878 	bl	8004a7c <I2C_IsAcknowledgeFailed>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e02d      	b.n	80049f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499c:	d021      	beq.n	80049e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800499e:	f7fe fd5d 	bl	800345c <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d302      	bcc.n	80049b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d116      	bne.n	80049e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2220      	movs	r2, #32
 80049be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ce:	f043 0220 	orr.w	r2, r3, #32
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e007      	b.n	80049f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ec:	2b80      	cmp	r3, #128	; 0x80
 80049ee:	d1ca      	bne.n	8004986 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b084      	sub	sp, #16
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	60f8      	str	r0, [r7, #12]
 8004a02:	60b9      	str	r1, [r7, #8]
 8004a04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a06:	e02d      	b.n	8004a64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f000 f837 	bl	8004a7c <I2C_IsAcknowledgeFailed>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e02d      	b.n	8004a74 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a1e:	d021      	beq.n	8004a64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a20:	f7fe fd1c 	bl	800345c <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d302      	bcc.n	8004a36 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d116      	bne.n	8004a64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a50:	f043 0220 	orr.w	r2, r3, #32
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e007      	b.n	8004a74 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	f003 0304 	and.w	r3, r3, #4
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	d1ca      	bne.n	8004a08 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a92:	d11b      	bne.n	8004acc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a9c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab8:	f043 0204 	orr.w	r2, r3, #4
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e000      	b.n	8004ace <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b083      	sub	sp, #12
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
 8004ae2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2b20      	cmp	r3, #32
 8004aee:	d129      	bne.n	8004b44 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2224      	movs	r2, #36	; 0x24
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 0201 	bic.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 0210 	bic.w	r2, r2, #16
 8004b16:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	683a      	ldr	r2, [r7, #0]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f042 0201 	orr.w	r2, r2, #1
 8004b36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004b40:	2300      	movs	r3, #0
 8004b42:	e000      	b.n	8004b46 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004b44:	2302      	movs	r3, #2
  }
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b085      	sub	sp, #20
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
 8004b5a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b20      	cmp	r3, #32
 8004b6a:	d12a      	bne.n	8004bc2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2224      	movs	r2, #36	; 0x24
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f022 0201 	bic.w	r2, r2, #1
 8004b82:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004b8c:	89fb      	ldrh	r3, [r7, #14]
 8004b8e:	f023 030f 	bic.w	r3, r3, #15
 8004b92:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	89fb      	ldrh	r3, [r7, #14]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	89fa      	ldrh	r2, [r7, #14]
 8004ba4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f042 0201 	orr.w	r2, r2, #1
 8004bb4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2220      	movs	r2, #32
 8004bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	e000      	b.n	8004bc4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004bc2:	2302      	movs	r3, #2
  }
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bd2:	b08f      	sub	sp, #60	; 0x3c
 8004bd4:	af0a      	add	r7, sp, #40	; 0x28
 8004bd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e10f      	b.n	8004e02 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d106      	bne.n	8004c02 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f7fd fed1 	bl	80029a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2203      	movs	r2, #3
 8004c06:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d102      	bne.n	8004c1c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f003 fb24 	bl	800826e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	603b      	str	r3, [r7, #0]
 8004c2c:	687e      	ldr	r6, [r7, #4]
 8004c2e:	466d      	mov	r5, sp
 8004c30:	f106 0410 	add.w	r4, r6, #16
 8004c34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004c40:	e885 0003 	stmia.w	r5, {r0, r1}
 8004c44:	1d33      	adds	r3, r6, #4
 8004c46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c48:	6838      	ldr	r0, [r7, #0]
 8004c4a:	f003 faaf 	bl	80081ac <USB_CoreInit>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d005      	beq.n	8004c60 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2202      	movs	r2, #2
 8004c58:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e0d0      	b.n	8004e02 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2100      	movs	r1, #0
 8004c66:	4618      	mov	r0, r3
 8004c68:	f003 fb12 	bl	8008290 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	73fb      	strb	r3, [r7, #15]
 8004c70:	e04a      	b.n	8004d08 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004c72:	7bfa      	ldrb	r2, [r7, #15]
 8004c74:	6879      	ldr	r1, [r7, #4]
 8004c76:	4613      	mov	r3, r2
 8004c78:	00db      	lsls	r3, r3, #3
 8004c7a:	4413      	add	r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	440b      	add	r3, r1
 8004c80:	333d      	adds	r3, #61	; 0x3d
 8004c82:	2201      	movs	r2, #1
 8004c84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004c86:	7bfa      	ldrb	r2, [r7, #15]
 8004c88:	6879      	ldr	r1, [r7, #4]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	00db      	lsls	r3, r3, #3
 8004c8e:	4413      	add	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	440b      	add	r3, r1
 8004c94:	333c      	adds	r3, #60	; 0x3c
 8004c96:	7bfa      	ldrb	r2, [r7, #15]
 8004c98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004c9a:	7bfa      	ldrb	r2, [r7, #15]
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
 8004c9e:	b298      	uxth	r0, r3
 8004ca0:	6879      	ldr	r1, [r7, #4]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	00db      	lsls	r3, r3, #3
 8004ca6:	4413      	add	r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	440b      	add	r3, r1
 8004cac:	3344      	adds	r3, #68	; 0x44
 8004cae:	4602      	mov	r2, r0
 8004cb0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004cb2:	7bfa      	ldrb	r2, [r7, #15]
 8004cb4:	6879      	ldr	r1, [r7, #4]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	00db      	lsls	r3, r3, #3
 8004cba:	4413      	add	r3, r2
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	440b      	add	r3, r1
 8004cc0:	3340      	adds	r3, #64	; 0x40
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004cc6:	7bfa      	ldrb	r2, [r7, #15]
 8004cc8:	6879      	ldr	r1, [r7, #4]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	4413      	add	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	440b      	add	r3, r1
 8004cd4:	3348      	adds	r3, #72	; 0x48
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004cda:	7bfa      	ldrb	r2, [r7, #15]
 8004cdc:	6879      	ldr	r1, [r7, #4]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	00db      	lsls	r3, r3, #3
 8004ce2:	4413      	add	r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	440b      	add	r3, r1
 8004ce8:	334c      	adds	r3, #76	; 0x4c
 8004cea:	2200      	movs	r2, #0
 8004cec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004cee:	7bfa      	ldrb	r2, [r7, #15]
 8004cf0:	6879      	ldr	r1, [r7, #4]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	4413      	add	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	440b      	add	r3, r1
 8004cfc:	3354      	adds	r3, #84	; 0x54
 8004cfe:	2200      	movs	r2, #0
 8004d00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d02:	7bfb      	ldrb	r3, [r7, #15]
 8004d04:	3301      	adds	r3, #1
 8004d06:	73fb      	strb	r3, [r7, #15]
 8004d08:	7bfa      	ldrb	r2, [r7, #15]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d3af      	bcc.n	8004c72 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d12:	2300      	movs	r3, #0
 8004d14:	73fb      	strb	r3, [r7, #15]
 8004d16:	e044      	b.n	8004da2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004d18:	7bfa      	ldrb	r2, [r7, #15]
 8004d1a:	6879      	ldr	r1, [r7, #4]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	00db      	lsls	r3, r3, #3
 8004d20:	4413      	add	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	440b      	add	r3, r1
 8004d26:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004d2e:	7bfa      	ldrb	r2, [r7, #15]
 8004d30:	6879      	ldr	r1, [r7, #4]
 8004d32:	4613      	mov	r3, r2
 8004d34:	00db      	lsls	r3, r3, #3
 8004d36:	4413      	add	r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	440b      	add	r3, r1
 8004d3c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004d40:	7bfa      	ldrb	r2, [r7, #15]
 8004d42:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004d44:	7bfa      	ldrb	r2, [r7, #15]
 8004d46:	6879      	ldr	r1, [r7, #4]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	00db      	lsls	r3, r3, #3
 8004d4c:	4413      	add	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	440b      	add	r3, r1
 8004d52:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004d56:	2200      	movs	r2, #0
 8004d58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004d5a:	7bfa      	ldrb	r2, [r7, #15]
 8004d5c:	6879      	ldr	r1, [r7, #4]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	00db      	lsls	r3, r3, #3
 8004d62:	4413      	add	r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	440b      	add	r3, r1
 8004d68:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004d70:	7bfa      	ldrb	r2, [r7, #15]
 8004d72:	6879      	ldr	r1, [r7, #4]
 8004d74:	4613      	mov	r3, r2
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	4413      	add	r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	440b      	add	r3, r1
 8004d7e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004d82:	2200      	movs	r2, #0
 8004d84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004d86:	7bfa      	ldrb	r2, [r7, #15]
 8004d88:	6879      	ldr	r1, [r7, #4]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	00db      	lsls	r3, r3, #3
 8004d8e:	4413      	add	r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	440b      	add	r3, r1
 8004d94:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004d98:	2200      	movs	r2, #0
 8004d9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d9c:	7bfb      	ldrb	r3, [r7, #15]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	73fb      	strb	r3, [r7, #15]
 8004da2:	7bfa      	ldrb	r2, [r7, #15]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d3b5      	bcc.n	8004d18 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	603b      	str	r3, [r7, #0]
 8004db2:	687e      	ldr	r6, [r7, #4]
 8004db4:	466d      	mov	r5, sp
 8004db6:	f106 0410 	add.w	r4, r6, #16
 8004dba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004dbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004dbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004dc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004dc2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004dc6:	e885 0003 	stmia.w	r5, {r0, r1}
 8004dca:	1d33      	adds	r3, r6, #4
 8004dcc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004dce:	6838      	ldr	r0, [r7, #0]
 8004dd0:	f003 faaa 	bl	8008328 <USB_DevInit>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d005      	beq.n	8004de6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2202      	movs	r2, #2
 8004dde:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e00d      	b.n	8004e02 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f003 fc75 	bl	80086ea <USB_DevDisconnect>

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004e0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d101      	bne.n	8004e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e267      	b.n	80052ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d075      	beq.n	8004f16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e2a:	4b88      	ldr	r3, [pc, #544]	; (800504c <HAL_RCC_OscConfig+0x240>)
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f003 030c 	and.w	r3, r3, #12
 8004e32:	2b04      	cmp	r3, #4
 8004e34:	d00c      	beq.n	8004e50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e36:	4b85      	ldr	r3, [pc, #532]	; (800504c <HAL_RCC_OscConfig+0x240>)
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e3e:	2b08      	cmp	r3, #8
 8004e40:	d112      	bne.n	8004e68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e42:	4b82      	ldr	r3, [pc, #520]	; (800504c <HAL_RCC_OscConfig+0x240>)
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e4e:	d10b      	bne.n	8004e68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e50:	4b7e      	ldr	r3, [pc, #504]	; (800504c <HAL_RCC_OscConfig+0x240>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d05b      	beq.n	8004f14 <HAL_RCC_OscConfig+0x108>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d157      	bne.n	8004f14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e242      	b.n	80052ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e70:	d106      	bne.n	8004e80 <HAL_RCC_OscConfig+0x74>
 8004e72:	4b76      	ldr	r3, [pc, #472]	; (800504c <HAL_RCC_OscConfig+0x240>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a75      	ldr	r2, [pc, #468]	; (800504c <HAL_RCC_OscConfig+0x240>)
 8004e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e7c:	6013      	str	r3, [r2, #0]
 8004e7e:	e01d      	b.n	8004ebc <HAL_RCC_OscConfig+0xb0>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e88:	d10c      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x98>
 8004e8a:	4b70      	ldr	r3, [pc, #448]	; (800504c <HAL_RCC_OscConfig+0x240>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a6f      	ldr	r2, [pc, #444]	; (800504c <HAL_RCC_OscConfig+0x240>)
 8004e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e94:	6013      	str	r3, [r2, #0]
 8004e96:	4b6d      	ldr	r3, [pc, #436]	; (800504c <HAL_RCC_OscConfig+0x240>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a6c      	ldr	r2, [pc, #432]	; (800504c <HAL_RCC_OscConfig+0x240>)
 8004e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ea0:	6013      	str	r3, [r2, #0]
 8004ea2:	e00b      	b.n	8004ebc <HAL_RCC_OscConfig+0xb0>
 8004ea4:	4b69      	ldr	r3, [pc, #420]	; (800504c <HAL_RCC_OscConfig+0x240>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a68      	ldr	r2, [pc, #416]	; (800504c <HAL_RCC_OscConfig+0x240>)
 8004eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eae:	6013      	str	r3, [r2, #0]
 8004eb0:	4b66      	ldr	r3, [pc, #408]	; (800504c <HAL_RCC_OscConfig+0x240>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a65      	ldr	r2, [pc, #404]	; (800504c <HAL_RCC_OscConfig+0x240>)
 8004eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d013      	beq.n	8004eec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec4:	f7fe faca 	bl	800345c <HAL_GetTick>
 8004ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eca:	e008      	b.n	8004ede <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ecc:	f7fe fac6 	bl	800345c <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b64      	cmp	r3, #100	; 0x64
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e207      	b.n	80052ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ede:	4b5b      	ldr	r3, [pc, #364]	; (800504c <HAL_RCC_OscConfig+0x240>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d0f0      	beq.n	8004ecc <HAL_RCC_OscConfig+0xc0>
 8004eea:	e014      	b.n	8004f16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eec:	f7fe fab6 	bl	800345c <HAL_GetTick>
 8004ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ef2:	e008      	b.n	8004f06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ef4:	f7fe fab2 	bl	800345c <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b64      	cmp	r3, #100	; 0x64
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e1f3      	b.n	80052ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f06:	4b51      	ldr	r3, [pc, #324]	; (800504c <HAL_RCC_OscConfig+0x240>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1f0      	bne.n	8004ef4 <HAL_RCC_OscConfig+0xe8>
 8004f12:	e000      	b.n	8004f16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d063      	beq.n	8004fea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f22:	4b4a      	ldr	r3, [pc, #296]	; (800504c <HAL_RCC_OscConfig+0x240>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f003 030c 	and.w	r3, r3, #12
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00b      	beq.n	8004f46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f2e:	4b47      	ldr	r3, [pc, #284]	; (800504c <HAL_RCC_OscConfig+0x240>)
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f36:	2b08      	cmp	r3, #8
 8004f38:	d11c      	bne.n	8004f74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f3a:	4b44      	ldr	r3, [pc, #272]	; (800504c <HAL_RCC_OscConfig+0x240>)
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d116      	bne.n	8004f74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f46:	4b41      	ldr	r3, [pc, #260]	; (800504c <HAL_RCC_OscConfig+0x240>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d005      	beq.n	8004f5e <HAL_RCC_OscConfig+0x152>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d001      	beq.n	8004f5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e1c7      	b.n	80052ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f5e:	4b3b      	ldr	r3, [pc, #236]	; (800504c <HAL_RCC_OscConfig+0x240>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	00db      	lsls	r3, r3, #3
 8004f6c:	4937      	ldr	r1, [pc, #220]	; (800504c <HAL_RCC_OscConfig+0x240>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f72:	e03a      	b.n	8004fea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d020      	beq.n	8004fbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f7c:	4b34      	ldr	r3, [pc, #208]	; (8005050 <HAL_RCC_OscConfig+0x244>)
 8004f7e:	2201      	movs	r2, #1
 8004f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f82:	f7fe fa6b 	bl	800345c <HAL_GetTick>
 8004f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f88:	e008      	b.n	8004f9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f8a:	f7fe fa67 	bl	800345c <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d901      	bls.n	8004f9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e1a8      	b.n	80052ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f9c:	4b2b      	ldr	r3, [pc, #172]	; (800504c <HAL_RCC_OscConfig+0x240>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0f0      	beq.n	8004f8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fa8:	4b28      	ldr	r3, [pc, #160]	; (800504c <HAL_RCC_OscConfig+0x240>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	00db      	lsls	r3, r3, #3
 8004fb6:	4925      	ldr	r1, [pc, #148]	; (800504c <HAL_RCC_OscConfig+0x240>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	600b      	str	r3, [r1, #0]
 8004fbc:	e015      	b.n	8004fea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fbe:	4b24      	ldr	r3, [pc, #144]	; (8005050 <HAL_RCC_OscConfig+0x244>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc4:	f7fe fa4a 	bl	800345c <HAL_GetTick>
 8004fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fca:	e008      	b.n	8004fde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fcc:	f7fe fa46 	bl	800345c <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e187      	b.n	80052ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fde:	4b1b      	ldr	r3, [pc, #108]	; (800504c <HAL_RCC_OscConfig+0x240>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1f0      	bne.n	8004fcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0308 	and.w	r3, r3, #8
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d036      	beq.n	8005064 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d016      	beq.n	800502c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ffe:	4b15      	ldr	r3, [pc, #84]	; (8005054 <HAL_RCC_OscConfig+0x248>)
 8005000:	2201      	movs	r2, #1
 8005002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005004:	f7fe fa2a 	bl	800345c <HAL_GetTick>
 8005008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800500a:	e008      	b.n	800501e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800500c:	f7fe fa26 	bl	800345c <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d901      	bls.n	800501e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e167      	b.n	80052ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800501e:	4b0b      	ldr	r3, [pc, #44]	; (800504c <HAL_RCC_OscConfig+0x240>)
 8005020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b00      	cmp	r3, #0
 8005028:	d0f0      	beq.n	800500c <HAL_RCC_OscConfig+0x200>
 800502a:	e01b      	b.n	8005064 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800502c:	4b09      	ldr	r3, [pc, #36]	; (8005054 <HAL_RCC_OscConfig+0x248>)
 800502e:	2200      	movs	r2, #0
 8005030:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005032:	f7fe fa13 	bl	800345c <HAL_GetTick>
 8005036:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005038:	e00e      	b.n	8005058 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800503a:	f7fe fa0f 	bl	800345c <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	2b02      	cmp	r3, #2
 8005046:	d907      	bls.n	8005058 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e150      	b.n	80052ee <HAL_RCC_OscConfig+0x4e2>
 800504c:	40023800 	.word	0x40023800
 8005050:	42470000 	.word	0x42470000
 8005054:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005058:	4b88      	ldr	r3, [pc, #544]	; (800527c <HAL_RCC_OscConfig+0x470>)
 800505a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1ea      	bne.n	800503a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0304 	and.w	r3, r3, #4
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 8097 	beq.w	80051a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005072:	2300      	movs	r3, #0
 8005074:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005076:	4b81      	ldr	r3, [pc, #516]	; (800527c <HAL_RCC_OscConfig+0x470>)
 8005078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10f      	bne.n	80050a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005082:	2300      	movs	r3, #0
 8005084:	60bb      	str	r3, [r7, #8]
 8005086:	4b7d      	ldr	r3, [pc, #500]	; (800527c <HAL_RCC_OscConfig+0x470>)
 8005088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508a:	4a7c      	ldr	r2, [pc, #496]	; (800527c <HAL_RCC_OscConfig+0x470>)
 800508c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005090:	6413      	str	r3, [r2, #64]	; 0x40
 8005092:	4b7a      	ldr	r3, [pc, #488]	; (800527c <HAL_RCC_OscConfig+0x470>)
 8005094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800509a:	60bb      	str	r3, [r7, #8]
 800509c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800509e:	2301      	movs	r3, #1
 80050a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050a2:	4b77      	ldr	r3, [pc, #476]	; (8005280 <HAL_RCC_OscConfig+0x474>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d118      	bne.n	80050e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050ae:	4b74      	ldr	r3, [pc, #464]	; (8005280 <HAL_RCC_OscConfig+0x474>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a73      	ldr	r2, [pc, #460]	; (8005280 <HAL_RCC_OscConfig+0x474>)
 80050b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050ba:	f7fe f9cf 	bl	800345c <HAL_GetTick>
 80050be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050c0:	e008      	b.n	80050d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050c2:	f7fe f9cb 	bl	800345c <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d901      	bls.n	80050d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e10c      	b.n	80052ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050d4:	4b6a      	ldr	r3, [pc, #424]	; (8005280 <HAL_RCC_OscConfig+0x474>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d0f0      	beq.n	80050c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d106      	bne.n	80050f6 <HAL_RCC_OscConfig+0x2ea>
 80050e8:	4b64      	ldr	r3, [pc, #400]	; (800527c <HAL_RCC_OscConfig+0x470>)
 80050ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ec:	4a63      	ldr	r2, [pc, #396]	; (800527c <HAL_RCC_OscConfig+0x470>)
 80050ee:	f043 0301 	orr.w	r3, r3, #1
 80050f2:	6713      	str	r3, [r2, #112]	; 0x70
 80050f4:	e01c      	b.n	8005130 <HAL_RCC_OscConfig+0x324>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	2b05      	cmp	r3, #5
 80050fc:	d10c      	bne.n	8005118 <HAL_RCC_OscConfig+0x30c>
 80050fe:	4b5f      	ldr	r3, [pc, #380]	; (800527c <HAL_RCC_OscConfig+0x470>)
 8005100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005102:	4a5e      	ldr	r2, [pc, #376]	; (800527c <HAL_RCC_OscConfig+0x470>)
 8005104:	f043 0304 	orr.w	r3, r3, #4
 8005108:	6713      	str	r3, [r2, #112]	; 0x70
 800510a:	4b5c      	ldr	r3, [pc, #368]	; (800527c <HAL_RCC_OscConfig+0x470>)
 800510c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510e:	4a5b      	ldr	r2, [pc, #364]	; (800527c <HAL_RCC_OscConfig+0x470>)
 8005110:	f043 0301 	orr.w	r3, r3, #1
 8005114:	6713      	str	r3, [r2, #112]	; 0x70
 8005116:	e00b      	b.n	8005130 <HAL_RCC_OscConfig+0x324>
 8005118:	4b58      	ldr	r3, [pc, #352]	; (800527c <HAL_RCC_OscConfig+0x470>)
 800511a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800511c:	4a57      	ldr	r2, [pc, #348]	; (800527c <HAL_RCC_OscConfig+0x470>)
 800511e:	f023 0301 	bic.w	r3, r3, #1
 8005122:	6713      	str	r3, [r2, #112]	; 0x70
 8005124:	4b55      	ldr	r3, [pc, #340]	; (800527c <HAL_RCC_OscConfig+0x470>)
 8005126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005128:	4a54      	ldr	r2, [pc, #336]	; (800527c <HAL_RCC_OscConfig+0x470>)
 800512a:	f023 0304 	bic.w	r3, r3, #4
 800512e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d015      	beq.n	8005164 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005138:	f7fe f990 	bl	800345c <HAL_GetTick>
 800513c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800513e:	e00a      	b.n	8005156 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005140:	f7fe f98c 	bl	800345c <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	f241 3288 	movw	r2, #5000	; 0x1388
 800514e:	4293      	cmp	r3, r2
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e0cb      	b.n	80052ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005156:	4b49      	ldr	r3, [pc, #292]	; (800527c <HAL_RCC_OscConfig+0x470>)
 8005158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d0ee      	beq.n	8005140 <HAL_RCC_OscConfig+0x334>
 8005162:	e014      	b.n	800518e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005164:	f7fe f97a 	bl	800345c <HAL_GetTick>
 8005168:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800516a:	e00a      	b.n	8005182 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800516c:	f7fe f976 	bl	800345c <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	f241 3288 	movw	r2, #5000	; 0x1388
 800517a:	4293      	cmp	r3, r2
 800517c:	d901      	bls.n	8005182 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e0b5      	b.n	80052ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005182:	4b3e      	ldr	r3, [pc, #248]	; (800527c <HAL_RCC_OscConfig+0x470>)
 8005184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005186:	f003 0302 	and.w	r3, r3, #2
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1ee      	bne.n	800516c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800518e:	7dfb      	ldrb	r3, [r7, #23]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d105      	bne.n	80051a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005194:	4b39      	ldr	r3, [pc, #228]	; (800527c <HAL_RCC_OscConfig+0x470>)
 8005196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005198:	4a38      	ldr	r2, [pc, #224]	; (800527c <HAL_RCC_OscConfig+0x470>)
 800519a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800519e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f000 80a1 	beq.w	80052ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051aa:	4b34      	ldr	r3, [pc, #208]	; (800527c <HAL_RCC_OscConfig+0x470>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f003 030c 	and.w	r3, r3, #12
 80051b2:	2b08      	cmp	r3, #8
 80051b4:	d05c      	beq.n	8005270 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d141      	bne.n	8005242 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051be:	4b31      	ldr	r3, [pc, #196]	; (8005284 <HAL_RCC_OscConfig+0x478>)
 80051c0:	2200      	movs	r2, #0
 80051c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c4:	f7fe f94a 	bl	800345c <HAL_GetTick>
 80051c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ca:	e008      	b.n	80051de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051cc:	f7fe f946 	bl	800345c <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d901      	bls.n	80051de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e087      	b.n	80052ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051de:	4b27      	ldr	r3, [pc, #156]	; (800527c <HAL_RCC_OscConfig+0x470>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1f0      	bne.n	80051cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	69da      	ldr	r2, [r3, #28]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	431a      	orrs	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	019b      	lsls	r3, r3, #6
 80051fa:	431a      	orrs	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005200:	085b      	lsrs	r3, r3, #1
 8005202:	3b01      	subs	r3, #1
 8005204:	041b      	lsls	r3, r3, #16
 8005206:	431a      	orrs	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520c:	061b      	lsls	r3, r3, #24
 800520e:	491b      	ldr	r1, [pc, #108]	; (800527c <HAL_RCC_OscConfig+0x470>)
 8005210:	4313      	orrs	r3, r2
 8005212:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005214:	4b1b      	ldr	r3, [pc, #108]	; (8005284 <HAL_RCC_OscConfig+0x478>)
 8005216:	2201      	movs	r2, #1
 8005218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800521a:	f7fe f91f 	bl	800345c <HAL_GetTick>
 800521e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005220:	e008      	b.n	8005234 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005222:	f7fe f91b 	bl	800345c <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	2b02      	cmp	r3, #2
 800522e:	d901      	bls.n	8005234 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e05c      	b.n	80052ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005234:	4b11      	ldr	r3, [pc, #68]	; (800527c <HAL_RCC_OscConfig+0x470>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d0f0      	beq.n	8005222 <HAL_RCC_OscConfig+0x416>
 8005240:	e054      	b.n	80052ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005242:	4b10      	ldr	r3, [pc, #64]	; (8005284 <HAL_RCC_OscConfig+0x478>)
 8005244:	2200      	movs	r2, #0
 8005246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005248:	f7fe f908 	bl	800345c <HAL_GetTick>
 800524c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800524e:	e008      	b.n	8005262 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005250:	f7fe f904 	bl	800345c <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b02      	cmp	r3, #2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e045      	b.n	80052ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005262:	4b06      	ldr	r3, [pc, #24]	; (800527c <HAL_RCC_OscConfig+0x470>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1f0      	bne.n	8005250 <HAL_RCC_OscConfig+0x444>
 800526e:	e03d      	b.n	80052ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d107      	bne.n	8005288 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e038      	b.n	80052ee <HAL_RCC_OscConfig+0x4e2>
 800527c:	40023800 	.word	0x40023800
 8005280:	40007000 	.word	0x40007000
 8005284:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005288:	4b1b      	ldr	r3, [pc, #108]	; (80052f8 <HAL_RCC_OscConfig+0x4ec>)
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d028      	beq.n	80052e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d121      	bne.n	80052e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d11a      	bne.n	80052e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052b8:	4013      	ands	r3, r2
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d111      	bne.n	80052e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ce:	085b      	lsrs	r3, r3, #1
 80052d0:	3b01      	subs	r3, #1
 80052d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d107      	bne.n	80052e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d001      	beq.n	80052ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e000      	b.n	80052ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3718      	adds	r7, #24
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	40023800 	.word	0x40023800

080052fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d101      	bne.n	8005310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e0cc      	b.n	80054aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005310:	4b68      	ldr	r3, [pc, #416]	; (80054b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 030f 	and.w	r3, r3, #15
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	429a      	cmp	r2, r3
 800531c:	d90c      	bls.n	8005338 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800531e:	4b65      	ldr	r3, [pc, #404]	; (80054b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005320:	683a      	ldr	r2, [r7, #0]
 8005322:	b2d2      	uxtb	r2, r2
 8005324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005326:	4b63      	ldr	r3, [pc, #396]	; (80054b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 030f 	and.w	r3, r3, #15
 800532e:	683a      	ldr	r2, [r7, #0]
 8005330:	429a      	cmp	r2, r3
 8005332:	d001      	beq.n	8005338 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e0b8      	b.n	80054aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	2b00      	cmp	r3, #0
 8005342:	d020      	beq.n	8005386 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0304 	and.w	r3, r3, #4
 800534c:	2b00      	cmp	r3, #0
 800534e:	d005      	beq.n	800535c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005350:	4b59      	ldr	r3, [pc, #356]	; (80054b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	4a58      	ldr	r2, [pc, #352]	; (80054b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005356:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800535a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0308 	and.w	r3, r3, #8
 8005364:	2b00      	cmp	r3, #0
 8005366:	d005      	beq.n	8005374 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005368:	4b53      	ldr	r3, [pc, #332]	; (80054b8 <HAL_RCC_ClockConfig+0x1bc>)
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	4a52      	ldr	r2, [pc, #328]	; (80054b8 <HAL_RCC_ClockConfig+0x1bc>)
 800536e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005372:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005374:	4b50      	ldr	r3, [pc, #320]	; (80054b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	494d      	ldr	r1, [pc, #308]	; (80054b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005382:	4313      	orrs	r3, r2
 8005384:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b00      	cmp	r3, #0
 8005390:	d044      	beq.n	800541c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d107      	bne.n	80053aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800539a:	4b47      	ldr	r3, [pc, #284]	; (80054b8 <HAL_RCC_ClockConfig+0x1bc>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d119      	bne.n	80053da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e07f      	b.n	80054aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d003      	beq.n	80053ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053b6:	2b03      	cmp	r3, #3
 80053b8:	d107      	bne.n	80053ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053ba:	4b3f      	ldr	r3, [pc, #252]	; (80054b8 <HAL_RCC_ClockConfig+0x1bc>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d109      	bne.n	80053da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e06f      	b.n	80054aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053ca:	4b3b      	ldr	r3, [pc, #236]	; (80054b8 <HAL_RCC_ClockConfig+0x1bc>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e067      	b.n	80054aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053da:	4b37      	ldr	r3, [pc, #220]	; (80054b8 <HAL_RCC_ClockConfig+0x1bc>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f023 0203 	bic.w	r2, r3, #3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	4934      	ldr	r1, [pc, #208]	; (80054b8 <HAL_RCC_ClockConfig+0x1bc>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053ec:	f7fe f836 	bl	800345c <HAL_GetTick>
 80053f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053f2:	e00a      	b.n	800540a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053f4:	f7fe f832 	bl	800345c <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005402:	4293      	cmp	r3, r2
 8005404:	d901      	bls.n	800540a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e04f      	b.n	80054aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800540a:	4b2b      	ldr	r3, [pc, #172]	; (80054b8 <HAL_RCC_ClockConfig+0x1bc>)
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f003 020c 	and.w	r2, r3, #12
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	429a      	cmp	r2, r3
 800541a:	d1eb      	bne.n	80053f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800541c:	4b25      	ldr	r3, [pc, #148]	; (80054b4 <HAL_RCC_ClockConfig+0x1b8>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 030f 	and.w	r3, r3, #15
 8005424:	683a      	ldr	r2, [r7, #0]
 8005426:	429a      	cmp	r2, r3
 8005428:	d20c      	bcs.n	8005444 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800542a:	4b22      	ldr	r3, [pc, #136]	; (80054b4 <HAL_RCC_ClockConfig+0x1b8>)
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	b2d2      	uxtb	r2, r2
 8005430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005432:	4b20      	ldr	r3, [pc, #128]	; (80054b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 030f 	and.w	r3, r3, #15
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	429a      	cmp	r2, r3
 800543e:	d001      	beq.n	8005444 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e032      	b.n	80054aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0304 	and.w	r3, r3, #4
 800544c:	2b00      	cmp	r3, #0
 800544e:	d008      	beq.n	8005462 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005450:	4b19      	ldr	r3, [pc, #100]	; (80054b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	4916      	ldr	r1, [pc, #88]	; (80054b8 <HAL_RCC_ClockConfig+0x1bc>)
 800545e:	4313      	orrs	r3, r2
 8005460:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0308 	and.w	r3, r3, #8
 800546a:	2b00      	cmp	r3, #0
 800546c:	d009      	beq.n	8005482 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800546e:	4b12      	ldr	r3, [pc, #72]	; (80054b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	00db      	lsls	r3, r3, #3
 800547c:	490e      	ldr	r1, [pc, #56]	; (80054b8 <HAL_RCC_ClockConfig+0x1bc>)
 800547e:	4313      	orrs	r3, r2
 8005480:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005482:	f000 f821 	bl	80054c8 <HAL_RCC_GetSysClockFreq>
 8005486:	4602      	mov	r2, r0
 8005488:	4b0b      	ldr	r3, [pc, #44]	; (80054b8 <HAL_RCC_ClockConfig+0x1bc>)
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	091b      	lsrs	r3, r3, #4
 800548e:	f003 030f 	and.w	r3, r3, #15
 8005492:	490a      	ldr	r1, [pc, #40]	; (80054bc <HAL_RCC_ClockConfig+0x1c0>)
 8005494:	5ccb      	ldrb	r3, [r1, r3]
 8005496:	fa22 f303 	lsr.w	r3, r2, r3
 800549a:	4a09      	ldr	r2, [pc, #36]	; (80054c0 <HAL_RCC_ClockConfig+0x1c4>)
 800549c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800549e:	4b09      	ldr	r3, [pc, #36]	; (80054c4 <HAL_RCC_ClockConfig+0x1c8>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7fd ff96 	bl	80033d4 <HAL_InitTick>

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	40023c00 	.word	0x40023c00
 80054b8:	40023800 	.word	0x40023800
 80054bc:	08009ef0 	.word	0x08009ef0
 80054c0:	20000014 	.word	0x20000014
 80054c4:	2000001c 	.word	0x2000001c

080054c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054cc:	b094      	sub	sp, #80	; 0x50
 80054ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80054d0:	2300      	movs	r3, #0
 80054d2:	647b      	str	r3, [r7, #68]	; 0x44
 80054d4:	2300      	movs	r3, #0
 80054d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054d8:	2300      	movs	r3, #0
 80054da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80054dc:	2300      	movs	r3, #0
 80054de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054e0:	4b79      	ldr	r3, [pc, #484]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f003 030c 	and.w	r3, r3, #12
 80054e8:	2b08      	cmp	r3, #8
 80054ea:	d00d      	beq.n	8005508 <HAL_RCC_GetSysClockFreq+0x40>
 80054ec:	2b08      	cmp	r3, #8
 80054ee:	f200 80e1 	bhi.w	80056b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d002      	beq.n	80054fc <HAL_RCC_GetSysClockFreq+0x34>
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	d003      	beq.n	8005502 <HAL_RCC_GetSysClockFreq+0x3a>
 80054fa:	e0db      	b.n	80056b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054fc:	4b73      	ldr	r3, [pc, #460]	; (80056cc <HAL_RCC_GetSysClockFreq+0x204>)
 80054fe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005500:	e0db      	b.n	80056ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005502:	4b73      	ldr	r3, [pc, #460]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005504:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005506:	e0d8      	b.n	80056ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005508:	4b6f      	ldr	r3, [pc, #444]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005510:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005512:	4b6d      	ldr	r3, [pc, #436]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d063      	beq.n	80055e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800551e:	4b6a      	ldr	r3, [pc, #424]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	099b      	lsrs	r3, r3, #6
 8005524:	2200      	movs	r2, #0
 8005526:	63bb      	str	r3, [r7, #56]	; 0x38
 8005528:	63fa      	str	r2, [r7, #60]	; 0x3c
 800552a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005530:	633b      	str	r3, [r7, #48]	; 0x30
 8005532:	2300      	movs	r3, #0
 8005534:	637b      	str	r3, [r7, #52]	; 0x34
 8005536:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800553a:	4622      	mov	r2, r4
 800553c:	462b      	mov	r3, r5
 800553e:	f04f 0000 	mov.w	r0, #0
 8005542:	f04f 0100 	mov.w	r1, #0
 8005546:	0159      	lsls	r1, r3, #5
 8005548:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800554c:	0150      	lsls	r0, r2, #5
 800554e:	4602      	mov	r2, r0
 8005550:	460b      	mov	r3, r1
 8005552:	4621      	mov	r1, r4
 8005554:	1a51      	subs	r1, r2, r1
 8005556:	6139      	str	r1, [r7, #16]
 8005558:	4629      	mov	r1, r5
 800555a:	eb63 0301 	sbc.w	r3, r3, r1
 800555e:	617b      	str	r3, [r7, #20]
 8005560:	f04f 0200 	mov.w	r2, #0
 8005564:	f04f 0300 	mov.w	r3, #0
 8005568:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800556c:	4659      	mov	r1, fp
 800556e:	018b      	lsls	r3, r1, #6
 8005570:	4651      	mov	r1, sl
 8005572:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005576:	4651      	mov	r1, sl
 8005578:	018a      	lsls	r2, r1, #6
 800557a:	4651      	mov	r1, sl
 800557c:	ebb2 0801 	subs.w	r8, r2, r1
 8005580:	4659      	mov	r1, fp
 8005582:	eb63 0901 	sbc.w	r9, r3, r1
 8005586:	f04f 0200 	mov.w	r2, #0
 800558a:	f04f 0300 	mov.w	r3, #0
 800558e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005592:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005596:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800559a:	4690      	mov	r8, r2
 800559c:	4699      	mov	r9, r3
 800559e:	4623      	mov	r3, r4
 80055a0:	eb18 0303 	adds.w	r3, r8, r3
 80055a4:	60bb      	str	r3, [r7, #8]
 80055a6:	462b      	mov	r3, r5
 80055a8:	eb49 0303 	adc.w	r3, r9, r3
 80055ac:	60fb      	str	r3, [r7, #12]
 80055ae:	f04f 0200 	mov.w	r2, #0
 80055b2:	f04f 0300 	mov.w	r3, #0
 80055b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80055ba:	4629      	mov	r1, r5
 80055bc:	024b      	lsls	r3, r1, #9
 80055be:	4621      	mov	r1, r4
 80055c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80055c4:	4621      	mov	r1, r4
 80055c6:	024a      	lsls	r2, r1, #9
 80055c8:	4610      	mov	r0, r2
 80055ca:	4619      	mov	r1, r3
 80055cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055ce:	2200      	movs	r2, #0
 80055d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80055d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055d8:	f7fb fa50 	bl	8000a7c <__aeabi_uldivmod>
 80055dc:	4602      	mov	r2, r0
 80055de:	460b      	mov	r3, r1
 80055e0:	4613      	mov	r3, r2
 80055e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055e4:	e058      	b.n	8005698 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055e6:	4b38      	ldr	r3, [pc, #224]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	099b      	lsrs	r3, r3, #6
 80055ec:	2200      	movs	r2, #0
 80055ee:	4618      	mov	r0, r3
 80055f0:	4611      	mov	r1, r2
 80055f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80055f6:	623b      	str	r3, [r7, #32]
 80055f8:	2300      	movs	r3, #0
 80055fa:	627b      	str	r3, [r7, #36]	; 0x24
 80055fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005600:	4642      	mov	r2, r8
 8005602:	464b      	mov	r3, r9
 8005604:	f04f 0000 	mov.w	r0, #0
 8005608:	f04f 0100 	mov.w	r1, #0
 800560c:	0159      	lsls	r1, r3, #5
 800560e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005612:	0150      	lsls	r0, r2, #5
 8005614:	4602      	mov	r2, r0
 8005616:	460b      	mov	r3, r1
 8005618:	4641      	mov	r1, r8
 800561a:	ebb2 0a01 	subs.w	sl, r2, r1
 800561e:	4649      	mov	r1, r9
 8005620:	eb63 0b01 	sbc.w	fp, r3, r1
 8005624:	f04f 0200 	mov.w	r2, #0
 8005628:	f04f 0300 	mov.w	r3, #0
 800562c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005630:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005634:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005638:	ebb2 040a 	subs.w	r4, r2, sl
 800563c:	eb63 050b 	sbc.w	r5, r3, fp
 8005640:	f04f 0200 	mov.w	r2, #0
 8005644:	f04f 0300 	mov.w	r3, #0
 8005648:	00eb      	lsls	r3, r5, #3
 800564a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800564e:	00e2      	lsls	r2, r4, #3
 8005650:	4614      	mov	r4, r2
 8005652:	461d      	mov	r5, r3
 8005654:	4643      	mov	r3, r8
 8005656:	18e3      	adds	r3, r4, r3
 8005658:	603b      	str	r3, [r7, #0]
 800565a:	464b      	mov	r3, r9
 800565c:	eb45 0303 	adc.w	r3, r5, r3
 8005660:	607b      	str	r3, [r7, #4]
 8005662:	f04f 0200 	mov.w	r2, #0
 8005666:	f04f 0300 	mov.w	r3, #0
 800566a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800566e:	4629      	mov	r1, r5
 8005670:	028b      	lsls	r3, r1, #10
 8005672:	4621      	mov	r1, r4
 8005674:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005678:	4621      	mov	r1, r4
 800567a:	028a      	lsls	r2, r1, #10
 800567c:	4610      	mov	r0, r2
 800567e:	4619      	mov	r1, r3
 8005680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005682:	2200      	movs	r2, #0
 8005684:	61bb      	str	r3, [r7, #24]
 8005686:	61fa      	str	r2, [r7, #28]
 8005688:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800568c:	f7fb f9f6 	bl	8000a7c <__aeabi_uldivmod>
 8005690:	4602      	mov	r2, r0
 8005692:	460b      	mov	r3, r1
 8005694:	4613      	mov	r3, r2
 8005696:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005698:	4b0b      	ldr	r3, [pc, #44]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	0c1b      	lsrs	r3, r3, #16
 800569e:	f003 0303 	and.w	r3, r3, #3
 80056a2:	3301      	adds	r3, #1
 80056a4:	005b      	lsls	r3, r3, #1
 80056a6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80056a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056b2:	e002      	b.n	80056ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056b4:	4b05      	ldr	r3, [pc, #20]	; (80056cc <HAL_RCC_GetSysClockFreq+0x204>)
 80056b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3750      	adds	r7, #80	; 0x50
 80056c0:	46bd      	mov	sp, r7
 80056c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056c6:	bf00      	nop
 80056c8:	40023800 	.word	0x40023800
 80056cc:	00f42400 	.word	0x00f42400
 80056d0:	007a1200 	.word	0x007a1200

080056d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056d4:	b480      	push	{r7}
 80056d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056d8:	4b03      	ldr	r3, [pc, #12]	; (80056e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80056da:	681b      	ldr	r3, [r3, #0]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	20000014 	.word	0x20000014

080056ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80056f0:	f7ff fff0 	bl	80056d4 <HAL_RCC_GetHCLKFreq>
 80056f4:	4602      	mov	r2, r0
 80056f6:	4b05      	ldr	r3, [pc, #20]	; (800570c <HAL_RCC_GetPCLK1Freq+0x20>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	0a9b      	lsrs	r3, r3, #10
 80056fc:	f003 0307 	and.w	r3, r3, #7
 8005700:	4903      	ldr	r1, [pc, #12]	; (8005710 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005702:	5ccb      	ldrb	r3, [r1, r3]
 8005704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005708:	4618      	mov	r0, r3
 800570a:	bd80      	pop	{r7, pc}
 800570c:	40023800 	.word	0x40023800
 8005710:	08009f00 	.word	0x08009f00

08005714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005718:	f7ff ffdc 	bl	80056d4 <HAL_RCC_GetHCLKFreq>
 800571c:	4602      	mov	r2, r0
 800571e:	4b05      	ldr	r3, [pc, #20]	; (8005734 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	0b5b      	lsrs	r3, r3, #13
 8005724:	f003 0307 	and.w	r3, r3, #7
 8005728:	4903      	ldr	r1, [pc, #12]	; (8005738 <HAL_RCC_GetPCLK2Freq+0x24>)
 800572a:	5ccb      	ldrb	r3, [r1, r3]
 800572c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005730:	4618      	mov	r0, r3
 8005732:	bd80      	pop	{r7, pc}
 8005734:	40023800 	.word	0x40023800
 8005738:	08009f00 	.word	0x08009f00

0800573c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d101      	bne.n	800574e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e041      	b.n	80057d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d106      	bne.n	8005768 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f7fc ffcc 	bl	8002700 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2202      	movs	r2, #2
 800576c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	3304      	adds	r3, #4
 8005778:	4619      	mov	r1, r3
 800577a:	4610      	mov	r0, r2
 800577c:	f000 ffd4 	bl	8006728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3708      	adds	r7, #8
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
	...

080057dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d001      	beq.n	80057f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e04e      	b.n	8005892 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2202      	movs	r2, #2
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68da      	ldr	r2, [r3, #12]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f042 0201 	orr.w	r2, r2, #1
 800580a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a23      	ldr	r2, [pc, #140]	; (80058a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d022      	beq.n	800585c <HAL_TIM_Base_Start_IT+0x80>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800581e:	d01d      	beq.n	800585c <HAL_TIM_Base_Start_IT+0x80>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a1f      	ldr	r2, [pc, #124]	; (80058a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d018      	beq.n	800585c <HAL_TIM_Base_Start_IT+0x80>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a1e      	ldr	r2, [pc, #120]	; (80058a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d013      	beq.n	800585c <HAL_TIM_Base_Start_IT+0x80>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a1c      	ldr	r2, [pc, #112]	; (80058ac <HAL_TIM_Base_Start_IT+0xd0>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d00e      	beq.n	800585c <HAL_TIM_Base_Start_IT+0x80>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a1b      	ldr	r2, [pc, #108]	; (80058b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d009      	beq.n	800585c <HAL_TIM_Base_Start_IT+0x80>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a19      	ldr	r2, [pc, #100]	; (80058b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d004      	beq.n	800585c <HAL_TIM_Base_Start_IT+0x80>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a18      	ldr	r2, [pc, #96]	; (80058b8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d111      	bne.n	8005880 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f003 0307 	and.w	r3, r3, #7
 8005866:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2b06      	cmp	r3, #6
 800586c:	d010      	beq.n	8005890 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f042 0201 	orr.w	r2, r2, #1
 800587c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800587e:	e007      	b.n	8005890 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f042 0201 	orr.w	r2, r2, #1
 800588e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3714      	adds	r7, #20
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	40010000 	.word	0x40010000
 80058a4:	40000400 	.word	0x40000400
 80058a8:	40000800 	.word	0x40000800
 80058ac:	40000c00 	.word	0x40000c00
 80058b0:	40010400 	.word	0x40010400
 80058b4:	40014000 	.word	0x40014000
 80058b8:	40001800 	.word	0x40001800

080058bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e041      	b.n	8005952 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d106      	bne.n	80058e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7fc fe96 	bl	8002614 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2202      	movs	r2, #2
 80058ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	3304      	adds	r3, #4
 80058f8:	4619      	mov	r1, r3
 80058fa:	4610      	mov	r0, r2
 80058fc:	f000 ff14 	bl	8006728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
	...

0800595c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d109      	bne.n	8005980 <HAL_TIM_PWM_Start+0x24>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b01      	cmp	r3, #1
 8005976:	bf14      	ite	ne
 8005978:	2301      	movne	r3, #1
 800597a:	2300      	moveq	r3, #0
 800597c:	b2db      	uxtb	r3, r3
 800597e:	e022      	b.n	80059c6 <HAL_TIM_PWM_Start+0x6a>
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	2b04      	cmp	r3, #4
 8005984:	d109      	bne.n	800599a <HAL_TIM_PWM_Start+0x3e>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b01      	cmp	r3, #1
 8005990:	bf14      	ite	ne
 8005992:	2301      	movne	r3, #1
 8005994:	2300      	moveq	r3, #0
 8005996:	b2db      	uxtb	r3, r3
 8005998:	e015      	b.n	80059c6 <HAL_TIM_PWM_Start+0x6a>
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	2b08      	cmp	r3, #8
 800599e:	d109      	bne.n	80059b4 <HAL_TIM_PWM_Start+0x58>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	bf14      	ite	ne
 80059ac:	2301      	movne	r3, #1
 80059ae:	2300      	moveq	r3, #0
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	e008      	b.n	80059c6 <HAL_TIM_PWM_Start+0x6a>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b01      	cmp	r3, #1
 80059be:	bf14      	ite	ne
 80059c0:	2301      	movne	r3, #1
 80059c2:	2300      	moveq	r3, #0
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e07c      	b.n	8005ac8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d104      	bne.n	80059de <HAL_TIM_PWM_Start+0x82>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2202      	movs	r2, #2
 80059d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059dc:	e013      	b.n	8005a06 <HAL_TIM_PWM_Start+0xaa>
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	2b04      	cmp	r3, #4
 80059e2:	d104      	bne.n	80059ee <HAL_TIM_PWM_Start+0x92>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2202      	movs	r2, #2
 80059e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059ec:	e00b      	b.n	8005a06 <HAL_TIM_PWM_Start+0xaa>
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2b08      	cmp	r3, #8
 80059f2:	d104      	bne.n	80059fe <HAL_TIM_PWM_Start+0xa2>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2202      	movs	r2, #2
 80059f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059fc:	e003      	b.n	8005a06 <HAL_TIM_PWM_Start+0xaa>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2202      	movs	r2, #2
 8005a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	6839      	ldr	r1, [r7, #0]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f001 fa9e 	bl	8006f50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a2d      	ldr	r2, [pc, #180]	; (8005ad0 <HAL_TIM_PWM_Start+0x174>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d004      	beq.n	8005a28 <HAL_TIM_PWM_Start+0xcc>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a2c      	ldr	r2, [pc, #176]	; (8005ad4 <HAL_TIM_PWM_Start+0x178>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d101      	bne.n	8005a2c <HAL_TIM_PWM_Start+0xd0>
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e000      	b.n	8005a2e <HAL_TIM_PWM_Start+0xd2>
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d007      	beq.n	8005a42 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a22      	ldr	r2, [pc, #136]	; (8005ad0 <HAL_TIM_PWM_Start+0x174>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d022      	beq.n	8005a92 <HAL_TIM_PWM_Start+0x136>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a54:	d01d      	beq.n	8005a92 <HAL_TIM_PWM_Start+0x136>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a1f      	ldr	r2, [pc, #124]	; (8005ad8 <HAL_TIM_PWM_Start+0x17c>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d018      	beq.n	8005a92 <HAL_TIM_PWM_Start+0x136>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a1d      	ldr	r2, [pc, #116]	; (8005adc <HAL_TIM_PWM_Start+0x180>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d013      	beq.n	8005a92 <HAL_TIM_PWM_Start+0x136>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a1c      	ldr	r2, [pc, #112]	; (8005ae0 <HAL_TIM_PWM_Start+0x184>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d00e      	beq.n	8005a92 <HAL_TIM_PWM_Start+0x136>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a16      	ldr	r2, [pc, #88]	; (8005ad4 <HAL_TIM_PWM_Start+0x178>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d009      	beq.n	8005a92 <HAL_TIM_PWM_Start+0x136>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a18      	ldr	r2, [pc, #96]	; (8005ae4 <HAL_TIM_PWM_Start+0x188>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d004      	beq.n	8005a92 <HAL_TIM_PWM_Start+0x136>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a16      	ldr	r2, [pc, #88]	; (8005ae8 <HAL_TIM_PWM_Start+0x18c>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d111      	bne.n	8005ab6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f003 0307 	and.w	r3, r3, #7
 8005a9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2b06      	cmp	r3, #6
 8005aa2:	d010      	beq.n	8005ac6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f042 0201 	orr.w	r2, r2, #1
 8005ab2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ab4:	e007      	b.n	8005ac6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f042 0201 	orr.w	r2, r2, #1
 8005ac4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	40010000 	.word	0x40010000
 8005ad4:	40010400 	.word	0x40010400
 8005ad8:	40000400 	.word	0x40000400
 8005adc:	40000800 	.word	0x40000800
 8005ae0:	40000c00 	.word	0x40000c00
 8005ae4:	40014000 	.word	0x40014000
 8005ae8:	40001800 	.word	0x40001800

08005aec <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005af6:	2300      	movs	r3, #0
 8005af8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d109      	bne.n	8005b14 <HAL_TIM_PWM_Start_IT+0x28>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	bf14      	ite	ne
 8005b0c:	2301      	movne	r3, #1
 8005b0e:	2300      	moveq	r3, #0
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	e022      	b.n	8005b5a <HAL_TIM_PWM_Start_IT+0x6e>
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	2b04      	cmp	r3, #4
 8005b18:	d109      	bne.n	8005b2e <HAL_TIM_PWM_Start_IT+0x42>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	bf14      	ite	ne
 8005b26:	2301      	movne	r3, #1
 8005b28:	2300      	moveq	r3, #0
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	e015      	b.n	8005b5a <HAL_TIM_PWM_Start_IT+0x6e>
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	2b08      	cmp	r3, #8
 8005b32:	d109      	bne.n	8005b48 <HAL_TIM_PWM_Start_IT+0x5c>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	bf14      	ite	ne
 8005b40:	2301      	movne	r3, #1
 8005b42:	2300      	moveq	r3, #0
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	e008      	b.n	8005b5a <HAL_TIM_PWM_Start_IT+0x6e>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	bf14      	ite	ne
 8005b54:	2301      	movne	r3, #1
 8005b56:	2300      	moveq	r3, #0
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d001      	beq.n	8005b62 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e0c7      	b.n	8005cf2 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d104      	bne.n	8005b72 <HAL_TIM_PWM_Start_IT+0x86>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b70:	e013      	b.n	8005b9a <HAL_TIM_PWM_Start_IT+0xae>
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	2b04      	cmp	r3, #4
 8005b76:	d104      	bne.n	8005b82 <HAL_TIM_PWM_Start_IT+0x96>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2202      	movs	r2, #2
 8005b7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b80:	e00b      	b.n	8005b9a <HAL_TIM_PWM_Start_IT+0xae>
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	2b08      	cmp	r3, #8
 8005b86:	d104      	bne.n	8005b92 <HAL_TIM_PWM_Start_IT+0xa6>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2202      	movs	r2, #2
 8005b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b90:	e003      	b.n	8005b9a <HAL_TIM_PWM_Start_IT+0xae>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2202      	movs	r2, #2
 8005b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	2b0c      	cmp	r3, #12
 8005b9e:	d841      	bhi.n	8005c24 <HAL_TIM_PWM_Start_IT+0x138>
 8005ba0:	a201      	add	r2, pc, #4	; (adr r2, 8005ba8 <HAL_TIM_PWM_Start_IT+0xbc>)
 8005ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba6:	bf00      	nop
 8005ba8:	08005bdd 	.word	0x08005bdd
 8005bac:	08005c25 	.word	0x08005c25
 8005bb0:	08005c25 	.word	0x08005c25
 8005bb4:	08005c25 	.word	0x08005c25
 8005bb8:	08005bef 	.word	0x08005bef
 8005bbc:	08005c25 	.word	0x08005c25
 8005bc0:	08005c25 	.word	0x08005c25
 8005bc4:	08005c25 	.word	0x08005c25
 8005bc8:	08005c01 	.word	0x08005c01
 8005bcc:	08005c25 	.word	0x08005c25
 8005bd0:	08005c25 	.word	0x08005c25
 8005bd4:	08005c25 	.word	0x08005c25
 8005bd8:	08005c13 	.word	0x08005c13
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68da      	ldr	r2, [r3, #12]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f042 0202 	orr.w	r2, r2, #2
 8005bea:	60da      	str	r2, [r3, #12]
      break;
 8005bec:	e01d      	b.n	8005c2a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68da      	ldr	r2, [r3, #12]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f042 0204 	orr.w	r2, r2, #4
 8005bfc:	60da      	str	r2, [r3, #12]
      break;
 8005bfe:	e014      	b.n	8005c2a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68da      	ldr	r2, [r3, #12]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f042 0208 	orr.w	r2, r2, #8
 8005c0e:	60da      	str	r2, [r3, #12]
      break;
 8005c10:	e00b      	b.n	8005c2a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68da      	ldr	r2, [r3, #12]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f042 0210 	orr.w	r2, r2, #16
 8005c20:	60da      	str	r2, [r3, #12]
      break;
 8005c22:	e002      	b.n	8005c2a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	73fb      	strb	r3, [r7, #15]
      break;
 8005c28:	bf00      	nop
  }

  if (status == HAL_OK)
 8005c2a:	7bfb      	ldrb	r3, [r7, #15]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d15f      	bne.n	8005cf0 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2201      	movs	r2, #1
 8005c36:	6839      	ldr	r1, [r7, #0]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f001 f989 	bl	8006f50 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a2e      	ldr	r2, [pc, #184]	; (8005cfc <HAL_TIM_PWM_Start_IT+0x210>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d004      	beq.n	8005c52 <HAL_TIM_PWM_Start_IT+0x166>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a2c      	ldr	r2, [pc, #176]	; (8005d00 <HAL_TIM_PWM_Start_IT+0x214>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d101      	bne.n	8005c56 <HAL_TIM_PWM_Start_IT+0x16a>
 8005c52:	2301      	movs	r3, #1
 8005c54:	e000      	b.n	8005c58 <HAL_TIM_PWM_Start_IT+0x16c>
 8005c56:	2300      	movs	r3, #0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d007      	beq.n	8005c6c <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c6a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a22      	ldr	r2, [pc, #136]	; (8005cfc <HAL_TIM_PWM_Start_IT+0x210>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d022      	beq.n	8005cbc <HAL_TIM_PWM_Start_IT+0x1d0>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c7e:	d01d      	beq.n	8005cbc <HAL_TIM_PWM_Start_IT+0x1d0>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a1f      	ldr	r2, [pc, #124]	; (8005d04 <HAL_TIM_PWM_Start_IT+0x218>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d018      	beq.n	8005cbc <HAL_TIM_PWM_Start_IT+0x1d0>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a1e      	ldr	r2, [pc, #120]	; (8005d08 <HAL_TIM_PWM_Start_IT+0x21c>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d013      	beq.n	8005cbc <HAL_TIM_PWM_Start_IT+0x1d0>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a1c      	ldr	r2, [pc, #112]	; (8005d0c <HAL_TIM_PWM_Start_IT+0x220>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d00e      	beq.n	8005cbc <HAL_TIM_PWM_Start_IT+0x1d0>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a17      	ldr	r2, [pc, #92]	; (8005d00 <HAL_TIM_PWM_Start_IT+0x214>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d009      	beq.n	8005cbc <HAL_TIM_PWM_Start_IT+0x1d0>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a18      	ldr	r2, [pc, #96]	; (8005d10 <HAL_TIM_PWM_Start_IT+0x224>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d004      	beq.n	8005cbc <HAL_TIM_PWM_Start_IT+0x1d0>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a17      	ldr	r2, [pc, #92]	; (8005d14 <HAL_TIM_PWM_Start_IT+0x228>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d111      	bne.n	8005ce0 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f003 0307 	and.w	r3, r3, #7
 8005cc6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	2b06      	cmp	r3, #6
 8005ccc:	d010      	beq.n	8005cf0 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f042 0201 	orr.w	r2, r2, #1
 8005cdc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cde:	e007      	b.n	8005cf0 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f042 0201 	orr.w	r2, r2, #1
 8005cee:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	40010000 	.word	0x40010000
 8005d00:	40010400 	.word	0x40010400
 8005d04:	40000400 	.word	0x40000400
 8005d08:	40000800 	.word	0x40000800
 8005d0c:	40000c00 	.word	0x40000c00
 8005d10:	40014000 	.word	0x40014000
 8005d14:	40001800 	.word	0x40001800

08005d18 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d101      	bne.n	8005d2a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e041      	b.n	8005dae <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d106      	bne.n	8005d44 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f7fc fc8e 	bl	8002660 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2202      	movs	r2, #2
 8005d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	3304      	adds	r3, #4
 8005d54:	4619      	mov	r1, r3
 8005d56:	4610      	mov	r0, r2
 8005d58:	f000 fce6 	bl	8006728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3708      	adds	r7, #8
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
	...

08005db8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d104      	bne.n	8005dd6 <HAL_TIM_IC_Start_IT+0x1e>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	e013      	b.n	8005dfe <HAL_TIM_IC_Start_IT+0x46>
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	2b04      	cmp	r3, #4
 8005dda:	d104      	bne.n	8005de6 <HAL_TIM_IC_Start_IT+0x2e>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	e00b      	b.n	8005dfe <HAL_TIM_IC_Start_IT+0x46>
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	2b08      	cmp	r3, #8
 8005dea:	d104      	bne.n	8005df6 <HAL_TIM_IC_Start_IT+0x3e>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	e003      	b.n	8005dfe <HAL_TIM_IC_Start_IT+0x46>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d104      	bne.n	8005e10 <HAL_TIM_IC_Start_IT+0x58>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	e013      	b.n	8005e38 <HAL_TIM_IC_Start_IT+0x80>
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	2b04      	cmp	r3, #4
 8005e14:	d104      	bne.n	8005e20 <HAL_TIM_IC_Start_IT+0x68>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	e00b      	b.n	8005e38 <HAL_TIM_IC_Start_IT+0x80>
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	2b08      	cmp	r3, #8
 8005e24:	d104      	bne.n	8005e30 <HAL_TIM_IC_Start_IT+0x78>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	e003      	b.n	8005e38 <HAL_TIM_IC_Start_IT+0x80>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e3a:	7bbb      	ldrb	r3, [r7, #14]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d102      	bne.n	8005e46 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e40:	7b7b      	ldrb	r3, [r7, #13]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d001      	beq.n	8005e4a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e0cc      	b.n	8005fe4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d104      	bne.n	8005e5a <HAL_TIM_IC_Start_IT+0xa2>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2202      	movs	r2, #2
 8005e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e58:	e013      	b.n	8005e82 <HAL_TIM_IC_Start_IT+0xca>
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	2b04      	cmp	r3, #4
 8005e5e:	d104      	bne.n	8005e6a <HAL_TIM_IC_Start_IT+0xb2>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2202      	movs	r2, #2
 8005e64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e68:	e00b      	b.n	8005e82 <HAL_TIM_IC_Start_IT+0xca>
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	2b08      	cmp	r3, #8
 8005e6e:	d104      	bne.n	8005e7a <HAL_TIM_IC_Start_IT+0xc2>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2202      	movs	r2, #2
 8005e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e78:	e003      	b.n	8005e82 <HAL_TIM_IC_Start_IT+0xca>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d104      	bne.n	8005e92 <HAL_TIM_IC_Start_IT+0xda>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2202      	movs	r2, #2
 8005e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e90:	e013      	b.n	8005eba <HAL_TIM_IC_Start_IT+0x102>
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	2b04      	cmp	r3, #4
 8005e96:	d104      	bne.n	8005ea2 <HAL_TIM_IC_Start_IT+0xea>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ea0:	e00b      	b.n	8005eba <HAL_TIM_IC_Start_IT+0x102>
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	2b08      	cmp	r3, #8
 8005ea6:	d104      	bne.n	8005eb2 <HAL_TIM_IC_Start_IT+0xfa>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005eb0:	e003      	b.n	8005eba <HAL_TIM_IC_Start_IT+0x102>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2202      	movs	r2, #2
 8005eb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b0c      	cmp	r3, #12
 8005ebe:	d841      	bhi.n	8005f44 <HAL_TIM_IC_Start_IT+0x18c>
 8005ec0:	a201      	add	r2, pc, #4	; (adr r2, 8005ec8 <HAL_TIM_IC_Start_IT+0x110>)
 8005ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec6:	bf00      	nop
 8005ec8:	08005efd 	.word	0x08005efd
 8005ecc:	08005f45 	.word	0x08005f45
 8005ed0:	08005f45 	.word	0x08005f45
 8005ed4:	08005f45 	.word	0x08005f45
 8005ed8:	08005f0f 	.word	0x08005f0f
 8005edc:	08005f45 	.word	0x08005f45
 8005ee0:	08005f45 	.word	0x08005f45
 8005ee4:	08005f45 	.word	0x08005f45
 8005ee8:	08005f21 	.word	0x08005f21
 8005eec:	08005f45 	.word	0x08005f45
 8005ef0:	08005f45 	.word	0x08005f45
 8005ef4:	08005f45 	.word	0x08005f45
 8005ef8:	08005f33 	.word	0x08005f33
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68da      	ldr	r2, [r3, #12]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f042 0202 	orr.w	r2, r2, #2
 8005f0a:	60da      	str	r2, [r3, #12]
      break;
 8005f0c:	e01d      	b.n	8005f4a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68da      	ldr	r2, [r3, #12]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f042 0204 	orr.w	r2, r2, #4
 8005f1c:	60da      	str	r2, [r3, #12]
      break;
 8005f1e:	e014      	b.n	8005f4a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68da      	ldr	r2, [r3, #12]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f042 0208 	orr.w	r2, r2, #8
 8005f2e:	60da      	str	r2, [r3, #12]
      break;
 8005f30:	e00b      	b.n	8005f4a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68da      	ldr	r2, [r3, #12]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f042 0210 	orr.w	r2, r2, #16
 8005f40:	60da      	str	r2, [r3, #12]
      break;
 8005f42:	e002      	b.n	8005f4a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	73fb      	strb	r3, [r7, #15]
      break;
 8005f48:	bf00      	nop
  }

  if (status == HAL_OK)
 8005f4a:	7bfb      	ldrb	r3, [r7, #15]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d148      	bne.n	8005fe2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2201      	movs	r2, #1
 8005f56:	6839      	ldr	r1, [r7, #0]
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f000 fff9 	bl	8006f50 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a22      	ldr	r2, [pc, #136]	; (8005fec <HAL_TIM_IC_Start_IT+0x234>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d022      	beq.n	8005fae <HAL_TIM_IC_Start_IT+0x1f6>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f70:	d01d      	beq.n	8005fae <HAL_TIM_IC_Start_IT+0x1f6>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a1e      	ldr	r2, [pc, #120]	; (8005ff0 <HAL_TIM_IC_Start_IT+0x238>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d018      	beq.n	8005fae <HAL_TIM_IC_Start_IT+0x1f6>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a1c      	ldr	r2, [pc, #112]	; (8005ff4 <HAL_TIM_IC_Start_IT+0x23c>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d013      	beq.n	8005fae <HAL_TIM_IC_Start_IT+0x1f6>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a1b      	ldr	r2, [pc, #108]	; (8005ff8 <HAL_TIM_IC_Start_IT+0x240>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d00e      	beq.n	8005fae <HAL_TIM_IC_Start_IT+0x1f6>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a19      	ldr	r2, [pc, #100]	; (8005ffc <HAL_TIM_IC_Start_IT+0x244>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d009      	beq.n	8005fae <HAL_TIM_IC_Start_IT+0x1f6>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a18      	ldr	r2, [pc, #96]	; (8006000 <HAL_TIM_IC_Start_IT+0x248>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d004      	beq.n	8005fae <HAL_TIM_IC_Start_IT+0x1f6>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a16      	ldr	r2, [pc, #88]	; (8006004 <HAL_TIM_IC_Start_IT+0x24c>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d111      	bne.n	8005fd2 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	f003 0307 	and.w	r3, r3, #7
 8005fb8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	2b06      	cmp	r3, #6
 8005fbe:	d010      	beq.n	8005fe2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f042 0201 	orr.w	r2, r2, #1
 8005fce:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fd0:	e007      	b.n	8005fe2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f042 0201 	orr.w	r2, r2, #1
 8005fe0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	40010000 	.word	0x40010000
 8005ff0:	40000400 	.word	0x40000400
 8005ff4:	40000800 	.word	0x40000800
 8005ff8:	40000c00 	.word	0x40000c00
 8005ffc:	40010400 	.word	0x40010400
 8006000:	40014000 	.word	0x40014000
 8006004:	40001800 	.word	0x40001800

08006008 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	f003 0302 	and.w	r3, r3, #2
 800601a:	2b02      	cmp	r3, #2
 800601c:	d122      	bne.n	8006064 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	f003 0302 	and.w	r3, r3, #2
 8006028:	2b02      	cmp	r3, #2
 800602a:	d11b      	bne.n	8006064 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f06f 0202 	mvn.w	r2, #2
 8006034:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	f003 0303 	and.w	r3, r3, #3
 8006046:	2b00      	cmp	r3, #0
 8006048:	d003      	beq.n	8006052 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7fd f8c6 	bl	80031dc <HAL_TIM_IC_CaptureCallback>
 8006050:	e005      	b.n	800605e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fb4a 	bl	80066ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 fb51 	bl	8006700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	f003 0304 	and.w	r3, r3, #4
 800606e:	2b04      	cmp	r3, #4
 8006070:	d122      	bne.n	80060b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	f003 0304 	and.w	r3, r3, #4
 800607c:	2b04      	cmp	r3, #4
 800607e:	d11b      	bne.n	80060b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f06f 0204 	mvn.w	r2, #4
 8006088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2202      	movs	r2, #2
 800608e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800609a:	2b00      	cmp	r3, #0
 800609c:	d003      	beq.n	80060a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f7fd f89c 	bl	80031dc <HAL_TIM_IC_CaptureCallback>
 80060a4:	e005      	b.n	80060b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 fb20 	bl	80066ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 fb27 	bl	8006700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	f003 0308 	and.w	r3, r3, #8
 80060c2:	2b08      	cmp	r3, #8
 80060c4:	d122      	bne.n	800610c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	f003 0308 	and.w	r3, r3, #8
 80060d0:	2b08      	cmp	r3, #8
 80060d2:	d11b      	bne.n	800610c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f06f 0208 	mvn.w	r2, #8
 80060dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2204      	movs	r2, #4
 80060e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	f003 0303 	and.w	r3, r3, #3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d003      	beq.n	80060fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f7fd f872 	bl	80031dc <HAL_TIM_IC_CaptureCallback>
 80060f8:	e005      	b.n	8006106 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 faf6 	bl	80066ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 fafd 	bl	8006700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	f003 0310 	and.w	r3, r3, #16
 8006116:	2b10      	cmp	r3, #16
 8006118:	d122      	bne.n	8006160 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	f003 0310 	and.w	r3, r3, #16
 8006124:	2b10      	cmp	r3, #16
 8006126:	d11b      	bne.n	8006160 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f06f 0210 	mvn.w	r2, #16
 8006130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2208      	movs	r2, #8
 8006136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006142:	2b00      	cmp	r3, #0
 8006144:	d003      	beq.n	800614e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f7fd f848 	bl	80031dc <HAL_TIM_IC_CaptureCallback>
 800614c:	e005      	b.n	800615a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 facc 	bl	80066ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 fad3 	bl	8006700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	f003 0301 	and.w	r3, r3, #1
 800616a:	2b01      	cmp	r3, #1
 800616c:	d10e      	bne.n	800618c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b01      	cmp	r3, #1
 800617a:	d107      	bne.n	800618c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f06f 0201 	mvn.w	r2, #1
 8006184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7fb fc24 	bl	80019d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006196:	2b80      	cmp	r3, #128	; 0x80
 8006198:	d10e      	bne.n	80061b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061a4:	2b80      	cmp	r3, #128	; 0x80
 80061a6:	d107      	bne.n	80061b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80061b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 ff78 	bl	80070a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c2:	2b40      	cmp	r3, #64	; 0x40
 80061c4:	d10e      	bne.n	80061e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d0:	2b40      	cmp	r3, #64	; 0x40
 80061d2:	d107      	bne.n	80061e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 fa98 	bl	8006714 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	f003 0320 	and.w	r3, r3, #32
 80061ee:	2b20      	cmp	r3, #32
 80061f0:	d10e      	bne.n	8006210 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	f003 0320 	and.w	r3, r3, #32
 80061fc:	2b20      	cmp	r3, #32
 80061fe:	d107      	bne.n	8006210 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f06f 0220 	mvn.w	r2, #32
 8006208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 ff42 	bl	8007094 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006210:	bf00      	nop
 8006212:	3708      	adds	r7, #8
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006224:	2300      	movs	r3, #0
 8006226:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800622e:	2b01      	cmp	r3, #1
 8006230:	d101      	bne.n	8006236 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006232:	2302      	movs	r3, #2
 8006234:	e088      	b.n	8006348 <HAL_TIM_IC_ConfigChannel+0x130>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d11b      	bne.n	800627c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6818      	ldr	r0, [r3, #0]
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	6819      	ldr	r1, [r3, #0]
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	685a      	ldr	r2, [r3, #4]
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	f000 fcb8 	bl	8006bc8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	699a      	ldr	r2, [r3, #24]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f022 020c 	bic.w	r2, r2, #12
 8006266:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	6999      	ldr	r1, [r3, #24]
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	689a      	ldr	r2, [r3, #8]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	430a      	orrs	r2, r1
 8006278:	619a      	str	r2, [r3, #24]
 800627a:	e060      	b.n	800633e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2b04      	cmp	r3, #4
 8006280:	d11c      	bne.n	80062bc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6818      	ldr	r0, [r3, #0]
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	6819      	ldr	r1, [r3, #0]
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	685a      	ldr	r2, [r3, #4]
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	f000 fd3c 	bl	8006d0e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	699a      	ldr	r2, [r3, #24]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80062a4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	6999      	ldr	r1, [r3, #24]
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	021a      	lsls	r2, r3, #8
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	430a      	orrs	r2, r1
 80062b8:	619a      	str	r2, [r3, #24]
 80062ba:	e040      	b.n	800633e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2b08      	cmp	r3, #8
 80062c0:	d11b      	bne.n	80062fa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6818      	ldr	r0, [r3, #0]
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	6819      	ldr	r1, [r3, #0]
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	685a      	ldr	r2, [r3, #4]
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	f000 fd89 	bl	8006de8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	69da      	ldr	r2, [r3, #28]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f022 020c 	bic.w	r2, r2, #12
 80062e4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	69d9      	ldr	r1, [r3, #28]
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	689a      	ldr	r2, [r3, #8]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	430a      	orrs	r2, r1
 80062f6:	61da      	str	r2, [r3, #28]
 80062f8:	e021      	b.n	800633e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2b0c      	cmp	r3, #12
 80062fe:	d11c      	bne.n	800633a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6818      	ldr	r0, [r3, #0]
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	6819      	ldr	r1, [r3, #0]
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	f000 fda6 	bl	8006e60 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	69da      	ldr	r2, [r3, #28]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006322:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	69d9      	ldr	r1, [r3, #28]
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	021a      	lsls	r2, r3, #8
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	430a      	orrs	r2, r1
 8006336:	61da      	str	r2, [r3, #28]
 8006338:	e001      	b.n	800633e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006346:	7dfb      	ldrb	r3, [r7, #23]
}
 8006348:	4618      	mov	r0, r3
 800634a:	3718      	adds	r7, #24
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800635c:	2300      	movs	r3, #0
 800635e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006366:	2b01      	cmp	r3, #1
 8006368:	d101      	bne.n	800636e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800636a:	2302      	movs	r3, #2
 800636c:	e0ae      	b.n	80064cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2b0c      	cmp	r3, #12
 800637a:	f200 809f 	bhi.w	80064bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800637e:	a201      	add	r2, pc, #4	; (adr r2, 8006384 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006384:	080063b9 	.word	0x080063b9
 8006388:	080064bd 	.word	0x080064bd
 800638c:	080064bd 	.word	0x080064bd
 8006390:	080064bd 	.word	0x080064bd
 8006394:	080063f9 	.word	0x080063f9
 8006398:	080064bd 	.word	0x080064bd
 800639c:	080064bd 	.word	0x080064bd
 80063a0:	080064bd 	.word	0x080064bd
 80063a4:	0800643b 	.word	0x0800643b
 80063a8:	080064bd 	.word	0x080064bd
 80063ac:	080064bd 	.word	0x080064bd
 80063b0:	080064bd 	.word	0x080064bd
 80063b4:	0800647b 	.word	0x0800647b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68b9      	ldr	r1, [r7, #8]
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 fa52 	bl	8006868 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	699a      	ldr	r2, [r3, #24]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f042 0208 	orr.w	r2, r2, #8
 80063d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	699a      	ldr	r2, [r3, #24]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f022 0204 	bic.w	r2, r2, #4
 80063e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6999      	ldr	r1, [r3, #24]
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	691a      	ldr	r2, [r3, #16]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	430a      	orrs	r2, r1
 80063f4:	619a      	str	r2, [r3, #24]
      break;
 80063f6:	e064      	b.n	80064c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68b9      	ldr	r1, [r7, #8]
 80063fe:	4618      	mov	r0, r3
 8006400:	f000 faa2 	bl	8006948 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	699a      	ldr	r2, [r3, #24]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006412:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	699a      	ldr	r2, [r3, #24]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006422:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	6999      	ldr	r1, [r3, #24]
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	021a      	lsls	r2, r3, #8
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	430a      	orrs	r2, r1
 8006436:	619a      	str	r2, [r3, #24]
      break;
 8006438:	e043      	b.n	80064c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68b9      	ldr	r1, [r7, #8]
 8006440:	4618      	mov	r0, r3
 8006442:	f000 faf7 	bl	8006a34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	69da      	ldr	r2, [r3, #28]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f042 0208 	orr.w	r2, r2, #8
 8006454:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	69da      	ldr	r2, [r3, #28]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f022 0204 	bic.w	r2, r2, #4
 8006464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	69d9      	ldr	r1, [r3, #28]
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	691a      	ldr	r2, [r3, #16]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	430a      	orrs	r2, r1
 8006476:	61da      	str	r2, [r3, #28]
      break;
 8006478:	e023      	b.n	80064c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68b9      	ldr	r1, [r7, #8]
 8006480:	4618      	mov	r0, r3
 8006482:	f000 fb4b 	bl	8006b1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	69da      	ldr	r2, [r3, #28]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006494:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	69da      	ldr	r2, [r3, #28]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	69d9      	ldr	r1, [r3, #28]
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	021a      	lsls	r2, r3, #8
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	430a      	orrs	r2, r1
 80064b8:	61da      	str	r2, [r3, #28]
      break;
 80064ba:	e002      	b.n	80064c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	75fb      	strb	r3, [r7, #23]
      break;
 80064c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3718      	adds	r7, #24
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064de:	2300      	movs	r3, #0
 80064e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d101      	bne.n	80064f0 <HAL_TIM_ConfigClockSource+0x1c>
 80064ec:	2302      	movs	r3, #2
 80064ee:	e0b4      	b.n	800665a <HAL_TIM_ConfigClockSource+0x186>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2202      	movs	r2, #2
 80064fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800650e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006516:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68ba      	ldr	r2, [r7, #8]
 800651e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006528:	d03e      	beq.n	80065a8 <HAL_TIM_ConfigClockSource+0xd4>
 800652a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800652e:	f200 8087 	bhi.w	8006640 <HAL_TIM_ConfigClockSource+0x16c>
 8006532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006536:	f000 8086 	beq.w	8006646 <HAL_TIM_ConfigClockSource+0x172>
 800653a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800653e:	d87f      	bhi.n	8006640 <HAL_TIM_ConfigClockSource+0x16c>
 8006540:	2b70      	cmp	r3, #112	; 0x70
 8006542:	d01a      	beq.n	800657a <HAL_TIM_ConfigClockSource+0xa6>
 8006544:	2b70      	cmp	r3, #112	; 0x70
 8006546:	d87b      	bhi.n	8006640 <HAL_TIM_ConfigClockSource+0x16c>
 8006548:	2b60      	cmp	r3, #96	; 0x60
 800654a:	d050      	beq.n	80065ee <HAL_TIM_ConfigClockSource+0x11a>
 800654c:	2b60      	cmp	r3, #96	; 0x60
 800654e:	d877      	bhi.n	8006640 <HAL_TIM_ConfigClockSource+0x16c>
 8006550:	2b50      	cmp	r3, #80	; 0x50
 8006552:	d03c      	beq.n	80065ce <HAL_TIM_ConfigClockSource+0xfa>
 8006554:	2b50      	cmp	r3, #80	; 0x50
 8006556:	d873      	bhi.n	8006640 <HAL_TIM_ConfigClockSource+0x16c>
 8006558:	2b40      	cmp	r3, #64	; 0x40
 800655a:	d058      	beq.n	800660e <HAL_TIM_ConfigClockSource+0x13a>
 800655c:	2b40      	cmp	r3, #64	; 0x40
 800655e:	d86f      	bhi.n	8006640 <HAL_TIM_ConfigClockSource+0x16c>
 8006560:	2b30      	cmp	r3, #48	; 0x30
 8006562:	d064      	beq.n	800662e <HAL_TIM_ConfigClockSource+0x15a>
 8006564:	2b30      	cmp	r3, #48	; 0x30
 8006566:	d86b      	bhi.n	8006640 <HAL_TIM_ConfigClockSource+0x16c>
 8006568:	2b20      	cmp	r3, #32
 800656a:	d060      	beq.n	800662e <HAL_TIM_ConfigClockSource+0x15a>
 800656c:	2b20      	cmp	r3, #32
 800656e:	d867      	bhi.n	8006640 <HAL_TIM_ConfigClockSource+0x16c>
 8006570:	2b00      	cmp	r3, #0
 8006572:	d05c      	beq.n	800662e <HAL_TIM_ConfigClockSource+0x15a>
 8006574:	2b10      	cmp	r3, #16
 8006576:	d05a      	beq.n	800662e <HAL_TIM_ConfigClockSource+0x15a>
 8006578:	e062      	b.n	8006640 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6818      	ldr	r0, [r3, #0]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	6899      	ldr	r1, [r3, #8]
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	f000 fcc1 	bl	8006f10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800659c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	609a      	str	r2, [r3, #8]
      break;
 80065a6:	e04f      	b.n	8006648 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6818      	ldr	r0, [r3, #0]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	6899      	ldr	r1, [r3, #8]
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	685a      	ldr	r2, [r3, #4]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	f000 fcaa 	bl	8006f10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	689a      	ldr	r2, [r3, #8]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065ca:	609a      	str	r2, [r3, #8]
      break;
 80065cc:	e03c      	b.n	8006648 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6818      	ldr	r0, [r3, #0]
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	6859      	ldr	r1, [r3, #4]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	461a      	mov	r2, r3
 80065dc:	f000 fb68 	bl	8006cb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2150      	movs	r1, #80	; 0x50
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 fc77 	bl	8006eda <TIM_ITRx_SetConfig>
      break;
 80065ec:	e02c      	b.n	8006648 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6818      	ldr	r0, [r3, #0]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	6859      	ldr	r1, [r3, #4]
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	461a      	mov	r2, r3
 80065fc:	f000 fbc4 	bl	8006d88 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2160      	movs	r1, #96	; 0x60
 8006606:	4618      	mov	r0, r3
 8006608:	f000 fc67 	bl	8006eda <TIM_ITRx_SetConfig>
      break;
 800660c:	e01c      	b.n	8006648 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6818      	ldr	r0, [r3, #0]
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	6859      	ldr	r1, [r3, #4]
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	461a      	mov	r2, r3
 800661c:	f000 fb48 	bl	8006cb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2140      	movs	r1, #64	; 0x40
 8006626:	4618      	mov	r0, r3
 8006628:	f000 fc57 	bl	8006eda <TIM_ITRx_SetConfig>
      break;
 800662c:	e00c      	b.n	8006648 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4619      	mov	r1, r3
 8006638:	4610      	mov	r0, r2
 800663a:	f000 fc4e 	bl	8006eda <TIM_ITRx_SetConfig>
      break;
 800663e:	e003      	b.n	8006648 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	73fb      	strb	r3, [r7, #15]
      break;
 8006644:	e000      	b.n	8006648 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006646:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006658:	7bfb      	ldrb	r3, [r7, #15]
}
 800665a:	4618      	mov	r0, r3
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
	...

08006664 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800666e:	2300      	movs	r3, #0
 8006670:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	2b0c      	cmp	r3, #12
 8006676:	d831      	bhi.n	80066dc <HAL_TIM_ReadCapturedValue+0x78>
 8006678:	a201      	add	r2, pc, #4	; (adr r2, 8006680 <HAL_TIM_ReadCapturedValue+0x1c>)
 800667a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800667e:	bf00      	nop
 8006680:	080066b5 	.word	0x080066b5
 8006684:	080066dd 	.word	0x080066dd
 8006688:	080066dd 	.word	0x080066dd
 800668c:	080066dd 	.word	0x080066dd
 8006690:	080066bf 	.word	0x080066bf
 8006694:	080066dd 	.word	0x080066dd
 8006698:	080066dd 	.word	0x080066dd
 800669c:	080066dd 	.word	0x080066dd
 80066a0:	080066c9 	.word	0x080066c9
 80066a4:	080066dd 	.word	0x080066dd
 80066a8:	080066dd 	.word	0x080066dd
 80066ac:	080066dd 	.word	0x080066dd
 80066b0:	080066d3 	.word	0x080066d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ba:	60fb      	str	r3, [r7, #12]

      break;
 80066bc:	e00f      	b.n	80066de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c4:	60fb      	str	r3, [r7, #12]

      break;
 80066c6:	e00a      	b.n	80066de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ce:	60fb      	str	r3, [r7, #12]

      break;
 80066d0:	e005      	b.n	80066de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d8:	60fb      	str	r3, [r7, #12]

      break;
 80066da:	e000      	b.n	80066de <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80066dc:	bf00      	nop
  }

  return tmpreg;
 80066de:	68fb      	ldr	r3, [r7, #12]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3714      	adds	r7, #20
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006708:	bf00      	nop
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800671c:	bf00      	nop
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a40      	ldr	r2, [pc, #256]	; (800683c <TIM_Base_SetConfig+0x114>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d013      	beq.n	8006768 <TIM_Base_SetConfig+0x40>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006746:	d00f      	beq.n	8006768 <TIM_Base_SetConfig+0x40>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a3d      	ldr	r2, [pc, #244]	; (8006840 <TIM_Base_SetConfig+0x118>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d00b      	beq.n	8006768 <TIM_Base_SetConfig+0x40>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a3c      	ldr	r2, [pc, #240]	; (8006844 <TIM_Base_SetConfig+0x11c>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d007      	beq.n	8006768 <TIM_Base_SetConfig+0x40>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a3b      	ldr	r2, [pc, #236]	; (8006848 <TIM_Base_SetConfig+0x120>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d003      	beq.n	8006768 <TIM_Base_SetConfig+0x40>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a3a      	ldr	r2, [pc, #232]	; (800684c <TIM_Base_SetConfig+0x124>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d108      	bne.n	800677a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800676e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	4313      	orrs	r3, r2
 8006778:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a2f      	ldr	r2, [pc, #188]	; (800683c <TIM_Base_SetConfig+0x114>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d02b      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006788:	d027      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a2c      	ldr	r2, [pc, #176]	; (8006840 <TIM_Base_SetConfig+0x118>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d023      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a2b      	ldr	r2, [pc, #172]	; (8006844 <TIM_Base_SetConfig+0x11c>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d01f      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a2a      	ldr	r2, [pc, #168]	; (8006848 <TIM_Base_SetConfig+0x120>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d01b      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a29      	ldr	r2, [pc, #164]	; (800684c <TIM_Base_SetConfig+0x124>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d017      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a28      	ldr	r2, [pc, #160]	; (8006850 <TIM_Base_SetConfig+0x128>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d013      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a27      	ldr	r2, [pc, #156]	; (8006854 <TIM_Base_SetConfig+0x12c>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d00f      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a26      	ldr	r2, [pc, #152]	; (8006858 <TIM_Base_SetConfig+0x130>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d00b      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a25      	ldr	r2, [pc, #148]	; (800685c <TIM_Base_SetConfig+0x134>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d007      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a24      	ldr	r2, [pc, #144]	; (8006860 <TIM_Base_SetConfig+0x138>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d003      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a23      	ldr	r2, [pc, #140]	; (8006864 <TIM_Base_SetConfig+0x13c>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d108      	bne.n	80067ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	689a      	ldr	r2, [r3, #8]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a0a      	ldr	r2, [pc, #40]	; (800683c <TIM_Base_SetConfig+0x114>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d003      	beq.n	8006820 <TIM_Base_SetConfig+0xf8>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a0c      	ldr	r2, [pc, #48]	; (800684c <TIM_Base_SetConfig+0x124>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d103      	bne.n	8006828 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	691a      	ldr	r2, [r3, #16]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	615a      	str	r2, [r3, #20]
}
 800682e:	bf00      	nop
 8006830:	3714      	adds	r7, #20
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	40010000 	.word	0x40010000
 8006840:	40000400 	.word	0x40000400
 8006844:	40000800 	.word	0x40000800
 8006848:	40000c00 	.word	0x40000c00
 800684c:	40010400 	.word	0x40010400
 8006850:	40014000 	.word	0x40014000
 8006854:	40014400 	.word	0x40014400
 8006858:	40014800 	.word	0x40014800
 800685c:	40001800 	.word	0x40001800
 8006860:	40001c00 	.word	0x40001c00
 8006864:	40002000 	.word	0x40002000

08006868 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006868:	b480      	push	{r7}
 800686a:	b087      	sub	sp, #28
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	f023 0201 	bic.w	r2, r3, #1
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f023 0303 	bic.w	r3, r3, #3
 800689e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	f023 0302 	bic.w	r3, r3, #2
 80068b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a20      	ldr	r2, [pc, #128]	; (8006940 <TIM_OC1_SetConfig+0xd8>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d003      	beq.n	80068cc <TIM_OC1_SetConfig+0x64>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a1f      	ldr	r2, [pc, #124]	; (8006944 <TIM_OC1_SetConfig+0xdc>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d10c      	bne.n	80068e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	f023 0308 	bic.w	r3, r3, #8
 80068d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	697a      	ldr	r2, [r7, #20]
 80068da:	4313      	orrs	r3, r2
 80068dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	f023 0304 	bic.w	r3, r3, #4
 80068e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a15      	ldr	r2, [pc, #84]	; (8006940 <TIM_OC1_SetConfig+0xd8>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d003      	beq.n	80068f6 <TIM_OC1_SetConfig+0x8e>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a14      	ldr	r2, [pc, #80]	; (8006944 <TIM_OC1_SetConfig+0xdc>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d111      	bne.n	800691a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006904:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	4313      	orrs	r3, r2
 800690e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	693a      	ldr	r2, [r7, #16]
 8006916:	4313      	orrs	r3, r2
 8006918:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	693a      	ldr	r2, [r7, #16]
 800691e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	685a      	ldr	r2, [r3, #4]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	621a      	str	r2, [r3, #32]
}
 8006934:	bf00      	nop
 8006936:	371c      	adds	r7, #28
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr
 8006940:	40010000 	.word	0x40010000
 8006944:	40010400 	.word	0x40010400

08006948 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006948:	b480      	push	{r7}
 800694a:	b087      	sub	sp, #28
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	f023 0210 	bic.w	r2, r3, #16
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800697e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	021b      	lsls	r3, r3, #8
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	4313      	orrs	r3, r2
 800698a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f023 0320 	bic.w	r3, r3, #32
 8006992:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	011b      	lsls	r3, r3, #4
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	4313      	orrs	r3, r2
 800699e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a22      	ldr	r2, [pc, #136]	; (8006a2c <TIM_OC2_SetConfig+0xe4>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d003      	beq.n	80069b0 <TIM_OC2_SetConfig+0x68>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a21      	ldr	r2, [pc, #132]	; (8006a30 <TIM_OC2_SetConfig+0xe8>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d10d      	bne.n	80069cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	011b      	lsls	r3, r3, #4
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a17      	ldr	r2, [pc, #92]	; (8006a2c <TIM_OC2_SetConfig+0xe4>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d003      	beq.n	80069dc <TIM_OC2_SetConfig+0x94>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a16      	ldr	r2, [pc, #88]	; (8006a30 <TIM_OC2_SetConfig+0xe8>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d113      	bne.n	8006a04 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	695b      	ldr	r3, [r3, #20]
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	693a      	ldr	r2, [r7, #16]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	699b      	ldr	r3, [r3, #24]
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	693a      	ldr	r2, [r7, #16]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	685a      	ldr	r2, [r3, #4]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	697a      	ldr	r2, [r7, #20]
 8006a1c:	621a      	str	r2, [r3, #32]
}
 8006a1e:	bf00      	nop
 8006a20:	371c      	adds	r7, #28
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	40010000 	.word	0x40010000
 8006a30:	40010400 	.word	0x40010400

08006a34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b087      	sub	sp, #28
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a1b      	ldr	r3, [r3, #32]
 8006a4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	69db      	ldr	r3, [r3, #28]
 8006a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f023 0303 	bic.w	r3, r3, #3
 8006a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	021b      	lsls	r3, r3, #8
 8006a84:	697a      	ldr	r2, [r7, #20]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a21      	ldr	r2, [pc, #132]	; (8006b14 <TIM_OC3_SetConfig+0xe0>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d003      	beq.n	8006a9a <TIM_OC3_SetConfig+0x66>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a20      	ldr	r2, [pc, #128]	; (8006b18 <TIM_OC3_SetConfig+0xe4>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d10d      	bne.n	8006ab6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006aa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	021b      	lsls	r3, r3, #8
 8006aa8:	697a      	ldr	r2, [r7, #20]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ab4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a16      	ldr	r2, [pc, #88]	; (8006b14 <TIM_OC3_SetConfig+0xe0>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d003      	beq.n	8006ac6 <TIM_OC3_SetConfig+0x92>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a15      	ldr	r2, [pc, #84]	; (8006b18 <TIM_OC3_SetConfig+0xe4>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d113      	bne.n	8006aee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006acc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	011b      	lsls	r3, r3, #4
 8006adc:	693a      	ldr	r2, [r7, #16]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	011b      	lsls	r3, r3, #4
 8006ae8:	693a      	ldr	r2, [r7, #16]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	693a      	ldr	r2, [r7, #16]
 8006af2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	685a      	ldr	r2, [r3, #4]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	697a      	ldr	r2, [r7, #20]
 8006b06:	621a      	str	r2, [r3, #32]
}
 8006b08:	bf00      	nop
 8006b0a:	371c      	adds	r7, #28
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr
 8006b14:	40010000 	.word	0x40010000
 8006b18:	40010400 	.word	0x40010400

08006b1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b087      	sub	sp, #28
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a1b      	ldr	r3, [r3, #32]
 8006b36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	69db      	ldr	r3, [r3, #28]
 8006b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	021b      	lsls	r3, r3, #8
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	031b      	lsls	r3, r3, #12
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a12      	ldr	r2, [pc, #72]	; (8006bc0 <TIM_OC4_SetConfig+0xa4>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d003      	beq.n	8006b84 <TIM_OC4_SetConfig+0x68>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a11      	ldr	r2, [pc, #68]	; (8006bc4 <TIM_OC4_SetConfig+0xa8>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d109      	bne.n	8006b98 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	695b      	ldr	r3, [r3, #20]
 8006b90:	019b      	lsls	r3, r3, #6
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	693a      	ldr	r2, [r7, #16]
 8006bb0:	621a      	str	r2, [r3, #32]
}
 8006bb2:	bf00      	nop
 8006bb4:	371c      	adds	r7, #28
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	40010000 	.word	0x40010000
 8006bc4:	40010400 	.word	0x40010400

08006bc8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b087      	sub	sp, #28
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
 8006bd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6a1b      	ldr	r3, [r3, #32]
 8006bda:	f023 0201 	bic.w	r2, r3, #1
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6a1b      	ldr	r3, [r3, #32]
 8006bec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	4a28      	ldr	r2, [pc, #160]	; (8006c94 <TIM_TI1_SetConfig+0xcc>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d01b      	beq.n	8006c2e <TIM_TI1_SetConfig+0x66>
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bfc:	d017      	beq.n	8006c2e <TIM_TI1_SetConfig+0x66>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	4a25      	ldr	r2, [pc, #148]	; (8006c98 <TIM_TI1_SetConfig+0xd0>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d013      	beq.n	8006c2e <TIM_TI1_SetConfig+0x66>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	4a24      	ldr	r2, [pc, #144]	; (8006c9c <TIM_TI1_SetConfig+0xd4>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d00f      	beq.n	8006c2e <TIM_TI1_SetConfig+0x66>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	4a23      	ldr	r2, [pc, #140]	; (8006ca0 <TIM_TI1_SetConfig+0xd8>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d00b      	beq.n	8006c2e <TIM_TI1_SetConfig+0x66>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	4a22      	ldr	r2, [pc, #136]	; (8006ca4 <TIM_TI1_SetConfig+0xdc>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d007      	beq.n	8006c2e <TIM_TI1_SetConfig+0x66>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	4a21      	ldr	r2, [pc, #132]	; (8006ca8 <TIM_TI1_SetConfig+0xe0>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d003      	beq.n	8006c2e <TIM_TI1_SetConfig+0x66>
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	4a20      	ldr	r2, [pc, #128]	; (8006cac <TIM_TI1_SetConfig+0xe4>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d101      	bne.n	8006c32 <TIM_TI1_SetConfig+0x6a>
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e000      	b.n	8006c34 <TIM_TI1_SetConfig+0x6c>
 8006c32:	2300      	movs	r3, #0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d008      	beq.n	8006c4a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	f023 0303 	bic.w	r3, r3, #3
 8006c3e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006c40:	697a      	ldr	r2, [r7, #20]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	617b      	str	r3, [r7, #20]
 8006c48:	e003      	b.n	8006c52 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	f043 0301 	orr.w	r3, r3, #1
 8006c50:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	011b      	lsls	r3, r3, #4
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	697a      	ldr	r2, [r7, #20]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	f023 030a 	bic.w	r3, r3, #10
 8006c6c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	f003 030a 	and.w	r3, r3, #10
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	697a      	ldr	r2, [r7, #20]
 8006c7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	693a      	ldr	r2, [r7, #16]
 8006c84:	621a      	str	r2, [r3, #32]
}
 8006c86:	bf00      	nop
 8006c88:	371c      	adds	r7, #28
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	40010000 	.word	0x40010000
 8006c98:	40000400 	.word	0x40000400
 8006c9c:	40000800 	.word	0x40000800
 8006ca0:	40000c00 	.word	0x40000c00
 8006ca4:	40010400 	.word	0x40010400
 8006ca8:	40014000 	.word	0x40014000
 8006cac:	40001800 	.word	0x40001800

08006cb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b087      	sub	sp, #28
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6a1b      	ldr	r3, [r3, #32]
 8006cc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
 8006cc6:	f023 0201 	bic.w	r2, r3, #1
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	699b      	ldr	r3, [r3, #24]
 8006cd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	011b      	lsls	r3, r3, #4
 8006ce0:	693a      	ldr	r2, [r7, #16]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	f023 030a 	bic.w	r3, r3, #10
 8006cec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	693a      	ldr	r2, [r7, #16]
 8006cfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	697a      	ldr	r2, [r7, #20]
 8006d00:	621a      	str	r2, [r3, #32]
}
 8006d02:	bf00      	nop
 8006d04:	371c      	adds	r7, #28
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr

08006d0e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d0e:	b480      	push	{r7}
 8006d10:	b087      	sub	sp, #28
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	60f8      	str	r0, [r7, #12]
 8006d16:	60b9      	str	r1, [r7, #8]
 8006d18:	607a      	str	r2, [r7, #4]
 8006d1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6a1b      	ldr	r3, [r3, #32]
 8006d20:	f023 0210 	bic.w	r2, r3, #16
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d3a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	021b      	lsls	r3, r3, #8
 8006d40:	697a      	ldr	r2, [r7, #20]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	031b      	lsls	r3, r3, #12
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	697a      	ldr	r2, [r7, #20]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d60:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	011b      	lsls	r3, r3, #4
 8006d66:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006d6a:	693a      	ldr	r2, [r7, #16]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	697a      	ldr	r2, [r7, #20]
 8006d74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	693a      	ldr	r2, [r7, #16]
 8006d7a:	621a      	str	r2, [r3, #32]
}
 8006d7c:	bf00      	nop
 8006d7e:	371c      	adds	r7, #28
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b087      	sub	sp, #28
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6a1b      	ldr	r3, [r3, #32]
 8006d98:	f023 0210 	bic.w	r2, r3, #16
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6a1b      	ldr	r3, [r3, #32]
 8006daa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006db2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	031b      	lsls	r3, r3, #12
 8006db8:	697a      	ldr	r2, [r7, #20]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006dc4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	011b      	lsls	r3, r3, #4
 8006dca:	693a      	ldr	r2, [r7, #16]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	697a      	ldr	r2, [r7, #20]
 8006dd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	693a      	ldr	r2, [r7, #16]
 8006dda:	621a      	str	r2, [r3, #32]
}
 8006ddc:	bf00      	nop
 8006dde:	371c      	adds	r7, #28
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b087      	sub	sp, #28
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	607a      	str	r2, [r7, #4]
 8006df4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	69db      	ldr	r3, [r3, #28]
 8006e06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6a1b      	ldr	r3, [r3, #32]
 8006e0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f023 0303 	bic.w	r3, r3, #3
 8006e14:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e24:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	011b      	lsls	r3, r3, #4
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	697a      	ldr	r2, [r7, #20]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006e38:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	021b      	lsls	r3, r3, #8
 8006e3e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006e42:	693a      	ldr	r2, [r7, #16]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	693a      	ldr	r2, [r7, #16]
 8006e52:	621a      	str	r2, [r3, #32]
}
 8006e54:	bf00      	nop
 8006e56:	371c      	adds	r7, #28
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b087      	sub	sp, #28
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	607a      	str	r2, [r7, #4]
 8006e6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6a1b      	ldr	r3, [r3, #32]
 8006e72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	69db      	ldr	r3, [r3, #28]
 8006e7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6a1b      	ldr	r3, [r3, #32]
 8006e84:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e8c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	021b      	lsls	r3, r3, #8
 8006e92:	697a      	ldr	r2, [r7, #20]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e9e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	031b      	lsls	r3, r3, #12
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	697a      	ldr	r2, [r7, #20]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006eb2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	031b      	lsls	r3, r3, #12
 8006eb8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	697a      	ldr	r2, [r7, #20]
 8006ec6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	693a      	ldr	r2, [r7, #16]
 8006ecc:	621a      	str	r2, [r3, #32]
}
 8006ece:	bf00      	nop
 8006ed0:	371c      	adds	r7, #28
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr

08006eda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006eda:	b480      	push	{r7}
 8006edc:	b085      	sub	sp, #20
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
 8006ee2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ef0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ef2:	683a      	ldr	r2, [r7, #0]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	f043 0307 	orr.w	r3, r3, #7
 8006efc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	609a      	str	r2, [r3, #8]
}
 8006f04:	bf00      	nop
 8006f06:	3714      	adds	r7, #20
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b087      	sub	sp, #28
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]
 8006f1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	021a      	lsls	r2, r3, #8
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	431a      	orrs	r2, r3
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	697a      	ldr	r2, [r7, #20]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	697a      	ldr	r2, [r7, #20]
 8006f42:	609a      	str	r2, [r3, #8]
}
 8006f44:	bf00      	nop
 8006f46:	371c      	adds	r7, #28
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b087      	sub	sp, #28
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	f003 031f 	and.w	r3, r3, #31
 8006f62:	2201      	movs	r2, #1
 8006f64:	fa02 f303 	lsl.w	r3, r2, r3
 8006f68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6a1a      	ldr	r2, [r3, #32]
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	43db      	mvns	r3, r3
 8006f72:	401a      	ands	r2, r3
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6a1a      	ldr	r2, [r3, #32]
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	f003 031f 	and.w	r3, r3, #31
 8006f82:	6879      	ldr	r1, [r7, #4]
 8006f84:	fa01 f303 	lsl.w	r3, r1, r3
 8006f88:	431a      	orrs	r2, r3
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	621a      	str	r2, [r3, #32]
}
 8006f8e:	bf00      	nop
 8006f90:	371c      	adds	r7, #28
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
	...

08006f9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d101      	bne.n	8006fb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fb0:	2302      	movs	r3, #2
 8006fb2:	e05a      	b.n	800706a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a21      	ldr	r2, [pc, #132]	; (8007078 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d022      	beq.n	800703e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007000:	d01d      	beq.n	800703e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a1d      	ldr	r2, [pc, #116]	; (800707c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d018      	beq.n	800703e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a1b      	ldr	r2, [pc, #108]	; (8007080 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d013      	beq.n	800703e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a1a      	ldr	r2, [pc, #104]	; (8007084 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d00e      	beq.n	800703e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a18      	ldr	r2, [pc, #96]	; (8007088 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d009      	beq.n	800703e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a17      	ldr	r2, [pc, #92]	; (800708c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d004      	beq.n	800703e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a15      	ldr	r2, [pc, #84]	; (8007090 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d10c      	bne.n	8007058 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007044:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	4313      	orrs	r3, r2
 800704e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68ba      	ldr	r2, [r7, #8]
 8007056:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3714      	adds	r7, #20
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	40010000 	.word	0x40010000
 800707c:	40000400 	.word	0x40000400
 8007080:	40000800 	.word	0x40000800
 8007084:	40000c00 	.word	0x40000c00
 8007088:	40010400 	.word	0x40010400
 800708c:	40014000 	.word	0x40014000
 8007090:	40001800 	.word	0x40001800

08007094 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800709c:	bf00      	nop
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d101      	bne.n	80070ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e03f      	b.n	800714e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d106      	bne.n	80070e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f7fb fbd0 	bl	8002888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2224      	movs	r2, #36	; 0x24
 80070ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	68da      	ldr	r2, [r3, #12]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 fddf 	bl	8007cc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	691a      	ldr	r2, [r3, #16]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007114:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	695a      	ldr	r2, [r3, #20]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007124:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	68da      	ldr	r2, [r3, #12]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007134:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2220      	movs	r2, #32
 8007140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2220      	movs	r2, #32
 8007148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3708      	adds	r7, #8
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b08a      	sub	sp, #40	; 0x28
 800715a:	af02      	add	r7, sp, #8
 800715c:	60f8      	str	r0, [r7, #12]
 800715e:	60b9      	str	r1, [r7, #8]
 8007160:	603b      	str	r3, [r7, #0]
 8007162:	4613      	mov	r3, r2
 8007164:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007166:	2300      	movs	r3, #0
 8007168:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007170:	b2db      	uxtb	r3, r3
 8007172:	2b20      	cmp	r3, #32
 8007174:	d17c      	bne.n	8007270 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d002      	beq.n	8007182 <HAL_UART_Transmit+0x2c>
 800717c:	88fb      	ldrh	r3, [r7, #6]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d101      	bne.n	8007186 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	e075      	b.n	8007272 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800718c:	2b01      	cmp	r3, #1
 800718e:	d101      	bne.n	8007194 <HAL_UART_Transmit+0x3e>
 8007190:	2302      	movs	r3, #2
 8007192:	e06e      	b.n	8007272 <HAL_UART_Transmit+0x11c>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2221      	movs	r2, #33	; 0x21
 80071a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071aa:	f7fc f957 	bl	800345c <HAL_GetTick>
 80071ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	88fa      	ldrh	r2, [r7, #6]
 80071b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	88fa      	ldrh	r2, [r7, #6]
 80071ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071c4:	d108      	bne.n	80071d8 <HAL_UART_Transmit+0x82>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d104      	bne.n	80071d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80071ce:	2300      	movs	r3, #0
 80071d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	61bb      	str	r3, [r7, #24]
 80071d6:	e003      	b.n	80071e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071dc:	2300      	movs	r3, #0
 80071de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80071e8:	e02a      	b.n	8007240 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	9300      	str	r3, [sp, #0]
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	2200      	movs	r2, #0
 80071f2:	2180      	movs	r1, #128	; 0x80
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f000 fb1f 	bl	8007838 <UART_WaitOnFlagUntilTimeout>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d001      	beq.n	8007204 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007200:	2303      	movs	r3, #3
 8007202:	e036      	b.n	8007272 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d10b      	bne.n	8007222 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	881b      	ldrh	r3, [r3, #0]
 800720e:	461a      	mov	r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007218:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	3302      	adds	r3, #2
 800721e:	61bb      	str	r3, [r7, #24]
 8007220:	e007      	b.n	8007232 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	781a      	ldrb	r2, [r3, #0]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	3301      	adds	r3, #1
 8007230:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007236:	b29b      	uxth	r3, r3
 8007238:	3b01      	subs	r3, #1
 800723a:	b29a      	uxth	r2, r3
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007244:	b29b      	uxth	r3, r3
 8007246:	2b00      	cmp	r3, #0
 8007248:	d1cf      	bne.n	80071ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	9300      	str	r3, [sp, #0]
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	2200      	movs	r2, #0
 8007252:	2140      	movs	r1, #64	; 0x40
 8007254:	68f8      	ldr	r0, [r7, #12]
 8007256:	f000 faef 	bl	8007838 <UART_WaitOnFlagUntilTimeout>
 800725a:	4603      	mov	r3, r0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d001      	beq.n	8007264 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007260:	2303      	movs	r3, #3
 8007262:	e006      	b.n	8007272 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2220      	movs	r2, #32
 8007268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800726c:	2300      	movs	r3, #0
 800726e:	e000      	b.n	8007272 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007270:	2302      	movs	r3, #2
  }
}
 8007272:	4618      	mov	r0, r3
 8007274:	3720      	adds	r7, #32
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b084      	sub	sp, #16
 800727e:	af00      	add	r7, sp, #0
 8007280:	60f8      	str	r0, [r7, #12]
 8007282:	60b9      	str	r1, [r7, #8]
 8007284:	4613      	mov	r3, r2
 8007286:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800728e:	b2db      	uxtb	r3, r3
 8007290:	2b20      	cmp	r3, #32
 8007292:	d11d      	bne.n	80072d0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d002      	beq.n	80072a0 <HAL_UART_Receive_IT+0x26>
 800729a:	88fb      	ldrh	r3, [r7, #6]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d101      	bne.n	80072a4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e016      	b.n	80072d2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d101      	bne.n	80072b2 <HAL_UART_Receive_IT+0x38>
 80072ae:	2302      	movs	r3, #2
 80072b0:	e00f      	b.n	80072d2 <HAL_UART_Receive_IT+0x58>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2201      	movs	r2, #1
 80072b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2200      	movs	r2, #0
 80072be:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80072c0:	88fb      	ldrh	r3, [r7, #6]
 80072c2:	461a      	mov	r2, r3
 80072c4:	68b9      	ldr	r1, [r7, #8]
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f000 fb24 	bl	8007914 <UART_Start_Receive_IT>
 80072cc:	4603      	mov	r3, r0
 80072ce:	e000      	b.n	80072d2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80072d0:	2302      	movs	r3, #2
  }
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
	...

080072dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b0ba      	sub	sp, #232	; 0xe8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	695b      	ldr	r3, [r3, #20]
 80072fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007302:	2300      	movs	r3, #0
 8007304:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007308:	2300      	movs	r3, #0
 800730a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800730e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007312:	f003 030f 	and.w	r3, r3, #15
 8007316:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800731a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10f      	bne.n	8007342 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007326:	f003 0320 	and.w	r3, r3, #32
 800732a:	2b00      	cmp	r3, #0
 800732c:	d009      	beq.n	8007342 <HAL_UART_IRQHandler+0x66>
 800732e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007332:	f003 0320 	and.w	r3, r3, #32
 8007336:	2b00      	cmp	r3, #0
 8007338:	d003      	beq.n	8007342 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 fc07 	bl	8007b4e <UART_Receive_IT>
      return;
 8007340:	e256      	b.n	80077f0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007342:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007346:	2b00      	cmp	r3, #0
 8007348:	f000 80de 	beq.w	8007508 <HAL_UART_IRQHandler+0x22c>
 800734c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007350:	f003 0301 	and.w	r3, r3, #1
 8007354:	2b00      	cmp	r3, #0
 8007356:	d106      	bne.n	8007366 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800735c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007360:	2b00      	cmp	r3, #0
 8007362:	f000 80d1 	beq.w	8007508 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800736a:	f003 0301 	and.w	r3, r3, #1
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00b      	beq.n	800738a <HAL_UART_IRQHandler+0xae>
 8007372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800737a:	2b00      	cmp	r3, #0
 800737c:	d005      	beq.n	800738a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007382:	f043 0201 	orr.w	r2, r3, #1
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800738a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800738e:	f003 0304 	and.w	r3, r3, #4
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00b      	beq.n	80073ae <HAL_UART_IRQHandler+0xd2>
 8007396:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800739a:	f003 0301 	and.w	r3, r3, #1
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d005      	beq.n	80073ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a6:	f043 0202 	orr.w	r2, r3, #2
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80073ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073b2:	f003 0302 	and.w	r3, r3, #2
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00b      	beq.n	80073d2 <HAL_UART_IRQHandler+0xf6>
 80073ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073be:	f003 0301 	and.w	r3, r3, #1
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d005      	beq.n	80073d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ca:	f043 0204 	orr.w	r2, r3, #4
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80073d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073d6:	f003 0308 	and.w	r3, r3, #8
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d011      	beq.n	8007402 <HAL_UART_IRQHandler+0x126>
 80073de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073e2:	f003 0320 	and.w	r3, r3, #32
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d105      	bne.n	80073f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80073ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073ee:	f003 0301 	and.w	r3, r3, #1
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d005      	beq.n	8007402 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fa:	f043 0208 	orr.w	r2, r3, #8
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007406:	2b00      	cmp	r3, #0
 8007408:	f000 81ed 	beq.w	80077e6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800740c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007410:	f003 0320 	and.w	r3, r3, #32
 8007414:	2b00      	cmp	r3, #0
 8007416:	d008      	beq.n	800742a <HAL_UART_IRQHandler+0x14e>
 8007418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800741c:	f003 0320 	and.w	r3, r3, #32
 8007420:	2b00      	cmp	r3, #0
 8007422:	d002      	beq.n	800742a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 fb92 	bl	8007b4e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	695b      	ldr	r3, [r3, #20]
 8007430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007434:	2b40      	cmp	r3, #64	; 0x40
 8007436:	bf0c      	ite	eq
 8007438:	2301      	moveq	r3, #1
 800743a:	2300      	movne	r3, #0
 800743c:	b2db      	uxtb	r3, r3
 800743e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007446:	f003 0308 	and.w	r3, r3, #8
 800744a:	2b00      	cmp	r3, #0
 800744c:	d103      	bne.n	8007456 <HAL_UART_IRQHandler+0x17a>
 800744e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007452:	2b00      	cmp	r3, #0
 8007454:	d04f      	beq.n	80074f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 fa9a 	bl	8007990 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	695b      	ldr	r3, [r3, #20]
 8007462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007466:	2b40      	cmp	r3, #64	; 0x40
 8007468:	d141      	bne.n	80074ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	3314      	adds	r3, #20
 8007470:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007474:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007478:	e853 3f00 	ldrex	r3, [r3]
 800747c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007480:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007488:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	3314      	adds	r3, #20
 8007492:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007496:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800749a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80074a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80074a6:	e841 2300 	strex	r3, r2, [r1]
 80074aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80074ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d1d9      	bne.n	800746a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d013      	beq.n	80074e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c2:	4a7d      	ldr	r2, [pc, #500]	; (80076b8 <HAL_UART_IRQHandler+0x3dc>)
 80074c4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7fc f977 	bl	80037be <HAL_DMA_Abort_IT>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d016      	beq.n	8007504 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80074e0:	4610      	mov	r0, r2
 80074e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074e4:	e00e      	b.n	8007504 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f990 	bl	800780c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074ec:	e00a      	b.n	8007504 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f98c 	bl	800780c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074f4:	e006      	b.n	8007504 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f988 	bl	800780c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007502:	e170      	b.n	80077e6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007504:	bf00      	nop
    return;
 8007506:	e16e      	b.n	80077e6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750c:	2b01      	cmp	r3, #1
 800750e:	f040 814a 	bne.w	80077a6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007516:	f003 0310 	and.w	r3, r3, #16
 800751a:	2b00      	cmp	r3, #0
 800751c:	f000 8143 	beq.w	80077a6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007524:	f003 0310 	and.w	r3, r3, #16
 8007528:	2b00      	cmp	r3, #0
 800752a:	f000 813c 	beq.w	80077a6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800752e:	2300      	movs	r3, #0
 8007530:	60bb      	str	r3, [r7, #8]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	60bb      	str	r3, [r7, #8]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	60bb      	str	r3, [r7, #8]
 8007542:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	695b      	ldr	r3, [r3, #20]
 800754a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800754e:	2b40      	cmp	r3, #64	; 0x40
 8007550:	f040 80b4 	bne.w	80076bc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007560:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007564:	2b00      	cmp	r3, #0
 8007566:	f000 8140 	beq.w	80077ea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800756e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007572:	429a      	cmp	r2, r3
 8007574:	f080 8139 	bcs.w	80077ea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800757e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007584:	69db      	ldr	r3, [r3, #28]
 8007586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800758a:	f000 8088 	beq.w	800769e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	330c      	adds	r3, #12
 8007594:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007598:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800759c:	e853 3f00 	ldrex	r3, [r3]
 80075a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80075a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	330c      	adds	r3, #12
 80075b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80075ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80075be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80075c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80075ca:	e841 2300 	strex	r3, r2, [r1]
 80075ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80075d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1d9      	bne.n	800758e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	3314      	adds	r3, #20
 80075e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075e4:	e853 3f00 	ldrex	r3, [r3]
 80075e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80075ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075ec:	f023 0301 	bic.w	r3, r3, #1
 80075f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	3314      	adds	r3, #20
 80075fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80075fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007602:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007604:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007606:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800760a:	e841 2300 	strex	r3, r2, [r1]
 800760e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007610:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1e1      	bne.n	80075da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	3314      	adds	r3, #20
 800761c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007620:	e853 3f00 	ldrex	r3, [r3]
 8007624:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007626:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007628:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800762c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	3314      	adds	r3, #20
 8007636:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800763a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800763c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007640:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007642:	e841 2300 	strex	r3, r2, [r1]
 8007646:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007648:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800764a:	2b00      	cmp	r3, #0
 800764c:	d1e3      	bne.n	8007616 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2220      	movs	r2, #32
 8007652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	330c      	adds	r3, #12
 8007662:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007666:	e853 3f00 	ldrex	r3, [r3]
 800766a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800766c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800766e:	f023 0310 	bic.w	r3, r3, #16
 8007672:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	330c      	adds	r3, #12
 800767c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007680:	65ba      	str	r2, [r7, #88]	; 0x58
 8007682:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007684:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007686:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007688:	e841 2300 	strex	r3, r2, [r1]
 800768c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800768e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007690:	2b00      	cmp	r3, #0
 8007692:	d1e3      	bne.n	800765c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007698:	4618      	mov	r0, r3
 800769a:	f7fc f820 	bl	80036de <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	4619      	mov	r1, r3
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f8b6 	bl	8007820 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80076b4:	e099      	b.n	80077ea <HAL_UART_IRQHandler+0x50e>
 80076b6:	bf00      	nop
 80076b8:	08007a57 	.word	0x08007a57
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	1ad3      	subs	r3, r2, r3
 80076c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	f000 808b 	beq.w	80077ee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80076d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f000 8086 	beq.w	80077ee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	330c      	adds	r3, #12
 80076e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ec:	e853 3f00 	ldrex	r3, [r3]
 80076f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80076f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	330c      	adds	r3, #12
 8007702:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007706:	647a      	str	r2, [r7, #68]	; 0x44
 8007708:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800770c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800770e:	e841 2300 	strex	r3, r2, [r1]
 8007712:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007716:	2b00      	cmp	r3, #0
 8007718:	d1e3      	bne.n	80076e2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	3314      	adds	r3, #20
 8007720:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007724:	e853 3f00 	ldrex	r3, [r3]
 8007728:	623b      	str	r3, [r7, #32]
   return(result);
 800772a:	6a3b      	ldr	r3, [r7, #32]
 800772c:	f023 0301 	bic.w	r3, r3, #1
 8007730:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	3314      	adds	r3, #20
 800773a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800773e:	633a      	str	r2, [r7, #48]	; 0x30
 8007740:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007742:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007746:	e841 2300 	strex	r3, r2, [r1]
 800774a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800774c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774e:	2b00      	cmp	r3, #0
 8007750:	d1e3      	bne.n	800771a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2220      	movs	r2, #32
 8007756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	330c      	adds	r3, #12
 8007766:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	e853 3f00 	ldrex	r3, [r3]
 800776e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f023 0310 	bic.w	r3, r3, #16
 8007776:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	330c      	adds	r3, #12
 8007780:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007784:	61fa      	str	r2, [r7, #28]
 8007786:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007788:	69b9      	ldr	r1, [r7, #24]
 800778a:	69fa      	ldr	r2, [r7, #28]
 800778c:	e841 2300 	strex	r3, r2, [r1]
 8007790:	617b      	str	r3, [r7, #20]
   return(result);
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d1e3      	bne.n	8007760 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007798:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800779c:	4619      	mov	r1, r3
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f83e 	bl	8007820 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80077a4:	e023      	b.n	80077ee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80077a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d009      	beq.n	80077c6 <HAL_UART_IRQHandler+0x4ea>
 80077b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d003      	beq.n	80077c6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f95d 	bl	8007a7e <UART_Transmit_IT>
    return;
 80077c4:	e014      	b.n	80077f0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80077c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00e      	beq.n	80077f0 <HAL_UART_IRQHandler+0x514>
 80077d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d008      	beq.n	80077f0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f99d 	bl	8007b1e <UART_EndTransmit_IT>
    return;
 80077e4:	e004      	b.n	80077f0 <HAL_UART_IRQHandler+0x514>
    return;
 80077e6:	bf00      	nop
 80077e8:	e002      	b.n	80077f0 <HAL_UART_IRQHandler+0x514>
      return;
 80077ea:	bf00      	nop
 80077ec:	e000      	b.n	80077f0 <HAL_UART_IRQHandler+0x514>
      return;
 80077ee:	bf00      	nop
  }
}
 80077f0:	37e8      	adds	r7, #232	; 0xe8
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop

080077f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007800:	bf00      	nop
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007814:	bf00      	nop
 8007816:	370c      	adds	r7, #12
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	460b      	mov	r3, r1
 800782a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800782c:	bf00      	nop
 800782e:	370c      	adds	r7, #12
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b090      	sub	sp, #64	; 0x40
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	603b      	str	r3, [r7, #0]
 8007844:	4613      	mov	r3, r2
 8007846:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007848:	e050      	b.n	80078ec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800784a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800784c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007850:	d04c      	beq.n	80078ec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007854:	2b00      	cmp	r3, #0
 8007856:	d007      	beq.n	8007868 <UART_WaitOnFlagUntilTimeout+0x30>
 8007858:	f7fb fe00 	bl	800345c <HAL_GetTick>
 800785c:	4602      	mov	r2, r0
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	1ad3      	subs	r3, r2, r3
 8007862:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007864:	429a      	cmp	r2, r3
 8007866:	d241      	bcs.n	80078ec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	330c      	adds	r3, #12
 800786e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007872:	e853 3f00 	ldrex	r3, [r3]
 8007876:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800787e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	330c      	adds	r3, #12
 8007886:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007888:	637a      	str	r2, [r7, #52]	; 0x34
 800788a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800788e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007890:	e841 2300 	strex	r3, r2, [r1]
 8007894:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007898:	2b00      	cmp	r3, #0
 800789a:	d1e5      	bne.n	8007868 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	3314      	adds	r3, #20
 80078a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	e853 3f00 	ldrex	r3, [r3]
 80078aa:	613b      	str	r3, [r7, #16]
   return(result);
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	f023 0301 	bic.w	r3, r3, #1
 80078b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	3314      	adds	r3, #20
 80078ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078bc:	623a      	str	r2, [r7, #32]
 80078be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c0:	69f9      	ldr	r1, [r7, #28]
 80078c2:	6a3a      	ldr	r2, [r7, #32]
 80078c4:	e841 2300 	strex	r3, r2, [r1]
 80078c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d1e5      	bne.n	800789c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2220      	movs	r2, #32
 80078d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2220      	movs	r2, #32
 80078dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	e00f      	b.n	800790c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	4013      	ands	r3, r2
 80078f6:	68ba      	ldr	r2, [r7, #8]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	bf0c      	ite	eq
 80078fc:	2301      	moveq	r3, #1
 80078fe:	2300      	movne	r3, #0
 8007900:	b2db      	uxtb	r3, r3
 8007902:	461a      	mov	r2, r3
 8007904:	79fb      	ldrb	r3, [r7, #7]
 8007906:	429a      	cmp	r2, r3
 8007908:	d09f      	beq.n	800784a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3740      	adds	r7, #64	; 0x40
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007914:	b480      	push	{r7}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	4613      	mov	r3, r2
 8007920:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	68ba      	ldr	r2, [r7, #8]
 8007926:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	88fa      	ldrh	r2, [r7, #6]
 800792c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	88fa      	ldrh	r2, [r7, #6]
 8007932:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2222      	movs	r2, #34	; 0x22
 800793e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2200      	movs	r2, #0
 8007946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d007      	beq.n	8007962 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68da      	ldr	r2, [r3, #12]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007960:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	695a      	ldr	r2, [r3, #20]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f042 0201 	orr.w	r2, r2, #1
 8007970:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68da      	ldr	r2, [r3, #12]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f042 0220 	orr.w	r2, r2, #32
 8007980:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	3714      	adds	r7, #20
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007990:	b480      	push	{r7}
 8007992:	b095      	sub	sp, #84	; 0x54
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	330c      	adds	r3, #12
 800799e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079a2:	e853 3f00 	ldrex	r3, [r3]
 80079a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80079a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	330c      	adds	r3, #12
 80079b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80079b8:	643a      	str	r2, [r7, #64]	; 0x40
 80079ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80079be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079c0:	e841 2300 	strex	r3, r2, [r1]
 80079c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1e5      	bne.n	8007998 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	3314      	adds	r3, #20
 80079d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d4:	6a3b      	ldr	r3, [r7, #32]
 80079d6:	e853 3f00 	ldrex	r3, [r3]
 80079da:	61fb      	str	r3, [r7, #28]
   return(result);
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	f023 0301 	bic.w	r3, r3, #1
 80079e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	3314      	adds	r3, #20
 80079ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079f4:	e841 2300 	strex	r3, r2, [r1]
 80079f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d1e5      	bne.n	80079cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d119      	bne.n	8007a3c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	330c      	adds	r3, #12
 8007a0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	e853 3f00 	ldrex	r3, [r3]
 8007a16:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	f023 0310 	bic.w	r3, r3, #16
 8007a1e:	647b      	str	r3, [r7, #68]	; 0x44
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	330c      	adds	r3, #12
 8007a26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a28:	61ba      	str	r2, [r7, #24]
 8007a2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2c:	6979      	ldr	r1, [r7, #20]
 8007a2e:	69ba      	ldr	r2, [r7, #24]
 8007a30:	e841 2300 	strex	r3, r2, [r1]
 8007a34:	613b      	str	r3, [r7, #16]
   return(result);
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d1e5      	bne.n	8007a08 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2220      	movs	r2, #32
 8007a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007a4a:	bf00      	nop
 8007a4c:	3754      	adds	r7, #84	; 0x54
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr

08007a56 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b084      	sub	sp, #16
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2200      	movs	r2, #0
 8007a68:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f7ff fecb 	bl	800780c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a76:	bf00      	nop
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007a7e:	b480      	push	{r7}
 8007a80:	b085      	sub	sp, #20
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	2b21      	cmp	r3, #33	; 0x21
 8007a90:	d13e      	bne.n	8007b10 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a9a:	d114      	bne.n	8007ac6 <UART_Transmit_IT+0x48>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d110      	bne.n	8007ac6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6a1b      	ldr	r3, [r3, #32]
 8007aa8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	881b      	ldrh	r3, [r3, #0]
 8007aae:	461a      	mov	r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ab8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a1b      	ldr	r3, [r3, #32]
 8007abe:	1c9a      	adds	r2, r3, #2
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	621a      	str	r2, [r3, #32]
 8007ac4:	e008      	b.n	8007ad8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a1b      	ldr	r3, [r3, #32]
 8007aca:	1c59      	adds	r1, r3, #1
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	6211      	str	r1, [r2, #32]
 8007ad0:	781a      	ldrb	r2, [r3, #0]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	3b01      	subs	r3, #1
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d10f      	bne.n	8007b0c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	68da      	ldr	r2, [r3, #12]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007afa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68da      	ldr	r2, [r3, #12]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b0a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	e000      	b.n	8007b12 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007b10:	2302      	movs	r3, #2
  }
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3714      	adds	r7, #20
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr

08007b1e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b082      	sub	sp, #8
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68da      	ldr	r2, [r3, #12]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b34:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2220      	movs	r2, #32
 8007b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f7ff fe5a 	bl	80077f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3708      	adds	r7, #8
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b08c      	sub	sp, #48	; 0x30
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	2b22      	cmp	r3, #34	; 0x22
 8007b60:	f040 80ab 	bne.w	8007cba <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b6c:	d117      	bne.n	8007b9e <UART_Receive_IT+0x50>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d113      	bne.n	8007b9e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007b76:	2300      	movs	r3, #0
 8007b78:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b7e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b90:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b96:	1c9a      	adds	r2, r3, #2
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	629a      	str	r2, [r3, #40]	; 0x28
 8007b9c:	e026      	b.n	8007bec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bb0:	d007      	beq.n	8007bc2 <UART_Receive_IT+0x74>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d10a      	bne.n	8007bd0 <UART_Receive_IT+0x82>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d106      	bne.n	8007bd0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	b2da      	uxtb	r2, r3
 8007bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bcc:	701a      	strb	r2, [r3, #0]
 8007bce:	e008      	b.n	8007be2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bdc:	b2da      	uxtb	r2, r3
 8007bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be6:	1c5a      	adds	r2, r3, #1
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d15a      	bne.n	8007cb6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	68da      	ldr	r2, [r3, #12]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f022 0220 	bic.w	r2, r2, #32
 8007c0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68da      	ldr	r2, [r3, #12]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	695a      	ldr	r2, [r3, #20]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f022 0201 	bic.w	r2, r2, #1
 8007c2e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2220      	movs	r2, #32
 8007c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d135      	bne.n	8007cac <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	330c      	adds	r3, #12
 8007c4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	e853 3f00 	ldrex	r3, [r3]
 8007c54:	613b      	str	r3, [r7, #16]
   return(result);
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	f023 0310 	bic.w	r3, r3, #16
 8007c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	330c      	adds	r3, #12
 8007c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c66:	623a      	str	r2, [r7, #32]
 8007c68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6a:	69f9      	ldr	r1, [r7, #28]
 8007c6c:	6a3a      	ldr	r2, [r7, #32]
 8007c6e:	e841 2300 	strex	r3, r2, [r1]
 8007c72:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d1e5      	bne.n	8007c46 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f003 0310 	and.w	r3, r3, #16
 8007c84:	2b10      	cmp	r3, #16
 8007c86:	d10a      	bne.n	8007c9e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c88:	2300      	movs	r3, #0
 8007c8a:	60fb      	str	r3, [r7, #12]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	60fb      	str	r3, [r7, #12]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	60fb      	str	r3, [r7, #12]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f7ff fdbb 	bl	8007820 <HAL_UARTEx_RxEventCallback>
 8007caa:	e002      	b.n	8007cb2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f7fa fffb 	bl	8002ca8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	e002      	b.n	8007cbc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	e000      	b.n	8007cbc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007cba:	2302      	movs	r3, #2
  }
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3730      	adds	r7, #48	; 0x30
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cc8:	b0c0      	sub	sp, #256	; 0x100
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	691b      	ldr	r3, [r3, #16]
 8007cd8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ce0:	68d9      	ldr	r1, [r3, #12]
 8007ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	ea40 0301 	orr.w	r3, r0, r1
 8007cec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cf2:	689a      	ldr	r2, [r3, #8]
 8007cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	431a      	orrs	r2, r3
 8007cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d00:	695b      	ldr	r3, [r3, #20]
 8007d02:	431a      	orrs	r2, r3
 8007d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d08:	69db      	ldr	r3, [r3, #28]
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007d1c:	f021 010c 	bic.w	r1, r1, #12
 8007d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d2a:	430b      	orrs	r3, r1
 8007d2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	695b      	ldr	r3, [r3, #20]
 8007d36:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d3e:	6999      	ldr	r1, [r3, #24]
 8007d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	ea40 0301 	orr.w	r3, r0, r1
 8007d4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	4b8f      	ldr	r3, [pc, #572]	; (8007f90 <UART_SetConfig+0x2cc>)
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d005      	beq.n	8007d64 <UART_SetConfig+0xa0>
 8007d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	4b8d      	ldr	r3, [pc, #564]	; (8007f94 <UART_SetConfig+0x2d0>)
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d104      	bne.n	8007d6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d64:	f7fd fcd6 	bl	8005714 <HAL_RCC_GetPCLK2Freq>
 8007d68:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007d6c:	e003      	b.n	8007d76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d6e:	f7fd fcbd 	bl	80056ec <HAL_RCC_GetPCLK1Freq>
 8007d72:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d7a:	69db      	ldr	r3, [r3, #28]
 8007d7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d80:	f040 810c 	bne.w	8007f9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007d8e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007d92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007d96:	4622      	mov	r2, r4
 8007d98:	462b      	mov	r3, r5
 8007d9a:	1891      	adds	r1, r2, r2
 8007d9c:	65b9      	str	r1, [r7, #88]	; 0x58
 8007d9e:	415b      	adcs	r3, r3
 8007da0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007da2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007da6:	4621      	mov	r1, r4
 8007da8:	eb12 0801 	adds.w	r8, r2, r1
 8007dac:	4629      	mov	r1, r5
 8007dae:	eb43 0901 	adc.w	r9, r3, r1
 8007db2:	f04f 0200 	mov.w	r2, #0
 8007db6:	f04f 0300 	mov.w	r3, #0
 8007dba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007dbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007dc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007dc6:	4690      	mov	r8, r2
 8007dc8:	4699      	mov	r9, r3
 8007dca:	4623      	mov	r3, r4
 8007dcc:	eb18 0303 	adds.w	r3, r8, r3
 8007dd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007dd4:	462b      	mov	r3, r5
 8007dd6:	eb49 0303 	adc.w	r3, r9, r3
 8007dda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007dea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007dee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007df2:	460b      	mov	r3, r1
 8007df4:	18db      	adds	r3, r3, r3
 8007df6:	653b      	str	r3, [r7, #80]	; 0x50
 8007df8:	4613      	mov	r3, r2
 8007dfa:	eb42 0303 	adc.w	r3, r2, r3
 8007dfe:	657b      	str	r3, [r7, #84]	; 0x54
 8007e00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007e04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007e08:	f7f8 fe38 	bl	8000a7c <__aeabi_uldivmod>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	460b      	mov	r3, r1
 8007e10:	4b61      	ldr	r3, [pc, #388]	; (8007f98 <UART_SetConfig+0x2d4>)
 8007e12:	fba3 2302 	umull	r2, r3, r3, r2
 8007e16:	095b      	lsrs	r3, r3, #5
 8007e18:	011c      	lsls	r4, r3, #4
 8007e1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e24:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007e28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007e2c:	4642      	mov	r2, r8
 8007e2e:	464b      	mov	r3, r9
 8007e30:	1891      	adds	r1, r2, r2
 8007e32:	64b9      	str	r1, [r7, #72]	; 0x48
 8007e34:	415b      	adcs	r3, r3
 8007e36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007e3c:	4641      	mov	r1, r8
 8007e3e:	eb12 0a01 	adds.w	sl, r2, r1
 8007e42:	4649      	mov	r1, r9
 8007e44:	eb43 0b01 	adc.w	fp, r3, r1
 8007e48:	f04f 0200 	mov.w	r2, #0
 8007e4c:	f04f 0300 	mov.w	r3, #0
 8007e50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007e54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007e58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e5c:	4692      	mov	sl, r2
 8007e5e:	469b      	mov	fp, r3
 8007e60:	4643      	mov	r3, r8
 8007e62:	eb1a 0303 	adds.w	r3, sl, r3
 8007e66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e6a:	464b      	mov	r3, r9
 8007e6c:	eb4b 0303 	adc.w	r3, fp, r3
 8007e70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e80:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007e84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007e88:	460b      	mov	r3, r1
 8007e8a:	18db      	adds	r3, r3, r3
 8007e8c:	643b      	str	r3, [r7, #64]	; 0x40
 8007e8e:	4613      	mov	r3, r2
 8007e90:	eb42 0303 	adc.w	r3, r2, r3
 8007e94:	647b      	str	r3, [r7, #68]	; 0x44
 8007e96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007e9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007e9e:	f7f8 fded 	bl	8000a7c <__aeabi_uldivmod>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	4611      	mov	r1, r2
 8007ea8:	4b3b      	ldr	r3, [pc, #236]	; (8007f98 <UART_SetConfig+0x2d4>)
 8007eaa:	fba3 2301 	umull	r2, r3, r3, r1
 8007eae:	095b      	lsrs	r3, r3, #5
 8007eb0:	2264      	movs	r2, #100	; 0x64
 8007eb2:	fb02 f303 	mul.w	r3, r2, r3
 8007eb6:	1acb      	subs	r3, r1, r3
 8007eb8:	00db      	lsls	r3, r3, #3
 8007eba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007ebe:	4b36      	ldr	r3, [pc, #216]	; (8007f98 <UART_SetConfig+0x2d4>)
 8007ec0:	fba3 2302 	umull	r2, r3, r3, r2
 8007ec4:	095b      	lsrs	r3, r3, #5
 8007ec6:	005b      	lsls	r3, r3, #1
 8007ec8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007ecc:	441c      	add	r4, r3
 8007ece:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ed8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007edc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007ee0:	4642      	mov	r2, r8
 8007ee2:	464b      	mov	r3, r9
 8007ee4:	1891      	adds	r1, r2, r2
 8007ee6:	63b9      	str	r1, [r7, #56]	; 0x38
 8007ee8:	415b      	adcs	r3, r3
 8007eea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007eec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007ef0:	4641      	mov	r1, r8
 8007ef2:	1851      	adds	r1, r2, r1
 8007ef4:	6339      	str	r1, [r7, #48]	; 0x30
 8007ef6:	4649      	mov	r1, r9
 8007ef8:	414b      	adcs	r3, r1
 8007efa:	637b      	str	r3, [r7, #52]	; 0x34
 8007efc:	f04f 0200 	mov.w	r2, #0
 8007f00:	f04f 0300 	mov.w	r3, #0
 8007f04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007f08:	4659      	mov	r1, fp
 8007f0a:	00cb      	lsls	r3, r1, #3
 8007f0c:	4651      	mov	r1, sl
 8007f0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f12:	4651      	mov	r1, sl
 8007f14:	00ca      	lsls	r2, r1, #3
 8007f16:	4610      	mov	r0, r2
 8007f18:	4619      	mov	r1, r3
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	4642      	mov	r2, r8
 8007f1e:	189b      	adds	r3, r3, r2
 8007f20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f24:	464b      	mov	r3, r9
 8007f26:	460a      	mov	r2, r1
 8007f28:	eb42 0303 	adc.w	r3, r2, r3
 8007f2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007f3c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007f40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007f44:	460b      	mov	r3, r1
 8007f46:	18db      	adds	r3, r3, r3
 8007f48:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	eb42 0303 	adc.w	r3, r2, r3
 8007f50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007f5a:	f7f8 fd8f 	bl	8000a7c <__aeabi_uldivmod>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	460b      	mov	r3, r1
 8007f62:	4b0d      	ldr	r3, [pc, #52]	; (8007f98 <UART_SetConfig+0x2d4>)
 8007f64:	fba3 1302 	umull	r1, r3, r3, r2
 8007f68:	095b      	lsrs	r3, r3, #5
 8007f6a:	2164      	movs	r1, #100	; 0x64
 8007f6c:	fb01 f303 	mul.w	r3, r1, r3
 8007f70:	1ad3      	subs	r3, r2, r3
 8007f72:	00db      	lsls	r3, r3, #3
 8007f74:	3332      	adds	r3, #50	; 0x32
 8007f76:	4a08      	ldr	r2, [pc, #32]	; (8007f98 <UART_SetConfig+0x2d4>)
 8007f78:	fba2 2303 	umull	r2, r3, r2, r3
 8007f7c:	095b      	lsrs	r3, r3, #5
 8007f7e:	f003 0207 	and.w	r2, r3, #7
 8007f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4422      	add	r2, r4
 8007f8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007f8c:	e105      	b.n	800819a <UART_SetConfig+0x4d6>
 8007f8e:	bf00      	nop
 8007f90:	40011000 	.word	0x40011000
 8007f94:	40011400 	.word	0x40011400
 8007f98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007fa6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007faa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007fae:	4642      	mov	r2, r8
 8007fb0:	464b      	mov	r3, r9
 8007fb2:	1891      	adds	r1, r2, r2
 8007fb4:	6239      	str	r1, [r7, #32]
 8007fb6:	415b      	adcs	r3, r3
 8007fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8007fba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007fbe:	4641      	mov	r1, r8
 8007fc0:	1854      	adds	r4, r2, r1
 8007fc2:	4649      	mov	r1, r9
 8007fc4:	eb43 0501 	adc.w	r5, r3, r1
 8007fc8:	f04f 0200 	mov.w	r2, #0
 8007fcc:	f04f 0300 	mov.w	r3, #0
 8007fd0:	00eb      	lsls	r3, r5, #3
 8007fd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007fd6:	00e2      	lsls	r2, r4, #3
 8007fd8:	4614      	mov	r4, r2
 8007fda:	461d      	mov	r5, r3
 8007fdc:	4643      	mov	r3, r8
 8007fde:	18e3      	adds	r3, r4, r3
 8007fe0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007fe4:	464b      	mov	r3, r9
 8007fe6:	eb45 0303 	adc.w	r3, r5, r3
 8007fea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007ffa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007ffe:	f04f 0200 	mov.w	r2, #0
 8008002:	f04f 0300 	mov.w	r3, #0
 8008006:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800800a:	4629      	mov	r1, r5
 800800c:	008b      	lsls	r3, r1, #2
 800800e:	4621      	mov	r1, r4
 8008010:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008014:	4621      	mov	r1, r4
 8008016:	008a      	lsls	r2, r1, #2
 8008018:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800801c:	f7f8 fd2e 	bl	8000a7c <__aeabi_uldivmod>
 8008020:	4602      	mov	r2, r0
 8008022:	460b      	mov	r3, r1
 8008024:	4b60      	ldr	r3, [pc, #384]	; (80081a8 <UART_SetConfig+0x4e4>)
 8008026:	fba3 2302 	umull	r2, r3, r3, r2
 800802a:	095b      	lsrs	r3, r3, #5
 800802c:	011c      	lsls	r4, r3, #4
 800802e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008032:	2200      	movs	r2, #0
 8008034:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008038:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800803c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008040:	4642      	mov	r2, r8
 8008042:	464b      	mov	r3, r9
 8008044:	1891      	adds	r1, r2, r2
 8008046:	61b9      	str	r1, [r7, #24]
 8008048:	415b      	adcs	r3, r3
 800804a:	61fb      	str	r3, [r7, #28]
 800804c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008050:	4641      	mov	r1, r8
 8008052:	1851      	adds	r1, r2, r1
 8008054:	6139      	str	r1, [r7, #16]
 8008056:	4649      	mov	r1, r9
 8008058:	414b      	adcs	r3, r1
 800805a:	617b      	str	r3, [r7, #20]
 800805c:	f04f 0200 	mov.w	r2, #0
 8008060:	f04f 0300 	mov.w	r3, #0
 8008064:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008068:	4659      	mov	r1, fp
 800806a:	00cb      	lsls	r3, r1, #3
 800806c:	4651      	mov	r1, sl
 800806e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008072:	4651      	mov	r1, sl
 8008074:	00ca      	lsls	r2, r1, #3
 8008076:	4610      	mov	r0, r2
 8008078:	4619      	mov	r1, r3
 800807a:	4603      	mov	r3, r0
 800807c:	4642      	mov	r2, r8
 800807e:	189b      	adds	r3, r3, r2
 8008080:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008084:	464b      	mov	r3, r9
 8008086:	460a      	mov	r2, r1
 8008088:	eb42 0303 	adc.w	r3, r2, r3
 800808c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	67bb      	str	r3, [r7, #120]	; 0x78
 800809a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800809c:	f04f 0200 	mov.w	r2, #0
 80080a0:	f04f 0300 	mov.w	r3, #0
 80080a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80080a8:	4649      	mov	r1, r9
 80080aa:	008b      	lsls	r3, r1, #2
 80080ac:	4641      	mov	r1, r8
 80080ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080b2:	4641      	mov	r1, r8
 80080b4:	008a      	lsls	r2, r1, #2
 80080b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80080ba:	f7f8 fcdf 	bl	8000a7c <__aeabi_uldivmod>
 80080be:	4602      	mov	r2, r0
 80080c0:	460b      	mov	r3, r1
 80080c2:	4b39      	ldr	r3, [pc, #228]	; (80081a8 <UART_SetConfig+0x4e4>)
 80080c4:	fba3 1302 	umull	r1, r3, r3, r2
 80080c8:	095b      	lsrs	r3, r3, #5
 80080ca:	2164      	movs	r1, #100	; 0x64
 80080cc:	fb01 f303 	mul.w	r3, r1, r3
 80080d0:	1ad3      	subs	r3, r2, r3
 80080d2:	011b      	lsls	r3, r3, #4
 80080d4:	3332      	adds	r3, #50	; 0x32
 80080d6:	4a34      	ldr	r2, [pc, #208]	; (80081a8 <UART_SetConfig+0x4e4>)
 80080d8:	fba2 2303 	umull	r2, r3, r2, r3
 80080dc:	095b      	lsrs	r3, r3, #5
 80080de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80080e2:	441c      	add	r4, r3
 80080e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080e8:	2200      	movs	r2, #0
 80080ea:	673b      	str	r3, [r7, #112]	; 0x70
 80080ec:	677a      	str	r2, [r7, #116]	; 0x74
 80080ee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80080f2:	4642      	mov	r2, r8
 80080f4:	464b      	mov	r3, r9
 80080f6:	1891      	adds	r1, r2, r2
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	415b      	adcs	r3, r3
 80080fc:	60fb      	str	r3, [r7, #12]
 80080fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008102:	4641      	mov	r1, r8
 8008104:	1851      	adds	r1, r2, r1
 8008106:	6039      	str	r1, [r7, #0]
 8008108:	4649      	mov	r1, r9
 800810a:	414b      	adcs	r3, r1
 800810c:	607b      	str	r3, [r7, #4]
 800810e:	f04f 0200 	mov.w	r2, #0
 8008112:	f04f 0300 	mov.w	r3, #0
 8008116:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800811a:	4659      	mov	r1, fp
 800811c:	00cb      	lsls	r3, r1, #3
 800811e:	4651      	mov	r1, sl
 8008120:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008124:	4651      	mov	r1, sl
 8008126:	00ca      	lsls	r2, r1, #3
 8008128:	4610      	mov	r0, r2
 800812a:	4619      	mov	r1, r3
 800812c:	4603      	mov	r3, r0
 800812e:	4642      	mov	r2, r8
 8008130:	189b      	adds	r3, r3, r2
 8008132:	66bb      	str	r3, [r7, #104]	; 0x68
 8008134:	464b      	mov	r3, r9
 8008136:	460a      	mov	r2, r1
 8008138:	eb42 0303 	adc.w	r3, r2, r3
 800813c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800813e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	663b      	str	r3, [r7, #96]	; 0x60
 8008148:	667a      	str	r2, [r7, #100]	; 0x64
 800814a:	f04f 0200 	mov.w	r2, #0
 800814e:	f04f 0300 	mov.w	r3, #0
 8008152:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008156:	4649      	mov	r1, r9
 8008158:	008b      	lsls	r3, r1, #2
 800815a:	4641      	mov	r1, r8
 800815c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008160:	4641      	mov	r1, r8
 8008162:	008a      	lsls	r2, r1, #2
 8008164:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008168:	f7f8 fc88 	bl	8000a7c <__aeabi_uldivmod>
 800816c:	4602      	mov	r2, r0
 800816e:	460b      	mov	r3, r1
 8008170:	4b0d      	ldr	r3, [pc, #52]	; (80081a8 <UART_SetConfig+0x4e4>)
 8008172:	fba3 1302 	umull	r1, r3, r3, r2
 8008176:	095b      	lsrs	r3, r3, #5
 8008178:	2164      	movs	r1, #100	; 0x64
 800817a:	fb01 f303 	mul.w	r3, r1, r3
 800817e:	1ad3      	subs	r3, r2, r3
 8008180:	011b      	lsls	r3, r3, #4
 8008182:	3332      	adds	r3, #50	; 0x32
 8008184:	4a08      	ldr	r2, [pc, #32]	; (80081a8 <UART_SetConfig+0x4e4>)
 8008186:	fba2 2303 	umull	r2, r3, r2, r3
 800818a:	095b      	lsrs	r3, r3, #5
 800818c:	f003 020f 	and.w	r2, r3, #15
 8008190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4422      	add	r2, r4
 8008198:	609a      	str	r2, [r3, #8]
}
 800819a:	bf00      	nop
 800819c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80081a0:	46bd      	mov	sp, r7
 80081a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081a6:	bf00      	nop
 80081a8:	51eb851f 	.word	0x51eb851f

080081ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80081ac:	b084      	sub	sp, #16
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b084      	sub	sp, #16
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
 80081b6:	f107 001c 	add.w	r0, r7, #28
 80081ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80081be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d122      	bne.n	800820a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80081d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80081ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d105      	bne.n	80081fe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 faa2 	bl	8008748 <USB_CoreReset>
 8008204:	4603      	mov	r3, r0
 8008206:	73fb      	strb	r3, [r7, #15]
 8008208:	e01a      	b.n	8008240 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 fa96 	bl	8008748 <USB_CoreReset>
 800821c:	4603      	mov	r3, r0
 800821e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008222:	2b00      	cmp	r3, #0
 8008224:	d106      	bne.n	8008234 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	639a      	str	r2, [r3, #56]	; 0x38
 8008232:	e005      	b.n	8008240 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008238:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008242:	2b01      	cmp	r3, #1
 8008244:	d10b      	bne.n	800825e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	f043 0206 	orr.w	r2, r3, #6
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	f043 0220 	orr.w	r2, r3, #32
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800825e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008260:	4618      	mov	r0, r3
 8008262:	3710      	adds	r7, #16
 8008264:	46bd      	mov	sp, r7
 8008266:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800826a:	b004      	add	sp, #16
 800826c:	4770      	bx	lr

0800826e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800826e:	b480      	push	{r7}
 8008270:	b083      	sub	sp, #12
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	f023 0201 	bic.w	r2, r3, #1
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008282:	2300      	movs	r3, #0
}
 8008284:	4618      	mov	r0, r3
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	460b      	mov	r3, r1
 800829a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800829c:	2300      	movs	r3, #0
 800829e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80082ac:	78fb      	ldrb	r3, [r7, #3]
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d115      	bne.n	80082de <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80082be:	2001      	movs	r0, #1
 80082c0:	f7fb f8d8 	bl	8003474 <HAL_Delay>
      ms++;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	3301      	adds	r3, #1
 80082c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fa2e 	bl	800872c <USB_GetMode>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d01e      	beq.n	8008314 <USB_SetCurrentMode+0x84>
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2b31      	cmp	r3, #49	; 0x31
 80082da:	d9f0      	bls.n	80082be <USB_SetCurrentMode+0x2e>
 80082dc:	e01a      	b.n	8008314 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80082de:	78fb      	ldrb	r3, [r7, #3]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d115      	bne.n	8008310 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80082f0:	2001      	movs	r0, #1
 80082f2:	f7fb f8bf 	bl	8003474 <HAL_Delay>
      ms++;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	3301      	adds	r3, #1
 80082fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 fa15 	bl	800872c <USB_GetMode>
 8008302:	4603      	mov	r3, r0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d005      	beq.n	8008314 <USB_SetCurrentMode+0x84>
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2b31      	cmp	r3, #49	; 0x31
 800830c:	d9f0      	bls.n	80082f0 <USB_SetCurrentMode+0x60>
 800830e:	e001      	b.n	8008314 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	e005      	b.n	8008320 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2b32      	cmp	r3, #50	; 0x32
 8008318:	d101      	bne.n	800831e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	e000      	b.n	8008320 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800831e:	2300      	movs	r3, #0
}
 8008320:	4618      	mov	r0, r3
 8008322:	3710      	adds	r7, #16
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008328:	b084      	sub	sp, #16
 800832a:	b580      	push	{r7, lr}
 800832c:	b086      	sub	sp, #24
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
 8008332:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008336:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800833a:	2300      	movs	r3, #0
 800833c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008342:	2300      	movs	r3, #0
 8008344:	613b      	str	r3, [r7, #16]
 8008346:	e009      	b.n	800835c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	3340      	adds	r3, #64	; 0x40
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	4413      	add	r3, r2
 8008352:	2200      	movs	r2, #0
 8008354:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	3301      	adds	r3, #1
 800835a:	613b      	str	r3, [r7, #16]
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	2b0e      	cmp	r3, #14
 8008360:	d9f2      	bls.n	8008348 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008364:	2b00      	cmp	r3, #0
 8008366:	d11c      	bne.n	80083a2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	68fa      	ldr	r2, [r7, #12]
 8008372:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008376:	f043 0302 	orr.w	r3, r3, #2
 800837a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008380:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800838c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008398:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	639a      	str	r2, [r3, #56]	; 0x38
 80083a0:	e00b      	b.n	80083ba <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80083c0:	461a      	mov	r2, r3
 80083c2:	2300      	movs	r3, #0
 80083c4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083cc:	4619      	mov	r1, r3
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083d4:	461a      	mov	r2, r3
 80083d6:	680b      	ldr	r3, [r1, #0]
 80083d8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80083da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d10c      	bne.n	80083fa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80083e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d104      	bne.n	80083f0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80083e6:	2100      	movs	r1, #0
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 f965 	bl	80086b8 <USB_SetDevSpeed>
 80083ee:	e008      	b.n	8008402 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80083f0:	2101      	movs	r1, #1
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 f960 	bl	80086b8 <USB_SetDevSpeed>
 80083f8:	e003      	b.n	8008402 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80083fa:	2103      	movs	r1, #3
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 f95b 	bl	80086b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008402:	2110      	movs	r1, #16
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 f8f3 	bl	80085f0 <USB_FlushTxFifo>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d001      	beq.n	8008414 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 f91f 	bl	8008658 <USB_FlushRxFifo>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d001      	beq.n	8008424 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800842a:	461a      	mov	r2, r3
 800842c:	2300      	movs	r3, #0
 800842e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008436:	461a      	mov	r2, r3
 8008438:	2300      	movs	r3, #0
 800843a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008442:	461a      	mov	r2, r3
 8008444:	2300      	movs	r3, #0
 8008446:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008448:	2300      	movs	r3, #0
 800844a:	613b      	str	r3, [r7, #16]
 800844c:	e043      	b.n	80084d6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	015a      	lsls	r2, r3, #5
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	4413      	add	r3, r2
 8008456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008460:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008464:	d118      	bne.n	8008498 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d10a      	bne.n	8008482 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	015a      	lsls	r2, r3, #5
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	4413      	add	r3, r2
 8008474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008478:	461a      	mov	r2, r3
 800847a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800847e:	6013      	str	r3, [r2, #0]
 8008480:	e013      	b.n	80084aa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	015a      	lsls	r2, r3, #5
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	4413      	add	r3, r2
 800848a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800848e:	461a      	mov	r2, r3
 8008490:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008494:	6013      	str	r3, [r2, #0]
 8008496:	e008      	b.n	80084aa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	015a      	lsls	r2, r3, #5
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	4413      	add	r3, r2
 80084a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084a4:	461a      	mov	r2, r3
 80084a6:	2300      	movs	r3, #0
 80084a8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	015a      	lsls	r2, r3, #5
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	4413      	add	r3, r2
 80084b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084b6:	461a      	mov	r2, r3
 80084b8:	2300      	movs	r3, #0
 80084ba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	015a      	lsls	r2, r3, #5
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	4413      	add	r3, r2
 80084c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084c8:	461a      	mov	r2, r3
 80084ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80084ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	3301      	adds	r3, #1
 80084d4:	613b      	str	r3, [r7, #16]
 80084d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d8:	693a      	ldr	r2, [r7, #16]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d3b7      	bcc.n	800844e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084de:	2300      	movs	r3, #0
 80084e0:	613b      	str	r3, [r7, #16]
 80084e2:	e043      	b.n	800856c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	015a      	lsls	r2, r3, #5
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	4413      	add	r3, r2
 80084ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084fa:	d118      	bne.n	800852e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d10a      	bne.n	8008518 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	015a      	lsls	r2, r3, #5
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	4413      	add	r3, r2
 800850a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800850e:	461a      	mov	r2, r3
 8008510:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008514:	6013      	str	r3, [r2, #0]
 8008516:	e013      	b.n	8008540 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	015a      	lsls	r2, r3, #5
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	4413      	add	r3, r2
 8008520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008524:	461a      	mov	r2, r3
 8008526:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800852a:	6013      	str	r3, [r2, #0]
 800852c:	e008      	b.n	8008540 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	015a      	lsls	r2, r3, #5
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	4413      	add	r3, r2
 8008536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800853a:	461a      	mov	r2, r3
 800853c:	2300      	movs	r3, #0
 800853e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	015a      	lsls	r2, r3, #5
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	4413      	add	r3, r2
 8008548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800854c:	461a      	mov	r2, r3
 800854e:	2300      	movs	r3, #0
 8008550:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	015a      	lsls	r2, r3, #5
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	4413      	add	r3, r2
 800855a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800855e:	461a      	mov	r2, r3
 8008560:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008564:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	3301      	adds	r3, #1
 800856a:	613b      	str	r3, [r7, #16]
 800856c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856e:	693a      	ldr	r2, [r7, #16]
 8008570:	429a      	cmp	r2, r3
 8008572:	d3b7      	bcc.n	80084e4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008582:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008586:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008594:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008598:	2b00      	cmp	r3, #0
 800859a:	d105      	bne.n	80085a8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	699b      	ldr	r3, [r3, #24]
 80085a0:	f043 0210 	orr.w	r2, r3, #16
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	699a      	ldr	r2, [r3, #24]
 80085ac:	4b0f      	ldr	r3, [pc, #60]	; (80085ec <USB_DevInit+0x2c4>)
 80085ae:	4313      	orrs	r3, r2
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80085b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d005      	beq.n	80085c6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	699b      	ldr	r3, [r3, #24]
 80085be:	f043 0208 	orr.w	r2, r3, #8
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80085c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d107      	bne.n	80085dc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	699b      	ldr	r3, [r3, #24]
 80085d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085d4:	f043 0304 	orr.w	r3, r3, #4
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80085dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3718      	adds	r7, #24
 80085e2:	46bd      	mov	sp, r7
 80085e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80085e8:	b004      	add	sp, #16
 80085ea:	4770      	bx	lr
 80085ec:	803c3800 	.word	0x803c3800

080085f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80085fa:	2300      	movs	r3, #0
 80085fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	3301      	adds	r3, #1
 8008602:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	4a13      	ldr	r2, [pc, #76]	; (8008654 <USB_FlushTxFifo+0x64>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d901      	bls.n	8008610 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800860c:	2303      	movs	r3, #3
 800860e:	e01b      	b.n	8008648 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	691b      	ldr	r3, [r3, #16]
 8008614:	2b00      	cmp	r3, #0
 8008616:	daf2      	bge.n	80085fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008618:	2300      	movs	r3, #0
 800861a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	019b      	lsls	r3, r3, #6
 8008620:	f043 0220 	orr.w	r2, r3, #32
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	3301      	adds	r3, #1
 800862c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	4a08      	ldr	r2, [pc, #32]	; (8008654 <USB_FlushTxFifo+0x64>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d901      	bls.n	800863a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008636:	2303      	movs	r3, #3
 8008638:	e006      	b.n	8008648 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	691b      	ldr	r3, [r3, #16]
 800863e:	f003 0320 	and.w	r3, r3, #32
 8008642:	2b20      	cmp	r3, #32
 8008644:	d0f0      	beq.n	8008628 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008646:	2300      	movs	r3, #0
}
 8008648:	4618      	mov	r0, r3
 800864a:	3714      	adds	r7, #20
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr
 8008654:	00030d40 	.word	0x00030d40

08008658 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008660:	2300      	movs	r3, #0
 8008662:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	3301      	adds	r3, #1
 8008668:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	4a11      	ldr	r2, [pc, #68]	; (80086b4 <USB_FlushRxFifo+0x5c>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d901      	bls.n	8008676 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008672:	2303      	movs	r3, #3
 8008674:	e018      	b.n	80086a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	691b      	ldr	r3, [r3, #16]
 800867a:	2b00      	cmp	r3, #0
 800867c:	daf2      	bge.n	8008664 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800867e:	2300      	movs	r3, #0
 8008680:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2210      	movs	r2, #16
 8008686:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	3301      	adds	r3, #1
 800868c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	4a08      	ldr	r2, [pc, #32]	; (80086b4 <USB_FlushRxFifo+0x5c>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d901      	bls.n	800869a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008696:	2303      	movs	r3, #3
 8008698:	e006      	b.n	80086a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	f003 0310 	and.w	r3, r3, #16
 80086a2:	2b10      	cmp	r3, #16
 80086a4:	d0f0      	beq.n	8008688 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3714      	adds	r7, #20
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr
 80086b4:	00030d40 	.word	0x00030d40

080086b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b085      	sub	sp, #20
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	460b      	mov	r3, r1
 80086c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	78fb      	ldrb	r3, [r7, #3]
 80086d2:	68f9      	ldr	r1, [r7, #12]
 80086d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086d8:	4313      	orrs	r3, r2
 80086da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80086dc:	2300      	movs	r3, #0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3714      	adds	r7, #20
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr

080086ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80086ea:	b480      	push	{r7}
 80086ec:	b085      	sub	sp, #20
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	68fa      	ldr	r2, [r7, #12]
 8008700:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008704:	f023 0303 	bic.w	r3, r3, #3
 8008708:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	68fa      	ldr	r2, [r7, #12]
 8008714:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008718:	f043 0302 	orr.w	r3, r3, #2
 800871c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800871e:	2300      	movs	r3, #0
}
 8008720:	4618      	mov	r0, r3
 8008722:	3714      	adds	r7, #20
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	695b      	ldr	r3, [r3, #20]
 8008738:	f003 0301 	and.w	r3, r3, #1
}
 800873c:	4618      	mov	r0, r3
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008748:	b480      	push	{r7}
 800874a:	b085      	sub	sp, #20
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008750:	2300      	movs	r3, #0
 8008752:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	3301      	adds	r3, #1
 8008758:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	4a13      	ldr	r2, [pc, #76]	; (80087ac <USB_CoreReset+0x64>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d901      	bls.n	8008766 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008762:	2303      	movs	r3, #3
 8008764:	e01b      	b.n	800879e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	691b      	ldr	r3, [r3, #16]
 800876a:	2b00      	cmp	r3, #0
 800876c:	daf2      	bge.n	8008754 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800876e:	2300      	movs	r3, #0
 8008770:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	691b      	ldr	r3, [r3, #16]
 8008776:	f043 0201 	orr.w	r2, r3, #1
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	3301      	adds	r3, #1
 8008782:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	4a09      	ldr	r2, [pc, #36]	; (80087ac <USB_CoreReset+0x64>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d901      	bls.n	8008790 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800878c:	2303      	movs	r3, #3
 800878e:	e006      	b.n	800879e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	691b      	ldr	r3, [r3, #16]
 8008794:	f003 0301 	and.w	r3, r3, #1
 8008798:	2b01      	cmp	r3, #1
 800879a:	d0f0      	beq.n	800877e <USB_CoreReset+0x36>

  return HAL_OK;
 800879c:	2300      	movs	r3, #0
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3714      	adds	r7, #20
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	00030d40 	.word	0x00030d40

080087b0 <atoi>:
 80087b0:	220a      	movs	r2, #10
 80087b2:	2100      	movs	r1, #0
 80087b4:	f000 b976 	b.w	8008aa4 <strtol>

080087b8 <__errno>:
 80087b8:	4b01      	ldr	r3, [pc, #4]	; (80087c0 <__errno+0x8>)
 80087ba:	6818      	ldr	r0, [r3, #0]
 80087bc:	4770      	bx	lr
 80087be:	bf00      	nop
 80087c0:	20000024 	.word	0x20000024

080087c4 <__libc_init_array>:
 80087c4:	b570      	push	{r4, r5, r6, lr}
 80087c6:	4d0d      	ldr	r5, [pc, #52]	; (80087fc <__libc_init_array+0x38>)
 80087c8:	4c0d      	ldr	r4, [pc, #52]	; (8008800 <__libc_init_array+0x3c>)
 80087ca:	1b64      	subs	r4, r4, r5
 80087cc:	10a4      	asrs	r4, r4, #2
 80087ce:	2600      	movs	r6, #0
 80087d0:	42a6      	cmp	r6, r4
 80087d2:	d109      	bne.n	80087e8 <__libc_init_array+0x24>
 80087d4:	4d0b      	ldr	r5, [pc, #44]	; (8008804 <__libc_init_array+0x40>)
 80087d6:	4c0c      	ldr	r4, [pc, #48]	; (8008808 <__libc_init_array+0x44>)
 80087d8:	f001 faa0 	bl	8009d1c <_init>
 80087dc:	1b64      	subs	r4, r4, r5
 80087de:	10a4      	asrs	r4, r4, #2
 80087e0:	2600      	movs	r6, #0
 80087e2:	42a6      	cmp	r6, r4
 80087e4:	d105      	bne.n	80087f2 <__libc_init_array+0x2e>
 80087e6:	bd70      	pop	{r4, r5, r6, pc}
 80087e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80087ec:	4798      	blx	r3
 80087ee:	3601      	adds	r6, #1
 80087f0:	e7ee      	b.n	80087d0 <__libc_init_array+0xc>
 80087f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80087f6:	4798      	blx	r3
 80087f8:	3601      	adds	r6, #1
 80087fa:	e7f2      	b.n	80087e2 <__libc_init_array+0x1e>
 80087fc:	0800a0ac 	.word	0x0800a0ac
 8008800:	0800a0ac 	.word	0x0800a0ac
 8008804:	0800a0ac 	.word	0x0800a0ac
 8008808:	0800a0b0 	.word	0x0800a0b0

0800880c <memset>:
 800880c:	4402      	add	r2, r0
 800880e:	4603      	mov	r3, r0
 8008810:	4293      	cmp	r3, r2
 8008812:	d100      	bne.n	8008816 <memset+0xa>
 8008814:	4770      	bx	lr
 8008816:	f803 1b01 	strb.w	r1, [r3], #1
 800881a:	e7f9      	b.n	8008810 <memset+0x4>

0800881c <iprintf>:
 800881c:	b40f      	push	{r0, r1, r2, r3}
 800881e:	4b0a      	ldr	r3, [pc, #40]	; (8008848 <iprintf+0x2c>)
 8008820:	b513      	push	{r0, r1, r4, lr}
 8008822:	681c      	ldr	r4, [r3, #0]
 8008824:	b124      	cbz	r4, 8008830 <iprintf+0x14>
 8008826:	69a3      	ldr	r3, [r4, #24]
 8008828:	b913      	cbnz	r3, 8008830 <iprintf+0x14>
 800882a:	4620      	mov	r0, r4
 800882c:	f000 fb1e 	bl	8008e6c <__sinit>
 8008830:	ab05      	add	r3, sp, #20
 8008832:	9a04      	ldr	r2, [sp, #16]
 8008834:	68a1      	ldr	r1, [r4, #8]
 8008836:	9301      	str	r3, [sp, #4]
 8008838:	4620      	mov	r0, r4
 800883a:	f000 fe83 	bl	8009544 <_vfiprintf_r>
 800883e:	b002      	add	sp, #8
 8008840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008844:	b004      	add	sp, #16
 8008846:	4770      	bx	lr
 8008848:	20000024 	.word	0x20000024

0800884c <_puts_r>:
 800884c:	b570      	push	{r4, r5, r6, lr}
 800884e:	460e      	mov	r6, r1
 8008850:	4605      	mov	r5, r0
 8008852:	b118      	cbz	r0, 800885c <_puts_r+0x10>
 8008854:	6983      	ldr	r3, [r0, #24]
 8008856:	b90b      	cbnz	r3, 800885c <_puts_r+0x10>
 8008858:	f000 fb08 	bl	8008e6c <__sinit>
 800885c:	69ab      	ldr	r3, [r5, #24]
 800885e:	68ac      	ldr	r4, [r5, #8]
 8008860:	b913      	cbnz	r3, 8008868 <_puts_r+0x1c>
 8008862:	4628      	mov	r0, r5
 8008864:	f000 fb02 	bl	8008e6c <__sinit>
 8008868:	4b2c      	ldr	r3, [pc, #176]	; (800891c <_puts_r+0xd0>)
 800886a:	429c      	cmp	r4, r3
 800886c:	d120      	bne.n	80088b0 <_puts_r+0x64>
 800886e:	686c      	ldr	r4, [r5, #4]
 8008870:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008872:	07db      	lsls	r3, r3, #31
 8008874:	d405      	bmi.n	8008882 <_puts_r+0x36>
 8008876:	89a3      	ldrh	r3, [r4, #12]
 8008878:	0598      	lsls	r0, r3, #22
 800887a:	d402      	bmi.n	8008882 <_puts_r+0x36>
 800887c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800887e:	f000 fb93 	bl	8008fa8 <__retarget_lock_acquire_recursive>
 8008882:	89a3      	ldrh	r3, [r4, #12]
 8008884:	0719      	lsls	r1, r3, #28
 8008886:	d51d      	bpl.n	80088c4 <_puts_r+0x78>
 8008888:	6923      	ldr	r3, [r4, #16]
 800888a:	b1db      	cbz	r3, 80088c4 <_puts_r+0x78>
 800888c:	3e01      	subs	r6, #1
 800888e:	68a3      	ldr	r3, [r4, #8]
 8008890:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008894:	3b01      	subs	r3, #1
 8008896:	60a3      	str	r3, [r4, #8]
 8008898:	bb39      	cbnz	r1, 80088ea <_puts_r+0x9e>
 800889a:	2b00      	cmp	r3, #0
 800889c:	da38      	bge.n	8008910 <_puts_r+0xc4>
 800889e:	4622      	mov	r2, r4
 80088a0:	210a      	movs	r1, #10
 80088a2:	4628      	mov	r0, r5
 80088a4:	f000 f908 	bl	8008ab8 <__swbuf_r>
 80088a8:	3001      	adds	r0, #1
 80088aa:	d011      	beq.n	80088d0 <_puts_r+0x84>
 80088ac:	250a      	movs	r5, #10
 80088ae:	e011      	b.n	80088d4 <_puts_r+0x88>
 80088b0:	4b1b      	ldr	r3, [pc, #108]	; (8008920 <_puts_r+0xd4>)
 80088b2:	429c      	cmp	r4, r3
 80088b4:	d101      	bne.n	80088ba <_puts_r+0x6e>
 80088b6:	68ac      	ldr	r4, [r5, #8]
 80088b8:	e7da      	b.n	8008870 <_puts_r+0x24>
 80088ba:	4b1a      	ldr	r3, [pc, #104]	; (8008924 <_puts_r+0xd8>)
 80088bc:	429c      	cmp	r4, r3
 80088be:	bf08      	it	eq
 80088c0:	68ec      	ldreq	r4, [r5, #12]
 80088c2:	e7d5      	b.n	8008870 <_puts_r+0x24>
 80088c4:	4621      	mov	r1, r4
 80088c6:	4628      	mov	r0, r5
 80088c8:	f000 f948 	bl	8008b5c <__swsetup_r>
 80088cc:	2800      	cmp	r0, #0
 80088ce:	d0dd      	beq.n	800888c <_puts_r+0x40>
 80088d0:	f04f 35ff 	mov.w	r5, #4294967295
 80088d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088d6:	07da      	lsls	r2, r3, #31
 80088d8:	d405      	bmi.n	80088e6 <_puts_r+0x9a>
 80088da:	89a3      	ldrh	r3, [r4, #12]
 80088dc:	059b      	lsls	r3, r3, #22
 80088de:	d402      	bmi.n	80088e6 <_puts_r+0x9a>
 80088e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088e2:	f000 fb62 	bl	8008faa <__retarget_lock_release_recursive>
 80088e6:	4628      	mov	r0, r5
 80088e8:	bd70      	pop	{r4, r5, r6, pc}
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	da04      	bge.n	80088f8 <_puts_r+0xac>
 80088ee:	69a2      	ldr	r2, [r4, #24]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	dc06      	bgt.n	8008902 <_puts_r+0xb6>
 80088f4:	290a      	cmp	r1, #10
 80088f6:	d004      	beq.n	8008902 <_puts_r+0xb6>
 80088f8:	6823      	ldr	r3, [r4, #0]
 80088fa:	1c5a      	adds	r2, r3, #1
 80088fc:	6022      	str	r2, [r4, #0]
 80088fe:	7019      	strb	r1, [r3, #0]
 8008900:	e7c5      	b.n	800888e <_puts_r+0x42>
 8008902:	4622      	mov	r2, r4
 8008904:	4628      	mov	r0, r5
 8008906:	f000 f8d7 	bl	8008ab8 <__swbuf_r>
 800890a:	3001      	adds	r0, #1
 800890c:	d1bf      	bne.n	800888e <_puts_r+0x42>
 800890e:	e7df      	b.n	80088d0 <_puts_r+0x84>
 8008910:	6823      	ldr	r3, [r4, #0]
 8008912:	250a      	movs	r5, #10
 8008914:	1c5a      	adds	r2, r3, #1
 8008916:	6022      	str	r2, [r4, #0]
 8008918:	701d      	strb	r5, [r3, #0]
 800891a:	e7db      	b.n	80088d4 <_puts_r+0x88>
 800891c:	0800a030 	.word	0x0800a030
 8008920:	0800a050 	.word	0x0800a050
 8008924:	0800a010 	.word	0x0800a010

08008928 <puts>:
 8008928:	4b02      	ldr	r3, [pc, #8]	; (8008934 <puts+0xc>)
 800892a:	4601      	mov	r1, r0
 800892c:	6818      	ldr	r0, [r3, #0]
 800892e:	f7ff bf8d 	b.w	800884c <_puts_r>
 8008932:	bf00      	nop
 8008934:	20000024 	.word	0x20000024

08008938 <siprintf>:
 8008938:	b40e      	push	{r1, r2, r3}
 800893a:	b500      	push	{lr}
 800893c:	b09c      	sub	sp, #112	; 0x70
 800893e:	ab1d      	add	r3, sp, #116	; 0x74
 8008940:	9002      	str	r0, [sp, #8]
 8008942:	9006      	str	r0, [sp, #24]
 8008944:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008948:	4809      	ldr	r0, [pc, #36]	; (8008970 <siprintf+0x38>)
 800894a:	9107      	str	r1, [sp, #28]
 800894c:	9104      	str	r1, [sp, #16]
 800894e:	4909      	ldr	r1, [pc, #36]	; (8008974 <siprintf+0x3c>)
 8008950:	f853 2b04 	ldr.w	r2, [r3], #4
 8008954:	9105      	str	r1, [sp, #20]
 8008956:	6800      	ldr	r0, [r0, #0]
 8008958:	9301      	str	r3, [sp, #4]
 800895a:	a902      	add	r1, sp, #8
 800895c:	f000 fcc8 	bl	80092f0 <_svfiprintf_r>
 8008960:	9b02      	ldr	r3, [sp, #8]
 8008962:	2200      	movs	r2, #0
 8008964:	701a      	strb	r2, [r3, #0]
 8008966:	b01c      	add	sp, #112	; 0x70
 8008968:	f85d eb04 	ldr.w	lr, [sp], #4
 800896c:	b003      	add	sp, #12
 800896e:	4770      	bx	lr
 8008970:	20000024 	.word	0x20000024
 8008974:	ffff0208 	.word	0xffff0208

08008978 <strncmp>:
 8008978:	b510      	push	{r4, lr}
 800897a:	b17a      	cbz	r2, 800899c <strncmp+0x24>
 800897c:	4603      	mov	r3, r0
 800897e:	3901      	subs	r1, #1
 8008980:	1884      	adds	r4, r0, r2
 8008982:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008986:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800898a:	4290      	cmp	r0, r2
 800898c:	d101      	bne.n	8008992 <strncmp+0x1a>
 800898e:	42a3      	cmp	r3, r4
 8008990:	d101      	bne.n	8008996 <strncmp+0x1e>
 8008992:	1a80      	subs	r0, r0, r2
 8008994:	bd10      	pop	{r4, pc}
 8008996:	2800      	cmp	r0, #0
 8008998:	d1f3      	bne.n	8008982 <strncmp+0xa>
 800899a:	e7fa      	b.n	8008992 <strncmp+0x1a>
 800899c:	4610      	mov	r0, r2
 800899e:	e7f9      	b.n	8008994 <strncmp+0x1c>

080089a0 <_strtol_l.constprop.0>:
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089a6:	d001      	beq.n	80089ac <_strtol_l.constprop.0+0xc>
 80089a8:	2b24      	cmp	r3, #36	; 0x24
 80089aa:	d906      	bls.n	80089ba <_strtol_l.constprop.0+0x1a>
 80089ac:	f7ff ff04 	bl	80087b8 <__errno>
 80089b0:	2316      	movs	r3, #22
 80089b2:	6003      	str	r3, [r0, #0]
 80089b4:	2000      	movs	r0, #0
 80089b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008aa0 <_strtol_l.constprop.0+0x100>
 80089be:	460d      	mov	r5, r1
 80089c0:	462e      	mov	r6, r5
 80089c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80089c6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80089ca:	f017 0708 	ands.w	r7, r7, #8
 80089ce:	d1f7      	bne.n	80089c0 <_strtol_l.constprop.0+0x20>
 80089d0:	2c2d      	cmp	r4, #45	; 0x2d
 80089d2:	d132      	bne.n	8008a3a <_strtol_l.constprop.0+0x9a>
 80089d4:	782c      	ldrb	r4, [r5, #0]
 80089d6:	2701      	movs	r7, #1
 80089d8:	1cb5      	adds	r5, r6, #2
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d05b      	beq.n	8008a96 <_strtol_l.constprop.0+0xf6>
 80089de:	2b10      	cmp	r3, #16
 80089e0:	d109      	bne.n	80089f6 <_strtol_l.constprop.0+0x56>
 80089e2:	2c30      	cmp	r4, #48	; 0x30
 80089e4:	d107      	bne.n	80089f6 <_strtol_l.constprop.0+0x56>
 80089e6:	782c      	ldrb	r4, [r5, #0]
 80089e8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80089ec:	2c58      	cmp	r4, #88	; 0x58
 80089ee:	d14d      	bne.n	8008a8c <_strtol_l.constprop.0+0xec>
 80089f0:	786c      	ldrb	r4, [r5, #1]
 80089f2:	2310      	movs	r3, #16
 80089f4:	3502      	adds	r5, #2
 80089f6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80089fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80089fe:	f04f 0c00 	mov.w	ip, #0
 8008a02:	fbb8 f9f3 	udiv	r9, r8, r3
 8008a06:	4666      	mov	r6, ip
 8008a08:	fb03 8a19 	mls	sl, r3, r9, r8
 8008a0c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008a10:	f1be 0f09 	cmp.w	lr, #9
 8008a14:	d816      	bhi.n	8008a44 <_strtol_l.constprop.0+0xa4>
 8008a16:	4674      	mov	r4, lr
 8008a18:	42a3      	cmp	r3, r4
 8008a1a:	dd24      	ble.n	8008a66 <_strtol_l.constprop.0+0xc6>
 8008a1c:	f1bc 0f00 	cmp.w	ip, #0
 8008a20:	db1e      	blt.n	8008a60 <_strtol_l.constprop.0+0xc0>
 8008a22:	45b1      	cmp	r9, r6
 8008a24:	d31c      	bcc.n	8008a60 <_strtol_l.constprop.0+0xc0>
 8008a26:	d101      	bne.n	8008a2c <_strtol_l.constprop.0+0x8c>
 8008a28:	45a2      	cmp	sl, r4
 8008a2a:	db19      	blt.n	8008a60 <_strtol_l.constprop.0+0xc0>
 8008a2c:	fb06 4603 	mla	r6, r6, r3, r4
 8008a30:	f04f 0c01 	mov.w	ip, #1
 8008a34:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a38:	e7e8      	b.n	8008a0c <_strtol_l.constprop.0+0x6c>
 8008a3a:	2c2b      	cmp	r4, #43	; 0x2b
 8008a3c:	bf04      	itt	eq
 8008a3e:	782c      	ldrbeq	r4, [r5, #0]
 8008a40:	1cb5      	addeq	r5, r6, #2
 8008a42:	e7ca      	b.n	80089da <_strtol_l.constprop.0+0x3a>
 8008a44:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008a48:	f1be 0f19 	cmp.w	lr, #25
 8008a4c:	d801      	bhi.n	8008a52 <_strtol_l.constprop.0+0xb2>
 8008a4e:	3c37      	subs	r4, #55	; 0x37
 8008a50:	e7e2      	b.n	8008a18 <_strtol_l.constprop.0+0x78>
 8008a52:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008a56:	f1be 0f19 	cmp.w	lr, #25
 8008a5a:	d804      	bhi.n	8008a66 <_strtol_l.constprop.0+0xc6>
 8008a5c:	3c57      	subs	r4, #87	; 0x57
 8008a5e:	e7db      	b.n	8008a18 <_strtol_l.constprop.0+0x78>
 8008a60:	f04f 3cff 	mov.w	ip, #4294967295
 8008a64:	e7e6      	b.n	8008a34 <_strtol_l.constprop.0+0x94>
 8008a66:	f1bc 0f00 	cmp.w	ip, #0
 8008a6a:	da05      	bge.n	8008a78 <_strtol_l.constprop.0+0xd8>
 8008a6c:	2322      	movs	r3, #34	; 0x22
 8008a6e:	6003      	str	r3, [r0, #0]
 8008a70:	4646      	mov	r6, r8
 8008a72:	b942      	cbnz	r2, 8008a86 <_strtol_l.constprop.0+0xe6>
 8008a74:	4630      	mov	r0, r6
 8008a76:	e79e      	b.n	80089b6 <_strtol_l.constprop.0+0x16>
 8008a78:	b107      	cbz	r7, 8008a7c <_strtol_l.constprop.0+0xdc>
 8008a7a:	4276      	negs	r6, r6
 8008a7c:	2a00      	cmp	r2, #0
 8008a7e:	d0f9      	beq.n	8008a74 <_strtol_l.constprop.0+0xd4>
 8008a80:	f1bc 0f00 	cmp.w	ip, #0
 8008a84:	d000      	beq.n	8008a88 <_strtol_l.constprop.0+0xe8>
 8008a86:	1e69      	subs	r1, r5, #1
 8008a88:	6011      	str	r1, [r2, #0]
 8008a8a:	e7f3      	b.n	8008a74 <_strtol_l.constprop.0+0xd4>
 8008a8c:	2430      	movs	r4, #48	; 0x30
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d1b1      	bne.n	80089f6 <_strtol_l.constprop.0+0x56>
 8008a92:	2308      	movs	r3, #8
 8008a94:	e7af      	b.n	80089f6 <_strtol_l.constprop.0+0x56>
 8008a96:	2c30      	cmp	r4, #48	; 0x30
 8008a98:	d0a5      	beq.n	80089e6 <_strtol_l.constprop.0+0x46>
 8008a9a:	230a      	movs	r3, #10
 8008a9c:	e7ab      	b.n	80089f6 <_strtol_l.constprop.0+0x56>
 8008a9e:	bf00      	nop
 8008aa0:	08009f0d 	.word	0x08009f0d

08008aa4 <strtol>:
 8008aa4:	4613      	mov	r3, r2
 8008aa6:	460a      	mov	r2, r1
 8008aa8:	4601      	mov	r1, r0
 8008aaa:	4802      	ldr	r0, [pc, #8]	; (8008ab4 <strtol+0x10>)
 8008aac:	6800      	ldr	r0, [r0, #0]
 8008aae:	f7ff bf77 	b.w	80089a0 <_strtol_l.constprop.0>
 8008ab2:	bf00      	nop
 8008ab4:	20000024 	.word	0x20000024

08008ab8 <__swbuf_r>:
 8008ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aba:	460e      	mov	r6, r1
 8008abc:	4614      	mov	r4, r2
 8008abe:	4605      	mov	r5, r0
 8008ac0:	b118      	cbz	r0, 8008aca <__swbuf_r+0x12>
 8008ac2:	6983      	ldr	r3, [r0, #24]
 8008ac4:	b90b      	cbnz	r3, 8008aca <__swbuf_r+0x12>
 8008ac6:	f000 f9d1 	bl	8008e6c <__sinit>
 8008aca:	4b21      	ldr	r3, [pc, #132]	; (8008b50 <__swbuf_r+0x98>)
 8008acc:	429c      	cmp	r4, r3
 8008ace:	d12b      	bne.n	8008b28 <__swbuf_r+0x70>
 8008ad0:	686c      	ldr	r4, [r5, #4]
 8008ad2:	69a3      	ldr	r3, [r4, #24]
 8008ad4:	60a3      	str	r3, [r4, #8]
 8008ad6:	89a3      	ldrh	r3, [r4, #12]
 8008ad8:	071a      	lsls	r2, r3, #28
 8008ada:	d52f      	bpl.n	8008b3c <__swbuf_r+0x84>
 8008adc:	6923      	ldr	r3, [r4, #16]
 8008ade:	b36b      	cbz	r3, 8008b3c <__swbuf_r+0x84>
 8008ae0:	6923      	ldr	r3, [r4, #16]
 8008ae2:	6820      	ldr	r0, [r4, #0]
 8008ae4:	1ac0      	subs	r0, r0, r3
 8008ae6:	6963      	ldr	r3, [r4, #20]
 8008ae8:	b2f6      	uxtb	r6, r6
 8008aea:	4283      	cmp	r3, r0
 8008aec:	4637      	mov	r7, r6
 8008aee:	dc04      	bgt.n	8008afa <__swbuf_r+0x42>
 8008af0:	4621      	mov	r1, r4
 8008af2:	4628      	mov	r0, r5
 8008af4:	f000 f926 	bl	8008d44 <_fflush_r>
 8008af8:	bb30      	cbnz	r0, 8008b48 <__swbuf_r+0x90>
 8008afa:	68a3      	ldr	r3, [r4, #8]
 8008afc:	3b01      	subs	r3, #1
 8008afe:	60a3      	str	r3, [r4, #8]
 8008b00:	6823      	ldr	r3, [r4, #0]
 8008b02:	1c5a      	adds	r2, r3, #1
 8008b04:	6022      	str	r2, [r4, #0]
 8008b06:	701e      	strb	r6, [r3, #0]
 8008b08:	6963      	ldr	r3, [r4, #20]
 8008b0a:	3001      	adds	r0, #1
 8008b0c:	4283      	cmp	r3, r0
 8008b0e:	d004      	beq.n	8008b1a <__swbuf_r+0x62>
 8008b10:	89a3      	ldrh	r3, [r4, #12]
 8008b12:	07db      	lsls	r3, r3, #31
 8008b14:	d506      	bpl.n	8008b24 <__swbuf_r+0x6c>
 8008b16:	2e0a      	cmp	r6, #10
 8008b18:	d104      	bne.n	8008b24 <__swbuf_r+0x6c>
 8008b1a:	4621      	mov	r1, r4
 8008b1c:	4628      	mov	r0, r5
 8008b1e:	f000 f911 	bl	8008d44 <_fflush_r>
 8008b22:	b988      	cbnz	r0, 8008b48 <__swbuf_r+0x90>
 8008b24:	4638      	mov	r0, r7
 8008b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b28:	4b0a      	ldr	r3, [pc, #40]	; (8008b54 <__swbuf_r+0x9c>)
 8008b2a:	429c      	cmp	r4, r3
 8008b2c:	d101      	bne.n	8008b32 <__swbuf_r+0x7a>
 8008b2e:	68ac      	ldr	r4, [r5, #8]
 8008b30:	e7cf      	b.n	8008ad2 <__swbuf_r+0x1a>
 8008b32:	4b09      	ldr	r3, [pc, #36]	; (8008b58 <__swbuf_r+0xa0>)
 8008b34:	429c      	cmp	r4, r3
 8008b36:	bf08      	it	eq
 8008b38:	68ec      	ldreq	r4, [r5, #12]
 8008b3a:	e7ca      	b.n	8008ad2 <__swbuf_r+0x1a>
 8008b3c:	4621      	mov	r1, r4
 8008b3e:	4628      	mov	r0, r5
 8008b40:	f000 f80c 	bl	8008b5c <__swsetup_r>
 8008b44:	2800      	cmp	r0, #0
 8008b46:	d0cb      	beq.n	8008ae0 <__swbuf_r+0x28>
 8008b48:	f04f 37ff 	mov.w	r7, #4294967295
 8008b4c:	e7ea      	b.n	8008b24 <__swbuf_r+0x6c>
 8008b4e:	bf00      	nop
 8008b50:	0800a030 	.word	0x0800a030
 8008b54:	0800a050 	.word	0x0800a050
 8008b58:	0800a010 	.word	0x0800a010

08008b5c <__swsetup_r>:
 8008b5c:	4b32      	ldr	r3, [pc, #200]	; (8008c28 <__swsetup_r+0xcc>)
 8008b5e:	b570      	push	{r4, r5, r6, lr}
 8008b60:	681d      	ldr	r5, [r3, #0]
 8008b62:	4606      	mov	r6, r0
 8008b64:	460c      	mov	r4, r1
 8008b66:	b125      	cbz	r5, 8008b72 <__swsetup_r+0x16>
 8008b68:	69ab      	ldr	r3, [r5, #24]
 8008b6a:	b913      	cbnz	r3, 8008b72 <__swsetup_r+0x16>
 8008b6c:	4628      	mov	r0, r5
 8008b6e:	f000 f97d 	bl	8008e6c <__sinit>
 8008b72:	4b2e      	ldr	r3, [pc, #184]	; (8008c2c <__swsetup_r+0xd0>)
 8008b74:	429c      	cmp	r4, r3
 8008b76:	d10f      	bne.n	8008b98 <__swsetup_r+0x3c>
 8008b78:	686c      	ldr	r4, [r5, #4]
 8008b7a:	89a3      	ldrh	r3, [r4, #12]
 8008b7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b80:	0719      	lsls	r1, r3, #28
 8008b82:	d42c      	bmi.n	8008bde <__swsetup_r+0x82>
 8008b84:	06dd      	lsls	r5, r3, #27
 8008b86:	d411      	bmi.n	8008bac <__swsetup_r+0x50>
 8008b88:	2309      	movs	r3, #9
 8008b8a:	6033      	str	r3, [r6, #0]
 8008b8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b90:	81a3      	strh	r3, [r4, #12]
 8008b92:	f04f 30ff 	mov.w	r0, #4294967295
 8008b96:	e03e      	b.n	8008c16 <__swsetup_r+0xba>
 8008b98:	4b25      	ldr	r3, [pc, #148]	; (8008c30 <__swsetup_r+0xd4>)
 8008b9a:	429c      	cmp	r4, r3
 8008b9c:	d101      	bne.n	8008ba2 <__swsetup_r+0x46>
 8008b9e:	68ac      	ldr	r4, [r5, #8]
 8008ba0:	e7eb      	b.n	8008b7a <__swsetup_r+0x1e>
 8008ba2:	4b24      	ldr	r3, [pc, #144]	; (8008c34 <__swsetup_r+0xd8>)
 8008ba4:	429c      	cmp	r4, r3
 8008ba6:	bf08      	it	eq
 8008ba8:	68ec      	ldreq	r4, [r5, #12]
 8008baa:	e7e6      	b.n	8008b7a <__swsetup_r+0x1e>
 8008bac:	0758      	lsls	r0, r3, #29
 8008bae:	d512      	bpl.n	8008bd6 <__swsetup_r+0x7a>
 8008bb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bb2:	b141      	cbz	r1, 8008bc6 <__swsetup_r+0x6a>
 8008bb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bb8:	4299      	cmp	r1, r3
 8008bba:	d002      	beq.n	8008bc2 <__swsetup_r+0x66>
 8008bbc:	4630      	mov	r0, r6
 8008bbe:	f000 fa5b 	bl	8009078 <_free_r>
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	6363      	str	r3, [r4, #52]	; 0x34
 8008bc6:	89a3      	ldrh	r3, [r4, #12]
 8008bc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008bcc:	81a3      	strh	r3, [r4, #12]
 8008bce:	2300      	movs	r3, #0
 8008bd0:	6063      	str	r3, [r4, #4]
 8008bd2:	6923      	ldr	r3, [r4, #16]
 8008bd4:	6023      	str	r3, [r4, #0]
 8008bd6:	89a3      	ldrh	r3, [r4, #12]
 8008bd8:	f043 0308 	orr.w	r3, r3, #8
 8008bdc:	81a3      	strh	r3, [r4, #12]
 8008bde:	6923      	ldr	r3, [r4, #16]
 8008be0:	b94b      	cbnz	r3, 8008bf6 <__swsetup_r+0x9a>
 8008be2:	89a3      	ldrh	r3, [r4, #12]
 8008be4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bec:	d003      	beq.n	8008bf6 <__swsetup_r+0x9a>
 8008bee:	4621      	mov	r1, r4
 8008bf0:	4630      	mov	r0, r6
 8008bf2:	f000 fa01 	bl	8008ff8 <__smakebuf_r>
 8008bf6:	89a0      	ldrh	r0, [r4, #12]
 8008bf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008bfc:	f010 0301 	ands.w	r3, r0, #1
 8008c00:	d00a      	beq.n	8008c18 <__swsetup_r+0xbc>
 8008c02:	2300      	movs	r3, #0
 8008c04:	60a3      	str	r3, [r4, #8]
 8008c06:	6963      	ldr	r3, [r4, #20]
 8008c08:	425b      	negs	r3, r3
 8008c0a:	61a3      	str	r3, [r4, #24]
 8008c0c:	6923      	ldr	r3, [r4, #16]
 8008c0e:	b943      	cbnz	r3, 8008c22 <__swsetup_r+0xc6>
 8008c10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008c14:	d1ba      	bne.n	8008b8c <__swsetup_r+0x30>
 8008c16:	bd70      	pop	{r4, r5, r6, pc}
 8008c18:	0781      	lsls	r1, r0, #30
 8008c1a:	bf58      	it	pl
 8008c1c:	6963      	ldrpl	r3, [r4, #20]
 8008c1e:	60a3      	str	r3, [r4, #8]
 8008c20:	e7f4      	b.n	8008c0c <__swsetup_r+0xb0>
 8008c22:	2000      	movs	r0, #0
 8008c24:	e7f7      	b.n	8008c16 <__swsetup_r+0xba>
 8008c26:	bf00      	nop
 8008c28:	20000024 	.word	0x20000024
 8008c2c:	0800a030 	.word	0x0800a030
 8008c30:	0800a050 	.word	0x0800a050
 8008c34:	0800a010 	.word	0x0800a010

08008c38 <__sflush_r>:
 8008c38:	898a      	ldrh	r2, [r1, #12]
 8008c3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c3e:	4605      	mov	r5, r0
 8008c40:	0710      	lsls	r0, r2, #28
 8008c42:	460c      	mov	r4, r1
 8008c44:	d458      	bmi.n	8008cf8 <__sflush_r+0xc0>
 8008c46:	684b      	ldr	r3, [r1, #4]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	dc05      	bgt.n	8008c58 <__sflush_r+0x20>
 8008c4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	dc02      	bgt.n	8008c58 <__sflush_r+0x20>
 8008c52:	2000      	movs	r0, #0
 8008c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c5a:	2e00      	cmp	r6, #0
 8008c5c:	d0f9      	beq.n	8008c52 <__sflush_r+0x1a>
 8008c5e:	2300      	movs	r3, #0
 8008c60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c64:	682f      	ldr	r7, [r5, #0]
 8008c66:	602b      	str	r3, [r5, #0]
 8008c68:	d032      	beq.n	8008cd0 <__sflush_r+0x98>
 8008c6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c6c:	89a3      	ldrh	r3, [r4, #12]
 8008c6e:	075a      	lsls	r2, r3, #29
 8008c70:	d505      	bpl.n	8008c7e <__sflush_r+0x46>
 8008c72:	6863      	ldr	r3, [r4, #4]
 8008c74:	1ac0      	subs	r0, r0, r3
 8008c76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c78:	b10b      	cbz	r3, 8008c7e <__sflush_r+0x46>
 8008c7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c7c:	1ac0      	subs	r0, r0, r3
 8008c7e:	2300      	movs	r3, #0
 8008c80:	4602      	mov	r2, r0
 8008c82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c84:	6a21      	ldr	r1, [r4, #32]
 8008c86:	4628      	mov	r0, r5
 8008c88:	47b0      	blx	r6
 8008c8a:	1c43      	adds	r3, r0, #1
 8008c8c:	89a3      	ldrh	r3, [r4, #12]
 8008c8e:	d106      	bne.n	8008c9e <__sflush_r+0x66>
 8008c90:	6829      	ldr	r1, [r5, #0]
 8008c92:	291d      	cmp	r1, #29
 8008c94:	d82c      	bhi.n	8008cf0 <__sflush_r+0xb8>
 8008c96:	4a2a      	ldr	r2, [pc, #168]	; (8008d40 <__sflush_r+0x108>)
 8008c98:	40ca      	lsrs	r2, r1
 8008c9a:	07d6      	lsls	r6, r2, #31
 8008c9c:	d528      	bpl.n	8008cf0 <__sflush_r+0xb8>
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	6062      	str	r2, [r4, #4]
 8008ca2:	04d9      	lsls	r1, r3, #19
 8008ca4:	6922      	ldr	r2, [r4, #16]
 8008ca6:	6022      	str	r2, [r4, #0]
 8008ca8:	d504      	bpl.n	8008cb4 <__sflush_r+0x7c>
 8008caa:	1c42      	adds	r2, r0, #1
 8008cac:	d101      	bne.n	8008cb2 <__sflush_r+0x7a>
 8008cae:	682b      	ldr	r3, [r5, #0]
 8008cb0:	b903      	cbnz	r3, 8008cb4 <__sflush_r+0x7c>
 8008cb2:	6560      	str	r0, [r4, #84]	; 0x54
 8008cb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cb6:	602f      	str	r7, [r5, #0]
 8008cb8:	2900      	cmp	r1, #0
 8008cba:	d0ca      	beq.n	8008c52 <__sflush_r+0x1a>
 8008cbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cc0:	4299      	cmp	r1, r3
 8008cc2:	d002      	beq.n	8008cca <__sflush_r+0x92>
 8008cc4:	4628      	mov	r0, r5
 8008cc6:	f000 f9d7 	bl	8009078 <_free_r>
 8008cca:	2000      	movs	r0, #0
 8008ccc:	6360      	str	r0, [r4, #52]	; 0x34
 8008cce:	e7c1      	b.n	8008c54 <__sflush_r+0x1c>
 8008cd0:	6a21      	ldr	r1, [r4, #32]
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	4628      	mov	r0, r5
 8008cd6:	47b0      	blx	r6
 8008cd8:	1c41      	adds	r1, r0, #1
 8008cda:	d1c7      	bne.n	8008c6c <__sflush_r+0x34>
 8008cdc:	682b      	ldr	r3, [r5, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d0c4      	beq.n	8008c6c <__sflush_r+0x34>
 8008ce2:	2b1d      	cmp	r3, #29
 8008ce4:	d001      	beq.n	8008cea <__sflush_r+0xb2>
 8008ce6:	2b16      	cmp	r3, #22
 8008ce8:	d101      	bne.n	8008cee <__sflush_r+0xb6>
 8008cea:	602f      	str	r7, [r5, #0]
 8008cec:	e7b1      	b.n	8008c52 <__sflush_r+0x1a>
 8008cee:	89a3      	ldrh	r3, [r4, #12]
 8008cf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cf4:	81a3      	strh	r3, [r4, #12]
 8008cf6:	e7ad      	b.n	8008c54 <__sflush_r+0x1c>
 8008cf8:	690f      	ldr	r7, [r1, #16]
 8008cfa:	2f00      	cmp	r7, #0
 8008cfc:	d0a9      	beq.n	8008c52 <__sflush_r+0x1a>
 8008cfe:	0793      	lsls	r3, r2, #30
 8008d00:	680e      	ldr	r6, [r1, #0]
 8008d02:	bf08      	it	eq
 8008d04:	694b      	ldreq	r3, [r1, #20]
 8008d06:	600f      	str	r7, [r1, #0]
 8008d08:	bf18      	it	ne
 8008d0a:	2300      	movne	r3, #0
 8008d0c:	eba6 0807 	sub.w	r8, r6, r7
 8008d10:	608b      	str	r3, [r1, #8]
 8008d12:	f1b8 0f00 	cmp.w	r8, #0
 8008d16:	dd9c      	ble.n	8008c52 <__sflush_r+0x1a>
 8008d18:	6a21      	ldr	r1, [r4, #32]
 8008d1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d1c:	4643      	mov	r3, r8
 8008d1e:	463a      	mov	r2, r7
 8008d20:	4628      	mov	r0, r5
 8008d22:	47b0      	blx	r6
 8008d24:	2800      	cmp	r0, #0
 8008d26:	dc06      	bgt.n	8008d36 <__sflush_r+0xfe>
 8008d28:	89a3      	ldrh	r3, [r4, #12]
 8008d2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d2e:	81a3      	strh	r3, [r4, #12]
 8008d30:	f04f 30ff 	mov.w	r0, #4294967295
 8008d34:	e78e      	b.n	8008c54 <__sflush_r+0x1c>
 8008d36:	4407      	add	r7, r0
 8008d38:	eba8 0800 	sub.w	r8, r8, r0
 8008d3c:	e7e9      	b.n	8008d12 <__sflush_r+0xda>
 8008d3e:	bf00      	nop
 8008d40:	20400001 	.word	0x20400001

08008d44 <_fflush_r>:
 8008d44:	b538      	push	{r3, r4, r5, lr}
 8008d46:	690b      	ldr	r3, [r1, #16]
 8008d48:	4605      	mov	r5, r0
 8008d4a:	460c      	mov	r4, r1
 8008d4c:	b913      	cbnz	r3, 8008d54 <_fflush_r+0x10>
 8008d4e:	2500      	movs	r5, #0
 8008d50:	4628      	mov	r0, r5
 8008d52:	bd38      	pop	{r3, r4, r5, pc}
 8008d54:	b118      	cbz	r0, 8008d5e <_fflush_r+0x1a>
 8008d56:	6983      	ldr	r3, [r0, #24]
 8008d58:	b90b      	cbnz	r3, 8008d5e <_fflush_r+0x1a>
 8008d5a:	f000 f887 	bl	8008e6c <__sinit>
 8008d5e:	4b14      	ldr	r3, [pc, #80]	; (8008db0 <_fflush_r+0x6c>)
 8008d60:	429c      	cmp	r4, r3
 8008d62:	d11b      	bne.n	8008d9c <_fflush_r+0x58>
 8008d64:	686c      	ldr	r4, [r5, #4]
 8008d66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d0ef      	beq.n	8008d4e <_fflush_r+0xa>
 8008d6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d70:	07d0      	lsls	r0, r2, #31
 8008d72:	d404      	bmi.n	8008d7e <_fflush_r+0x3a>
 8008d74:	0599      	lsls	r1, r3, #22
 8008d76:	d402      	bmi.n	8008d7e <_fflush_r+0x3a>
 8008d78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d7a:	f000 f915 	bl	8008fa8 <__retarget_lock_acquire_recursive>
 8008d7e:	4628      	mov	r0, r5
 8008d80:	4621      	mov	r1, r4
 8008d82:	f7ff ff59 	bl	8008c38 <__sflush_r>
 8008d86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d88:	07da      	lsls	r2, r3, #31
 8008d8a:	4605      	mov	r5, r0
 8008d8c:	d4e0      	bmi.n	8008d50 <_fflush_r+0xc>
 8008d8e:	89a3      	ldrh	r3, [r4, #12]
 8008d90:	059b      	lsls	r3, r3, #22
 8008d92:	d4dd      	bmi.n	8008d50 <_fflush_r+0xc>
 8008d94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d96:	f000 f908 	bl	8008faa <__retarget_lock_release_recursive>
 8008d9a:	e7d9      	b.n	8008d50 <_fflush_r+0xc>
 8008d9c:	4b05      	ldr	r3, [pc, #20]	; (8008db4 <_fflush_r+0x70>)
 8008d9e:	429c      	cmp	r4, r3
 8008da0:	d101      	bne.n	8008da6 <_fflush_r+0x62>
 8008da2:	68ac      	ldr	r4, [r5, #8]
 8008da4:	e7df      	b.n	8008d66 <_fflush_r+0x22>
 8008da6:	4b04      	ldr	r3, [pc, #16]	; (8008db8 <_fflush_r+0x74>)
 8008da8:	429c      	cmp	r4, r3
 8008daa:	bf08      	it	eq
 8008dac:	68ec      	ldreq	r4, [r5, #12]
 8008dae:	e7da      	b.n	8008d66 <_fflush_r+0x22>
 8008db0:	0800a030 	.word	0x0800a030
 8008db4:	0800a050 	.word	0x0800a050
 8008db8:	0800a010 	.word	0x0800a010

08008dbc <std>:
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	b510      	push	{r4, lr}
 8008dc0:	4604      	mov	r4, r0
 8008dc2:	e9c0 3300 	strd	r3, r3, [r0]
 8008dc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008dca:	6083      	str	r3, [r0, #8]
 8008dcc:	8181      	strh	r1, [r0, #12]
 8008dce:	6643      	str	r3, [r0, #100]	; 0x64
 8008dd0:	81c2      	strh	r2, [r0, #14]
 8008dd2:	6183      	str	r3, [r0, #24]
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	2208      	movs	r2, #8
 8008dd8:	305c      	adds	r0, #92	; 0x5c
 8008dda:	f7ff fd17 	bl	800880c <memset>
 8008dde:	4b05      	ldr	r3, [pc, #20]	; (8008df4 <std+0x38>)
 8008de0:	6263      	str	r3, [r4, #36]	; 0x24
 8008de2:	4b05      	ldr	r3, [pc, #20]	; (8008df8 <std+0x3c>)
 8008de4:	62a3      	str	r3, [r4, #40]	; 0x28
 8008de6:	4b05      	ldr	r3, [pc, #20]	; (8008dfc <std+0x40>)
 8008de8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008dea:	4b05      	ldr	r3, [pc, #20]	; (8008e00 <std+0x44>)
 8008dec:	6224      	str	r4, [r4, #32]
 8008dee:	6323      	str	r3, [r4, #48]	; 0x30
 8008df0:	bd10      	pop	{r4, pc}
 8008df2:	bf00      	nop
 8008df4:	08009aed 	.word	0x08009aed
 8008df8:	08009b0f 	.word	0x08009b0f
 8008dfc:	08009b47 	.word	0x08009b47
 8008e00:	08009b6b 	.word	0x08009b6b

08008e04 <_cleanup_r>:
 8008e04:	4901      	ldr	r1, [pc, #4]	; (8008e0c <_cleanup_r+0x8>)
 8008e06:	f000 b8af 	b.w	8008f68 <_fwalk_reent>
 8008e0a:	bf00      	nop
 8008e0c:	08008d45 	.word	0x08008d45

08008e10 <__sfmoreglue>:
 8008e10:	b570      	push	{r4, r5, r6, lr}
 8008e12:	2268      	movs	r2, #104	; 0x68
 8008e14:	1e4d      	subs	r5, r1, #1
 8008e16:	4355      	muls	r5, r2
 8008e18:	460e      	mov	r6, r1
 8008e1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008e1e:	f000 f997 	bl	8009150 <_malloc_r>
 8008e22:	4604      	mov	r4, r0
 8008e24:	b140      	cbz	r0, 8008e38 <__sfmoreglue+0x28>
 8008e26:	2100      	movs	r1, #0
 8008e28:	e9c0 1600 	strd	r1, r6, [r0]
 8008e2c:	300c      	adds	r0, #12
 8008e2e:	60a0      	str	r0, [r4, #8]
 8008e30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008e34:	f7ff fcea 	bl	800880c <memset>
 8008e38:	4620      	mov	r0, r4
 8008e3a:	bd70      	pop	{r4, r5, r6, pc}

08008e3c <__sfp_lock_acquire>:
 8008e3c:	4801      	ldr	r0, [pc, #4]	; (8008e44 <__sfp_lock_acquire+0x8>)
 8008e3e:	f000 b8b3 	b.w	8008fa8 <__retarget_lock_acquire_recursive>
 8008e42:	bf00      	nop
 8008e44:	20000db9 	.word	0x20000db9

08008e48 <__sfp_lock_release>:
 8008e48:	4801      	ldr	r0, [pc, #4]	; (8008e50 <__sfp_lock_release+0x8>)
 8008e4a:	f000 b8ae 	b.w	8008faa <__retarget_lock_release_recursive>
 8008e4e:	bf00      	nop
 8008e50:	20000db9 	.word	0x20000db9

08008e54 <__sinit_lock_acquire>:
 8008e54:	4801      	ldr	r0, [pc, #4]	; (8008e5c <__sinit_lock_acquire+0x8>)
 8008e56:	f000 b8a7 	b.w	8008fa8 <__retarget_lock_acquire_recursive>
 8008e5a:	bf00      	nop
 8008e5c:	20000dba 	.word	0x20000dba

08008e60 <__sinit_lock_release>:
 8008e60:	4801      	ldr	r0, [pc, #4]	; (8008e68 <__sinit_lock_release+0x8>)
 8008e62:	f000 b8a2 	b.w	8008faa <__retarget_lock_release_recursive>
 8008e66:	bf00      	nop
 8008e68:	20000dba 	.word	0x20000dba

08008e6c <__sinit>:
 8008e6c:	b510      	push	{r4, lr}
 8008e6e:	4604      	mov	r4, r0
 8008e70:	f7ff fff0 	bl	8008e54 <__sinit_lock_acquire>
 8008e74:	69a3      	ldr	r3, [r4, #24]
 8008e76:	b11b      	cbz	r3, 8008e80 <__sinit+0x14>
 8008e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e7c:	f7ff bff0 	b.w	8008e60 <__sinit_lock_release>
 8008e80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008e84:	6523      	str	r3, [r4, #80]	; 0x50
 8008e86:	4b13      	ldr	r3, [pc, #76]	; (8008ed4 <__sinit+0x68>)
 8008e88:	4a13      	ldr	r2, [pc, #76]	; (8008ed8 <__sinit+0x6c>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008e8e:	42a3      	cmp	r3, r4
 8008e90:	bf04      	itt	eq
 8008e92:	2301      	moveq	r3, #1
 8008e94:	61a3      	streq	r3, [r4, #24]
 8008e96:	4620      	mov	r0, r4
 8008e98:	f000 f820 	bl	8008edc <__sfp>
 8008e9c:	6060      	str	r0, [r4, #4]
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	f000 f81c 	bl	8008edc <__sfp>
 8008ea4:	60a0      	str	r0, [r4, #8]
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	f000 f818 	bl	8008edc <__sfp>
 8008eac:	2200      	movs	r2, #0
 8008eae:	60e0      	str	r0, [r4, #12]
 8008eb0:	2104      	movs	r1, #4
 8008eb2:	6860      	ldr	r0, [r4, #4]
 8008eb4:	f7ff ff82 	bl	8008dbc <std>
 8008eb8:	68a0      	ldr	r0, [r4, #8]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	2109      	movs	r1, #9
 8008ebe:	f7ff ff7d 	bl	8008dbc <std>
 8008ec2:	68e0      	ldr	r0, [r4, #12]
 8008ec4:	2202      	movs	r2, #2
 8008ec6:	2112      	movs	r1, #18
 8008ec8:	f7ff ff78 	bl	8008dbc <std>
 8008ecc:	2301      	movs	r3, #1
 8008ece:	61a3      	str	r3, [r4, #24]
 8008ed0:	e7d2      	b.n	8008e78 <__sinit+0xc>
 8008ed2:	bf00      	nop
 8008ed4:	08009f08 	.word	0x08009f08
 8008ed8:	08008e05 	.word	0x08008e05

08008edc <__sfp>:
 8008edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ede:	4607      	mov	r7, r0
 8008ee0:	f7ff ffac 	bl	8008e3c <__sfp_lock_acquire>
 8008ee4:	4b1e      	ldr	r3, [pc, #120]	; (8008f60 <__sfp+0x84>)
 8008ee6:	681e      	ldr	r6, [r3, #0]
 8008ee8:	69b3      	ldr	r3, [r6, #24]
 8008eea:	b913      	cbnz	r3, 8008ef2 <__sfp+0x16>
 8008eec:	4630      	mov	r0, r6
 8008eee:	f7ff ffbd 	bl	8008e6c <__sinit>
 8008ef2:	3648      	adds	r6, #72	; 0x48
 8008ef4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008ef8:	3b01      	subs	r3, #1
 8008efa:	d503      	bpl.n	8008f04 <__sfp+0x28>
 8008efc:	6833      	ldr	r3, [r6, #0]
 8008efe:	b30b      	cbz	r3, 8008f44 <__sfp+0x68>
 8008f00:	6836      	ldr	r6, [r6, #0]
 8008f02:	e7f7      	b.n	8008ef4 <__sfp+0x18>
 8008f04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008f08:	b9d5      	cbnz	r5, 8008f40 <__sfp+0x64>
 8008f0a:	4b16      	ldr	r3, [pc, #88]	; (8008f64 <__sfp+0x88>)
 8008f0c:	60e3      	str	r3, [r4, #12]
 8008f0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f12:	6665      	str	r5, [r4, #100]	; 0x64
 8008f14:	f000 f847 	bl	8008fa6 <__retarget_lock_init_recursive>
 8008f18:	f7ff ff96 	bl	8008e48 <__sfp_lock_release>
 8008f1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008f20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008f24:	6025      	str	r5, [r4, #0]
 8008f26:	61a5      	str	r5, [r4, #24]
 8008f28:	2208      	movs	r2, #8
 8008f2a:	4629      	mov	r1, r5
 8008f2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008f30:	f7ff fc6c 	bl	800880c <memset>
 8008f34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008f38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008f3c:	4620      	mov	r0, r4
 8008f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f40:	3468      	adds	r4, #104	; 0x68
 8008f42:	e7d9      	b.n	8008ef8 <__sfp+0x1c>
 8008f44:	2104      	movs	r1, #4
 8008f46:	4638      	mov	r0, r7
 8008f48:	f7ff ff62 	bl	8008e10 <__sfmoreglue>
 8008f4c:	4604      	mov	r4, r0
 8008f4e:	6030      	str	r0, [r6, #0]
 8008f50:	2800      	cmp	r0, #0
 8008f52:	d1d5      	bne.n	8008f00 <__sfp+0x24>
 8008f54:	f7ff ff78 	bl	8008e48 <__sfp_lock_release>
 8008f58:	230c      	movs	r3, #12
 8008f5a:	603b      	str	r3, [r7, #0]
 8008f5c:	e7ee      	b.n	8008f3c <__sfp+0x60>
 8008f5e:	bf00      	nop
 8008f60:	08009f08 	.word	0x08009f08
 8008f64:	ffff0001 	.word	0xffff0001

08008f68 <_fwalk_reent>:
 8008f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f6c:	4606      	mov	r6, r0
 8008f6e:	4688      	mov	r8, r1
 8008f70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008f74:	2700      	movs	r7, #0
 8008f76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f7a:	f1b9 0901 	subs.w	r9, r9, #1
 8008f7e:	d505      	bpl.n	8008f8c <_fwalk_reent+0x24>
 8008f80:	6824      	ldr	r4, [r4, #0]
 8008f82:	2c00      	cmp	r4, #0
 8008f84:	d1f7      	bne.n	8008f76 <_fwalk_reent+0xe>
 8008f86:	4638      	mov	r0, r7
 8008f88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f8c:	89ab      	ldrh	r3, [r5, #12]
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d907      	bls.n	8008fa2 <_fwalk_reent+0x3a>
 8008f92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f96:	3301      	adds	r3, #1
 8008f98:	d003      	beq.n	8008fa2 <_fwalk_reent+0x3a>
 8008f9a:	4629      	mov	r1, r5
 8008f9c:	4630      	mov	r0, r6
 8008f9e:	47c0      	blx	r8
 8008fa0:	4307      	orrs	r7, r0
 8008fa2:	3568      	adds	r5, #104	; 0x68
 8008fa4:	e7e9      	b.n	8008f7a <_fwalk_reent+0x12>

08008fa6 <__retarget_lock_init_recursive>:
 8008fa6:	4770      	bx	lr

08008fa8 <__retarget_lock_acquire_recursive>:
 8008fa8:	4770      	bx	lr

08008faa <__retarget_lock_release_recursive>:
 8008faa:	4770      	bx	lr

08008fac <__swhatbuf_r>:
 8008fac:	b570      	push	{r4, r5, r6, lr}
 8008fae:	460e      	mov	r6, r1
 8008fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fb4:	2900      	cmp	r1, #0
 8008fb6:	b096      	sub	sp, #88	; 0x58
 8008fb8:	4614      	mov	r4, r2
 8008fba:	461d      	mov	r5, r3
 8008fbc:	da08      	bge.n	8008fd0 <__swhatbuf_r+0x24>
 8008fbe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	602a      	str	r2, [r5, #0]
 8008fc6:	061a      	lsls	r2, r3, #24
 8008fc8:	d410      	bmi.n	8008fec <__swhatbuf_r+0x40>
 8008fca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fce:	e00e      	b.n	8008fee <__swhatbuf_r+0x42>
 8008fd0:	466a      	mov	r2, sp
 8008fd2:	f000 fdf1 	bl	8009bb8 <_fstat_r>
 8008fd6:	2800      	cmp	r0, #0
 8008fd8:	dbf1      	blt.n	8008fbe <__swhatbuf_r+0x12>
 8008fda:	9a01      	ldr	r2, [sp, #4]
 8008fdc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008fe0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008fe4:	425a      	negs	r2, r3
 8008fe6:	415a      	adcs	r2, r3
 8008fe8:	602a      	str	r2, [r5, #0]
 8008fea:	e7ee      	b.n	8008fca <__swhatbuf_r+0x1e>
 8008fec:	2340      	movs	r3, #64	; 0x40
 8008fee:	2000      	movs	r0, #0
 8008ff0:	6023      	str	r3, [r4, #0]
 8008ff2:	b016      	add	sp, #88	; 0x58
 8008ff4:	bd70      	pop	{r4, r5, r6, pc}
	...

08008ff8 <__smakebuf_r>:
 8008ff8:	898b      	ldrh	r3, [r1, #12]
 8008ffa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ffc:	079d      	lsls	r5, r3, #30
 8008ffe:	4606      	mov	r6, r0
 8009000:	460c      	mov	r4, r1
 8009002:	d507      	bpl.n	8009014 <__smakebuf_r+0x1c>
 8009004:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009008:	6023      	str	r3, [r4, #0]
 800900a:	6123      	str	r3, [r4, #16]
 800900c:	2301      	movs	r3, #1
 800900e:	6163      	str	r3, [r4, #20]
 8009010:	b002      	add	sp, #8
 8009012:	bd70      	pop	{r4, r5, r6, pc}
 8009014:	ab01      	add	r3, sp, #4
 8009016:	466a      	mov	r2, sp
 8009018:	f7ff ffc8 	bl	8008fac <__swhatbuf_r>
 800901c:	9900      	ldr	r1, [sp, #0]
 800901e:	4605      	mov	r5, r0
 8009020:	4630      	mov	r0, r6
 8009022:	f000 f895 	bl	8009150 <_malloc_r>
 8009026:	b948      	cbnz	r0, 800903c <__smakebuf_r+0x44>
 8009028:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800902c:	059a      	lsls	r2, r3, #22
 800902e:	d4ef      	bmi.n	8009010 <__smakebuf_r+0x18>
 8009030:	f023 0303 	bic.w	r3, r3, #3
 8009034:	f043 0302 	orr.w	r3, r3, #2
 8009038:	81a3      	strh	r3, [r4, #12]
 800903a:	e7e3      	b.n	8009004 <__smakebuf_r+0xc>
 800903c:	4b0d      	ldr	r3, [pc, #52]	; (8009074 <__smakebuf_r+0x7c>)
 800903e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009040:	89a3      	ldrh	r3, [r4, #12]
 8009042:	6020      	str	r0, [r4, #0]
 8009044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009048:	81a3      	strh	r3, [r4, #12]
 800904a:	9b00      	ldr	r3, [sp, #0]
 800904c:	6163      	str	r3, [r4, #20]
 800904e:	9b01      	ldr	r3, [sp, #4]
 8009050:	6120      	str	r0, [r4, #16]
 8009052:	b15b      	cbz	r3, 800906c <__smakebuf_r+0x74>
 8009054:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009058:	4630      	mov	r0, r6
 800905a:	f000 fdbf 	bl	8009bdc <_isatty_r>
 800905e:	b128      	cbz	r0, 800906c <__smakebuf_r+0x74>
 8009060:	89a3      	ldrh	r3, [r4, #12]
 8009062:	f023 0303 	bic.w	r3, r3, #3
 8009066:	f043 0301 	orr.w	r3, r3, #1
 800906a:	81a3      	strh	r3, [r4, #12]
 800906c:	89a0      	ldrh	r0, [r4, #12]
 800906e:	4305      	orrs	r5, r0
 8009070:	81a5      	strh	r5, [r4, #12]
 8009072:	e7cd      	b.n	8009010 <__smakebuf_r+0x18>
 8009074:	08008e05 	.word	0x08008e05

08009078 <_free_r>:
 8009078:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800907a:	2900      	cmp	r1, #0
 800907c:	d044      	beq.n	8009108 <_free_r+0x90>
 800907e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009082:	9001      	str	r0, [sp, #4]
 8009084:	2b00      	cmp	r3, #0
 8009086:	f1a1 0404 	sub.w	r4, r1, #4
 800908a:	bfb8      	it	lt
 800908c:	18e4      	addlt	r4, r4, r3
 800908e:	f000 fdef 	bl	8009c70 <__malloc_lock>
 8009092:	4a1e      	ldr	r2, [pc, #120]	; (800910c <_free_r+0x94>)
 8009094:	9801      	ldr	r0, [sp, #4]
 8009096:	6813      	ldr	r3, [r2, #0]
 8009098:	b933      	cbnz	r3, 80090a8 <_free_r+0x30>
 800909a:	6063      	str	r3, [r4, #4]
 800909c:	6014      	str	r4, [r2, #0]
 800909e:	b003      	add	sp, #12
 80090a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80090a4:	f000 bdea 	b.w	8009c7c <__malloc_unlock>
 80090a8:	42a3      	cmp	r3, r4
 80090aa:	d908      	bls.n	80090be <_free_r+0x46>
 80090ac:	6825      	ldr	r5, [r4, #0]
 80090ae:	1961      	adds	r1, r4, r5
 80090b0:	428b      	cmp	r3, r1
 80090b2:	bf01      	itttt	eq
 80090b4:	6819      	ldreq	r1, [r3, #0]
 80090b6:	685b      	ldreq	r3, [r3, #4]
 80090b8:	1949      	addeq	r1, r1, r5
 80090ba:	6021      	streq	r1, [r4, #0]
 80090bc:	e7ed      	b.n	800909a <_free_r+0x22>
 80090be:	461a      	mov	r2, r3
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	b10b      	cbz	r3, 80090c8 <_free_r+0x50>
 80090c4:	42a3      	cmp	r3, r4
 80090c6:	d9fa      	bls.n	80090be <_free_r+0x46>
 80090c8:	6811      	ldr	r1, [r2, #0]
 80090ca:	1855      	adds	r5, r2, r1
 80090cc:	42a5      	cmp	r5, r4
 80090ce:	d10b      	bne.n	80090e8 <_free_r+0x70>
 80090d0:	6824      	ldr	r4, [r4, #0]
 80090d2:	4421      	add	r1, r4
 80090d4:	1854      	adds	r4, r2, r1
 80090d6:	42a3      	cmp	r3, r4
 80090d8:	6011      	str	r1, [r2, #0]
 80090da:	d1e0      	bne.n	800909e <_free_r+0x26>
 80090dc:	681c      	ldr	r4, [r3, #0]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	6053      	str	r3, [r2, #4]
 80090e2:	4421      	add	r1, r4
 80090e4:	6011      	str	r1, [r2, #0]
 80090e6:	e7da      	b.n	800909e <_free_r+0x26>
 80090e8:	d902      	bls.n	80090f0 <_free_r+0x78>
 80090ea:	230c      	movs	r3, #12
 80090ec:	6003      	str	r3, [r0, #0]
 80090ee:	e7d6      	b.n	800909e <_free_r+0x26>
 80090f0:	6825      	ldr	r5, [r4, #0]
 80090f2:	1961      	adds	r1, r4, r5
 80090f4:	428b      	cmp	r3, r1
 80090f6:	bf04      	itt	eq
 80090f8:	6819      	ldreq	r1, [r3, #0]
 80090fa:	685b      	ldreq	r3, [r3, #4]
 80090fc:	6063      	str	r3, [r4, #4]
 80090fe:	bf04      	itt	eq
 8009100:	1949      	addeq	r1, r1, r5
 8009102:	6021      	streq	r1, [r4, #0]
 8009104:	6054      	str	r4, [r2, #4]
 8009106:	e7ca      	b.n	800909e <_free_r+0x26>
 8009108:	b003      	add	sp, #12
 800910a:	bd30      	pop	{r4, r5, pc}
 800910c:	20000dbc 	.word	0x20000dbc

08009110 <sbrk_aligned>:
 8009110:	b570      	push	{r4, r5, r6, lr}
 8009112:	4e0e      	ldr	r6, [pc, #56]	; (800914c <sbrk_aligned+0x3c>)
 8009114:	460c      	mov	r4, r1
 8009116:	6831      	ldr	r1, [r6, #0]
 8009118:	4605      	mov	r5, r0
 800911a:	b911      	cbnz	r1, 8009122 <sbrk_aligned+0x12>
 800911c:	f000 fcd6 	bl	8009acc <_sbrk_r>
 8009120:	6030      	str	r0, [r6, #0]
 8009122:	4621      	mov	r1, r4
 8009124:	4628      	mov	r0, r5
 8009126:	f000 fcd1 	bl	8009acc <_sbrk_r>
 800912a:	1c43      	adds	r3, r0, #1
 800912c:	d00a      	beq.n	8009144 <sbrk_aligned+0x34>
 800912e:	1cc4      	adds	r4, r0, #3
 8009130:	f024 0403 	bic.w	r4, r4, #3
 8009134:	42a0      	cmp	r0, r4
 8009136:	d007      	beq.n	8009148 <sbrk_aligned+0x38>
 8009138:	1a21      	subs	r1, r4, r0
 800913a:	4628      	mov	r0, r5
 800913c:	f000 fcc6 	bl	8009acc <_sbrk_r>
 8009140:	3001      	adds	r0, #1
 8009142:	d101      	bne.n	8009148 <sbrk_aligned+0x38>
 8009144:	f04f 34ff 	mov.w	r4, #4294967295
 8009148:	4620      	mov	r0, r4
 800914a:	bd70      	pop	{r4, r5, r6, pc}
 800914c:	20000dc0 	.word	0x20000dc0

08009150 <_malloc_r>:
 8009150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009154:	1ccd      	adds	r5, r1, #3
 8009156:	f025 0503 	bic.w	r5, r5, #3
 800915a:	3508      	adds	r5, #8
 800915c:	2d0c      	cmp	r5, #12
 800915e:	bf38      	it	cc
 8009160:	250c      	movcc	r5, #12
 8009162:	2d00      	cmp	r5, #0
 8009164:	4607      	mov	r7, r0
 8009166:	db01      	blt.n	800916c <_malloc_r+0x1c>
 8009168:	42a9      	cmp	r1, r5
 800916a:	d905      	bls.n	8009178 <_malloc_r+0x28>
 800916c:	230c      	movs	r3, #12
 800916e:	603b      	str	r3, [r7, #0]
 8009170:	2600      	movs	r6, #0
 8009172:	4630      	mov	r0, r6
 8009174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009178:	4e2e      	ldr	r6, [pc, #184]	; (8009234 <_malloc_r+0xe4>)
 800917a:	f000 fd79 	bl	8009c70 <__malloc_lock>
 800917e:	6833      	ldr	r3, [r6, #0]
 8009180:	461c      	mov	r4, r3
 8009182:	bb34      	cbnz	r4, 80091d2 <_malloc_r+0x82>
 8009184:	4629      	mov	r1, r5
 8009186:	4638      	mov	r0, r7
 8009188:	f7ff ffc2 	bl	8009110 <sbrk_aligned>
 800918c:	1c43      	adds	r3, r0, #1
 800918e:	4604      	mov	r4, r0
 8009190:	d14d      	bne.n	800922e <_malloc_r+0xde>
 8009192:	6834      	ldr	r4, [r6, #0]
 8009194:	4626      	mov	r6, r4
 8009196:	2e00      	cmp	r6, #0
 8009198:	d140      	bne.n	800921c <_malloc_r+0xcc>
 800919a:	6823      	ldr	r3, [r4, #0]
 800919c:	4631      	mov	r1, r6
 800919e:	4638      	mov	r0, r7
 80091a0:	eb04 0803 	add.w	r8, r4, r3
 80091a4:	f000 fc92 	bl	8009acc <_sbrk_r>
 80091a8:	4580      	cmp	r8, r0
 80091aa:	d13a      	bne.n	8009222 <_malloc_r+0xd2>
 80091ac:	6821      	ldr	r1, [r4, #0]
 80091ae:	3503      	adds	r5, #3
 80091b0:	1a6d      	subs	r5, r5, r1
 80091b2:	f025 0503 	bic.w	r5, r5, #3
 80091b6:	3508      	adds	r5, #8
 80091b8:	2d0c      	cmp	r5, #12
 80091ba:	bf38      	it	cc
 80091bc:	250c      	movcc	r5, #12
 80091be:	4629      	mov	r1, r5
 80091c0:	4638      	mov	r0, r7
 80091c2:	f7ff ffa5 	bl	8009110 <sbrk_aligned>
 80091c6:	3001      	adds	r0, #1
 80091c8:	d02b      	beq.n	8009222 <_malloc_r+0xd2>
 80091ca:	6823      	ldr	r3, [r4, #0]
 80091cc:	442b      	add	r3, r5
 80091ce:	6023      	str	r3, [r4, #0]
 80091d0:	e00e      	b.n	80091f0 <_malloc_r+0xa0>
 80091d2:	6822      	ldr	r2, [r4, #0]
 80091d4:	1b52      	subs	r2, r2, r5
 80091d6:	d41e      	bmi.n	8009216 <_malloc_r+0xc6>
 80091d8:	2a0b      	cmp	r2, #11
 80091da:	d916      	bls.n	800920a <_malloc_r+0xba>
 80091dc:	1961      	adds	r1, r4, r5
 80091de:	42a3      	cmp	r3, r4
 80091e0:	6025      	str	r5, [r4, #0]
 80091e2:	bf18      	it	ne
 80091e4:	6059      	strne	r1, [r3, #4]
 80091e6:	6863      	ldr	r3, [r4, #4]
 80091e8:	bf08      	it	eq
 80091ea:	6031      	streq	r1, [r6, #0]
 80091ec:	5162      	str	r2, [r4, r5]
 80091ee:	604b      	str	r3, [r1, #4]
 80091f0:	4638      	mov	r0, r7
 80091f2:	f104 060b 	add.w	r6, r4, #11
 80091f6:	f000 fd41 	bl	8009c7c <__malloc_unlock>
 80091fa:	f026 0607 	bic.w	r6, r6, #7
 80091fe:	1d23      	adds	r3, r4, #4
 8009200:	1af2      	subs	r2, r6, r3
 8009202:	d0b6      	beq.n	8009172 <_malloc_r+0x22>
 8009204:	1b9b      	subs	r3, r3, r6
 8009206:	50a3      	str	r3, [r4, r2]
 8009208:	e7b3      	b.n	8009172 <_malloc_r+0x22>
 800920a:	6862      	ldr	r2, [r4, #4]
 800920c:	42a3      	cmp	r3, r4
 800920e:	bf0c      	ite	eq
 8009210:	6032      	streq	r2, [r6, #0]
 8009212:	605a      	strne	r2, [r3, #4]
 8009214:	e7ec      	b.n	80091f0 <_malloc_r+0xa0>
 8009216:	4623      	mov	r3, r4
 8009218:	6864      	ldr	r4, [r4, #4]
 800921a:	e7b2      	b.n	8009182 <_malloc_r+0x32>
 800921c:	4634      	mov	r4, r6
 800921e:	6876      	ldr	r6, [r6, #4]
 8009220:	e7b9      	b.n	8009196 <_malloc_r+0x46>
 8009222:	230c      	movs	r3, #12
 8009224:	603b      	str	r3, [r7, #0]
 8009226:	4638      	mov	r0, r7
 8009228:	f000 fd28 	bl	8009c7c <__malloc_unlock>
 800922c:	e7a1      	b.n	8009172 <_malloc_r+0x22>
 800922e:	6025      	str	r5, [r4, #0]
 8009230:	e7de      	b.n	80091f0 <_malloc_r+0xa0>
 8009232:	bf00      	nop
 8009234:	20000dbc 	.word	0x20000dbc

08009238 <__ssputs_r>:
 8009238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800923c:	688e      	ldr	r6, [r1, #8]
 800923e:	429e      	cmp	r6, r3
 8009240:	4682      	mov	sl, r0
 8009242:	460c      	mov	r4, r1
 8009244:	4690      	mov	r8, r2
 8009246:	461f      	mov	r7, r3
 8009248:	d838      	bhi.n	80092bc <__ssputs_r+0x84>
 800924a:	898a      	ldrh	r2, [r1, #12]
 800924c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009250:	d032      	beq.n	80092b8 <__ssputs_r+0x80>
 8009252:	6825      	ldr	r5, [r4, #0]
 8009254:	6909      	ldr	r1, [r1, #16]
 8009256:	eba5 0901 	sub.w	r9, r5, r1
 800925a:	6965      	ldr	r5, [r4, #20]
 800925c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009260:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009264:	3301      	adds	r3, #1
 8009266:	444b      	add	r3, r9
 8009268:	106d      	asrs	r5, r5, #1
 800926a:	429d      	cmp	r5, r3
 800926c:	bf38      	it	cc
 800926e:	461d      	movcc	r5, r3
 8009270:	0553      	lsls	r3, r2, #21
 8009272:	d531      	bpl.n	80092d8 <__ssputs_r+0xa0>
 8009274:	4629      	mov	r1, r5
 8009276:	f7ff ff6b 	bl	8009150 <_malloc_r>
 800927a:	4606      	mov	r6, r0
 800927c:	b950      	cbnz	r0, 8009294 <__ssputs_r+0x5c>
 800927e:	230c      	movs	r3, #12
 8009280:	f8ca 3000 	str.w	r3, [sl]
 8009284:	89a3      	ldrh	r3, [r4, #12]
 8009286:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800928a:	81a3      	strh	r3, [r4, #12]
 800928c:	f04f 30ff 	mov.w	r0, #4294967295
 8009290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009294:	6921      	ldr	r1, [r4, #16]
 8009296:	464a      	mov	r2, r9
 8009298:	f000 fcc2 	bl	8009c20 <memcpy>
 800929c:	89a3      	ldrh	r3, [r4, #12]
 800929e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80092a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092a6:	81a3      	strh	r3, [r4, #12]
 80092a8:	6126      	str	r6, [r4, #16]
 80092aa:	6165      	str	r5, [r4, #20]
 80092ac:	444e      	add	r6, r9
 80092ae:	eba5 0509 	sub.w	r5, r5, r9
 80092b2:	6026      	str	r6, [r4, #0]
 80092b4:	60a5      	str	r5, [r4, #8]
 80092b6:	463e      	mov	r6, r7
 80092b8:	42be      	cmp	r6, r7
 80092ba:	d900      	bls.n	80092be <__ssputs_r+0x86>
 80092bc:	463e      	mov	r6, r7
 80092be:	6820      	ldr	r0, [r4, #0]
 80092c0:	4632      	mov	r2, r6
 80092c2:	4641      	mov	r1, r8
 80092c4:	f000 fcba 	bl	8009c3c <memmove>
 80092c8:	68a3      	ldr	r3, [r4, #8]
 80092ca:	1b9b      	subs	r3, r3, r6
 80092cc:	60a3      	str	r3, [r4, #8]
 80092ce:	6823      	ldr	r3, [r4, #0]
 80092d0:	4433      	add	r3, r6
 80092d2:	6023      	str	r3, [r4, #0]
 80092d4:	2000      	movs	r0, #0
 80092d6:	e7db      	b.n	8009290 <__ssputs_r+0x58>
 80092d8:	462a      	mov	r2, r5
 80092da:	f000 fcd5 	bl	8009c88 <_realloc_r>
 80092de:	4606      	mov	r6, r0
 80092e0:	2800      	cmp	r0, #0
 80092e2:	d1e1      	bne.n	80092a8 <__ssputs_r+0x70>
 80092e4:	6921      	ldr	r1, [r4, #16]
 80092e6:	4650      	mov	r0, sl
 80092e8:	f7ff fec6 	bl	8009078 <_free_r>
 80092ec:	e7c7      	b.n	800927e <__ssputs_r+0x46>
	...

080092f0 <_svfiprintf_r>:
 80092f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092f4:	4698      	mov	r8, r3
 80092f6:	898b      	ldrh	r3, [r1, #12]
 80092f8:	061b      	lsls	r3, r3, #24
 80092fa:	b09d      	sub	sp, #116	; 0x74
 80092fc:	4607      	mov	r7, r0
 80092fe:	460d      	mov	r5, r1
 8009300:	4614      	mov	r4, r2
 8009302:	d50e      	bpl.n	8009322 <_svfiprintf_r+0x32>
 8009304:	690b      	ldr	r3, [r1, #16]
 8009306:	b963      	cbnz	r3, 8009322 <_svfiprintf_r+0x32>
 8009308:	2140      	movs	r1, #64	; 0x40
 800930a:	f7ff ff21 	bl	8009150 <_malloc_r>
 800930e:	6028      	str	r0, [r5, #0]
 8009310:	6128      	str	r0, [r5, #16]
 8009312:	b920      	cbnz	r0, 800931e <_svfiprintf_r+0x2e>
 8009314:	230c      	movs	r3, #12
 8009316:	603b      	str	r3, [r7, #0]
 8009318:	f04f 30ff 	mov.w	r0, #4294967295
 800931c:	e0d1      	b.n	80094c2 <_svfiprintf_r+0x1d2>
 800931e:	2340      	movs	r3, #64	; 0x40
 8009320:	616b      	str	r3, [r5, #20]
 8009322:	2300      	movs	r3, #0
 8009324:	9309      	str	r3, [sp, #36]	; 0x24
 8009326:	2320      	movs	r3, #32
 8009328:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800932c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009330:	2330      	movs	r3, #48	; 0x30
 8009332:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80094dc <_svfiprintf_r+0x1ec>
 8009336:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800933a:	f04f 0901 	mov.w	r9, #1
 800933e:	4623      	mov	r3, r4
 8009340:	469a      	mov	sl, r3
 8009342:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009346:	b10a      	cbz	r2, 800934c <_svfiprintf_r+0x5c>
 8009348:	2a25      	cmp	r2, #37	; 0x25
 800934a:	d1f9      	bne.n	8009340 <_svfiprintf_r+0x50>
 800934c:	ebba 0b04 	subs.w	fp, sl, r4
 8009350:	d00b      	beq.n	800936a <_svfiprintf_r+0x7a>
 8009352:	465b      	mov	r3, fp
 8009354:	4622      	mov	r2, r4
 8009356:	4629      	mov	r1, r5
 8009358:	4638      	mov	r0, r7
 800935a:	f7ff ff6d 	bl	8009238 <__ssputs_r>
 800935e:	3001      	adds	r0, #1
 8009360:	f000 80aa 	beq.w	80094b8 <_svfiprintf_r+0x1c8>
 8009364:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009366:	445a      	add	r2, fp
 8009368:	9209      	str	r2, [sp, #36]	; 0x24
 800936a:	f89a 3000 	ldrb.w	r3, [sl]
 800936e:	2b00      	cmp	r3, #0
 8009370:	f000 80a2 	beq.w	80094b8 <_svfiprintf_r+0x1c8>
 8009374:	2300      	movs	r3, #0
 8009376:	f04f 32ff 	mov.w	r2, #4294967295
 800937a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800937e:	f10a 0a01 	add.w	sl, sl, #1
 8009382:	9304      	str	r3, [sp, #16]
 8009384:	9307      	str	r3, [sp, #28]
 8009386:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800938a:	931a      	str	r3, [sp, #104]	; 0x68
 800938c:	4654      	mov	r4, sl
 800938e:	2205      	movs	r2, #5
 8009390:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009394:	4851      	ldr	r0, [pc, #324]	; (80094dc <_svfiprintf_r+0x1ec>)
 8009396:	f7f6 ff2b 	bl	80001f0 <memchr>
 800939a:	9a04      	ldr	r2, [sp, #16]
 800939c:	b9d8      	cbnz	r0, 80093d6 <_svfiprintf_r+0xe6>
 800939e:	06d0      	lsls	r0, r2, #27
 80093a0:	bf44      	itt	mi
 80093a2:	2320      	movmi	r3, #32
 80093a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093a8:	0711      	lsls	r1, r2, #28
 80093aa:	bf44      	itt	mi
 80093ac:	232b      	movmi	r3, #43	; 0x2b
 80093ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093b2:	f89a 3000 	ldrb.w	r3, [sl]
 80093b6:	2b2a      	cmp	r3, #42	; 0x2a
 80093b8:	d015      	beq.n	80093e6 <_svfiprintf_r+0xf6>
 80093ba:	9a07      	ldr	r2, [sp, #28]
 80093bc:	4654      	mov	r4, sl
 80093be:	2000      	movs	r0, #0
 80093c0:	f04f 0c0a 	mov.w	ip, #10
 80093c4:	4621      	mov	r1, r4
 80093c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093ca:	3b30      	subs	r3, #48	; 0x30
 80093cc:	2b09      	cmp	r3, #9
 80093ce:	d94e      	bls.n	800946e <_svfiprintf_r+0x17e>
 80093d0:	b1b0      	cbz	r0, 8009400 <_svfiprintf_r+0x110>
 80093d2:	9207      	str	r2, [sp, #28]
 80093d4:	e014      	b.n	8009400 <_svfiprintf_r+0x110>
 80093d6:	eba0 0308 	sub.w	r3, r0, r8
 80093da:	fa09 f303 	lsl.w	r3, r9, r3
 80093de:	4313      	orrs	r3, r2
 80093e0:	9304      	str	r3, [sp, #16]
 80093e2:	46a2      	mov	sl, r4
 80093e4:	e7d2      	b.n	800938c <_svfiprintf_r+0x9c>
 80093e6:	9b03      	ldr	r3, [sp, #12]
 80093e8:	1d19      	adds	r1, r3, #4
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	9103      	str	r1, [sp, #12]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	bfbb      	ittet	lt
 80093f2:	425b      	neglt	r3, r3
 80093f4:	f042 0202 	orrlt.w	r2, r2, #2
 80093f8:	9307      	strge	r3, [sp, #28]
 80093fa:	9307      	strlt	r3, [sp, #28]
 80093fc:	bfb8      	it	lt
 80093fe:	9204      	strlt	r2, [sp, #16]
 8009400:	7823      	ldrb	r3, [r4, #0]
 8009402:	2b2e      	cmp	r3, #46	; 0x2e
 8009404:	d10c      	bne.n	8009420 <_svfiprintf_r+0x130>
 8009406:	7863      	ldrb	r3, [r4, #1]
 8009408:	2b2a      	cmp	r3, #42	; 0x2a
 800940a:	d135      	bne.n	8009478 <_svfiprintf_r+0x188>
 800940c:	9b03      	ldr	r3, [sp, #12]
 800940e:	1d1a      	adds	r2, r3, #4
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	9203      	str	r2, [sp, #12]
 8009414:	2b00      	cmp	r3, #0
 8009416:	bfb8      	it	lt
 8009418:	f04f 33ff 	movlt.w	r3, #4294967295
 800941c:	3402      	adds	r4, #2
 800941e:	9305      	str	r3, [sp, #20]
 8009420:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80094ec <_svfiprintf_r+0x1fc>
 8009424:	7821      	ldrb	r1, [r4, #0]
 8009426:	2203      	movs	r2, #3
 8009428:	4650      	mov	r0, sl
 800942a:	f7f6 fee1 	bl	80001f0 <memchr>
 800942e:	b140      	cbz	r0, 8009442 <_svfiprintf_r+0x152>
 8009430:	2340      	movs	r3, #64	; 0x40
 8009432:	eba0 000a 	sub.w	r0, r0, sl
 8009436:	fa03 f000 	lsl.w	r0, r3, r0
 800943a:	9b04      	ldr	r3, [sp, #16]
 800943c:	4303      	orrs	r3, r0
 800943e:	3401      	adds	r4, #1
 8009440:	9304      	str	r3, [sp, #16]
 8009442:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009446:	4826      	ldr	r0, [pc, #152]	; (80094e0 <_svfiprintf_r+0x1f0>)
 8009448:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800944c:	2206      	movs	r2, #6
 800944e:	f7f6 fecf 	bl	80001f0 <memchr>
 8009452:	2800      	cmp	r0, #0
 8009454:	d038      	beq.n	80094c8 <_svfiprintf_r+0x1d8>
 8009456:	4b23      	ldr	r3, [pc, #140]	; (80094e4 <_svfiprintf_r+0x1f4>)
 8009458:	bb1b      	cbnz	r3, 80094a2 <_svfiprintf_r+0x1b2>
 800945a:	9b03      	ldr	r3, [sp, #12]
 800945c:	3307      	adds	r3, #7
 800945e:	f023 0307 	bic.w	r3, r3, #7
 8009462:	3308      	adds	r3, #8
 8009464:	9303      	str	r3, [sp, #12]
 8009466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009468:	4433      	add	r3, r6
 800946a:	9309      	str	r3, [sp, #36]	; 0x24
 800946c:	e767      	b.n	800933e <_svfiprintf_r+0x4e>
 800946e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009472:	460c      	mov	r4, r1
 8009474:	2001      	movs	r0, #1
 8009476:	e7a5      	b.n	80093c4 <_svfiprintf_r+0xd4>
 8009478:	2300      	movs	r3, #0
 800947a:	3401      	adds	r4, #1
 800947c:	9305      	str	r3, [sp, #20]
 800947e:	4619      	mov	r1, r3
 8009480:	f04f 0c0a 	mov.w	ip, #10
 8009484:	4620      	mov	r0, r4
 8009486:	f810 2b01 	ldrb.w	r2, [r0], #1
 800948a:	3a30      	subs	r2, #48	; 0x30
 800948c:	2a09      	cmp	r2, #9
 800948e:	d903      	bls.n	8009498 <_svfiprintf_r+0x1a8>
 8009490:	2b00      	cmp	r3, #0
 8009492:	d0c5      	beq.n	8009420 <_svfiprintf_r+0x130>
 8009494:	9105      	str	r1, [sp, #20]
 8009496:	e7c3      	b.n	8009420 <_svfiprintf_r+0x130>
 8009498:	fb0c 2101 	mla	r1, ip, r1, r2
 800949c:	4604      	mov	r4, r0
 800949e:	2301      	movs	r3, #1
 80094a0:	e7f0      	b.n	8009484 <_svfiprintf_r+0x194>
 80094a2:	ab03      	add	r3, sp, #12
 80094a4:	9300      	str	r3, [sp, #0]
 80094a6:	462a      	mov	r2, r5
 80094a8:	4b0f      	ldr	r3, [pc, #60]	; (80094e8 <_svfiprintf_r+0x1f8>)
 80094aa:	a904      	add	r1, sp, #16
 80094ac:	4638      	mov	r0, r7
 80094ae:	f3af 8000 	nop.w
 80094b2:	1c42      	adds	r2, r0, #1
 80094b4:	4606      	mov	r6, r0
 80094b6:	d1d6      	bne.n	8009466 <_svfiprintf_r+0x176>
 80094b8:	89ab      	ldrh	r3, [r5, #12]
 80094ba:	065b      	lsls	r3, r3, #25
 80094bc:	f53f af2c 	bmi.w	8009318 <_svfiprintf_r+0x28>
 80094c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094c2:	b01d      	add	sp, #116	; 0x74
 80094c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c8:	ab03      	add	r3, sp, #12
 80094ca:	9300      	str	r3, [sp, #0]
 80094cc:	462a      	mov	r2, r5
 80094ce:	4b06      	ldr	r3, [pc, #24]	; (80094e8 <_svfiprintf_r+0x1f8>)
 80094d0:	a904      	add	r1, sp, #16
 80094d2:	4638      	mov	r0, r7
 80094d4:	f000 f9d4 	bl	8009880 <_printf_i>
 80094d8:	e7eb      	b.n	80094b2 <_svfiprintf_r+0x1c2>
 80094da:	bf00      	nop
 80094dc:	0800a070 	.word	0x0800a070
 80094e0:	0800a07a 	.word	0x0800a07a
 80094e4:	00000000 	.word	0x00000000
 80094e8:	08009239 	.word	0x08009239
 80094ec:	0800a076 	.word	0x0800a076

080094f0 <__sfputc_r>:
 80094f0:	6893      	ldr	r3, [r2, #8]
 80094f2:	3b01      	subs	r3, #1
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	b410      	push	{r4}
 80094f8:	6093      	str	r3, [r2, #8]
 80094fa:	da08      	bge.n	800950e <__sfputc_r+0x1e>
 80094fc:	6994      	ldr	r4, [r2, #24]
 80094fe:	42a3      	cmp	r3, r4
 8009500:	db01      	blt.n	8009506 <__sfputc_r+0x16>
 8009502:	290a      	cmp	r1, #10
 8009504:	d103      	bne.n	800950e <__sfputc_r+0x1e>
 8009506:	f85d 4b04 	ldr.w	r4, [sp], #4
 800950a:	f7ff bad5 	b.w	8008ab8 <__swbuf_r>
 800950e:	6813      	ldr	r3, [r2, #0]
 8009510:	1c58      	adds	r0, r3, #1
 8009512:	6010      	str	r0, [r2, #0]
 8009514:	7019      	strb	r1, [r3, #0]
 8009516:	4608      	mov	r0, r1
 8009518:	f85d 4b04 	ldr.w	r4, [sp], #4
 800951c:	4770      	bx	lr

0800951e <__sfputs_r>:
 800951e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009520:	4606      	mov	r6, r0
 8009522:	460f      	mov	r7, r1
 8009524:	4614      	mov	r4, r2
 8009526:	18d5      	adds	r5, r2, r3
 8009528:	42ac      	cmp	r4, r5
 800952a:	d101      	bne.n	8009530 <__sfputs_r+0x12>
 800952c:	2000      	movs	r0, #0
 800952e:	e007      	b.n	8009540 <__sfputs_r+0x22>
 8009530:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009534:	463a      	mov	r2, r7
 8009536:	4630      	mov	r0, r6
 8009538:	f7ff ffda 	bl	80094f0 <__sfputc_r>
 800953c:	1c43      	adds	r3, r0, #1
 800953e:	d1f3      	bne.n	8009528 <__sfputs_r+0xa>
 8009540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009544 <_vfiprintf_r>:
 8009544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009548:	460d      	mov	r5, r1
 800954a:	b09d      	sub	sp, #116	; 0x74
 800954c:	4614      	mov	r4, r2
 800954e:	4698      	mov	r8, r3
 8009550:	4606      	mov	r6, r0
 8009552:	b118      	cbz	r0, 800955c <_vfiprintf_r+0x18>
 8009554:	6983      	ldr	r3, [r0, #24]
 8009556:	b90b      	cbnz	r3, 800955c <_vfiprintf_r+0x18>
 8009558:	f7ff fc88 	bl	8008e6c <__sinit>
 800955c:	4b89      	ldr	r3, [pc, #548]	; (8009784 <_vfiprintf_r+0x240>)
 800955e:	429d      	cmp	r5, r3
 8009560:	d11b      	bne.n	800959a <_vfiprintf_r+0x56>
 8009562:	6875      	ldr	r5, [r6, #4]
 8009564:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009566:	07d9      	lsls	r1, r3, #31
 8009568:	d405      	bmi.n	8009576 <_vfiprintf_r+0x32>
 800956a:	89ab      	ldrh	r3, [r5, #12]
 800956c:	059a      	lsls	r2, r3, #22
 800956e:	d402      	bmi.n	8009576 <_vfiprintf_r+0x32>
 8009570:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009572:	f7ff fd19 	bl	8008fa8 <__retarget_lock_acquire_recursive>
 8009576:	89ab      	ldrh	r3, [r5, #12]
 8009578:	071b      	lsls	r3, r3, #28
 800957a:	d501      	bpl.n	8009580 <_vfiprintf_r+0x3c>
 800957c:	692b      	ldr	r3, [r5, #16]
 800957e:	b9eb      	cbnz	r3, 80095bc <_vfiprintf_r+0x78>
 8009580:	4629      	mov	r1, r5
 8009582:	4630      	mov	r0, r6
 8009584:	f7ff faea 	bl	8008b5c <__swsetup_r>
 8009588:	b1c0      	cbz	r0, 80095bc <_vfiprintf_r+0x78>
 800958a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800958c:	07dc      	lsls	r4, r3, #31
 800958e:	d50e      	bpl.n	80095ae <_vfiprintf_r+0x6a>
 8009590:	f04f 30ff 	mov.w	r0, #4294967295
 8009594:	b01d      	add	sp, #116	; 0x74
 8009596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800959a:	4b7b      	ldr	r3, [pc, #492]	; (8009788 <_vfiprintf_r+0x244>)
 800959c:	429d      	cmp	r5, r3
 800959e:	d101      	bne.n	80095a4 <_vfiprintf_r+0x60>
 80095a0:	68b5      	ldr	r5, [r6, #8]
 80095a2:	e7df      	b.n	8009564 <_vfiprintf_r+0x20>
 80095a4:	4b79      	ldr	r3, [pc, #484]	; (800978c <_vfiprintf_r+0x248>)
 80095a6:	429d      	cmp	r5, r3
 80095a8:	bf08      	it	eq
 80095aa:	68f5      	ldreq	r5, [r6, #12]
 80095ac:	e7da      	b.n	8009564 <_vfiprintf_r+0x20>
 80095ae:	89ab      	ldrh	r3, [r5, #12]
 80095b0:	0598      	lsls	r0, r3, #22
 80095b2:	d4ed      	bmi.n	8009590 <_vfiprintf_r+0x4c>
 80095b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095b6:	f7ff fcf8 	bl	8008faa <__retarget_lock_release_recursive>
 80095ba:	e7e9      	b.n	8009590 <_vfiprintf_r+0x4c>
 80095bc:	2300      	movs	r3, #0
 80095be:	9309      	str	r3, [sp, #36]	; 0x24
 80095c0:	2320      	movs	r3, #32
 80095c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80095ca:	2330      	movs	r3, #48	; 0x30
 80095cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009790 <_vfiprintf_r+0x24c>
 80095d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095d4:	f04f 0901 	mov.w	r9, #1
 80095d8:	4623      	mov	r3, r4
 80095da:	469a      	mov	sl, r3
 80095dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095e0:	b10a      	cbz	r2, 80095e6 <_vfiprintf_r+0xa2>
 80095e2:	2a25      	cmp	r2, #37	; 0x25
 80095e4:	d1f9      	bne.n	80095da <_vfiprintf_r+0x96>
 80095e6:	ebba 0b04 	subs.w	fp, sl, r4
 80095ea:	d00b      	beq.n	8009604 <_vfiprintf_r+0xc0>
 80095ec:	465b      	mov	r3, fp
 80095ee:	4622      	mov	r2, r4
 80095f0:	4629      	mov	r1, r5
 80095f2:	4630      	mov	r0, r6
 80095f4:	f7ff ff93 	bl	800951e <__sfputs_r>
 80095f8:	3001      	adds	r0, #1
 80095fa:	f000 80aa 	beq.w	8009752 <_vfiprintf_r+0x20e>
 80095fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009600:	445a      	add	r2, fp
 8009602:	9209      	str	r2, [sp, #36]	; 0x24
 8009604:	f89a 3000 	ldrb.w	r3, [sl]
 8009608:	2b00      	cmp	r3, #0
 800960a:	f000 80a2 	beq.w	8009752 <_vfiprintf_r+0x20e>
 800960e:	2300      	movs	r3, #0
 8009610:	f04f 32ff 	mov.w	r2, #4294967295
 8009614:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009618:	f10a 0a01 	add.w	sl, sl, #1
 800961c:	9304      	str	r3, [sp, #16]
 800961e:	9307      	str	r3, [sp, #28]
 8009620:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009624:	931a      	str	r3, [sp, #104]	; 0x68
 8009626:	4654      	mov	r4, sl
 8009628:	2205      	movs	r2, #5
 800962a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800962e:	4858      	ldr	r0, [pc, #352]	; (8009790 <_vfiprintf_r+0x24c>)
 8009630:	f7f6 fdde 	bl	80001f0 <memchr>
 8009634:	9a04      	ldr	r2, [sp, #16]
 8009636:	b9d8      	cbnz	r0, 8009670 <_vfiprintf_r+0x12c>
 8009638:	06d1      	lsls	r1, r2, #27
 800963a:	bf44      	itt	mi
 800963c:	2320      	movmi	r3, #32
 800963e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009642:	0713      	lsls	r3, r2, #28
 8009644:	bf44      	itt	mi
 8009646:	232b      	movmi	r3, #43	; 0x2b
 8009648:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800964c:	f89a 3000 	ldrb.w	r3, [sl]
 8009650:	2b2a      	cmp	r3, #42	; 0x2a
 8009652:	d015      	beq.n	8009680 <_vfiprintf_r+0x13c>
 8009654:	9a07      	ldr	r2, [sp, #28]
 8009656:	4654      	mov	r4, sl
 8009658:	2000      	movs	r0, #0
 800965a:	f04f 0c0a 	mov.w	ip, #10
 800965e:	4621      	mov	r1, r4
 8009660:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009664:	3b30      	subs	r3, #48	; 0x30
 8009666:	2b09      	cmp	r3, #9
 8009668:	d94e      	bls.n	8009708 <_vfiprintf_r+0x1c4>
 800966a:	b1b0      	cbz	r0, 800969a <_vfiprintf_r+0x156>
 800966c:	9207      	str	r2, [sp, #28]
 800966e:	e014      	b.n	800969a <_vfiprintf_r+0x156>
 8009670:	eba0 0308 	sub.w	r3, r0, r8
 8009674:	fa09 f303 	lsl.w	r3, r9, r3
 8009678:	4313      	orrs	r3, r2
 800967a:	9304      	str	r3, [sp, #16]
 800967c:	46a2      	mov	sl, r4
 800967e:	e7d2      	b.n	8009626 <_vfiprintf_r+0xe2>
 8009680:	9b03      	ldr	r3, [sp, #12]
 8009682:	1d19      	adds	r1, r3, #4
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	9103      	str	r1, [sp, #12]
 8009688:	2b00      	cmp	r3, #0
 800968a:	bfbb      	ittet	lt
 800968c:	425b      	neglt	r3, r3
 800968e:	f042 0202 	orrlt.w	r2, r2, #2
 8009692:	9307      	strge	r3, [sp, #28]
 8009694:	9307      	strlt	r3, [sp, #28]
 8009696:	bfb8      	it	lt
 8009698:	9204      	strlt	r2, [sp, #16]
 800969a:	7823      	ldrb	r3, [r4, #0]
 800969c:	2b2e      	cmp	r3, #46	; 0x2e
 800969e:	d10c      	bne.n	80096ba <_vfiprintf_r+0x176>
 80096a0:	7863      	ldrb	r3, [r4, #1]
 80096a2:	2b2a      	cmp	r3, #42	; 0x2a
 80096a4:	d135      	bne.n	8009712 <_vfiprintf_r+0x1ce>
 80096a6:	9b03      	ldr	r3, [sp, #12]
 80096a8:	1d1a      	adds	r2, r3, #4
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	9203      	str	r2, [sp, #12]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	bfb8      	it	lt
 80096b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80096b6:	3402      	adds	r4, #2
 80096b8:	9305      	str	r3, [sp, #20]
 80096ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80097a0 <_vfiprintf_r+0x25c>
 80096be:	7821      	ldrb	r1, [r4, #0]
 80096c0:	2203      	movs	r2, #3
 80096c2:	4650      	mov	r0, sl
 80096c4:	f7f6 fd94 	bl	80001f0 <memchr>
 80096c8:	b140      	cbz	r0, 80096dc <_vfiprintf_r+0x198>
 80096ca:	2340      	movs	r3, #64	; 0x40
 80096cc:	eba0 000a 	sub.w	r0, r0, sl
 80096d0:	fa03 f000 	lsl.w	r0, r3, r0
 80096d4:	9b04      	ldr	r3, [sp, #16]
 80096d6:	4303      	orrs	r3, r0
 80096d8:	3401      	adds	r4, #1
 80096da:	9304      	str	r3, [sp, #16]
 80096dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096e0:	482c      	ldr	r0, [pc, #176]	; (8009794 <_vfiprintf_r+0x250>)
 80096e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096e6:	2206      	movs	r2, #6
 80096e8:	f7f6 fd82 	bl	80001f0 <memchr>
 80096ec:	2800      	cmp	r0, #0
 80096ee:	d03f      	beq.n	8009770 <_vfiprintf_r+0x22c>
 80096f0:	4b29      	ldr	r3, [pc, #164]	; (8009798 <_vfiprintf_r+0x254>)
 80096f2:	bb1b      	cbnz	r3, 800973c <_vfiprintf_r+0x1f8>
 80096f4:	9b03      	ldr	r3, [sp, #12]
 80096f6:	3307      	adds	r3, #7
 80096f8:	f023 0307 	bic.w	r3, r3, #7
 80096fc:	3308      	adds	r3, #8
 80096fe:	9303      	str	r3, [sp, #12]
 8009700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009702:	443b      	add	r3, r7
 8009704:	9309      	str	r3, [sp, #36]	; 0x24
 8009706:	e767      	b.n	80095d8 <_vfiprintf_r+0x94>
 8009708:	fb0c 3202 	mla	r2, ip, r2, r3
 800970c:	460c      	mov	r4, r1
 800970e:	2001      	movs	r0, #1
 8009710:	e7a5      	b.n	800965e <_vfiprintf_r+0x11a>
 8009712:	2300      	movs	r3, #0
 8009714:	3401      	adds	r4, #1
 8009716:	9305      	str	r3, [sp, #20]
 8009718:	4619      	mov	r1, r3
 800971a:	f04f 0c0a 	mov.w	ip, #10
 800971e:	4620      	mov	r0, r4
 8009720:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009724:	3a30      	subs	r2, #48	; 0x30
 8009726:	2a09      	cmp	r2, #9
 8009728:	d903      	bls.n	8009732 <_vfiprintf_r+0x1ee>
 800972a:	2b00      	cmp	r3, #0
 800972c:	d0c5      	beq.n	80096ba <_vfiprintf_r+0x176>
 800972e:	9105      	str	r1, [sp, #20]
 8009730:	e7c3      	b.n	80096ba <_vfiprintf_r+0x176>
 8009732:	fb0c 2101 	mla	r1, ip, r1, r2
 8009736:	4604      	mov	r4, r0
 8009738:	2301      	movs	r3, #1
 800973a:	e7f0      	b.n	800971e <_vfiprintf_r+0x1da>
 800973c:	ab03      	add	r3, sp, #12
 800973e:	9300      	str	r3, [sp, #0]
 8009740:	462a      	mov	r2, r5
 8009742:	4b16      	ldr	r3, [pc, #88]	; (800979c <_vfiprintf_r+0x258>)
 8009744:	a904      	add	r1, sp, #16
 8009746:	4630      	mov	r0, r6
 8009748:	f3af 8000 	nop.w
 800974c:	4607      	mov	r7, r0
 800974e:	1c78      	adds	r0, r7, #1
 8009750:	d1d6      	bne.n	8009700 <_vfiprintf_r+0x1bc>
 8009752:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009754:	07d9      	lsls	r1, r3, #31
 8009756:	d405      	bmi.n	8009764 <_vfiprintf_r+0x220>
 8009758:	89ab      	ldrh	r3, [r5, #12]
 800975a:	059a      	lsls	r2, r3, #22
 800975c:	d402      	bmi.n	8009764 <_vfiprintf_r+0x220>
 800975e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009760:	f7ff fc23 	bl	8008faa <__retarget_lock_release_recursive>
 8009764:	89ab      	ldrh	r3, [r5, #12]
 8009766:	065b      	lsls	r3, r3, #25
 8009768:	f53f af12 	bmi.w	8009590 <_vfiprintf_r+0x4c>
 800976c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800976e:	e711      	b.n	8009594 <_vfiprintf_r+0x50>
 8009770:	ab03      	add	r3, sp, #12
 8009772:	9300      	str	r3, [sp, #0]
 8009774:	462a      	mov	r2, r5
 8009776:	4b09      	ldr	r3, [pc, #36]	; (800979c <_vfiprintf_r+0x258>)
 8009778:	a904      	add	r1, sp, #16
 800977a:	4630      	mov	r0, r6
 800977c:	f000 f880 	bl	8009880 <_printf_i>
 8009780:	e7e4      	b.n	800974c <_vfiprintf_r+0x208>
 8009782:	bf00      	nop
 8009784:	0800a030 	.word	0x0800a030
 8009788:	0800a050 	.word	0x0800a050
 800978c:	0800a010 	.word	0x0800a010
 8009790:	0800a070 	.word	0x0800a070
 8009794:	0800a07a 	.word	0x0800a07a
 8009798:	00000000 	.word	0x00000000
 800979c:	0800951f 	.word	0x0800951f
 80097a0:	0800a076 	.word	0x0800a076

080097a4 <_printf_common>:
 80097a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097a8:	4616      	mov	r6, r2
 80097aa:	4699      	mov	r9, r3
 80097ac:	688a      	ldr	r2, [r1, #8]
 80097ae:	690b      	ldr	r3, [r1, #16]
 80097b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80097b4:	4293      	cmp	r3, r2
 80097b6:	bfb8      	it	lt
 80097b8:	4613      	movlt	r3, r2
 80097ba:	6033      	str	r3, [r6, #0]
 80097bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80097c0:	4607      	mov	r7, r0
 80097c2:	460c      	mov	r4, r1
 80097c4:	b10a      	cbz	r2, 80097ca <_printf_common+0x26>
 80097c6:	3301      	adds	r3, #1
 80097c8:	6033      	str	r3, [r6, #0]
 80097ca:	6823      	ldr	r3, [r4, #0]
 80097cc:	0699      	lsls	r1, r3, #26
 80097ce:	bf42      	ittt	mi
 80097d0:	6833      	ldrmi	r3, [r6, #0]
 80097d2:	3302      	addmi	r3, #2
 80097d4:	6033      	strmi	r3, [r6, #0]
 80097d6:	6825      	ldr	r5, [r4, #0]
 80097d8:	f015 0506 	ands.w	r5, r5, #6
 80097dc:	d106      	bne.n	80097ec <_printf_common+0x48>
 80097de:	f104 0a19 	add.w	sl, r4, #25
 80097e2:	68e3      	ldr	r3, [r4, #12]
 80097e4:	6832      	ldr	r2, [r6, #0]
 80097e6:	1a9b      	subs	r3, r3, r2
 80097e8:	42ab      	cmp	r3, r5
 80097ea:	dc26      	bgt.n	800983a <_printf_common+0x96>
 80097ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80097f0:	1e13      	subs	r3, r2, #0
 80097f2:	6822      	ldr	r2, [r4, #0]
 80097f4:	bf18      	it	ne
 80097f6:	2301      	movne	r3, #1
 80097f8:	0692      	lsls	r2, r2, #26
 80097fa:	d42b      	bmi.n	8009854 <_printf_common+0xb0>
 80097fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009800:	4649      	mov	r1, r9
 8009802:	4638      	mov	r0, r7
 8009804:	47c0      	blx	r8
 8009806:	3001      	adds	r0, #1
 8009808:	d01e      	beq.n	8009848 <_printf_common+0xa4>
 800980a:	6823      	ldr	r3, [r4, #0]
 800980c:	68e5      	ldr	r5, [r4, #12]
 800980e:	6832      	ldr	r2, [r6, #0]
 8009810:	f003 0306 	and.w	r3, r3, #6
 8009814:	2b04      	cmp	r3, #4
 8009816:	bf08      	it	eq
 8009818:	1aad      	subeq	r5, r5, r2
 800981a:	68a3      	ldr	r3, [r4, #8]
 800981c:	6922      	ldr	r2, [r4, #16]
 800981e:	bf0c      	ite	eq
 8009820:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009824:	2500      	movne	r5, #0
 8009826:	4293      	cmp	r3, r2
 8009828:	bfc4      	itt	gt
 800982a:	1a9b      	subgt	r3, r3, r2
 800982c:	18ed      	addgt	r5, r5, r3
 800982e:	2600      	movs	r6, #0
 8009830:	341a      	adds	r4, #26
 8009832:	42b5      	cmp	r5, r6
 8009834:	d11a      	bne.n	800986c <_printf_common+0xc8>
 8009836:	2000      	movs	r0, #0
 8009838:	e008      	b.n	800984c <_printf_common+0xa8>
 800983a:	2301      	movs	r3, #1
 800983c:	4652      	mov	r2, sl
 800983e:	4649      	mov	r1, r9
 8009840:	4638      	mov	r0, r7
 8009842:	47c0      	blx	r8
 8009844:	3001      	adds	r0, #1
 8009846:	d103      	bne.n	8009850 <_printf_common+0xac>
 8009848:	f04f 30ff 	mov.w	r0, #4294967295
 800984c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009850:	3501      	adds	r5, #1
 8009852:	e7c6      	b.n	80097e2 <_printf_common+0x3e>
 8009854:	18e1      	adds	r1, r4, r3
 8009856:	1c5a      	adds	r2, r3, #1
 8009858:	2030      	movs	r0, #48	; 0x30
 800985a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800985e:	4422      	add	r2, r4
 8009860:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009864:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009868:	3302      	adds	r3, #2
 800986a:	e7c7      	b.n	80097fc <_printf_common+0x58>
 800986c:	2301      	movs	r3, #1
 800986e:	4622      	mov	r2, r4
 8009870:	4649      	mov	r1, r9
 8009872:	4638      	mov	r0, r7
 8009874:	47c0      	blx	r8
 8009876:	3001      	adds	r0, #1
 8009878:	d0e6      	beq.n	8009848 <_printf_common+0xa4>
 800987a:	3601      	adds	r6, #1
 800987c:	e7d9      	b.n	8009832 <_printf_common+0x8e>
	...

08009880 <_printf_i>:
 8009880:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009884:	7e0f      	ldrb	r7, [r1, #24]
 8009886:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009888:	2f78      	cmp	r7, #120	; 0x78
 800988a:	4691      	mov	r9, r2
 800988c:	4680      	mov	r8, r0
 800988e:	460c      	mov	r4, r1
 8009890:	469a      	mov	sl, r3
 8009892:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009896:	d807      	bhi.n	80098a8 <_printf_i+0x28>
 8009898:	2f62      	cmp	r7, #98	; 0x62
 800989a:	d80a      	bhi.n	80098b2 <_printf_i+0x32>
 800989c:	2f00      	cmp	r7, #0
 800989e:	f000 80d8 	beq.w	8009a52 <_printf_i+0x1d2>
 80098a2:	2f58      	cmp	r7, #88	; 0x58
 80098a4:	f000 80a3 	beq.w	80099ee <_printf_i+0x16e>
 80098a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80098b0:	e03a      	b.n	8009928 <_printf_i+0xa8>
 80098b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80098b6:	2b15      	cmp	r3, #21
 80098b8:	d8f6      	bhi.n	80098a8 <_printf_i+0x28>
 80098ba:	a101      	add	r1, pc, #4	; (adr r1, 80098c0 <_printf_i+0x40>)
 80098bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80098c0:	08009919 	.word	0x08009919
 80098c4:	0800992d 	.word	0x0800992d
 80098c8:	080098a9 	.word	0x080098a9
 80098cc:	080098a9 	.word	0x080098a9
 80098d0:	080098a9 	.word	0x080098a9
 80098d4:	080098a9 	.word	0x080098a9
 80098d8:	0800992d 	.word	0x0800992d
 80098dc:	080098a9 	.word	0x080098a9
 80098e0:	080098a9 	.word	0x080098a9
 80098e4:	080098a9 	.word	0x080098a9
 80098e8:	080098a9 	.word	0x080098a9
 80098ec:	08009a39 	.word	0x08009a39
 80098f0:	0800995d 	.word	0x0800995d
 80098f4:	08009a1b 	.word	0x08009a1b
 80098f8:	080098a9 	.word	0x080098a9
 80098fc:	080098a9 	.word	0x080098a9
 8009900:	08009a5b 	.word	0x08009a5b
 8009904:	080098a9 	.word	0x080098a9
 8009908:	0800995d 	.word	0x0800995d
 800990c:	080098a9 	.word	0x080098a9
 8009910:	080098a9 	.word	0x080098a9
 8009914:	08009a23 	.word	0x08009a23
 8009918:	682b      	ldr	r3, [r5, #0]
 800991a:	1d1a      	adds	r2, r3, #4
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	602a      	str	r2, [r5, #0]
 8009920:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009924:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009928:	2301      	movs	r3, #1
 800992a:	e0a3      	b.n	8009a74 <_printf_i+0x1f4>
 800992c:	6820      	ldr	r0, [r4, #0]
 800992e:	6829      	ldr	r1, [r5, #0]
 8009930:	0606      	lsls	r6, r0, #24
 8009932:	f101 0304 	add.w	r3, r1, #4
 8009936:	d50a      	bpl.n	800994e <_printf_i+0xce>
 8009938:	680e      	ldr	r6, [r1, #0]
 800993a:	602b      	str	r3, [r5, #0]
 800993c:	2e00      	cmp	r6, #0
 800993e:	da03      	bge.n	8009948 <_printf_i+0xc8>
 8009940:	232d      	movs	r3, #45	; 0x2d
 8009942:	4276      	negs	r6, r6
 8009944:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009948:	485e      	ldr	r0, [pc, #376]	; (8009ac4 <_printf_i+0x244>)
 800994a:	230a      	movs	r3, #10
 800994c:	e019      	b.n	8009982 <_printf_i+0x102>
 800994e:	680e      	ldr	r6, [r1, #0]
 8009950:	602b      	str	r3, [r5, #0]
 8009952:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009956:	bf18      	it	ne
 8009958:	b236      	sxthne	r6, r6
 800995a:	e7ef      	b.n	800993c <_printf_i+0xbc>
 800995c:	682b      	ldr	r3, [r5, #0]
 800995e:	6820      	ldr	r0, [r4, #0]
 8009960:	1d19      	adds	r1, r3, #4
 8009962:	6029      	str	r1, [r5, #0]
 8009964:	0601      	lsls	r1, r0, #24
 8009966:	d501      	bpl.n	800996c <_printf_i+0xec>
 8009968:	681e      	ldr	r6, [r3, #0]
 800996a:	e002      	b.n	8009972 <_printf_i+0xf2>
 800996c:	0646      	lsls	r6, r0, #25
 800996e:	d5fb      	bpl.n	8009968 <_printf_i+0xe8>
 8009970:	881e      	ldrh	r6, [r3, #0]
 8009972:	4854      	ldr	r0, [pc, #336]	; (8009ac4 <_printf_i+0x244>)
 8009974:	2f6f      	cmp	r7, #111	; 0x6f
 8009976:	bf0c      	ite	eq
 8009978:	2308      	moveq	r3, #8
 800997a:	230a      	movne	r3, #10
 800997c:	2100      	movs	r1, #0
 800997e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009982:	6865      	ldr	r5, [r4, #4]
 8009984:	60a5      	str	r5, [r4, #8]
 8009986:	2d00      	cmp	r5, #0
 8009988:	bfa2      	ittt	ge
 800998a:	6821      	ldrge	r1, [r4, #0]
 800998c:	f021 0104 	bicge.w	r1, r1, #4
 8009990:	6021      	strge	r1, [r4, #0]
 8009992:	b90e      	cbnz	r6, 8009998 <_printf_i+0x118>
 8009994:	2d00      	cmp	r5, #0
 8009996:	d04d      	beq.n	8009a34 <_printf_i+0x1b4>
 8009998:	4615      	mov	r5, r2
 800999a:	fbb6 f1f3 	udiv	r1, r6, r3
 800999e:	fb03 6711 	mls	r7, r3, r1, r6
 80099a2:	5dc7      	ldrb	r7, [r0, r7]
 80099a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80099a8:	4637      	mov	r7, r6
 80099aa:	42bb      	cmp	r3, r7
 80099ac:	460e      	mov	r6, r1
 80099ae:	d9f4      	bls.n	800999a <_printf_i+0x11a>
 80099b0:	2b08      	cmp	r3, #8
 80099b2:	d10b      	bne.n	80099cc <_printf_i+0x14c>
 80099b4:	6823      	ldr	r3, [r4, #0]
 80099b6:	07de      	lsls	r6, r3, #31
 80099b8:	d508      	bpl.n	80099cc <_printf_i+0x14c>
 80099ba:	6923      	ldr	r3, [r4, #16]
 80099bc:	6861      	ldr	r1, [r4, #4]
 80099be:	4299      	cmp	r1, r3
 80099c0:	bfde      	ittt	le
 80099c2:	2330      	movle	r3, #48	; 0x30
 80099c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80099c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80099cc:	1b52      	subs	r2, r2, r5
 80099ce:	6122      	str	r2, [r4, #16]
 80099d0:	f8cd a000 	str.w	sl, [sp]
 80099d4:	464b      	mov	r3, r9
 80099d6:	aa03      	add	r2, sp, #12
 80099d8:	4621      	mov	r1, r4
 80099da:	4640      	mov	r0, r8
 80099dc:	f7ff fee2 	bl	80097a4 <_printf_common>
 80099e0:	3001      	adds	r0, #1
 80099e2:	d14c      	bne.n	8009a7e <_printf_i+0x1fe>
 80099e4:	f04f 30ff 	mov.w	r0, #4294967295
 80099e8:	b004      	add	sp, #16
 80099ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099ee:	4835      	ldr	r0, [pc, #212]	; (8009ac4 <_printf_i+0x244>)
 80099f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80099f4:	6829      	ldr	r1, [r5, #0]
 80099f6:	6823      	ldr	r3, [r4, #0]
 80099f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80099fc:	6029      	str	r1, [r5, #0]
 80099fe:	061d      	lsls	r5, r3, #24
 8009a00:	d514      	bpl.n	8009a2c <_printf_i+0x1ac>
 8009a02:	07df      	lsls	r7, r3, #31
 8009a04:	bf44      	itt	mi
 8009a06:	f043 0320 	orrmi.w	r3, r3, #32
 8009a0a:	6023      	strmi	r3, [r4, #0]
 8009a0c:	b91e      	cbnz	r6, 8009a16 <_printf_i+0x196>
 8009a0e:	6823      	ldr	r3, [r4, #0]
 8009a10:	f023 0320 	bic.w	r3, r3, #32
 8009a14:	6023      	str	r3, [r4, #0]
 8009a16:	2310      	movs	r3, #16
 8009a18:	e7b0      	b.n	800997c <_printf_i+0xfc>
 8009a1a:	6823      	ldr	r3, [r4, #0]
 8009a1c:	f043 0320 	orr.w	r3, r3, #32
 8009a20:	6023      	str	r3, [r4, #0]
 8009a22:	2378      	movs	r3, #120	; 0x78
 8009a24:	4828      	ldr	r0, [pc, #160]	; (8009ac8 <_printf_i+0x248>)
 8009a26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009a2a:	e7e3      	b.n	80099f4 <_printf_i+0x174>
 8009a2c:	0659      	lsls	r1, r3, #25
 8009a2e:	bf48      	it	mi
 8009a30:	b2b6      	uxthmi	r6, r6
 8009a32:	e7e6      	b.n	8009a02 <_printf_i+0x182>
 8009a34:	4615      	mov	r5, r2
 8009a36:	e7bb      	b.n	80099b0 <_printf_i+0x130>
 8009a38:	682b      	ldr	r3, [r5, #0]
 8009a3a:	6826      	ldr	r6, [r4, #0]
 8009a3c:	6961      	ldr	r1, [r4, #20]
 8009a3e:	1d18      	adds	r0, r3, #4
 8009a40:	6028      	str	r0, [r5, #0]
 8009a42:	0635      	lsls	r5, r6, #24
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	d501      	bpl.n	8009a4c <_printf_i+0x1cc>
 8009a48:	6019      	str	r1, [r3, #0]
 8009a4a:	e002      	b.n	8009a52 <_printf_i+0x1d2>
 8009a4c:	0670      	lsls	r0, r6, #25
 8009a4e:	d5fb      	bpl.n	8009a48 <_printf_i+0x1c8>
 8009a50:	8019      	strh	r1, [r3, #0]
 8009a52:	2300      	movs	r3, #0
 8009a54:	6123      	str	r3, [r4, #16]
 8009a56:	4615      	mov	r5, r2
 8009a58:	e7ba      	b.n	80099d0 <_printf_i+0x150>
 8009a5a:	682b      	ldr	r3, [r5, #0]
 8009a5c:	1d1a      	adds	r2, r3, #4
 8009a5e:	602a      	str	r2, [r5, #0]
 8009a60:	681d      	ldr	r5, [r3, #0]
 8009a62:	6862      	ldr	r2, [r4, #4]
 8009a64:	2100      	movs	r1, #0
 8009a66:	4628      	mov	r0, r5
 8009a68:	f7f6 fbc2 	bl	80001f0 <memchr>
 8009a6c:	b108      	cbz	r0, 8009a72 <_printf_i+0x1f2>
 8009a6e:	1b40      	subs	r0, r0, r5
 8009a70:	6060      	str	r0, [r4, #4]
 8009a72:	6863      	ldr	r3, [r4, #4]
 8009a74:	6123      	str	r3, [r4, #16]
 8009a76:	2300      	movs	r3, #0
 8009a78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a7c:	e7a8      	b.n	80099d0 <_printf_i+0x150>
 8009a7e:	6923      	ldr	r3, [r4, #16]
 8009a80:	462a      	mov	r2, r5
 8009a82:	4649      	mov	r1, r9
 8009a84:	4640      	mov	r0, r8
 8009a86:	47d0      	blx	sl
 8009a88:	3001      	adds	r0, #1
 8009a8a:	d0ab      	beq.n	80099e4 <_printf_i+0x164>
 8009a8c:	6823      	ldr	r3, [r4, #0]
 8009a8e:	079b      	lsls	r3, r3, #30
 8009a90:	d413      	bmi.n	8009aba <_printf_i+0x23a>
 8009a92:	68e0      	ldr	r0, [r4, #12]
 8009a94:	9b03      	ldr	r3, [sp, #12]
 8009a96:	4298      	cmp	r0, r3
 8009a98:	bfb8      	it	lt
 8009a9a:	4618      	movlt	r0, r3
 8009a9c:	e7a4      	b.n	80099e8 <_printf_i+0x168>
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	4632      	mov	r2, r6
 8009aa2:	4649      	mov	r1, r9
 8009aa4:	4640      	mov	r0, r8
 8009aa6:	47d0      	blx	sl
 8009aa8:	3001      	adds	r0, #1
 8009aaa:	d09b      	beq.n	80099e4 <_printf_i+0x164>
 8009aac:	3501      	adds	r5, #1
 8009aae:	68e3      	ldr	r3, [r4, #12]
 8009ab0:	9903      	ldr	r1, [sp, #12]
 8009ab2:	1a5b      	subs	r3, r3, r1
 8009ab4:	42ab      	cmp	r3, r5
 8009ab6:	dcf2      	bgt.n	8009a9e <_printf_i+0x21e>
 8009ab8:	e7eb      	b.n	8009a92 <_printf_i+0x212>
 8009aba:	2500      	movs	r5, #0
 8009abc:	f104 0619 	add.w	r6, r4, #25
 8009ac0:	e7f5      	b.n	8009aae <_printf_i+0x22e>
 8009ac2:	bf00      	nop
 8009ac4:	0800a081 	.word	0x0800a081
 8009ac8:	0800a092 	.word	0x0800a092

08009acc <_sbrk_r>:
 8009acc:	b538      	push	{r3, r4, r5, lr}
 8009ace:	4d06      	ldr	r5, [pc, #24]	; (8009ae8 <_sbrk_r+0x1c>)
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	4604      	mov	r4, r0
 8009ad4:	4608      	mov	r0, r1
 8009ad6:	602b      	str	r3, [r5, #0]
 8009ad8:	f7f9 f89e 	bl	8002c18 <_sbrk>
 8009adc:	1c43      	adds	r3, r0, #1
 8009ade:	d102      	bne.n	8009ae6 <_sbrk_r+0x1a>
 8009ae0:	682b      	ldr	r3, [r5, #0]
 8009ae2:	b103      	cbz	r3, 8009ae6 <_sbrk_r+0x1a>
 8009ae4:	6023      	str	r3, [r4, #0]
 8009ae6:	bd38      	pop	{r3, r4, r5, pc}
 8009ae8:	20000dc4 	.word	0x20000dc4

08009aec <__sread>:
 8009aec:	b510      	push	{r4, lr}
 8009aee:	460c      	mov	r4, r1
 8009af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009af4:	f000 f8f8 	bl	8009ce8 <_read_r>
 8009af8:	2800      	cmp	r0, #0
 8009afa:	bfab      	itete	ge
 8009afc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009afe:	89a3      	ldrhlt	r3, [r4, #12]
 8009b00:	181b      	addge	r3, r3, r0
 8009b02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b06:	bfac      	ite	ge
 8009b08:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b0a:	81a3      	strhlt	r3, [r4, #12]
 8009b0c:	bd10      	pop	{r4, pc}

08009b0e <__swrite>:
 8009b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b12:	461f      	mov	r7, r3
 8009b14:	898b      	ldrh	r3, [r1, #12]
 8009b16:	05db      	lsls	r3, r3, #23
 8009b18:	4605      	mov	r5, r0
 8009b1a:	460c      	mov	r4, r1
 8009b1c:	4616      	mov	r6, r2
 8009b1e:	d505      	bpl.n	8009b2c <__swrite+0x1e>
 8009b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b24:	2302      	movs	r3, #2
 8009b26:	2200      	movs	r2, #0
 8009b28:	f000 f868 	bl	8009bfc <_lseek_r>
 8009b2c:	89a3      	ldrh	r3, [r4, #12]
 8009b2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b36:	81a3      	strh	r3, [r4, #12]
 8009b38:	4632      	mov	r2, r6
 8009b3a:	463b      	mov	r3, r7
 8009b3c:	4628      	mov	r0, r5
 8009b3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b42:	f000 b817 	b.w	8009b74 <_write_r>

08009b46 <__sseek>:
 8009b46:	b510      	push	{r4, lr}
 8009b48:	460c      	mov	r4, r1
 8009b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b4e:	f000 f855 	bl	8009bfc <_lseek_r>
 8009b52:	1c43      	adds	r3, r0, #1
 8009b54:	89a3      	ldrh	r3, [r4, #12]
 8009b56:	bf15      	itete	ne
 8009b58:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b62:	81a3      	strheq	r3, [r4, #12]
 8009b64:	bf18      	it	ne
 8009b66:	81a3      	strhne	r3, [r4, #12]
 8009b68:	bd10      	pop	{r4, pc}

08009b6a <__sclose>:
 8009b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b6e:	f000 b813 	b.w	8009b98 <_close_r>
	...

08009b74 <_write_r>:
 8009b74:	b538      	push	{r3, r4, r5, lr}
 8009b76:	4d07      	ldr	r5, [pc, #28]	; (8009b94 <_write_r+0x20>)
 8009b78:	4604      	mov	r4, r0
 8009b7a:	4608      	mov	r0, r1
 8009b7c:	4611      	mov	r1, r2
 8009b7e:	2200      	movs	r2, #0
 8009b80:	602a      	str	r2, [r5, #0]
 8009b82:	461a      	mov	r2, r3
 8009b84:	f7f8 fff7 	bl	8002b76 <_write>
 8009b88:	1c43      	adds	r3, r0, #1
 8009b8a:	d102      	bne.n	8009b92 <_write_r+0x1e>
 8009b8c:	682b      	ldr	r3, [r5, #0]
 8009b8e:	b103      	cbz	r3, 8009b92 <_write_r+0x1e>
 8009b90:	6023      	str	r3, [r4, #0]
 8009b92:	bd38      	pop	{r3, r4, r5, pc}
 8009b94:	20000dc4 	.word	0x20000dc4

08009b98 <_close_r>:
 8009b98:	b538      	push	{r3, r4, r5, lr}
 8009b9a:	4d06      	ldr	r5, [pc, #24]	; (8009bb4 <_close_r+0x1c>)
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	4604      	mov	r4, r0
 8009ba0:	4608      	mov	r0, r1
 8009ba2:	602b      	str	r3, [r5, #0]
 8009ba4:	f7f9 f803 	bl	8002bae <_close>
 8009ba8:	1c43      	adds	r3, r0, #1
 8009baa:	d102      	bne.n	8009bb2 <_close_r+0x1a>
 8009bac:	682b      	ldr	r3, [r5, #0]
 8009bae:	b103      	cbz	r3, 8009bb2 <_close_r+0x1a>
 8009bb0:	6023      	str	r3, [r4, #0]
 8009bb2:	bd38      	pop	{r3, r4, r5, pc}
 8009bb4:	20000dc4 	.word	0x20000dc4

08009bb8 <_fstat_r>:
 8009bb8:	b538      	push	{r3, r4, r5, lr}
 8009bba:	4d07      	ldr	r5, [pc, #28]	; (8009bd8 <_fstat_r+0x20>)
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	4604      	mov	r4, r0
 8009bc0:	4608      	mov	r0, r1
 8009bc2:	4611      	mov	r1, r2
 8009bc4:	602b      	str	r3, [r5, #0]
 8009bc6:	f7f8 fffe 	bl	8002bc6 <_fstat>
 8009bca:	1c43      	adds	r3, r0, #1
 8009bcc:	d102      	bne.n	8009bd4 <_fstat_r+0x1c>
 8009bce:	682b      	ldr	r3, [r5, #0]
 8009bd0:	b103      	cbz	r3, 8009bd4 <_fstat_r+0x1c>
 8009bd2:	6023      	str	r3, [r4, #0]
 8009bd4:	bd38      	pop	{r3, r4, r5, pc}
 8009bd6:	bf00      	nop
 8009bd8:	20000dc4 	.word	0x20000dc4

08009bdc <_isatty_r>:
 8009bdc:	b538      	push	{r3, r4, r5, lr}
 8009bde:	4d06      	ldr	r5, [pc, #24]	; (8009bf8 <_isatty_r+0x1c>)
 8009be0:	2300      	movs	r3, #0
 8009be2:	4604      	mov	r4, r0
 8009be4:	4608      	mov	r0, r1
 8009be6:	602b      	str	r3, [r5, #0]
 8009be8:	f7f8 fffd 	bl	8002be6 <_isatty>
 8009bec:	1c43      	adds	r3, r0, #1
 8009bee:	d102      	bne.n	8009bf6 <_isatty_r+0x1a>
 8009bf0:	682b      	ldr	r3, [r5, #0]
 8009bf2:	b103      	cbz	r3, 8009bf6 <_isatty_r+0x1a>
 8009bf4:	6023      	str	r3, [r4, #0]
 8009bf6:	bd38      	pop	{r3, r4, r5, pc}
 8009bf8:	20000dc4 	.word	0x20000dc4

08009bfc <_lseek_r>:
 8009bfc:	b538      	push	{r3, r4, r5, lr}
 8009bfe:	4d07      	ldr	r5, [pc, #28]	; (8009c1c <_lseek_r+0x20>)
 8009c00:	4604      	mov	r4, r0
 8009c02:	4608      	mov	r0, r1
 8009c04:	4611      	mov	r1, r2
 8009c06:	2200      	movs	r2, #0
 8009c08:	602a      	str	r2, [r5, #0]
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	f7f8 fff6 	bl	8002bfc <_lseek>
 8009c10:	1c43      	adds	r3, r0, #1
 8009c12:	d102      	bne.n	8009c1a <_lseek_r+0x1e>
 8009c14:	682b      	ldr	r3, [r5, #0]
 8009c16:	b103      	cbz	r3, 8009c1a <_lseek_r+0x1e>
 8009c18:	6023      	str	r3, [r4, #0]
 8009c1a:	bd38      	pop	{r3, r4, r5, pc}
 8009c1c:	20000dc4 	.word	0x20000dc4

08009c20 <memcpy>:
 8009c20:	440a      	add	r2, r1
 8009c22:	4291      	cmp	r1, r2
 8009c24:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c28:	d100      	bne.n	8009c2c <memcpy+0xc>
 8009c2a:	4770      	bx	lr
 8009c2c:	b510      	push	{r4, lr}
 8009c2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c36:	4291      	cmp	r1, r2
 8009c38:	d1f9      	bne.n	8009c2e <memcpy+0xe>
 8009c3a:	bd10      	pop	{r4, pc}

08009c3c <memmove>:
 8009c3c:	4288      	cmp	r0, r1
 8009c3e:	b510      	push	{r4, lr}
 8009c40:	eb01 0402 	add.w	r4, r1, r2
 8009c44:	d902      	bls.n	8009c4c <memmove+0x10>
 8009c46:	4284      	cmp	r4, r0
 8009c48:	4623      	mov	r3, r4
 8009c4a:	d807      	bhi.n	8009c5c <memmove+0x20>
 8009c4c:	1e43      	subs	r3, r0, #1
 8009c4e:	42a1      	cmp	r1, r4
 8009c50:	d008      	beq.n	8009c64 <memmove+0x28>
 8009c52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c5a:	e7f8      	b.n	8009c4e <memmove+0x12>
 8009c5c:	4402      	add	r2, r0
 8009c5e:	4601      	mov	r1, r0
 8009c60:	428a      	cmp	r2, r1
 8009c62:	d100      	bne.n	8009c66 <memmove+0x2a>
 8009c64:	bd10      	pop	{r4, pc}
 8009c66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c6e:	e7f7      	b.n	8009c60 <memmove+0x24>

08009c70 <__malloc_lock>:
 8009c70:	4801      	ldr	r0, [pc, #4]	; (8009c78 <__malloc_lock+0x8>)
 8009c72:	f7ff b999 	b.w	8008fa8 <__retarget_lock_acquire_recursive>
 8009c76:	bf00      	nop
 8009c78:	20000db8 	.word	0x20000db8

08009c7c <__malloc_unlock>:
 8009c7c:	4801      	ldr	r0, [pc, #4]	; (8009c84 <__malloc_unlock+0x8>)
 8009c7e:	f7ff b994 	b.w	8008faa <__retarget_lock_release_recursive>
 8009c82:	bf00      	nop
 8009c84:	20000db8 	.word	0x20000db8

08009c88 <_realloc_r>:
 8009c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c8c:	4680      	mov	r8, r0
 8009c8e:	4614      	mov	r4, r2
 8009c90:	460e      	mov	r6, r1
 8009c92:	b921      	cbnz	r1, 8009c9e <_realloc_r+0x16>
 8009c94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c98:	4611      	mov	r1, r2
 8009c9a:	f7ff ba59 	b.w	8009150 <_malloc_r>
 8009c9e:	b92a      	cbnz	r2, 8009cac <_realloc_r+0x24>
 8009ca0:	f7ff f9ea 	bl	8009078 <_free_r>
 8009ca4:	4625      	mov	r5, r4
 8009ca6:	4628      	mov	r0, r5
 8009ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cac:	f000 f82e 	bl	8009d0c <_malloc_usable_size_r>
 8009cb0:	4284      	cmp	r4, r0
 8009cb2:	4607      	mov	r7, r0
 8009cb4:	d802      	bhi.n	8009cbc <_realloc_r+0x34>
 8009cb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009cba:	d812      	bhi.n	8009ce2 <_realloc_r+0x5a>
 8009cbc:	4621      	mov	r1, r4
 8009cbe:	4640      	mov	r0, r8
 8009cc0:	f7ff fa46 	bl	8009150 <_malloc_r>
 8009cc4:	4605      	mov	r5, r0
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	d0ed      	beq.n	8009ca6 <_realloc_r+0x1e>
 8009cca:	42bc      	cmp	r4, r7
 8009ccc:	4622      	mov	r2, r4
 8009cce:	4631      	mov	r1, r6
 8009cd0:	bf28      	it	cs
 8009cd2:	463a      	movcs	r2, r7
 8009cd4:	f7ff ffa4 	bl	8009c20 <memcpy>
 8009cd8:	4631      	mov	r1, r6
 8009cda:	4640      	mov	r0, r8
 8009cdc:	f7ff f9cc 	bl	8009078 <_free_r>
 8009ce0:	e7e1      	b.n	8009ca6 <_realloc_r+0x1e>
 8009ce2:	4635      	mov	r5, r6
 8009ce4:	e7df      	b.n	8009ca6 <_realloc_r+0x1e>
	...

08009ce8 <_read_r>:
 8009ce8:	b538      	push	{r3, r4, r5, lr}
 8009cea:	4d07      	ldr	r5, [pc, #28]	; (8009d08 <_read_r+0x20>)
 8009cec:	4604      	mov	r4, r0
 8009cee:	4608      	mov	r0, r1
 8009cf0:	4611      	mov	r1, r2
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	602a      	str	r2, [r5, #0]
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	f7f8 ff20 	bl	8002b3c <_read>
 8009cfc:	1c43      	adds	r3, r0, #1
 8009cfe:	d102      	bne.n	8009d06 <_read_r+0x1e>
 8009d00:	682b      	ldr	r3, [r5, #0]
 8009d02:	b103      	cbz	r3, 8009d06 <_read_r+0x1e>
 8009d04:	6023      	str	r3, [r4, #0]
 8009d06:	bd38      	pop	{r3, r4, r5, pc}
 8009d08:	20000dc4 	.word	0x20000dc4

08009d0c <_malloc_usable_size_r>:
 8009d0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d10:	1f18      	subs	r0, r3, #4
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	bfbc      	itt	lt
 8009d16:	580b      	ldrlt	r3, [r1, r0]
 8009d18:	18c0      	addlt	r0, r0, r3
 8009d1a:	4770      	bx	lr

08009d1c <_init>:
 8009d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d1e:	bf00      	nop
 8009d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d22:	bc08      	pop	{r3}
 8009d24:	469e      	mov	lr, r3
 8009d26:	4770      	bx	lr

08009d28 <_fini>:
 8009d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d2a:	bf00      	nop
 8009d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d2e:	bc08      	pop	{r3}
 8009d30:	469e      	mov	lr, r3
 8009d32:	4770      	bx	lr

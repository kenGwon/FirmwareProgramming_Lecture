
10.FND.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a920  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  0800aad0  0800aad0  0001aad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae38  0800ae38  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae38  0800ae38  0001ae38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae40  0800ae40  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae40  0800ae40  0001ae40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae44  0800ae44  0001ae44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0800ae48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b4  2**0
                  CONTENTS
 10 .bss          00000de0  200000b4  200000b4  000200b4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000e94  20000e94  000200b4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d954  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d72  00000000  00000000  0003da38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018c0  00000000  00000000  000417b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001730  00000000  00000000  00043070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028d26  00000000  00000000  000447a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001edf8  00000000  00000000  0006d4c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed877  00000000  00000000  0008c2be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00179b35  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000073f4  00000000  00000000  00179b88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800aab8 	.word	0x0800aab8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000b8 	.word	0x200000b8
 80001ec:	0800aab8 	.word	0x0800aab8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b974 	b.w	8000d7c <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	468e      	mov	lr, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d14d      	bne.n	8000b56 <__udivmoddi4+0xaa>
 8000aba:	428a      	cmp	r2, r1
 8000abc:	4694      	mov	ip, r2
 8000abe:	d969      	bls.n	8000b94 <__udivmoddi4+0xe8>
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	b152      	cbz	r2, 8000adc <__udivmoddi4+0x30>
 8000ac6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aca:	f1c2 0120 	rsb	r1, r2, #32
 8000ace:	fa20 f101 	lsr.w	r1, r0, r1
 8000ad2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad6:	ea41 0e03 	orr.w	lr, r1, r3
 8000ada:	4094      	lsls	r4, r2
 8000adc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae0:	0c21      	lsrs	r1, r4, #16
 8000ae2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ae6:	fa1f f78c 	uxth.w	r7, ip
 8000aea:	fb08 e316 	mls	r3, r8, r6, lr
 8000aee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000af2:	fb06 f107 	mul.w	r1, r6, r7
 8000af6:	4299      	cmp	r1, r3
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x64>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b02:	f080 811f 	bcs.w	8000d44 <__udivmoddi4+0x298>
 8000b06:	4299      	cmp	r1, r3
 8000b08:	f240 811c 	bls.w	8000d44 <__udivmoddi4+0x298>
 8000b0c:	3e02      	subs	r6, #2
 8000b0e:	4463      	add	r3, ip
 8000b10:	1a5b      	subs	r3, r3, r1
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b18:	fb08 3310 	mls	r3, r8, r0, r3
 8000b1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b20:	fb00 f707 	mul.w	r7, r0, r7
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x92>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b30:	f080 810a 	bcs.w	8000d48 <__udivmoddi4+0x29c>
 8000b34:	42a7      	cmp	r7, r4
 8000b36:	f240 8107 	bls.w	8000d48 <__udivmoddi4+0x29c>
 8000b3a:	4464      	add	r4, ip
 8000b3c:	3802      	subs	r0, #2
 8000b3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b42:	1be4      	subs	r4, r4, r7
 8000b44:	2600      	movs	r6, #0
 8000b46:	b11d      	cbz	r5, 8000b50 <__udivmoddi4+0xa4>
 8000b48:	40d4      	lsrs	r4, r2
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b50:	4631      	mov	r1, r6
 8000b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d909      	bls.n	8000b6e <__udivmoddi4+0xc2>
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	f000 80ef 	beq.w	8000d3e <__udivmoddi4+0x292>
 8000b60:	2600      	movs	r6, #0
 8000b62:	e9c5 0100 	strd	r0, r1, [r5]
 8000b66:	4630      	mov	r0, r6
 8000b68:	4631      	mov	r1, r6
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	fab3 f683 	clz	r6, r3
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	d14a      	bne.n	8000c0c <__udivmoddi4+0x160>
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d302      	bcc.n	8000b80 <__udivmoddi4+0xd4>
 8000b7a:	4282      	cmp	r2, r0
 8000b7c:	f200 80f9 	bhi.w	8000d72 <__udivmoddi4+0x2c6>
 8000b80:	1a84      	subs	r4, r0, r2
 8000b82:	eb61 0303 	sbc.w	r3, r1, r3
 8000b86:	2001      	movs	r0, #1
 8000b88:	469e      	mov	lr, r3
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	d0e0      	beq.n	8000b50 <__udivmoddi4+0xa4>
 8000b8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b92:	e7dd      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000b94:	b902      	cbnz	r2, 8000b98 <__udivmoddi4+0xec>
 8000b96:	deff      	udf	#255	; 0xff
 8000b98:	fab2 f282 	clz	r2, r2
 8000b9c:	2a00      	cmp	r2, #0
 8000b9e:	f040 8092 	bne.w	8000cc6 <__udivmoddi4+0x21a>
 8000ba2:	eba1 010c 	sub.w	r1, r1, ip
 8000ba6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000baa:	fa1f fe8c 	uxth.w	lr, ip
 8000bae:	2601      	movs	r6, #1
 8000bb0:	0c20      	lsrs	r0, r4, #16
 8000bb2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bb6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bbe:	fb0e f003 	mul.w	r0, lr, r3
 8000bc2:	4288      	cmp	r0, r1
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x12c>
 8000bc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bca:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x12a>
 8000bd0:	4288      	cmp	r0, r1
 8000bd2:	f200 80cb 	bhi.w	8000d6c <__udivmoddi4+0x2c0>
 8000bd6:	4643      	mov	r3, r8
 8000bd8:	1a09      	subs	r1, r1, r0
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000be0:	fb07 1110 	mls	r1, r7, r0, r1
 8000be4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000be8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bec:	45a6      	cmp	lr, r4
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x156>
 8000bf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bf8:	d202      	bcs.n	8000c00 <__udivmoddi4+0x154>
 8000bfa:	45a6      	cmp	lr, r4
 8000bfc:	f200 80bb 	bhi.w	8000d76 <__udivmoddi4+0x2ca>
 8000c00:	4608      	mov	r0, r1
 8000c02:	eba4 040e 	sub.w	r4, r4, lr
 8000c06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c0a:	e79c      	b.n	8000b46 <__udivmoddi4+0x9a>
 8000c0c:	f1c6 0720 	rsb	r7, r6, #32
 8000c10:	40b3      	lsls	r3, r6
 8000c12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c22:	431c      	orrs	r4, r3
 8000c24:	40f9      	lsrs	r1, r7
 8000c26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c32:	0c20      	lsrs	r0, r4, #16
 8000c34:	fa1f fe8c 	uxth.w	lr, ip
 8000c38:	fb09 1118 	mls	r1, r9, r8, r1
 8000c3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c40:	fb08 f00e 	mul.w	r0, r8, lr
 8000c44:	4288      	cmp	r0, r1
 8000c46:	fa02 f206 	lsl.w	r2, r2, r6
 8000c4a:	d90b      	bls.n	8000c64 <__udivmoddi4+0x1b8>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c54:	f080 8088 	bcs.w	8000d68 <__udivmoddi4+0x2bc>
 8000c58:	4288      	cmp	r0, r1
 8000c5a:	f240 8085 	bls.w	8000d68 <__udivmoddi4+0x2bc>
 8000c5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c62:	4461      	add	r1, ip
 8000c64:	1a09      	subs	r1, r1, r0
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c78:	458e      	cmp	lr, r1
 8000c7a:	d908      	bls.n	8000c8e <__udivmoddi4+0x1e2>
 8000c7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c84:	d26c      	bcs.n	8000d60 <__udivmoddi4+0x2b4>
 8000c86:	458e      	cmp	lr, r1
 8000c88:	d96a      	bls.n	8000d60 <__udivmoddi4+0x2b4>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	4461      	add	r1, ip
 8000c8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c92:	fba0 9402 	umull	r9, r4, r0, r2
 8000c96:	eba1 010e 	sub.w	r1, r1, lr
 8000c9a:	42a1      	cmp	r1, r4
 8000c9c:	46c8      	mov	r8, r9
 8000c9e:	46a6      	mov	lr, r4
 8000ca0:	d356      	bcc.n	8000d50 <__udivmoddi4+0x2a4>
 8000ca2:	d053      	beq.n	8000d4c <__udivmoddi4+0x2a0>
 8000ca4:	b15d      	cbz	r5, 8000cbe <__udivmoddi4+0x212>
 8000ca6:	ebb3 0208 	subs.w	r2, r3, r8
 8000caa:	eb61 010e 	sbc.w	r1, r1, lr
 8000cae:	fa01 f707 	lsl.w	r7, r1, r7
 8000cb2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cb6:	40f1      	lsrs	r1, r6
 8000cb8:	431f      	orrs	r7, r3
 8000cba:	e9c5 7100 	strd	r7, r1, [r5]
 8000cbe:	2600      	movs	r6, #0
 8000cc0:	4631      	mov	r1, r6
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	f1c2 0320 	rsb	r3, r2, #32
 8000cca:	40d8      	lsrs	r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cd4:	4091      	lsls	r1, r2
 8000cd6:	4301      	orrs	r1, r0
 8000cd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cdc:	fa1f fe8c 	uxth.w	lr, ip
 8000ce0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ce4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ce8:	0c0b      	lsrs	r3, r1, #16
 8000cea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cee:	fb00 f60e 	mul.w	r6, r0, lr
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x260>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d02:	d22f      	bcs.n	8000d64 <__udivmoddi4+0x2b8>
 8000d04:	429e      	cmp	r6, r3
 8000d06:	d92d      	bls.n	8000d64 <__udivmoddi4+0x2b8>
 8000d08:	3802      	subs	r0, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	b289      	uxth	r1, r1
 8000d10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d14:	fb07 3316 	mls	r3, r7, r6, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x28a>
 8000d24:	eb1c 0101 	adds.w	r1, ip, r1
 8000d28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d2c:	d216      	bcs.n	8000d5c <__udivmoddi4+0x2b0>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d914      	bls.n	8000d5c <__udivmoddi4+0x2b0>
 8000d32:	3e02      	subs	r6, #2
 8000d34:	4461      	add	r1, ip
 8000d36:	1ac9      	subs	r1, r1, r3
 8000d38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d3c:	e738      	b.n	8000bb0 <__udivmoddi4+0x104>
 8000d3e:	462e      	mov	r6, r5
 8000d40:	4628      	mov	r0, r5
 8000d42:	e705      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000d44:	4606      	mov	r6, r0
 8000d46:	e6e3      	b.n	8000b10 <__udivmoddi4+0x64>
 8000d48:	4618      	mov	r0, r3
 8000d4a:	e6f8      	b.n	8000b3e <__udivmoddi4+0x92>
 8000d4c:	454b      	cmp	r3, r9
 8000d4e:	d2a9      	bcs.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d50:	ebb9 0802 	subs.w	r8, r9, r2
 8000d54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d58:	3801      	subs	r0, #1
 8000d5a:	e7a3      	b.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d5c:	4646      	mov	r6, r8
 8000d5e:	e7ea      	b.n	8000d36 <__udivmoddi4+0x28a>
 8000d60:	4620      	mov	r0, r4
 8000d62:	e794      	b.n	8000c8e <__udivmoddi4+0x1e2>
 8000d64:	4640      	mov	r0, r8
 8000d66:	e7d1      	b.n	8000d0c <__udivmoddi4+0x260>
 8000d68:	46d0      	mov	r8, sl
 8000d6a:	e77b      	b.n	8000c64 <__udivmoddi4+0x1b8>
 8000d6c:	3b02      	subs	r3, #2
 8000d6e:	4461      	add	r1, ip
 8000d70:	e732      	b.n	8000bd8 <__udivmoddi4+0x12c>
 8000d72:	4630      	mov	r0, r6
 8000d74:	e709      	b.n	8000b8a <__udivmoddi4+0xde>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	e742      	b.n	8000c02 <__udivmoddi4+0x156>

08000d7c <__aeabi_idiv0>:
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <DHT11_processing>:
	
}

int dht11time = 150; // 전역변수 상태
void DHT11_processing(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
	uint8_t i_RH, d_RH, i_Tmp, d_Tmp;
	char lcd_buff[20];

	if (TIM10_10ms_counter >= dht11time)
 8000d86:	4b25      	ldr	r3, [pc, #148]	; (8000e1c <DHT11_processing+0x9c>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	4b25      	ldr	r3, [pc, #148]	; (8000e20 <DHT11_processing+0xa0>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	db3f      	blt.n	8000e12 <DHT11_processing+0x92>
	{
		TIM10_10ms_counter = 0;
 8000d92:	4b22      	ldr	r3, [pc, #136]	; (8000e1c <DHT11_processing+0x9c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]

		DHT11_trriger(); // DHT11과 MCU의 Hand-shaking과정이다.
 8000d98:	f000 f860 	bl	8000e5c <DHT11_trriger>
		DHT11_DataLine_Input();
 8000d9c:	f000 f874 	bl	8000e88 <DHT11_DataLine_Input>
		DHT11_dumi_read();
 8000da0:	f000 f8e2 	bl	8000f68 <DHT11_dumi_read>

		// 여기부터 DHT11가 수집한 데이터를 읽어오는 것이다.
		i_RH = DHT11_rx_Data();
 8000da4:	f000 f8aa 	bl	8000efc <DHT11_rx_Data>
 8000da8:	4603      	mov	r3, r0
 8000daa:	75fb      	strb	r3, [r7, #23]
		d_RH = DHT11_rx_Data();
 8000dac:	f000 f8a6 	bl	8000efc <DHT11_rx_Data>
 8000db0:	4603      	mov	r3, r0
 8000db2:	75bb      	strb	r3, [r7, #22]
		i_Tmp = DHT11_rx_Data();
 8000db4:	f000 f8a2 	bl	8000efc <DHT11_rx_Data>
 8000db8:	4603      	mov	r3, r0
 8000dba:	757b      	strb	r3, [r7, #21]
		d_Tmp = DHT11_rx_Data();
 8000dbc:	f000 f89e 	bl	8000efc <DHT11_rx_Data>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	753b      	strb	r3, [r7, #20]

		DHT11_DataLine_Output();
 8000dc4:	f000 f87c 	bl	8000ec0 <DHT11_DataLine_Output>
		HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_SET);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2101      	movs	r1, #1
 8000dcc:	4815      	ldr	r0, [pc, #84]	; (8000e24 <DHT11_processing+0xa4>)
 8000dce:	f003 fc1b 	bl	8004608 <HAL_GPIO_WritePin>

		if (DHT11_print_flag)
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <DHT11_processing+0xa8>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d01b      	beq.n	8000e12 <DHT11_processing+0x92>
		{
			printf("[Tmp]%d\n",(int)i_Tmp);
 8000dda:	7d7b      	ldrb	r3, [r7, #21]
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4813      	ldr	r0, [pc, #76]	; (8000e2c <DHT11_processing+0xac>)
 8000de0:	f008 fbd6 	bl	8009590 <iprintf>
			printf("[Wet]%d\n",(int)i_RH);
 8000de4:	7dfb      	ldrb	r3, [r7, #23]
 8000de6:	4619      	mov	r1, r3
 8000de8:	4811      	ldr	r0, [pc, #68]	; (8000e30 <DHT11_processing+0xb0>)
 8000dea:	f008 fbd1 	bl	8009590 <iprintf>

			sprintf(lcd_buff, "Tmp: %d Wet: %d", (int)i_Tmp, (int)i_RH);
 8000dee:	7d7a      	ldrb	r2, [r7, #21]
 8000df0:	7dfb      	ldrb	r3, [r7, #23]
 8000df2:	4638      	mov	r0, r7
 8000df4:	490f      	ldr	r1, [pc, #60]	; (8000e34 <DHT11_processing+0xb4>)
 8000df6:	f008 fc59 	bl	80096ac <siprintf>

			if (lcd_display_mode_flag == 1)
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <DHT11_processing+0xb8>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d107      	bne.n	8000e12 <DHT11_processing+0x92>
			{
				move_cursor(0,0);
 8000e02:	2100      	movs	r1, #0
 8000e04:	2000      	movs	r0, #0
 8000e06:	f000 fa93 	bl	8001330 <move_cursor>
				lcd_string(lcd_buff);
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 fa7a 	bl	8001306 <lcd_string>
		}


		//	FND_update(i_Tmp*100 + i_RH);
	}
}
 8000e12:	bf00      	nop
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000b04 	.word	0x20000b04
 8000e20:	20000004 	.word	0x20000004
 8000e24:	40020000 	.word	0x40020000
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	0800aad0 	.word	0x0800aad0
 8000e30:	0800aadc 	.word	0x0800aadc
 8000e34:	0800aae8 	.word	0x0800aae8
 8000e38:	200000d0 	.word	0x200000d0

08000e3c <DHT11_Init>:

void DHT11_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_SET);
 8000e40:	2201      	movs	r2, #1
 8000e42:	2101      	movs	r1, #1
 8000e44:	4804      	ldr	r0, [pc, #16]	; (8000e58 <DHT11_Init+0x1c>)
 8000e46:	f003 fbdf 	bl	8004608 <HAL_GPIO_WritePin>
	HAL_Delay(3000); // 초기화 할때는 딱 한번만 일어나기 때문에 hal_delay()를 줘도 상관 없다.
 8000e4a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e4e:	f002 fd27 	bl	80038a0 <HAL_Delay>
	return;
 8000e52:	bf00      	nop
}
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40020000 	.word	0x40020000

08000e5c <DHT11_trriger>:


void DHT11_trriger(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_RESET);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2101      	movs	r1, #1
 8000e64:	4807      	ldr	r0, [pc, #28]	; (8000e84 <DHT11_trriger+0x28>)
 8000e66:	f003 fbcf 	bl	8004608 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000e6a:	2014      	movs	r0, #20
 8000e6c:	f002 fd18 	bl	80038a0 <HAL_Delay>
	
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_SET);
 8000e70:	2201      	movs	r2, #1
 8000e72:	2101      	movs	r1, #1
 8000e74:	4803      	ldr	r0, [pc, #12]	; (8000e84 <DHT11_trriger+0x28>)
 8000e76:	f003 fbc7 	bl	8004608 <HAL_GPIO_WritePin>
	delay_us(7);
 8000e7a:	2007      	movs	r0, #7
 8000e7c:	f000 fe6a 	bl	8001b54 <delay_us>
	return;
 8000e80:	bf00      	nop
}
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40020000 	.word	0x40020000

08000e88 <DHT11_DataLine_Input>:


void DHT11_DataLine_Input(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
	
	/*Configure GPIO pin : PH0 */
  GPIO_InitStruct.Pin = DHT11_DATA_RIN;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;			//Change Output to Input
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4803      	ldr	r0, [pc, #12]	; (8000ebc <DHT11_DataLine_Input+0x34>)
 8000eae:	f003 f9e7 	bl	8004280 <HAL_GPIO_Init>
	
	return;
 8000eb2:	bf00      	nop
}
 8000eb4:	3718      	adds	r7, #24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40020000 	.word	0x40020000

08000ec0 <DHT11_DataLine_Output>:


void DHT11_DataLine_Output(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
	
	/*Configure GPIO pin : PH0 */
  GPIO_InitStruct.Pin = DHT11_DATA_RIN;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;			//Change Input to Output 
 8000ed8:	2301      	movs	r3, #1
 8000eda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4803      	ldr	r0, [pc, #12]	; (8000ef8 <DHT11_DataLine_Output+0x38>)
 8000eea:	f003 f9c9 	bl	8004280 <HAL_GPIO_Init>
	
	return;
 8000eee:	bf00      	nop
}
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40020000 	.word	0x40020000

08000efc <DHT11_rx_Data>:


uint8_t DHT11_rx_Data(void) // 이 함수가 데이터시트를 코드로 옮기는 핵심 포인트 함수이다. 0과 1을 판별하는 법..
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
	uint8_t rx_data = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	71fb      	strb	r3, [r7, #7]
	
	for(int i = 0; i < 8; i++) // 8비트 받아야 하니까 for문을 8번 돌린다.
 8000f06:	2300      	movs	r3, #0
 8000f08:	603b      	str	r3, [r7, #0]
 8000f0a:	e023      	b.n	8000f54 <DHT11_rx_Data+0x58>
	{
		//when Input Data == 0
		while( 0 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f0c:	bf00      	nop
 8000f0e:	2101      	movs	r1, #1
 8000f10:	4814      	ldr	r0, [pc, #80]	; (8000f64 <DHT11_rx_Data+0x68>)
 8000f12:	f003 fb61 	bl	80045d8 <HAL_GPIO_ReadPin>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d0f8      	beq.n	8000f0e <DHT11_rx_Data+0x12>
#if 1
		delay_us(40); // 0인지 1인지 구분해야 하니까 둘의 중간 값 정도인 40마이크로 세컨드 만큼 딜레이를 주고 그 다음에 오는 if문을 통해 0인지 1인지 판단하겠다는 것이다. (0이면 26마이크로 세컨드만 유지되고, 1이면 70마이크로 세컨트가 유지되기 때문)
 8000f1c:	2028      	movs	r0, #40	; 0x28
 8000f1e:	f000 fe19 	bl	8001b54 <delay_us>
#else  // org
		delay_us(16);
#endif
		rx_data<<=1; // 한 비트를 좌로 쉬프트 시킨다. 총 8비트를 쌓아가야 하니까...
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	71fb      	strb	r3, [r7, #7]
		
		//when Input Data == 1
		if(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN))
 8000f28:	2101      	movs	r1, #1
 8000f2a:	480e      	ldr	r0, [pc, #56]	; (8000f64 <DHT11_rx_Data+0x68>)
 8000f2c:	f003 fb54 	bl	80045d8 <HAL_GPIO_ReadPin>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d003      	beq.n	8000f3e <DHT11_rx_Data+0x42>
		{
			rx_data |= 1;
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	71fb      	strb	r3, [r7, #7]
			// 단 하나의 비트만 1로 바꿔주는 것이기 때문에 그냥 상수 대입 시키는 식으로 하면 안된다.
			// 이렇게 00000000000000000000000000000001 값과 OR비트 연산을 해주면
			// rx_data는 8비트 이기 때문에 00000001과 OR 연산되어 끝자리 비트만 0에서 1로 바뀌는 효과가 발생하게 된
		}
		while( 1 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f3e:	bf00      	nop
 8000f40:	2101      	movs	r1, #1
 8000f42:	4808      	ldr	r0, [pc, #32]	; (8000f64 <DHT11_rx_Data+0x68>)
 8000f44:	f003 fb48 	bl	80045d8 <HAL_GPIO_ReadPin>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d0f8      	beq.n	8000f40 <DHT11_rx_Data+0x44>
	for(int i = 0; i < 8; i++) // 8비트 받아야 하니까 for문을 8번 돌린다.
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	3301      	adds	r3, #1
 8000f52:	603b      	str	r3, [r7, #0]
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	2b07      	cmp	r3, #7
 8000f58:	ddd8      	ble.n	8000f0c <DHT11_rx_Data+0x10>
	}
	return rx_data;
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40020000 	.word	0x40020000

08000f68 <DHT11_dumi_read>:


void DHT11_dumi_read(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	while( 1 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f6c:	bf00      	nop
 8000f6e:	2101      	movs	r1, #1
 8000f70:	480b      	ldr	r0, [pc, #44]	; (8000fa0 <DHT11_dumi_read+0x38>)
 8000f72:	f003 fb31 	bl	80045d8 <HAL_GPIO_ReadPin>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d0f8      	beq.n	8000f6e <DHT11_dumi_read+0x6>
	while( 0 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f7c:	bf00      	nop
 8000f7e:	2101      	movs	r1, #1
 8000f80:	4807      	ldr	r0, [pc, #28]	; (8000fa0 <DHT11_dumi_read+0x38>)
 8000f82:	f003 fb29 	bl	80045d8 <HAL_GPIO_ReadPin>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d0f8      	beq.n	8000f7e <DHT11_dumi_read+0x16>
	while( 1 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f8c:	bf00      	nop
 8000f8e:	2101      	movs	r1, #1
 8000f90:	4803      	ldr	r0, [pc, #12]	; (8000fa0 <DHT11_dumi_read+0x38>)
 8000f92:	f003 fb21 	bl	80045d8 <HAL_GPIO_ReadPin>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d0f8      	beq.n	8000f8e <DHT11_dumi_read+0x26>
	return;
 8000f9c:	bf00      	nop
}
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40020000 	.word	0x40020000

08000fa4 <lcd_display_mode_select>:
};

uint8_t lcd_display_mode_flag = 0;

void lcd_display_mode_select(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
	if (Get_Button(USER_Btn_GPIO_Port, USER_Btn_Pin, 4) == BUTTON_PRESS)
 8000fa8:	2204      	movs	r2, #4
 8000faa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fae:	480c      	ldr	r0, [pc, #48]	; (8000fe0 <lcd_display_mode_select+0x3c>)
 8000fb0:	f000 f81a 	bl	8000fe8 <Get_Button>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d10f      	bne.n	8000fda <lcd_display_mode_select+0x36>
	{
		lcd_command(CLEAR_DISPLAY);
 8000fba:	2001      	movs	r0, #1
 8000fbc:	f000 f922 	bl	8001204 <lcd_command>
		lcd_display_mode_flag++;
 8000fc0:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <lcd_display_mode_select+0x40>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <lcd_display_mode_select+0x40>)
 8000fca:	701a      	strb	r2, [r3, #0]
		lcd_display_mode_flag %= 4;
 8000fcc:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <lcd_display_mode_select+0x40>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	f003 0303 	and.w	r3, r3, #3
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <lcd_display_mode_select+0x40>)
 8000fd8:	701a      	strb	r2, [r3, #0]
	}
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40020800 	.word	0x40020800
 8000fe4:	200000d0 	.word	0x200000d0

08000fe8 <Get_Button>:
/*
 * desc: 사용자가 한번 버튼을 누를때마다(떼는 행동 포함) led의 on/off상태를 바꾸는 것이 목표
 * return: 완전히 눌렀다 떼면 BUTTON_RELEASE(1) 상태를 리턴
 * */
int Get_Button(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t button_number)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	807b      	strh	r3, [r7, #2]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	707b      	strb	r3, [r7, #1]
	unsigned char curr_state;
	curr_state = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin); // curr_state에는 0 또는 1의 상태가 걸리게 됨
 8000ff8:	887b      	ldrh	r3, [r7, #2]
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f003 faeb 	bl	80045d8 <HAL_GPIO_ReadPin>
 8001002:	4603      	mov	r3, r0
 8001004:	73fb      	strb	r3, [r7, #15]

	// 원치않는 노이즈를 디바운스? 채터링? 하는 if문 코드
	if (curr_state == BUTTON_PRESS && button_status[button_number] == BUTTON_RELEASE) // 처음 노이즈가 발생하는 상황을 체크
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d10d      	bne.n	8001028 <Get_Button+0x40>
 800100c:	787b      	ldrb	r3, [r7, #1]
 800100e:	4a11      	ldr	r2, [pc, #68]	; (8001054 <Get_Button+0x6c>)
 8001010:	5cd3      	ldrb	r3, [r2, r3]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d108      	bne.n	8001028 <Get_Button+0x40>
	{
		HAL_Delay(100); // 노이즈가 지나가기를 기다리는 것
 8001016:	2064      	movs	r0, #100	; 0x64
 8001018:	f002 fc42 	bl	80038a0 <HAL_Delay>
		button_status[button_number] = BUTTON_PRESS;
 800101c:	787b      	ldrb	r3, [r7, #1]
 800101e:	4a0d      	ldr	r2, [pc, #52]	; (8001054 <Get_Button+0x6c>)
 8001020:	2100      	movs	r1, #0
 8001022:	54d1      	strb	r1, [r2, r3]
		return BUTTON_RELEASE; // 버튼이 눌려진 상태이나 아직은 noise상태로 인정
 8001024:	2301      	movs	r3, #1
 8001026:	e011      	b.n	800104c <Get_Button+0x64>
	}
	else if (curr_state == BUTTON_RELEASE && button_status[button_number] == BUTTON_PRESS) // 이전에 버튼이 눌려진 상태였고, 지금은 버튼을 뗀 상태이면
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d10d      	bne.n	800104a <Get_Button+0x62>
 800102e:	787b      	ldrb	r3, [r7, #1]
 8001030:	4a08      	ldr	r2, [pc, #32]	; (8001054 <Get_Button+0x6c>)
 8001032:	5cd3      	ldrb	r3, [r2, r3]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d108      	bne.n	800104a <Get_Button+0x62>
	{
		button_status[button_number] = BUTTON_RELEASE; // button_status_table을 초기화 하고
 8001038:	787b      	ldrb	r3, [r7, #1]
 800103a:	4a06      	ldr	r2, [pc, #24]	; (8001054 <Get_Button+0x6c>)
 800103c:	2101      	movs	r1, #1
 800103e:	54d1      	strb	r1, [r2, r3]
		HAL_Delay(30);
 8001040:	201e      	movs	r0, #30
 8001042:	f002 fc2d 	bl	80038a0 <HAL_Delay>
		return BUTTON_PRESS; // 버튼을 한번 눌렀다 뗀 것으로 인정
 8001046:	2300      	movs	r3, #0
 8001048:	e000      	b.n	800104c <Get_Button+0x64>
	}
	return BUTTON_RELEASE;
 800104a:	2301      	movs	r3, #1
}
 800104c:	4618      	mov	r0, r3
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000008 	.word	0x20000008

08001058 <FND_update>:
#endif
	}
}

void FND_update(unsigned int value)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	FND[0] = FND_font[value % 10]; // 1의 자리
 8001060:	6879      	ldr	r1, [r7, #4]
 8001062:	4b28      	ldr	r3, [pc, #160]	; (8001104 <FND_update+0xac>)
 8001064:	fba3 2301 	umull	r2, r3, r3, r1
 8001068:	08da      	lsrs	r2, r3, #3
 800106a:	4613      	mov	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	4413      	add	r3, r2
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	1aca      	subs	r2, r1, r3
 8001074:	4b24      	ldr	r3, [pc, #144]	; (8001108 <FND_update+0xb0>)
 8001076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800107a:	b29a      	uxth	r2, r3
 800107c:	4b23      	ldr	r3, [pc, #140]	; (800110c <FND_update+0xb4>)
 800107e:	801a      	strh	r2, [r3, #0]
	FND[1] = FND_font[value / 10 % 10]; // 10의 자리
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4a20      	ldr	r2, [pc, #128]	; (8001104 <FND_update+0xac>)
 8001084:	fba2 2303 	umull	r2, r3, r2, r3
 8001088:	08d9      	lsrs	r1, r3, #3
 800108a:	4b1e      	ldr	r3, [pc, #120]	; (8001104 <FND_update+0xac>)
 800108c:	fba3 2301 	umull	r2, r3, r3, r1
 8001090:	08da      	lsrs	r2, r3, #3
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	1aca      	subs	r2, r1, r3
 800109c:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <FND_update+0xb0>)
 800109e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	4b19      	ldr	r3, [pc, #100]	; (800110c <FND_update+0xb4>)
 80010a6:	805a      	strh	r2, [r3, #2]
	FND[2] = FND_font[value / 100 % 10]; // 100의 자리
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a19      	ldr	r2, [pc, #100]	; (8001110 <FND_update+0xb8>)
 80010ac:	fba2 2303 	umull	r2, r3, r2, r3
 80010b0:	0959      	lsrs	r1, r3, #5
 80010b2:	4b14      	ldr	r3, [pc, #80]	; (8001104 <FND_update+0xac>)
 80010b4:	fba3 2301 	umull	r2, r3, r3, r1
 80010b8:	08da      	lsrs	r2, r3, #3
 80010ba:	4613      	mov	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4413      	add	r3, r2
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	1aca      	subs	r2, r1, r3
 80010c4:	4b10      	ldr	r3, [pc, #64]	; (8001108 <FND_update+0xb0>)
 80010c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	4b0f      	ldr	r3, [pc, #60]	; (800110c <FND_update+0xb4>)
 80010ce:	809a      	strh	r2, [r3, #4]
	FND[3] = FND_font[value / 1000 % 10]; // 1000의 자리
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a10      	ldr	r2, [pc, #64]	; (8001114 <FND_update+0xbc>)
 80010d4:	fba2 2303 	umull	r2, r3, r2, r3
 80010d8:	0999      	lsrs	r1, r3, #6
 80010da:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <FND_update+0xac>)
 80010dc:	fba3 2301 	umull	r2, r3, r3, r1
 80010e0:	08da      	lsrs	r2, r3, #3
 80010e2:	4613      	mov	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	4413      	add	r3, r2
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	1aca      	subs	r2, r1, r3
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <FND_update+0xb0>)
 80010ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <FND_update+0xb4>)
 80010f6:	80da      	strh	r2, [r3, #6]

	return;
 80010f8:	bf00      	nop
}
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	cccccccd 	.word	0xcccccccd
 8001108:	20000018 	.word	0x20000018
 800110c:	200000d4 	.word	0x200000d4
 8001110:	51eb851f 	.word	0x51eb851f
 8001114:	10624dd3 	.word	0x10624dd3

08001118 <FND4digit_off>:
void FND4digit_off(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
#if 0 // common 에노우드 WCN4-
	HAL_GPIO_WritePin(FND_COM_PORT, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(FND_DATA_PORT,FND_font[8]|FND_p, GPIO_PIN_SET);
#else // common 캐소우드 CL5642AH30
	HAL_GPIO_WritePin(FND_COM_PORT, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_SET);
 800111c:	2201      	movs	r2, #1
 800111e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8001122:	4809      	ldr	r0, [pc, #36]	; (8001148 <FND4digit_off+0x30>)
 8001124:	f003 fa70 	bl	8004608 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FND_DATA_PORT,FND_font[8]|FND_p, GPIO_PIN_RESET);
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <FND4digit_off+0x34>)
 800112a:	6a1b      	ldr	r3, [r3, #32]
 800112c:	b29b      	uxth	r3, r3
 800112e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001132:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001136:	b29b      	uxth	r3, r3
 8001138:	2200      	movs	r2, #0
 800113a:	4619      	mov	r1, r3
 800113c:	4804      	ldr	r0, [pc, #16]	; (8001150 <FND4digit_off+0x38>)
 800113e:	f003 fa63 	bl	8004608 <HAL_GPIO_WritePin>
#endif
	return;
 8001142:	bf00      	nop
}
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40020800 	.word	0x40020800
 800114c:	20000018 	.word	0x20000018
 8001150:	40020400 	.word	0x40020400

08001154 <fnd4digit_sec_clock>:
}



void fnd4digit_sec_clock(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
	static unsigned int value=0;   // 1초가 되었을때 up count
	static unsigned int msec=0;    // ms counter
	static int i=0;     // FND position indicator


	if (fnd1ms_counter >= 2)   // 2ms reached
 8001158:	4b22      	ldr	r3, [pc, #136]	; (80011e4 <fnd4digit_sec_clock+0x90>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b01      	cmp	r3, #1
 800115e:	dd3f      	ble.n	80011e0 <fnd4digit_sec_clock+0x8c>
	{
		fnd1ms_counter=0;
 8001160:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <fnd4digit_sec_clock+0x90>)
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
		msec += 2;   // 2m 주기로 FND 값을 업데이트 시키겠다는 발상이다.
 8001166:	4b20      	ldr	r3, [pc, #128]	; (80011e8 <fnd4digit_sec_clock+0x94>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	3302      	adds	r3, #2
 800116c:	4a1e      	ldr	r2, [pc, #120]	; (80011e8 <fnd4digit_sec_clock+0x94>)
 800116e:	6013      	str	r3, [r2, #0]

		if (msec > 1000)   // 1000ms reached
 8001170:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <fnd4digit_sec_clock+0x94>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001178:	d90c      	bls.n	8001194 <fnd4digit_sec_clock+0x40>
		{
			msec = 0;
 800117a:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <fnd4digit_sec_clock+0x94>)
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
			value++;       // sec count를 증가
 8001180:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <fnd4digit_sec_clock+0x98>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	3301      	adds	r3, #1
 8001186:	4a19      	ldr	r2, [pc, #100]	; (80011ec <fnd4digit_sec_clock+0x98>)
 8001188:	6013      	str	r3, [r2, #0]
			FND_update(value);
 800118a:	4b18      	ldr	r3, [pc, #96]	; (80011ec <fnd4digit_sec_clock+0x98>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff ff62 	bl	8001058 <FND_update>
		}

		FND4digit_off();
 8001194:	f7ff ffc0 	bl	8001118 <FND4digit_off>
#if 0 // common 애노우드  WCN4-
		HAL_GPIO_WritePin(FND_COM_PORT,FND_digit[i], GPIO_PIN_SET);
		HAL_GPIO_WritePin(FND_DATA_PORT, FND[i], GPIO_PIN_RESET);
#else // common 캐소우드 CL5642AH30
		HAL_GPIO_WritePin(FND_COM_PORT,FND_digit[i], GPIO_PIN_RESET);
 8001198:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <fnd4digit_sec_clock+0x9c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a15      	ldr	r2, [pc, #84]	; (80011f4 <fnd4digit_sec_clock+0xa0>)
 800119e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011a2:	2200      	movs	r2, #0
 80011a4:	4619      	mov	r1, r3
 80011a6:	4814      	ldr	r0, [pc, #80]	; (80011f8 <fnd4digit_sec_clock+0xa4>)
 80011a8:	f003 fa2e 	bl	8004608 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_DATA_PORT, FND[i], GPIO_PIN_SET);
 80011ac:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <fnd4digit_sec_clock+0x9c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a12      	ldr	r2, [pc, #72]	; (80011fc <fnd4digit_sec_clock+0xa8>)
 80011b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011b6:	2201      	movs	r2, #1
 80011b8:	4619      	mov	r1, r3
 80011ba:	4811      	ldr	r0, [pc, #68]	; (8001200 <fnd4digit_sec_clock+0xac>)
 80011bc:	f003 fa24 	bl	8004608 <HAL_GPIO_WritePin>
#endif
		i++;   // 다음 display할 FND를 가리킨다.
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <fnd4digit_sec_clock+0x9c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	3301      	adds	r3, #1
 80011c6:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <fnd4digit_sec_clock+0x9c>)
 80011c8:	6013      	str	r3, [r2, #0]
		i %= 4;
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <fnd4digit_sec_clock+0x9c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	425a      	negs	r2, r3
 80011d0:	f003 0303 	and.w	r3, r3, #3
 80011d4:	f002 0203 	and.w	r2, r2, #3
 80011d8:	bf58      	it	pl
 80011da:	4253      	negpl	r3, r2
 80011dc:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <fnd4digit_sec_clock+0x9c>)
 80011de:	6013      	str	r3, [r2, #0]
	}

}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000b00 	.word	0x20000b00
 80011e8:	200000dc 	.word	0x200000dc
 80011ec:	200000e0 	.word	0x200000e0
 80011f0:	200000e4 	.word	0x200000e4
 80011f4:	20000010 	.word	0x20000010
 80011f8:	40020800 	.word	0x40020800
 80011fc:	200000d4 	.word	0x200000d4
 8001200:	40020400 	.word	0x40020400

08001204 <lcd_command>:
#endif

}

void lcd_command(uint8_t command)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af02      	add	r7, sp, #8
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = command & 0xf0;
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	f023 030f 	bic.w	r3, r3, #15
 8001214:	73fb      	strb	r3, [r7, #15]
	low_nibble = (command<<4) & 0xf0;
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	011b      	lsls	r3, r3, #4
 800121a:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	f043 030c 	orr.w	r3, r3, #12
 8001222:	b2db      	uxtb	r3, r3
 8001224:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 8001226:	7bfb      	ldrb	r3, [r7, #15]
 8001228:	f043 0308 	orr.w	r3, r3, #8
 800122c:	b2db      	uxtb	r3, r3
 800122e:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 8001230:	7bbb      	ldrb	r3, [r7, #14]
 8001232:	f043 030c 	orr.w	r3, r3, #12
 8001236:	b2db      	uxtb	r3, r3
 8001238:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 800123a:	7bbb      	ldrb	r3, [r7, #14]
 800123c:	f043 0308 	orr.w	r3, r3, #8
 8001240:	b2db      	uxtb	r3, r3
 8001242:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 8001244:	bf00      	nop
 8001246:	f107 0208 	add.w	r2, r7, #8
 800124a:	2364      	movs	r3, #100	; 0x64
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	2304      	movs	r3, #4
 8001250:	214e      	movs	r1, #78	; 0x4e
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <lcd_command+0x64>)
 8001254:	f003 fb36 	bl	80048c4 <HAL_I2C_Master_Transmit>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1f3      	bne.n	8001246 <lcd_command+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 800125e:	bf00      	nop
}
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000340 	.word	0x20000340

0800126c <lcd_data>:

// 1 byte write... 딱 한개의 캐릭터만 찍는 것이다.
void lcd_data(uint8_t data)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af02      	add	r7, sp, #8
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = data & 0xf0;
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	f023 030f 	bic.w	r3, r3, #15
 800127c:	73fb      	strb	r3, [r7, #15]
	low_nibble = (data<<4) & 0xf0;
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	011b      	lsls	r3, r3, #4
 8001282:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	f043 030d 	orr.w	r3, r3, #13
 800128a:	b2db      	uxtb	r3, r3
 800128c:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 800128e:	7bfb      	ldrb	r3, [r7, #15]
 8001290:	f043 0309 	orr.w	r3, r3, #9
 8001294:	b2db      	uxtb	r3, r3
 8001296:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8001298:	7bbb      	ldrb	r3, [r7, #14]
 800129a:	f043 030d 	orr.w	r3, r3, #13
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 80012a2:	7bbb      	ldrb	r3, [r7, #14]
 80012a4:	f043 0309 	orr.w	r3, r3, #9
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 80012ac:	bf00      	nop
 80012ae:	f107 0208 	add.w	r2, r7, #8
 80012b2:	2364      	movs	r3, #100	; 0x64
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	2304      	movs	r3, #4
 80012b8:	214e      	movs	r1, #78	; 0x4e
 80012ba:	4805      	ldr	r0, [pc, #20]	; (80012d0 <lcd_data+0x64>)
 80012bc:	f003 fb02 	bl	80048c4 <HAL_I2C_Master_Transmit>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1f3      	bne.n	80012ae <lcd_data+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 80012c6:	bf00      	nop
}
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000340 	.word	0x20000340

080012d4 <i2c_lcd_init>:

// lcd 초기화
void i2c_lcd_init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0

	lcd_command(0x33);
 80012d8:	2033      	movs	r0, #51	; 0x33
 80012da:	f7ff ff93 	bl	8001204 <lcd_command>
	lcd_command(0x32);
 80012de:	2032      	movs	r0, #50	; 0x32
 80012e0:	f7ff ff90 	bl	8001204 <lcd_command>
	lcd_command(0x28);	//Function Set 4-bit mode
 80012e4:	2028      	movs	r0, #40	; 0x28
 80012e6:	f7ff ff8d 	bl	8001204 <lcd_command>
	lcd_command(DISPLAY_ON);
 80012ea:	200c      	movs	r0, #12
 80012ec:	f7ff ff8a 	bl	8001204 <lcd_command>
	lcd_command(0x06);	//Entry mode set
 80012f0:	2006      	movs	r0, #6
 80012f2:	f7ff ff87 	bl	8001204 <lcd_command>
	lcd_command(CLEAR_DISPLAY);
 80012f6:	2001      	movs	r0, #1
 80012f8:	f7ff ff84 	bl	8001204 <lcd_command>
	HAL_Delay(2);
 80012fc:	2002      	movs	r0, #2
 80012fe:	f002 facf 	bl	80038a0 <HAL_Delay>
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}

08001306 <lcd_string>:

// null을 만날때 까지 string을 LCD에 출력
void lcd_string(uint8_t *str)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
	while(*str) // 널문자를 만날 때까지
 800130e:	e006      	b.n	800131e <lcd_string+0x18>
	{
		lcd_data(*str++);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	1c5a      	adds	r2, r3, #1
 8001314:	607a      	str	r2, [r7, #4]
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ffa7 	bl	800126c <lcd_data>
	while(*str) // 널문자를 만날 때까지
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1f4      	bne.n	8001310 <lcd_string+0xa>
	}
}
 8001326:	bf00      	nop
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <move_cursor>:

// 해당 줄,col으로 이동 하는 함수
void move_cursor(uint8_t row, uint8_t column)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	460a      	mov	r2, r1
 800133a:	71fb      	strb	r3, [r7, #7]
 800133c:	4613      	mov	r3, r2
 800133e:	71bb      	strb	r3, [r7, #6]
	lcd_command(0x80 | row<<6 | column);
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	019b      	lsls	r3, r3, #6
 8001344:	b2da      	uxtb	r2, r3
 8001346:	79bb      	ldrb	r3, [r7, #6]
 8001348:	4313      	orrs	r3, r2
 800134a:	b2db      	uxtb	r3, r3
 800134c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001350:	b2db      	uxtb	r3, r3
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff ff56 	bl	8001204 <lcd_command>
	return;
 8001358:	bf00      	nop
}
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <get_rtc>:
uint8_t dec2bcd(uint8_t byte);
void set_time_button_UI(void);

// STM32의 RTC로부터 날짜 & 시간 정보를 읽어오는 함수
void get_rtc(void)
{
 8001360:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001364:	b08f      	sub	sp, #60	; 0x3c
 8001366:	af04      	add	r7, sp, #16
	static RTC_TimeTypeDef oldTime; // 이전 시각의 정보를 담을 변수 (static을 붙여서 전역처럼 사용)
	char lcd_buff[40];

	HAL_RTC_GetDate(&hrtc, &my_systemDate, RTC_FORMAT_BCD);
 8001368:	2201      	movs	r2, #1
 800136a:	494b      	ldr	r1, [pc, #300]	; (8001498 <get_rtc+0x138>)
 800136c:	484b      	ldr	r0, [pc, #300]	; (800149c <get_rtc+0x13c>)
 800136e:	f004 ff93 	bl	8006298 <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, &my_systemTime, RTC_FORMAT_BCD);
 8001372:	2201      	movs	r2, #1
 8001374:	494a      	ldr	r1, [pc, #296]	; (80014a0 <get_rtc+0x140>)
 8001376:	4849      	ldr	r0, [pc, #292]	; (800149c <get_rtc+0x13c>)
 8001378:	f004 feac 	bl	80060d4 <HAL_RTC_GetTime>

	if (oldTime.Seconds != my_systemTime.Seconds)
 800137c:	4b49      	ldr	r3, [pc, #292]	; (80014a4 <get_rtc+0x144>)
 800137e:	789a      	ldrb	r2, [r3, #2]
 8001380:	4b47      	ldr	r3, [pc, #284]	; (80014a0 <get_rtc+0x140>)
 8001382:	789b      	ldrb	r3, [r3, #2]
 8001384:	429a      	cmp	r2, r3
 8001386:	d07d      	beq.n	8001484 <get_rtc+0x124>
	{
		// ComPortMaster에 "YYYY-MM-DD hh:mm:ss" 형태로 뿌려주고 싶음. 그래서 BCD를 십진수로 바꿔주는 함수가 필요해진다.
		// 23년도가 save되어있는 binary format은 001 0111이다. (BCD format이었다면, 0010 0011 이었을 것)
		printf("%04d-%02d-%02d %02d-%02d-%02d\n",
				bcd2dec(my_systemDate.Year)+2000, bcd2dec(my_systemDate.Month), bcd2dec(my_systemDate.Date),
 8001388:	4b43      	ldr	r3, [pc, #268]	; (8001498 <get_rtc+0x138>)
 800138a:	78db      	ldrb	r3, [r3, #3]
 800138c:	4618      	mov	r0, r3
 800138e:	f000 f935 	bl	80015fc <bcd2dec>
 8001392:	4603      	mov	r3, r0
		printf("%04d-%02d-%02d %02d-%02d-%02d\n",
 8001394:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
				bcd2dec(my_systemDate.Year)+2000, bcd2dec(my_systemDate.Month), bcd2dec(my_systemDate.Date),
 8001398:	4b3f      	ldr	r3, [pc, #252]	; (8001498 <get_rtc+0x138>)
 800139a:	785b      	ldrb	r3, [r3, #1]
 800139c:	4618      	mov	r0, r3
 800139e:	f000 f92d 	bl	80015fc <bcd2dec>
 80013a2:	4603      	mov	r3, r0
		printf("%04d-%02d-%02d %02d-%02d-%02d\n",
 80013a4:	4698      	mov	r8, r3
				bcd2dec(my_systemDate.Year)+2000, bcd2dec(my_systemDate.Month), bcd2dec(my_systemDate.Date),
 80013a6:	4b3c      	ldr	r3, [pc, #240]	; (8001498 <get_rtc+0x138>)
 80013a8:	789b      	ldrb	r3, [r3, #2]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 f926 	bl	80015fc <bcd2dec>
 80013b0:	4603      	mov	r3, r0
		printf("%04d-%02d-%02d %02d-%02d-%02d\n",
 80013b2:	4699      	mov	r9, r3
				bcd2dec(my_systemTime.Hours), bcd2dec(my_systemTime.Minutes), bcd2dec(my_systemTime.Seconds)
 80013b4:	4b3a      	ldr	r3, [pc, #232]	; (80014a0 <get_rtc+0x140>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 f91f 	bl	80015fc <bcd2dec>
 80013be:	4603      	mov	r3, r0
		printf("%04d-%02d-%02d %02d-%02d-%02d\n",
 80013c0:	461d      	mov	r5, r3
				bcd2dec(my_systemTime.Hours), bcd2dec(my_systemTime.Minutes), bcd2dec(my_systemTime.Seconds)
 80013c2:	4b37      	ldr	r3, [pc, #220]	; (80014a0 <get_rtc+0x140>)
 80013c4:	785b      	ldrb	r3, [r3, #1]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 f918 	bl	80015fc <bcd2dec>
 80013cc:	4603      	mov	r3, r0
		printf("%04d-%02d-%02d %02d-%02d-%02d\n",
 80013ce:	461e      	mov	r6, r3
				bcd2dec(my_systemTime.Hours), bcd2dec(my_systemTime.Minutes), bcd2dec(my_systemTime.Seconds)
 80013d0:	4b33      	ldr	r3, [pc, #204]	; (80014a0 <get_rtc+0x140>)
 80013d2:	789b      	ldrb	r3, [r3, #2]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 f911 	bl	80015fc <bcd2dec>
 80013da:	4603      	mov	r3, r0
		printf("%04d-%02d-%02d %02d-%02d-%02d\n",
 80013dc:	9302      	str	r3, [sp, #8]
 80013de:	9601      	str	r6, [sp, #4]
 80013e0:	9500      	str	r5, [sp, #0]
 80013e2:	464b      	mov	r3, r9
 80013e4:	4642      	mov	r2, r8
 80013e6:	4621      	mov	r1, r4
 80013e8:	482f      	ldr	r0, [pc, #188]	; (80014a8 <get_rtc+0x148>)
 80013ea:	f008 f8d1 	bl	8009590 <iprintf>
				);

		if (lcd_display_mode_flag == 0)
 80013ee:	4b2f      	ldr	r3, [pc, #188]	; (80014ac <get_rtc+0x14c>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d146      	bne.n	8001484 <get_rtc+0x124>
		{
			sprintf(lcd_buff, "DATE:%04d-%02d-%02d",
							bcd2dec(my_systemDate.Year)+2000, bcd2dec(my_systemDate.Month), bcd2dec(my_systemDate.Date));
 80013f6:	4b28      	ldr	r3, [pc, #160]	; (8001498 <get_rtc+0x138>)
 80013f8:	78db      	ldrb	r3, [r3, #3]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 f8fe 	bl	80015fc <bcd2dec>
 8001400:	4603      	mov	r3, r0
			sprintf(lcd_buff, "DATE:%04d-%02d-%02d",
 8001402:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
							bcd2dec(my_systemDate.Year)+2000, bcd2dec(my_systemDate.Month), bcd2dec(my_systemDate.Date));
 8001406:	4b24      	ldr	r3, [pc, #144]	; (8001498 <get_rtc+0x138>)
 8001408:	785b      	ldrb	r3, [r3, #1]
 800140a:	4618      	mov	r0, r3
 800140c:	f000 f8f6 	bl	80015fc <bcd2dec>
 8001410:	4603      	mov	r3, r0
			sprintf(lcd_buff, "DATE:%04d-%02d-%02d",
 8001412:	461d      	mov	r5, r3
							bcd2dec(my_systemDate.Year)+2000, bcd2dec(my_systemDate.Month), bcd2dec(my_systemDate.Date));
 8001414:	4b20      	ldr	r3, [pc, #128]	; (8001498 <get_rtc+0x138>)
 8001416:	789b      	ldrb	r3, [r3, #2]
 8001418:	4618      	mov	r0, r3
 800141a:	f000 f8ef 	bl	80015fc <bcd2dec>
 800141e:	4603      	mov	r3, r0
			sprintf(lcd_buff, "DATE:%04d-%02d-%02d",
 8001420:	4638      	mov	r0, r7
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	462b      	mov	r3, r5
 8001426:	4622      	mov	r2, r4
 8001428:	4921      	ldr	r1, [pc, #132]	; (80014b0 <get_rtc+0x150>)
 800142a:	f008 f93f 	bl	80096ac <siprintf>
			move_cursor(0, 0);
 800142e:	2100      	movs	r1, #0
 8001430:	2000      	movs	r0, #0
 8001432:	f7ff ff7d 	bl	8001330 <move_cursor>
			lcd_string(lcd_buff);
 8001436:	463b      	mov	r3, r7
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff64 	bl	8001306 <lcd_string>

			sprintf(lcd_buff, "TIME:%02d-%02d-%02d",
							bcd2dec(my_systemTime.Hours), bcd2dec(my_systemTime.Minutes), bcd2dec(my_systemTime.Seconds));
 800143e:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <get_rtc+0x140>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f000 f8da 	bl	80015fc <bcd2dec>
 8001448:	4603      	mov	r3, r0
			sprintf(lcd_buff, "TIME:%02d-%02d-%02d",
 800144a:	461c      	mov	r4, r3
							bcd2dec(my_systemTime.Hours), bcd2dec(my_systemTime.Minutes), bcd2dec(my_systemTime.Seconds));
 800144c:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <get_rtc+0x140>)
 800144e:	785b      	ldrb	r3, [r3, #1]
 8001450:	4618      	mov	r0, r3
 8001452:	f000 f8d3 	bl	80015fc <bcd2dec>
 8001456:	4603      	mov	r3, r0
			sprintf(lcd_buff, "TIME:%02d-%02d-%02d",
 8001458:	461d      	mov	r5, r3
							bcd2dec(my_systemTime.Hours), bcd2dec(my_systemTime.Minutes), bcd2dec(my_systemTime.Seconds));
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <get_rtc+0x140>)
 800145c:	789b      	ldrb	r3, [r3, #2]
 800145e:	4618      	mov	r0, r3
 8001460:	f000 f8cc 	bl	80015fc <bcd2dec>
 8001464:	4603      	mov	r3, r0
			sprintf(lcd_buff, "TIME:%02d-%02d-%02d",
 8001466:	4638      	mov	r0, r7
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	462b      	mov	r3, r5
 800146c:	4622      	mov	r2, r4
 800146e:	4911      	ldr	r1, [pc, #68]	; (80014b4 <get_rtc+0x154>)
 8001470:	f008 f91c 	bl	80096ac <siprintf>
			move_cursor(1, 0);
 8001474:	2100      	movs	r1, #0
 8001476:	2001      	movs	r0, #1
 8001478:	f7ff ff5a 	bl	8001330 <move_cursor>
			lcd_string(lcd_buff);
 800147c:	463b      	mov	r3, r7
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff ff41 	bl	8001306 <lcd_string>
		}
	}

	oldTime.Seconds = my_systemTime.Seconds;
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <get_rtc+0x140>)
 8001486:	789a      	ldrb	r2, [r3, #2]
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <get_rtc+0x144>)
 800148a:	709a      	strb	r2, [r3, #2]
}
 800148c:	bf00      	nop
 800148e:	372c      	adds	r7, #44	; 0x2c
 8001490:	46bd      	mov	sp, r7
 8001492:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001496:	bf00      	nop
 8001498:	200000e8 	.word	0x200000e8
 800149c:	20000394 	.word	0x20000394
 80014a0:	200000ec 	.word	0x200000ec
 80014a4:	20000100 	.word	0x20000100
 80014a8:	0800aaf8 	.word	0x0800aaf8
 80014ac:	200000d0 	.word	0x200000d0
 80014b0:	0800ab18 	.word	0x0800ab18
 80014b4:	0800ab2c 	.word	0x0800ab2c

080014b8 <set_rtc>:

// ComPortMaster에서 "setrtc231016103800"이라는 문자열이 들어오면 이 문자열을 파싱해서 현재 MCU의 RTC 시간을 해당 값으로 셋팅해준다는 것
void set_rtc(char *date_time)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	char yy[4], mm[4], dd[4]; // date
	char hh[4], min[4], ss[4]; // time

	strncpy(yy, date_time+6, 2);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	1d99      	adds	r1, r3, #6
 80014c4:	f107 031c 	add.w	r3, r7, #28
 80014c8:	2202      	movs	r2, #2
 80014ca:	4618      	mov	r0, r3
 80014cc:	f008 f922 	bl	8009714 <strncpy>
	strncpy(mm, date_time+8, 2);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f103 0108 	add.w	r1, r3, #8
 80014d6:	f107 0318 	add.w	r3, r7, #24
 80014da:	2202      	movs	r2, #2
 80014dc:	4618      	mov	r0, r3
 80014de:	f008 f919 	bl	8009714 <strncpy>
	strncpy(dd, date_time+10, 2);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f103 010a 	add.w	r1, r3, #10
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	2202      	movs	r2, #2
 80014ee:	4618      	mov	r0, r3
 80014f0:	f008 f910 	bl	8009714 <strncpy>
	strncpy(hh, date_time+12, 2);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f103 010c 	add.w	r1, r3, #12
 80014fa:	f107 0310 	add.w	r3, r7, #16
 80014fe:	2202      	movs	r2, #2
 8001500:	4618      	mov	r0, r3
 8001502:	f008 f907 	bl	8009714 <strncpy>
	strncpy(min, date_time+14, 2);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f103 010e 	add.w	r1, r3, #14
 800150c:	f107 030c 	add.w	r3, r7, #12
 8001510:	2202      	movs	r2, #2
 8001512:	4618      	mov	r0, r3
 8001514:	f008 f8fe 	bl	8009714 <strncpy>
	strncpy(ss, date_time+16, 2);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f103 0110 	add.w	r1, r3, #16
 800151e:	f107 0308 	add.w	r3, r7, #8
 8001522:	2202      	movs	r2, #2
 8001524:	4618      	mov	r0, r3
 8001526:	f008 f8f5 	bl	8009714 <strncpy>

	// ascii --> int --> bcd
	my_systemDate.Year = dec2bcd(atoi(yy));
 800152a:	f107 031c 	add.w	r3, r7, #28
 800152e:	4618      	mov	r0, r3
 8001530:	f007 fff8 	bl	8009524 <atoi>
 8001534:	4603      	mov	r3, r0
 8001536:	b2db      	uxtb	r3, r3
 8001538:	4618      	mov	r0, r3
 800153a:	f000 f87b 	bl	8001634 <dec2bcd>
 800153e:	4603      	mov	r3, r0
 8001540:	461a      	mov	r2, r3
 8001542:	4b2b      	ldr	r3, [pc, #172]	; (80015f0 <set_rtc+0x138>)
 8001544:	70da      	strb	r2, [r3, #3]
	my_systemDate.Month = dec2bcd(atoi(mm));
 8001546:	f107 0318 	add.w	r3, r7, #24
 800154a:	4618      	mov	r0, r3
 800154c:	f007 ffea 	bl	8009524 <atoi>
 8001550:	4603      	mov	r3, r0
 8001552:	b2db      	uxtb	r3, r3
 8001554:	4618      	mov	r0, r3
 8001556:	f000 f86d 	bl	8001634 <dec2bcd>
 800155a:	4603      	mov	r3, r0
 800155c:	461a      	mov	r2, r3
 800155e:	4b24      	ldr	r3, [pc, #144]	; (80015f0 <set_rtc+0x138>)
 8001560:	705a      	strb	r2, [r3, #1]
	my_systemDate.Date = dec2bcd(atoi(dd));
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	4618      	mov	r0, r3
 8001568:	f007 ffdc 	bl	8009524 <atoi>
 800156c:	4603      	mov	r3, r0
 800156e:	b2db      	uxtb	r3, r3
 8001570:	4618      	mov	r0, r3
 8001572:	f000 f85f 	bl	8001634 <dec2bcd>
 8001576:	4603      	mov	r3, r0
 8001578:	461a      	mov	r2, r3
 800157a:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <set_rtc+0x138>)
 800157c:	709a      	strb	r2, [r3, #2]
	my_systemTime.Hours = dec2bcd(atoi(hh));
 800157e:	f107 0310 	add.w	r3, r7, #16
 8001582:	4618      	mov	r0, r3
 8001584:	f007 ffce 	bl	8009524 <atoi>
 8001588:	4603      	mov	r3, r0
 800158a:	b2db      	uxtb	r3, r3
 800158c:	4618      	mov	r0, r3
 800158e:	f000 f851 	bl	8001634 <dec2bcd>
 8001592:	4603      	mov	r3, r0
 8001594:	461a      	mov	r2, r3
 8001596:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <set_rtc+0x13c>)
 8001598:	701a      	strb	r2, [r3, #0]
	my_systemTime.Minutes = dec2bcd(atoi(min));
 800159a:	f107 030c 	add.w	r3, r7, #12
 800159e:	4618      	mov	r0, r3
 80015a0:	f007 ffc0 	bl	8009524 <atoi>
 80015a4:	4603      	mov	r3, r0
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	4618      	mov	r0, r3
 80015aa:	f000 f843 	bl	8001634 <dec2bcd>
 80015ae:	4603      	mov	r3, r0
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <set_rtc+0x13c>)
 80015b4:	705a      	strb	r2, [r3, #1]
	my_systemTime.Seconds = dec2bcd(atoi(ss));
 80015b6:	f107 0308 	add.w	r3, r7, #8
 80015ba:	4618      	mov	r0, r3
 80015bc:	f007 ffb2 	bl	8009524 <atoi>
 80015c0:	4603      	mov	r3, r0
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	4618      	mov	r0, r3
 80015c6:	f000 f835 	bl	8001634 <dec2bcd>
 80015ca:	4603      	mov	r3, r0
 80015cc:	461a      	mov	r2, r3
 80015ce:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <set_rtc+0x13c>)
 80015d0:	709a      	strb	r2, [r3, #2]

	HAL_RTC_SetDate(&hrtc, &my_systemDate, RTC_FORMAT_BCD);
 80015d2:	2201      	movs	r2, #1
 80015d4:	4906      	ldr	r1, [pc, #24]	; (80015f0 <set_rtc+0x138>)
 80015d6:	4808      	ldr	r0, [pc, #32]	; (80015f8 <set_rtc+0x140>)
 80015d8:	f004 fdda 	bl	8006190 <HAL_RTC_SetDate>
	HAL_RTC_SetTime(&hrtc, &my_systemTime, RTC_FORMAT_BCD);
 80015dc:	2201      	movs	r2, #1
 80015de:	4905      	ldr	r1, [pc, #20]	; (80015f4 <set_rtc+0x13c>)
 80015e0:	4805      	ldr	r0, [pc, #20]	; (80015f8 <set_rtc+0x140>)
 80015e2:	f004 fcdd 	bl	8005fa0 <HAL_RTC_SetTime>
}
 80015e6:	bf00      	nop
 80015e8:	3720      	adds	r7, #32
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	200000e8 	.word	0x200000e8
 80015f4:	200000ec 	.word	0x200000ec
 80015f8:	20000394 	.word	0x20000394

080015fc <bcd2dec>:

// 0010 0111 -> 23 (.ioc 환경변수 설정에서 날자값을 bcd포맷으로 저장하게 했기 때문에 이렇게 된다. binary 포맷이었다면 0001 0111 이었을 것)
uint8_t bcd2dec(uint8_t byte)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	71fb      	strb	r3, [r7, #7]
	uint8_t high, low;
	low = byte & 0x0f; // 하위 4bit (low nibble)
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	f003 030f 	and.w	r3, r3, #15
 800160c:	73fb      	strb	r3, [r7, #15]
	high = (byte >> 4) * 10; // 상위 4bit (high nibble)
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	091b      	lsrs	r3, r3, #4
 8001612:	b2db      	uxtb	r3, r3
 8001614:	461a      	mov	r2, r3
 8001616:	0092      	lsls	r2, r2, #2
 8001618:	4413      	add	r3, r2
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	73bb      	strb	r3, [r7, #14]

	return high + low;
 800161e:	7bba      	ldrb	r2, [r7, #14]
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	4413      	add	r3, r2
 8001624:	b2db      	uxtb	r3, r3
}
 8001626:	4618      	mov	r0, r3
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <dec2bcd>:

// 23 -> 0010 0111
uint8_t dec2bcd(uint8_t byte)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
	uint8_t high, low;

	high = (byte / 10) << 4;
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	4a0d      	ldr	r2, [pc, #52]	; (8001678 <dec2bcd+0x44>)
 8001642:	fba2 2303 	umull	r2, r3, r2, r3
 8001646:	08db      	lsrs	r3, r3, #3
 8001648:	b2db      	uxtb	r3, r3
 800164a:	011b      	lsls	r3, r3, #4
 800164c:	73fb      	strb	r3, [r7, #15]
	low = (byte % 10);
 800164e:	79fa      	ldrb	r2, [r7, #7]
 8001650:	4b09      	ldr	r3, [pc, #36]	; (8001678 <dec2bcd+0x44>)
 8001652:	fba3 1302 	umull	r1, r3, r3, r2
 8001656:	08d9      	lsrs	r1, r3, #3
 8001658:	460b      	mov	r3, r1
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	440b      	add	r3, r1
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	73bb      	strb	r3, [r7, #14]

	return high + low;
 8001664:	7bfa      	ldrb	r2, [r7, #15]
 8001666:	7bbb      	ldrb	r3, [r7, #14]
 8001668:	4413      	add	r3, r2
 800166a:	b2db      	uxtb	r3, r3
}
 800166c:	4618      	mov	r0, r3
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	cccccccd 	.word	0xcccccccd

0800167c <set_time_button_UI>:
// button1: 분 정보를 변경하는 버튼. 0분~59분 (up count)
// button2: 초 정보를 변경하는 버튼. 0초~59초 (up count)
// button3: 변경 완료 현재까지 변경된 내용을 저장
//
void set_time_button_UI(void)
{
 800167c:	b5b0      	push	{r4, r5, r7, lr}
 800167e:	b096      	sub	sp, #88	; 0x58
 8001680:	af02      	add	r7, sp, #8
	char lcd_buff1[20], lcd_buff2[20];

	RTC_TimeTypeDef curr_time;
	RTC_TimeTypeDef temp_time;

	if (lcd_display_mode_flag == 3)
 8001682:	4b6e      	ldr	r3, [pc, #440]	; (800183c <set_time_button_UI+0x1c0>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b03      	cmp	r3, #3
 8001688:	f040 80d4 	bne.w	8001834 <set_time_button_UI+0x1b8>
	{
		if(Get_Button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 800168c:	2200      	movs	r2, #0
 800168e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001692:	486b      	ldr	r0, [pc, #428]	; (8001840 <set_time_button_UI+0x1c4>)
 8001694:	f7ff fca8 	bl	8000fe8 <Get_Button>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d108      	bne.n	80016b0 <set_time_button_UI+0x34>
		{
			hour++;
 800169e:	4b69      	ldr	r3, [pc, #420]	; (8001844 <set_time_button_UI+0x1c8>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	3301      	adds	r3, #1
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4b67      	ldr	r3, [pc, #412]	; (8001844 <set_time_button_UI+0x1c8>)
 80016a8:	701a      	strb	r2, [r3, #0]
			lcd_command(CLEAR_DISPLAY);
 80016aa:	2001      	movs	r0, #1
 80016ac:	f7ff fdaa 	bl	8001204 <lcd_command>
		}
		if(Get_Button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 80016b0:	2201      	movs	r2, #1
 80016b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016b6:	4862      	ldr	r0, [pc, #392]	; (8001840 <set_time_button_UI+0x1c4>)
 80016b8:	f7ff fc96 	bl	8000fe8 <Get_Button>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d108      	bne.n	80016d4 <set_time_button_UI+0x58>
		{
			minute++;
 80016c2:	4b61      	ldr	r3, [pc, #388]	; (8001848 <set_time_button_UI+0x1cc>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	3301      	adds	r3, #1
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	4b5f      	ldr	r3, [pc, #380]	; (8001848 <set_time_button_UI+0x1cc>)
 80016cc:	701a      	strb	r2, [r3, #0]
			lcd_command(CLEAR_DISPLAY);
 80016ce:	2001      	movs	r0, #1
 80016d0:	f7ff fd98 	bl	8001204 <lcd_command>
		}
		if(Get_Button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 80016d4:	2202      	movs	r2, #2
 80016d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016da:	4859      	ldr	r0, [pc, #356]	; (8001840 <set_time_button_UI+0x1c4>)
 80016dc:	f7ff fc84 	bl	8000fe8 <Get_Button>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d108      	bne.n	80016f8 <set_time_button_UI+0x7c>
		{
			second++;
 80016e6:	4b59      	ldr	r3, [pc, #356]	; (800184c <set_time_button_UI+0x1d0>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	3301      	adds	r3, #1
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4b57      	ldr	r3, [pc, #348]	; (800184c <set_time_button_UI+0x1d0>)
 80016f0:	701a      	strb	r2, [r3, #0]
			lcd_command(CLEAR_DISPLAY);
 80016f2:	2001      	movs	r0, #1
 80016f4:	f7ff fd86 	bl	8001204 <lcd_command>
		}

		hour %= 24;
 80016f8:	4b52      	ldr	r3, [pc, #328]	; (8001844 <set_time_button_UI+0x1c8>)
 80016fa:	781a      	ldrb	r2, [r3, #0]
 80016fc:	4b54      	ldr	r3, [pc, #336]	; (8001850 <set_time_button_UI+0x1d4>)
 80016fe:	fba3 1302 	umull	r1, r3, r3, r2
 8001702:	0919      	lsrs	r1, r3, #4
 8001704:	460b      	mov	r3, r1
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	440b      	add	r3, r1
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	b2da      	uxtb	r2, r3
 8001710:	4b4c      	ldr	r3, [pc, #304]	; (8001844 <set_time_button_UI+0x1c8>)
 8001712:	701a      	strb	r2, [r3, #0]
		minute %= 60;
 8001714:	4b4c      	ldr	r3, [pc, #304]	; (8001848 <set_time_button_UI+0x1cc>)
 8001716:	781a      	ldrb	r2, [r3, #0]
 8001718:	4b4e      	ldr	r3, [pc, #312]	; (8001854 <set_time_button_UI+0x1d8>)
 800171a:	fba3 1302 	umull	r1, r3, r3, r2
 800171e:	0959      	lsrs	r1, r3, #5
 8001720:	460b      	mov	r3, r1
 8001722:	011b      	lsls	r3, r3, #4
 8001724:	1a5b      	subs	r3, r3, r1
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	b2da      	uxtb	r2, r3
 800172c:	4b46      	ldr	r3, [pc, #280]	; (8001848 <set_time_button_UI+0x1cc>)
 800172e:	701a      	strb	r2, [r3, #0]
		second %= 60;
 8001730:	4b46      	ldr	r3, [pc, #280]	; (800184c <set_time_button_UI+0x1d0>)
 8001732:	781a      	ldrb	r2, [r3, #0]
 8001734:	4b47      	ldr	r3, [pc, #284]	; (8001854 <set_time_button_UI+0x1d8>)
 8001736:	fba3 1302 	umull	r1, r3, r3, r2
 800173a:	0959      	lsrs	r1, r3, #5
 800173c:	460b      	mov	r3, r1
 800173e:	011b      	lsls	r3, r3, #4
 8001740:	1a5b      	subs	r3, r3, r1
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	b2da      	uxtb	r2, r3
 8001748:	4b40      	ldr	r3, [pc, #256]	; (800184c <set_time_button_UI+0x1d0>)
 800174a:	701a      	strb	r2, [r3, #0]

		HAL_RTC_GetTime(&hrtc, &curr_time, RTC_FORMAT_BCD);
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	2201      	movs	r2, #1
 8001752:	4619      	mov	r1, r3
 8001754:	4840      	ldr	r0, [pc, #256]	; (8001858 <set_time_button_UI+0x1dc>)
 8001756:	f004 fcbd 	bl	80060d4 <HAL_RTC_GetTime>
		sprintf(lcd_buff1, "NOW=%02d:%02d:%02d", bcd2dec(curr_time.Hours), bcd2dec(curr_time.Minutes), bcd2dec(curr_time.Seconds));
 800175a:	7d3b      	ldrb	r3, [r7, #20]
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ff4d 	bl	80015fc <bcd2dec>
 8001762:	4603      	mov	r3, r0
 8001764:	461c      	mov	r4, r3
 8001766:	7d7b      	ldrb	r3, [r7, #21]
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff47 	bl	80015fc <bcd2dec>
 800176e:	4603      	mov	r3, r0
 8001770:	461d      	mov	r5, r3
 8001772:	7dbb      	ldrb	r3, [r7, #22]
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff41 	bl	80015fc <bcd2dec>
 800177a:	4603      	mov	r3, r0
 800177c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	462b      	mov	r3, r5
 8001784:	4622      	mov	r2, r4
 8001786:	4935      	ldr	r1, [pc, #212]	; (800185c <set_time_button_UI+0x1e0>)
 8001788:	f007 ff90 	bl	80096ac <siprintf>
		move_cursor(0, 0);
 800178c:	2100      	movs	r1, #0
 800178e:	2000      	movs	r0, #0
 8001790:	f7ff fdce 	bl	8001330 <move_cursor>
		lcd_string(lcd_buff1);
 8001794:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fdb4 	bl	8001306 <lcd_string>

		sprintf(lcd_buff2, "h:%02d m:%02d s:%02d", hour, minute, second);
 800179e:	4b29      	ldr	r3, [pc, #164]	; (8001844 <set_time_button_UI+0x1c8>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	461a      	mov	r2, r3
 80017a4:	4b28      	ldr	r3, [pc, #160]	; (8001848 <set_time_button_UI+0x1cc>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	4619      	mov	r1, r3
 80017aa:	4b28      	ldr	r3, [pc, #160]	; (800184c <set_time_button_UI+0x1d0>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	460b      	mov	r3, r1
 80017b6:	492a      	ldr	r1, [pc, #168]	; (8001860 <set_time_button_UI+0x1e4>)
 80017b8:	f007 ff78 	bl	80096ac <siprintf>
		move_cursor(1, 0);
 80017bc:	2100      	movs	r1, #0
 80017be:	2001      	movs	r0, #1
 80017c0:	f7ff fdb6 	bl	8001330 <move_cursor>
		lcd_string(lcd_buff2);
 80017c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fd9c 	bl	8001306 <lcd_string>

		if(Get_Button(BUTTON3_GPIO_Port, BUTTON3_Pin, 3) == BUTTON_PRESS)
 80017ce:	2203      	movs	r2, #3
 80017d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017d4:	481a      	ldr	r0, [pc, #104]	; (8001840 <set_time_button_UI+0x1c4>)
 80017d6:	f7ff fc07 	bl	8000fe8 <Get_Button>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d129      	bne.n	8001834 <set_time_button_UI+0x1b8>
		{
			lcd_command(CLEAR_DISPLAY);
 80017e0:	2001      	movs	r0, #1
 80017e2:	f7ff fd0f 	bl	8001204 <lcd_command>

			temp_time.Hours = dec2bcd(hour);
 80017e6:	4b17      	ldr	r3, [pc, #92]	; (8001844 <set_time_button_UI+0x1c8>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff ff22 	bl	8001634 <dec2bcd>
 80017f0:	4603      	mov	r3, r0
 80017f2:	703b      	strb	r3, [r7, #0]
			temp_time.Minutes = dec2bcd(minute);
 80017f4:	4b14      	ldr	r3, [pc, #80]	; (8001848 <set_time_button_UI+0x1cc>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff1b 	bl	8001634 <dec2bcd>
 80017fe:	4603      	mov	r3, r0
 8001800:	707b      	strb	r3, [r7, #1]
			temp_time.Seconds = dec2bcd(second);
 8001802:	4b12      	ldr	r3, [pc, #72]	; (800184c <set_time_button_UI+0x1d0>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff ff14 	bl	8001634 <dec2bcd>
 800180c:	4603      	mov	r3, r0
 800180e:	70bb      	strb	r3, [r7, #2]
			HAL_RTC_SetTime(&hrtc, &temp_time, RTC_FORMAT_BCD);
 8001810:	463b      	mov	r3, r7
 8001812:	2201      	movs	r2, #1
 8001814:	4619      	mov	r1, r3
 8001816:	4810      	ldr	r0, [pc, #64]	; (8001858 <set_time_button_UI+0x1dc>)
 8001818:	f004 fbc2 	bl	8005fa0 <HAL_RTC_SetTime>

			hour = 0;
 800181c:	4b09      	ldr	r3, [pc, #36]	; (8001844 <set_time_button_UI+0x1c8>)
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]
			minute = 0;
 8001822:	4b09      	ldr	r3, [pc, #36]	; (8001848 <set_time_button_UI+0x1cc>)
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
			second = 0;
 8001828:	4b08      	ldr	r3, [pc, #32]	; (800184c <set_time_button_UI+0x1d0>)
 800182a:	2200      	movs	r2, #0
 800182c:	701a      	strb	r2, [r3, #0]
			lcd_display_mode_flag = 0;
 800182e:	4b03      	ldr	r3, [pc, #12]	; (800183c <set_time_button_UI+0x1c0>)
 8001830:	2200      	movs	r2, #0
 8001832:	701a      	strb	r2, [r3, #0]
//				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
//				HAL_Delay(200);
//			}
		}
	}
}
 8001834:	bf00      	nop
 8001836:	3750      	adds	r7, #80	; 0x50
 8001838:	46bd      	mov	sp, r7
 800183a:	bdb0      	pop	{r4, r5, r7, pc}
 800183c:	200000d0 	.word	0x200000d0
 8001840:	40021000 	.word	0x40021000
 8001844:	20000114 	.word	0x20000114
 8001848:	20000115 	.word	0x20000115
 800184c:	20000116 	.word	0x20000116
 8001850:	aaaaaaab 	.word	0xaaaaaaab
 8001854:	88888889 	.word	0x88888889
 8001858:	20000394 	.word	0x20000394
 800185c:	0800ab40 	.word	0x0800ab40
 8001860:	0800ab54 	.word	0x0800ab54

08001864 <led_all_on>:

	fp[func_index]();
}

void led_all_on(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|
//			GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, 1);
	HAL_GPIO_WritePin(GPIOD, 0xff, 1);
 8001868:	2201      	movs	r2, #1
 800186a:	21ff      	movs	r1, #255	; 0xff
 800186c:	4802      	ldr	r0, [pc, #8]	; (8001878 <led_all_on+0x14>)
 800186e:	f002 fecb 	bl	8004608 <HAL_GPIO_WritePin>
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40020c00 	.word	0x40020c00

0800187c <led_all_off>:

void led_all_off(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|
//				GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, 0);
	HAL_GPIO_WritePin(GPIOD, 0xff, 0);
 8001880:	2200      	movs	r2, #0
 8001882:	21ff      	movs	r1, #255	; 0xff
 8001884:	4802      	ldr	r0, [pc, #8]	; (8001890 <led_all_off+0x14>)
 8001886:	f002 febf 	bl	8004608 <HAL_GPIO_WritePin>
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40020c00 	.word	0x40020c00

08001894 <led_on_up>:

void led_on_up(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
	//	static int i = 0;
	int i = 0;
 800189a:	2300      	movs	r3, #0
 800189c:	607b      	str	r3, [r7, #4]
	t1ms_counter = 0;
 800189e:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <led_on_up+0x50>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]

	led_all_off();
 80018a4:	f7ff ffea 	bl	800187c <led_all_off>

	while(i < 8)
 80018a8:	e014      	b.n	80018d4 <led_on_up+0x40>
	{
		if (t1ms_counter >= 200)
 80018aa:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <led_on_up+0x50>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2bc7      	cmp	r3, #199	; 0xc7
 80018b0:	dd10      	ble.n	80018d4 <led_on_up+0x40>
		{
			t1ms_counter = 0;
 80018b2:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <led_on_up+0x50>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
			led_all_off();
 80018b8:	f7ff ffe0 	bl	800187c <led_all_off>
			HAL_GPIO_WritePin(GPIOD, 0x01 << i++, 1);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	607a      	str	r2, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	2201      	movs	r2, #1
 80018cc:	4619      	mov	r1, r3
 80018ce:	4806      	ldr	r0, [pc, #24]	; (80018e8 <led_on_up+0x54>)
 80018d0:	f002 fe9a 	bl	8004608 <HAL_GPIO_WritePin>
	while(i < 8)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b07      	cmp	r3, #7
 80018d8:	dde7      	ble.n	80018aa <led_on_up+0x16>
		}
	}
}
 80018da:	bf00      	nop
 80018dc:	bf00      	nop
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20000afc 	.word	0x20000afc
 80018e8:	40020c00 	.word	0x40020c00

080018ec <led_on_down>:

void led_on_down(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
	int i = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	607b      	str	r3, [r7, #4]
	t1ms_counter = 0;
 80018f6:	4b11      	ldr	r3, [pc, #68]	; (800193c <led_on_down+0x50>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]

	led_all_off();
 80018fc:	f7ff ffbe 	bl	800187c <led_all_off>

	while(i < 8)
 8001900:	e014      	b.n	800192c <led_on_down+0x40>
	{
		if (t1ms_counter >= 200)
 8001902:	4b0e      	ldr	r3, [pc, #56]	; (800193c <led_on_down+0x50>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2bc7      	cmp	r3, #199	; 0xc7
 8001908:	dd10      	ble.n	800192c <led_on_down+0x40>
		{
			t1ms_counter = 0;
 800190a:	4b0c      	ldr	r3, [pc, #48]	; (800193c <led_on_down+0x50>)
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
			led_all_off();
 8001910:	f7ff ffb4 	bl	800187c <led_all_off>
			HAL_GPIO_WritePin(GPIOD, 0x80 >> i++, 1);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	1c5a      	adds	r2, r3, #1
 8001918:	607a      	str	r2, [r7, #4]
 800191a:	2280      	movs	r2, #128	; 0x80
 800191c:	fa42 f303 	asr.w	r3, r2, r3
 8001920:	b29b      	uxth	r3, r3
 8001922:	2201      	movs	r2, #1
 8001924:	4619      	mov	r1, r3
 8001926:	4806      	ldr	r0, [pc, #24]	; (8001940 <led_on_down+0x54>)
 8001928:	f002 fe6e 	bl	8004608 <HAL_GPIO_WritePin>
	while(i < 8)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b07      	cmp	r3, #7
 8001930:	dde7      	ble.n	8001902 <led_on_down+0x16>
		}
	}
}
 8001932:	bf00      	nop
 8001934:	bf00      	nop
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000afc 	.word	0x20000afc
 8001940:	40020c00 	.word	0x40020c00

08001944 <led_keepon_up>:

void led_keepon_up(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
	int i = 0;
 800194a:	2300      	movs	r3, #0
 800194c:	607b      	str	r3, [r7, #4]
	t1ms_counter = 0;
 800194e:	4b10      	ldr	r3, [pc, #64]	; (8001990 <led_keepon_up+0x4c>)
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]

	led_all_off();
 8001954:	f7ff ff92 	bl	800187c <led_all_off>

	while (i < 8)
 8001958:	e012      	b.n	8001980 <led_keepon_up+0x3c>
	{
		if (t1ms_counter >= 200)
 800195a:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <led_keepon_up+0x4c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2bc7      	cmp	r3, #199	; 0xc7
 8001960:	dd0e      	ble.n	8001980 <led_keepon_up+0x3c>
		{
			t1ms_counter = 0;
 8001962:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <led_keepon_up+0x4c>)
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, 0x01 << i++, 1);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	1c5a      	adds	r2, r3, #1
 800196c:	607a      	str	r2, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	b29b      	uxth	r3, r3
 8001976:	2201      	movs	r2, #1
 8001978:	4619      	mov	r1, r3
 800197a:	4806      	ldr	r0, [pc, #24]	; (8001994 <led_keepon_up+0x50>)
 800197c:	f002 fe44 	bl	8004608 <HAL_GPIO_WritePin>
	while (i < 8)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b07      	cmp	r3, #7
 8001984:	dde9      	ble.n	800195a <led_keepon_up+0x16>
		}
	}
}
 8001986:	bf00      	nop
 8001988:	bf00      	nop
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000afc 	.word	0x20000afc
 8001994:	40020c00 	.word	0x40020c00

08001998 <led_keepon_down>:

void led_keepon_down(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
	int i = 0;
 800199e:	2300      	movs	r3, #0
 80019a0:	607b      	str	r3, [r7, #4]
	t1ms_counter = 0;
 80019a2:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <led_keepon_down+0x4c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]

	led_all_off();
 80019a8:	f7ff ff68 	bl	800187c <led_all_off>

	while (i < 8)
 80019ac:	e012      	b.n	80019d4 <led_keepon_down+0x3c>
	{
		if (t1ms_counter >= 200)
 80019ae:	4b0d      	ldr	r3, [pc, #52]	; (80019e4 <led_keepon_down+0x4c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2bc7      	cmp	r3, #199	; 0xc7
 80019b4:	dd0e      	ble.n	80019d4 <led_keepon_down+0x3c>
		{
			t1ms_counter = 0;
 80019b6:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <led_keepon_down+0x4c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, 0x80 >> i++, 1);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	1c5a      	adds	r2, r3, #1
 80019c0:	607a      	str	r2, [r7, #4]
 80019c2:	2280      	movs	r2, #128	; 0x80
 80019c4:	fa42 f303 	asr.w	r3, r2, r3
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	2201      	movs	r2, #1
 80019cc:	4619      	mov	r1, r3
 80019ce:	4806      	ldr	r0, [pc, #24]	; (80019e8 <led_keepon_down+0x50>)
 80019d0:	f002 fe1a 	bl	8004608 <HAL_GPIO_WritePin>
	while (i < 8)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b07      	cmp	r3, #7
 80019d8:	dde9      	ble.n	80019ae <led_keepon_down+0x16>
		}
	}
}
 80019da:	bf00      	nop
 80019dc:	bf00      	nop
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000afc 	.word	0x20000afc
 80019e8:	40020c00 	.word	0x40020c00

080019ec <led_flower_on>:

void led_flower_on(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
	int i = 0, delay = 300;
 80019f2:	2300      	movs	r3, #0
 80019f4:	607b      	str	r3, [r7, #4]
 80019f6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80019fa:	603b      	str	r3, [r7, #0]
	t1ms_counter = 0;
 80019fc:	4b19      	ldr	r3, [pc, #100]	; (8001a64 <led_flower_on+0x78>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]

	led_all_off();
 8001a02:	f7ff ff3b 	bl	800187c <led_all_off>

	while(i < 4)
 8001a06:	e024      	b.n	8001a52 <led_flower_on+0x66>
	{
		if (t1ms_counter >= delay)
 8001a08:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <led_flower_on+0x78>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	dc1f      	bgt.n	8001a52 <led_flower_on+0x66>
		{
			t1ms_counter = 0;
 8001a12:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <led_flower_on+0x78>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, 0x01 << (4 + i), 1);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3304      	adds	r3, #4
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	2201      	movs	r2, #1
 8001a26:	4619      	mov	r1, r3
 8001a28:	480f      	ldr	r0, [pc, #60]	; (8001a68 <led_flower_on+0x7c>)
 8001a2a:	f002 fded 	bl	8004608 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, 0x01 << (3 - i), 1);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f1c3 0303 	rsb	r3, r3, #3
 8001a34:	2201      	movs	r2, #1
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4809      	ldr	r0, [pc, #36]	; (8001a68 <led_flower_on+0x7c>)
 8001a42:	f002 fde1 	bl	8004608 <HAL_GPIO_WritePin>
			i++;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	607b      	str	r3, [r7, #4]
			delay += 100;
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	3364      	adds	r3, #100	; 0x64
 8001a50:	603b      	str	r3, [r7, #0]
	while(i < 4)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b03      	cmp	r3, #3
 8001a56:	ddd7      	ble.n	8001a08 <led_flower_on+0x1c>
		}
	}
}
 8001a58:	bf00      	nop
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000afc 	.word	0x20000afc
 8001a68:	40020c00 	.word	0x40020c00

08001a6c <led_flower_off>:

void led_flower_off(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
	int i = 0, delay = 700;
 8001a72:	2300      	movs	r3, #0
 8001a74:	607b      	str	r3, [r7, #4]
 8001a76:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8001a7a:	603b      	str	r3, [r7, #0]
	t1ms_counter = 0;
 8001a7c:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <led_flower_off+0x74>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]

	led_all_on();
 8001a82:	f7ff feef 	bl	8001864 <led_all_on>

	while(i < 4)
 8001a86:	e023      	b.n	8001ad0 <led_flower_off+0x64>
	{
		if (t1ms_counter >= delay)
 8001a88:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <led_flower_off+0x74>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	dc1e      	bgt.n	8001ad0 <led_flower_off+0x64>
		{
			t1ms_counter = 0;
 8001a92:	4b13      	ldr	r3, [pc, #76]	; (8001ae0 <led_flower_off+0x74>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, 0x01 << (0 + i), 0);
 8001a98:	2201      	movs	r2, #1
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	480f      	ldr	r0, [pc, #60]	; (8001ae4 <led_flower_off+0x78>)
 8001aa8:	f002 fdae 	bl	8004608 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, 0x01 << (7 - i), 0);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f1c3 0307 	rsb	r3, r3, #7
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	2200      	movs	r2, #0
 8001abc:	4619      	mov	r1, r3
 8001abe:	4809      	ldr	r0, [pc, #36]	; (8001ae4 <led_flower_off+0x78>)
 8001ac0:	f002 fda2 	bl	8004608 <HAL_GPIO_WritePin>
			i++;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	607b      	str	r3, [r7, #4]
			delay -= 100;
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	3b64      	subs	r3, #100	; 0x64
 8001ace:	603b      	str	r3, [r7, #0]
	while(i < 4)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b03      	cmp	r3, #3
 8001ad4:	ddd8      	ble.n	8001a88 <led_flower_off+0x1c>
		}
	}
}
 8001ad6:	bf00      	nop
 8001ad8:	bf00      	nop
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000afc 	.word	0x20000afc
 8001ae4:	40020c00 	.word	0x40020c00

08001ae8 <HAL_STSTICK_Handler>:
// ARM default timer
// enter here every 1ms
volatile int t1ms_counter = 0;
volatile int fnd1ms_counter = 0;
void HAL_STSTICK_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
	t1ms_counter++; // 1ms timer
 8001aec:	4b07      	ldr	r3, [pc, #28]	; (8001b0c <HAL_STSTICK_Handler+0x24>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	3301      	adds	r3, #1
 8001af2:	4a06      	ldr	r2, [pc, #24]	; (8001b0c <HAL_STSTICK_Handler+0x24>)
 8001af4:	6013      	str	r3, [r2, #0]
	fnd1ms_counter++;
 8001af6:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <HAL_STSTICK_Handler+0x28>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	3301      	adds	r3, #1
 8001afc:	4a04      	ldr	r2, [pc, #16]	; (8001b10 <HAL_STSTICK_Handler+0x28>)
 8001afe:	6013      	str	r3, [r2, #0]
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20000afc 	.word	0x20000afc
 8001b10:	20000b00 	.word	0x20000b00

08001b14 <HAL_TIM_PeriodElapsedCallback>:
// move from Driver/STM32F4xx_HAL_Driver/stm32f4xx_hal_tim.c to here
// enter here when every timer interrupt occurs
volatile int TIM10_10ms_counter = 0;
volatile int TIM10_10ms_ultrasonic = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a09      	ldr	r2, [pc, #36]	; (8001b48 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d109      	bne.n	8001b3a <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		TIM10_10ms_counter++; // timer for LED
 8001b26:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	4a07      	ldr	r2, [pc, #28]	; (8001b4c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001b2e:	6013      	str	r3, [r2, #0]
		TIM10_10ms_ultrasonic++; // timer for ultrasonic trigger
 8001b30:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	3301      	adds	r3, #1
 8001b36:	4a06      	ldr	r2, [pc, #24]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001b38:	6013      	str	r3, [r2, #0]
	}
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	40014400 	.word	0x40014400
 8001b4c:	20000b04 	.word	0x20000b04
 8001b50:	20000b08 	.word	0x20000b08

08001b54 <delay_us>:

// function implement that extern from DHT11.c
void delay_us (unsigned long us)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim11, 0); // tim11 clear // H/W counter...
 8001b5c:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <delay_us+0x2c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2200      	movs	r2, #0
 8001b62:	625a      	str	r2, [r3, #36]	; 0x24

	while(__HAL_TIM_GET_COUNTER(&htim11) < us)
 8001b64:	bf00      	nop
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <delay_us+0x2c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d8f9      	bhi.n	8001b66 <delay_us+0x12>
		;

}
 8001b72:	bf00      	nop
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	2000051c 	.word	0x2000051c

08001b84 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8001b8c:	1d39      	adds	r1, r7, #4
 8001b8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b92:	2201      	movs	r2, #1
 8001b94:	4803      	ldr	r0, [pc, #12]	; (8001ba4 <__io_putchar+0x20>)
 8001b96:	f006 f998 	bl	8007eca <HAL_UART_Transmit>

  return ch;
 8001b9a:	687b      	ldr	r3, [r7, #4]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20000564 	.word	0x20000564

08001ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bac:	f001 fe06 	bl	80037bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bb0:	f000 f870 	bl	8001c94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bb4:	f000 fc26 	bl	8002404 <MX_GPIO_Init>
  MX_ETH_Init();
 8001bb8:	f000 f8d8 	bl	8001d6c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001bbc:	f000 fba0 	bl	8002300 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001bc0:	f000 fbf2 	bl	80023a8 <MX_USB_OTG_FS_PCD_Init>
  MX_USART6_UART_Init();
 8001bc4:	f000 fbc6 	bl	8002354 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 8001bc8:	f000 fb52 	bl	8002270 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001bcc:	f000 fb74 	bl	80022b8 <MX_TIM11_Init>
  MX_TIM3_Init();
 8001bd0:	f000 fa0e 	bl	8001ff0 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001bd4:	f000 f918 	bl	8001e08 <MX_I2C1_Init>
  MX_TIM4_Init();
 8001bd8:	f000 fa5e 	bl	8002098 <MX_TIM4_Init>
  MX_TIM2_Init();
 8001bdc:	f000 f9ae 	bl	8001f3c <MX_TIM2_Init>
  MX_RTC_Init();
 8001be0:	f000 f952 	bl	8001e88 <MX_RTC_Init>
  MX_TIM5_Init();
 8001be4:	f000 face 	bl	8002184 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  printf("main() start!!\n");
 8001be8:	481e      	ldr	r0, [pc, #120]	; (8001c64 <main+0xbc>)
 8001bea:	f007 fd57 	bl	800969c <puts>

  DHT11_Init();
 8001bee:	f7ff f925 	bl	8000e3c <DHT11_Init>
  i2c_lcd_init();
 8001bf2:	f7ff fb6f 	bl	80012d4 <i2c_lcd_init>

  /////////////
  FND4digit_off(); // init for fnd4digit_sec_clock() on main()'s infinite while loop__add_kenGwon1017
 8001bf6:	f7ff fa8f 	bl	8001118 <FND4digit_off>
  /////////////

  HAL_UART_Receive_IT(&huart3, &rx_data, 1); // RX huart3�???????????? ?��?��?��?�� interrupt ?��?��?��
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	491a      	ldr	r1, [pc, #104]	; (8001c68 <main+0xc0>)
 8001bfe:	481b      	ldr	r0, [pc, #108]	; (8001c6c <main+0xc4>)
 8001c00:	f006 f9f5 	bl	8007fee <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1); // RX huart6�???????????? ?��?��?��?�� interrupt ?��?��?��
 8001c04:	2201      	movs	r2, #1
 8001c06:	491a      	ldr	r1, [pc, #104]	; (8001c70 <main+0xc8>)
 8001c08:	481a      	ldr	r0, [pc, #104]	; (8001c74 <main+0xcc>)
 8001c0a:	f006 f9f0 	bl	8007fee <HAL_UART_Receive_IT>

  HAL_TIM_Base_Start_IT(&htim10); // add_kenGwon_1011
 8001c0e:	481a      	ldr	r0, [pc, #104]	; (8001c78 <main+0xd0>)
 8001c10:	f004 fc9e 	bl	8006550 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11); // add_kenGwon_1011
 8001c14:	4819      	ldr	r0, [pc, #100]	; (8001c7c <main+0xd4>)
 8001c16:	f004 fc9b 	bl	8006550 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1); // for count pulse(InputCapture between rising edge & falling edge) add_kenGwon_1012
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	4818      	ldr	r0, [pc, #96]	; (8001c80 <main+0xd8>)
 8001c1e:	f004 ff85 	bl	8006b2c <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1); // for DC motor PWM control add_kenGwon_1013
 8001c22:	2100      	movs	r1, #0
 8001c24:	4817      	ldr	r0, [pc, #92]	; (8001c84 <main+0xdc>)
 8001c26:	f004 fe1b 	bl	8006860 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //for SERVO motor PWM control add_kenGwon_1013
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	4816      	ldr	r0, [pc, #88]	; (8001c88 <main+0xe0>)
 8001c2e:	f004 fd4f 	bl	80066d0 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4); // for buzzer PWM control add_kenGwon_1016
 8001c32:	210c      	movs	r1, #12
 8001c34:	4815      	ldr	r0, [pc, #84]	; (8001c8c <main+0xe4>)
 8001c36:	f004 fd4b 	bl	80066d0 <HAL_TIM_PWM_Start>
//  DHT11_main();
//  servo_motor_test_main();
//  buzzer_main();
//  fnd4digit_main();

  TIM10_10ms_counter = 0;
 8001c3a:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <main+0xe8>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]

  while (1)
  {
	  DHT11_processing();
 8001c40:	f7ff f89e 	bl	8000d80 <DHT11_processing>
	  ultrasonic_processing();
 8001c44:	f001 fd10 	bl	8003668 <ultrasonic_processing>

	  pc_command_processing();
 8001c48:	f001 fad6 	bl	80031f8 <pc_command_processing>
	  bt_command_processing();
 8001c4c:	f001 fc5c 	bl	8003508 <bt_command_processing>

//	  dcmotor_pwm_control();

	  get_rtc();
 8001c50:	f7ff fb86 	bl	8001360 <get_rtc>

	  lcd_display_mode_select();
 8001c54:	f7ff f9a6 	bl	8000fa4 <lcd_display_mode_select>
	  set_time_button_UI();
 8001c58:	f7ff fd10 	bl	800167c <set_time_button_UI>

	  fnd4digit_sec_clock();
 8001c5c:	f7ff fa7a 	bl	8001154 <fnd4digit_sec_clock>
	  DHT11_processing();
 8001c60:	e7ee      	b.n	8001c40 <main+0x98>
 8001c62:	bf00      	nop
 8001c64:	0800ab6c 	.word	0x0800ab6c
 8001c68:	20000af8 	.word	0x20000af8
 8001c6c:	20000564 	.word	0x20000564
 8001c70:	20000af9 	.word	0x20000af9
 8001c74:	200005a8 	.word	0x200005a8
 8001c78:	200004d4 	.word	0x200004d4
 8001c7c:	2000051c 	.word	0x2000051c
 8001c80:	200003fc 	.word	0x200003fc
 8001c84:	20000444 	.word	0x20000444
 8001c88:	200003b4 	.word	0x200003b4
 8001c8c:	2000048c 	.word	0x2000048c
 8001c90:	20000b04 	.word	0x20000b04

08001c94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b094      	sub	sp, #80	; 0x50
 8001c98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c9a:	f107 0320 	add.w	r3, r7, #32
 8001c9e:	2230      	movs	r2, #48	; 0x30
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f007 fc6c 	bl	8009580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ca8:	f107 030c 	add.w	r3, r7, #12
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	4b29      	ldr	r3, [pc, #164]	; (8001d64 <SystemClock_Config+0xd0>)
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	4a28      	ldr	r2, [pc, #160]	; (8001d64 <SystemClock_Config+0xd0>)
 8001cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc8:	4b26      	ldr	r3, [pc, #152]	; (8001d64 <SystemClock_Config+0xd0>)
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	607b      	str	r3, [r7, #4]
 8001cd8:	4b23      	ldr	r3, [pc, #140]	; (8001d68 <SystemClock_Config+0xd4>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a22      	ldr	r2, [pc, #136]	; (8001d68 <SystemClock_Config+0xd4>)
 8001cde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	4b20      	ldr	r3, [pc, #128]	; (8001d68 <SystemClock_Config+0xd4>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cec:	607b      	str	r3, [r7, #4]
 8001cee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001cf0:	2309      	movs	r3, #9
 8001cf2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001cf4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d08:	2304      	movs	r3, #4
 8001d0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001d0c:	23a8      	movs	r3, #168	; 0xa8
 8001d0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d10:	2302      	movs	r3, #2
 8001d12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d14:	2307      	movs	r3, #7
 8001d16:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d18:	f107 0320 	add.w	r3, r7, #32
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f003 fa71 	bl	8005204 <HAL_RCC_OscConfig>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001d28:	f000 fcb0 	bl	800268c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d2c:	230f      	movs	r3, #15
 8001d2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d30:	2302      	movs	r3, #2
 8001d32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d38:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d42:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d44:	f107 030c 	add.w	r3, r7, #12
 8001d48:	2105      	movs	r1, #5
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f003 fcd2 	bl	80056f4 <HAL_RCC_ClockConfig>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001d56:	f000 fc99 	bl	800268c <Error_Handler>
  }
}
 8001d5a:	bf00      	nop
 8001d5c:	3750      	adds	r7, #80	; 0x50
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40007000 	.word	0x40007000

08001d6c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001d70:	4b1f      	ldr	r3, [pc, #124]	; (8001df0 <MX_ETH_Init+0x84>)
 8001d72:	4a20      	ldr	r2, [pc, #128]	; (8001df4 <MX_ETH_Init+0x88>)
 8001d74:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001d76:	4b20      	ldr	r3, [pc, #128]	; (8001df8 <MX_ETH_Init+0x8c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001d7c:	4b1e      	ldr	r3, [pc, #120]	; (8001df8 <MX_ETH_Init+0x8c>)
 8001d7e:	2280      	movs	r2, #128	; 0x80
 8001d80:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001d82:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <MX_ETH_Init+0x8c>)
 8001d84:	22e1      	movs	r2, #225	; 0xe1
 8001d86:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001d88:	4b1b      	ldr	r3, [pc, #108]	; (8001df8 <MX_ETH_Init+0x8c>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001d8e:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <MX_ETH_Init+0x8c>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001d94:	4b18      	ldr	r3, [pc, #96]	; (8001df8 <MX_ETH_Init+0x8c>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001d9a:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <MX_ETH_Init+0x84>)
 8001d9c:	4a16      	ldr	r2, [pc, #88]	; (8001df8 <MX_ETH_Init+0x8c>)
 8001d9e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001da0:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <MX_ETH_Init+0x84>)
 8001da2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001da6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001da8:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <MX_ETH_Init+0x84>)
 8001daa:	4a14      	ldr	r2, [pc, #80]	; (8001dfc <MX_ETH_Init+0x90>)
 8001dac:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001dae:	4b10      	ldr	r3, [pc, #64]	; (8001df0 <MX_ETH_Init+0x84>)
 8001db0:	4a13      	ldr	r2, [pc, #76]	; (8001e00 <MX_ETH_Init+0x94>)
 8001db2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001db4:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <MX_ETH_Init+0x84>)
 8001db6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001dba:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001dbc:	480c      	ldr	r0, [pc, #48]	; (8001df0 <MX_ETH_Init+0x84>)
 8001dbe:	f001 ff37 	bl	8003c30 <HAL_ETH_Init>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001dc8:	f000 fc60 	bl	800268c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001dcc:	2238      	movs	r2, #56	; 0x38
 8001dce:	2100      	movs	r1, #0
 8001dd0:	480c      	ldr	r0, [pc, #48]	; (8001e04 <MX_ETH_Init+0x98>)
 8001dd2:	f007 fbd5 	bl	8009580 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001dd6:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <MX_ETH_Init+0x98>)
 8001dd8:	2221      	movs	r2, #33	; 0x21
 8001dda:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001ddc:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <MX_ETH_Init+0x98>)
 8001dde:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001de2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001de4:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <MX_ETH_Init+0x98>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000290 	.word	0x20000290
 8001df4:	40028000 	.word	0x40028000
 8001df8:	20000b0c 	.word	0x20000b0c
 8001dfc:	200001f0 	.word	0x200001f0
 8001e00:	20000150 	.word	0x20000150
 8001e04:	20000118 	.word	0x20000118

08001e08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e0c:	4b1b      	ldr	r3, [pc, #108]	; (8001e7c <MX_I2C1_Init+0x74>)
 8001e0e:	4a1c      	ldr	r2, [pc, #112]	; (8001e80 <MX_I2C1_Init+0x78>)
 8001e10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001e12:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <MX_I2C1_Init+0x74>)
 8001e14:	4a1b      	ldr	r2, [pc, #108]	; (8001e84 <MX_I2C1_Init+0x7c>)
 8001e16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e18:	4b18      	ldr	r3, [pc, #96]	; (8001e7c <MX_I2C1_Init+0x74>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e1e:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <MX_I2C1_Init+0x74>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e24:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <MX_I2C1_Init+0x74>)
 8001e26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e2c:	4b13      	ldr	r3, [pc, #76]	; (8001e7c <MX_I2C1_Init+0x74>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e32:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <MX_I2C1_Init+0x74>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e38:	4b10      	ldr	r3, [pc, #64]	; (8001e7c <MX_I2C1_Init+0x74>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e3e:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <MX_I2C1_Init+0x74>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e44:	480d      	ldr	r0, [pc, #52]	; (8001e7c <MX_I2C1_Init+0x74>)
 8001e46:	f002 fbf9 	bl	800463c <HAL_I2C_Init>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e50:	f000 fc1c 	bl	800268c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e54:	2100      	movs	r1, #0
 8001e56:	4809      	ldr	r0, [pc, #36]	; (8001e7c <MX_I2C1_Init+0x74>)
 8001e58:	f003 f83b 	bl	8004ed2 <HAL_I2CEx_ConfigAnalogFilter>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001e62:	f000 fc13 	bl	800268c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001e66:	2100      	movs	r1, #0
 8001e68:	4804      	ldr	r0, [pc, #16]	; (8001e7c <MX_I2C1_Init+0x74>)
 8001e6a:	f003 f86e 	bl	8004f4a <HAL_I2CEx_ConfigDigitalFilter>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001e74:	f000 fc0a 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e78:	bf00      	nop
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20000340 	.word	0x20000340
 8001e80:	40005400 	.word	0x40005400
 8001e84:	000186a0 	.word	0x000186a0

08001e88 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001e8e:	1d3b      	adds	r3, r7, #4
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ea0:	4b24      	ldr	r3, [pc, #144]	; (8001f34 <MX_RTC_Init+0xac>)
 8001ea2:	4a25      	ldr	r2, [pc, #148]	; (8001f38 <MX_RTC_Init+0xb0>)
 8001ea4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001ea6:	4b23      	ldr	r3, [pc, #140]	; (8001f34 <MX_RTC_Init+0xac>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001eac:	4b21      	ldr	r3, [pc, #132]	; (8001f34 <MX_RTC_Init+0xac>)
 8001eae:	227f      	movs	r2, #127	; 0x7f
 8001eb0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001eb2:	4b20      	ldr	r3, [pc, #128]	; (8001f34 <MX_RTC_Init+0xac>)
 8001eb4:	22ff      	movs	r2, #255	; 0xff
 8001eb6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001eb8:	4b1e      	ldr	r3, [pc, #120]	; (8001f34 <MX_RTC_Init+0xac>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ebe:	4b1d      	ldr	r3, [pc, #116]	; (8001f34 <MX_RTC_Init+0xac>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ec4:	4b1b      	ldr	r3, [pc, #108]	; (8001f34 <MX_RTC_Init+0xac>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001eca:	481a      	ldr	r0, [pc, #104]	; (8001f34 <MX_RTC_Init+0xac>)
 8001ecc:	f003 fff2 	bl	8005eb4 <HAL_RTC_Init>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001ed6:	f000 fbd9 	bl	800268c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x9;
 8001eda:	2309      	movs	r3, #9
 8001edc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x38;
 8001ede:	2338      	movs	r3, #56	; 0x38
 8001ee0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001eee:	1d3b      	adds	r3, r7, #4
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	480f      	ldr	r0, [pc, #60]	; (8001f34 <MX_RTC_Init+0xac>)
 8001ef6:	f004 f853 	bl	8005fa0 <HAL_RTC_SetTime>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001f00:	f000 fbc4 	bl	800268c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001f04:	2301      	movs	r3, #1
 8001f06:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 8001f08:	2310      	movs	r3, #16
 8001f0a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x16;
 8001f0c:	2316      	movs	r3, #22
 8001f0e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8001f10:	2323      	movs	r3, #35	; 0x23
 8001f12:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001f14:	463b      	mov	r3, r7
 8001f16:	2201      	movs	r2, #1
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4806      	ldr	r0, [pc, #24]	; (8001f34 <MX_RTC_Init+0xac>)
 8001f1c:	f004 f938 	bl	8006190 <HAL_RTC_SetDate>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001f26:	f000 fbb1 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001f2a:	bf00      	nop
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	20000394 	.word	0x20000394
 8001f38:	40002800 	.word	0x40002800

08001f3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b08a      	sub	sp, #40	; 0x28
 8001f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f42:	f107 0320 	add.w	r3, r7, #32
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f4c:	1d3b      	adds	r3, r7, #4
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	609a      	str	r2, [r3, #8]
 8001f56:	60da      	str	r2, [r3, #12]
 8001f58:	611a      	str	r2, [r3, #16]
 8001f5a:	615a      	str	r2, [r3, #20]
 8001f5c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f5e:	4b23      	ldr	r3, [pc, #140]	; (8001fec <MX_TIM2_Init+0xb0>)
 8001f60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 8001f66:	4b21      	ldr	r3, [pc, #132]	; (8001fec <MX_TIM2_Init+0xb0>)
 8001f68:	f240 628f 	movw	r2, #1679	; 0x68f
 8001f6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f6e:	4b1f      	ldr	r3, [pc, #124]	; (8001fec <MX_TIM2_Init+0xb0>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001f74:	4b1d      	ldr	r3, [pc, #116]	; (8001fec <MX_TIM2_Init+0xb0>)
 8001f76:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f7c:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <MX_TIM2_Init+0xb0>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f82:	4b1a      	ldr	r3, [pc, #104]	; (8001fec <MX_TIM2_Init+0xb0>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f88:	4818      	ldr	r0, [pc, #96]	; (8001fec <MX_TIM2_Init+0xb0>)
 8001f8a:	f004 fb51 	bl	8006630 <HAL_TIM_PWM_Init>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001f94:	f000 fb7a 	bl	800268c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fa0:	f107 0320 	add.w	r3, r7, #32
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4811      	ldr	r0, [pc, #68]	; (8001fec <MX_TIM2_Init+0xb0>)
 8001fa8:	f005 feb2 	bl	8007d10 <HAL_TIMEx_MasterConfigSynchronization>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001fb2:	f000 fb6b 	bl	800268c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fb6:	2360      	movs	r3, #96	; 0x60
 8001fb8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8001fba:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001fbe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fc8:	1d3b      	adds	r3, r7, #4
 8001fca:	2200      	movs	r2, #0
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4807      	ldr	r0, [pc, #28]	; (8001fec <MX_TIM2_Init+0xb0>)
 8001fd0:	f005 f878 	bl	80070c4 <HAL_TIM_PWM_ConfigChannel>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001fda:	f000 fb57 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001fde:	4803      	ldr	r0, [pc, #12]	; (8001fec <MX_TIM2_Init+0xb0>)
 8001fe0:	f000 fdb2 	bl	8002b48 <HAL_TIM_MspPostInit>

}
 8001fe4:	bf00      	nop
 8001fe6:	3728      	adds	r7, #40	; 0x28
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	200003b4 	.word	0x200003b4

08001ff0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff6:	f107 0310 	add.w	r3, r7, #16
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002000:	463b      	mov	r3, r7
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	605a      	str	r2, [r3, #4]
 8002008:	609a      	str	r2, [r3, #8]
 800200a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800200c:	4b20      	ldr	r3, [pc, #128]	; (8002090 <MX_TIM3_Init+0xa0>)
 800200e:	4a21      	ldr	r2, [pc, #132]	; (8002094 <MX_TIM3_Init+0xa4>)
 8002010:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8002012:	4b1f      	ldr	r3, [pc, #124]	; (8002090 <MX_TIM3_Init+0xa0>)
 8002014:	2253      	movs	r2, #83	; 0x53
 8002016:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002018:	4b1d      	ldr	r3, [pc, #116]	; (8002090 <MX_TIM3_Init+0xa0>)
 800201a:	2200      	movs	r2, #0
 800201c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800201e:	4b1c      	ldr	r3, [pc, #112]	; (8002090 <MX_TIM3_Init+0xa0>)
 8002020:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002024:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002026:	4b1a      	ldr	r3, [pc, #104]	; (8002090 <MX_TIM3_Init+0xa0>)
 8002028:	2200      	movs	r2, #0
 800202a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800202c:	4b18      	ldr	r3, [pc, #96]	; (8002090 <MX_TIM3_Init+0xa0>)
 800202e:	2200      	movs	r2, #0
 8002030:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002032:	4817      	ldr	r0, [pc, #92]	; (8002090 <MX_TIM3_Init+0xa0>)
 8002034:	f004 fd2a 	bl	8006a8c <HAL_TIM_IC_Init>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800203e:	f000 fb25 	bl	800268c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002042:	2300      	movs	r3, #0
 8002044:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002046:	2300      	movs	r3, #0
 8002048:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800204a:	f107 0310 	add.w	r3, r7, #16
 800204e:	4619      	mov	r1, r3
 8002050:	480f      	ldr	r0, [pc, #60]	; (8002090 <MX_TIM3_Init+0xa0>)
 8002052:	f005 fe5d 	bl	8007d10 <HAL_TIMEx_MasterConfigSynchronization>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800205c:	f000 fb16 	bl	800268c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002060:	230a      	movs	r3, #10
 8002062:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002064:	2301      	movs	r3, #1
 8002066:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002068:	2300      	movs	r3, #0
 800206a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002070:	463b      	mov	r3, r7
 8002072:	2200      	movs	r2, #0
 8002074:	4619      	mov	r1, r3
 8002076:	4806      	ldr	r0, [pc, #24]	; (8002090 <MX_TIM3_Init+0xa0>)
 8002078:	f004 ff88 	bl	8006f8c <HAL_TIM_IC_ConfigChannel>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8002082:	f000 fb03 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002086:	bf00      	nop
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	200003fc 	.word	0x200003fc
 8002094:	40000400 	.word	0x40000400

08002098 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08e      	sub	sp, #56	; 0x38
 800209c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800209e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	605a      	str	r2, [r3, #4]
 80020a8:	609a      	str	r2, [r3, #8]
 80020aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020ac:	f107 0320 	add.w	r3, r7, #32
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020b6:	1d3b      	adds	r3, r7, #4
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
 80020c4:	615a      	str	r2, [r3, #20]
 80020c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80020c8:	4b2c      	ldr	r3, [pc, #176]	; (800217c <MX_TIM4_Init+0xe4>)
 80020ca:	4a2d      	ldr	r2, [pc, #180]	; (8002180 <MX_TIM4_Init+0xe8>)
 80020cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 80020ce:	4b2b      	ldr	r3, [pc, #172]	; (800217c <MX_TIM4_Init+0xe4>)
 80020d0:	f240 3247 	movw	r2, #839	; 0x347
 80020d4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020d6:	4b29      	ldr	r3, [pc, #164]	; (800217c <MX_TIM4_Init+0xe4>)
 80020d8:	2200      	movs	r2, #0
 80020da:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 80020dc:	4b27      	ldr	r3, [pc, #156]	; (800217c <MX_TIM4_Init+0xe4>)
 80020de:	2263      	movs	r2, #99	; 0x63
 80020e0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020e2:	4b26      	ldr	r3, [pc, #152]	; (800217c <MX_TIM4_Init+0xe4>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020e8:	4b24      	ldr	r3, [pc, #144]	; (800217c <MX_TIM4_Init+0xe4>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80020ee:	4823      	ldr	r0, [pc, #140]	; (800217c <MX_TIM4_Init+0xe4>)
 80020f0:	f004 f9de 	bl	80064b0 <HAL_TIM_Base_Init>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80020fa:	f000 fac7 	bl	800268c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002102:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002104:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002108:	4619      	mov	r1, r3
 800210a:	481c      	ldr	r0, [pc, #112]	; (800217c <MX_TIM4_Init+0xe4>)
 800210c:	f005 f89c 	bl	8007248 <HAL_TIM_ConfigClockSource>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002116:	f000 fab9 	bl	800268c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800211a:	4818      	ldr	r0, [pc, #96]	; (800217c <MX_TIM4_Init+0xe4>)
 800211c:	f004 fa88 	bl	8006630 <HAL_TIM_PWM_Init>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002126:	f000 fab1 	bl	800268c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800212a:	2300      	movs	r3, #0
 800212c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800212e:	2300      	movs	r3, #0
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002132:	f107 0320 	add.w	r3, r7, #32
 8002136:	4619      	mov	r1, r3
 8002138:	4810      	ldr	r0, [pc, #64]	; (800217c <MX_TIM4_Init+0xe4>)
 800213a:	f005 fde9 	bl	8007d10 <HAL_TIMEx_MasterConfigSynchronization>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002144:	f000 faa2 	bl	800268c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002148:	2360      	movs	r3, #96	; 0x60
 800214a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 70-1;
 800214c:	2345      	movs	r3, #69	; 0x45
 800214e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002150:	2300      	movs	r3, #0
 8002152:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002154:	2304      	movs	r3, #4
 8002156:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002158:	1d3b      	adds	r3, r7, #4
 800215a:	2200      	movs	r2, #0
 800215c:	4619      	mov	r1, r3
 800215e:	4807      	ldr	r0, [pc, #28]	; (800217c <MX_TIM4_Init+0xe4>)
 8002160:	f004 ffb0 	bl	80070c4 <HAL_TIM_PWM_ConfigChannel>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800216a:	f000 fa8f 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800216e:	4803      	ldr	r0, [pc, #12]	; (800217c <MX_TIM4_Init+0xe4>)
 8002170:	f000 fcea 	bl	8002b48 <HAL_TIM_MspPostInit>

}
 8002174:	bf00      	nop
 8002176:	3738      	adds	r7, #56	; 0x38
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20000444 	.word	0x20000444
 8002180:	40000800 	.word	0x40000800

08002184 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08e      	sub	sp, #56	; 0x38
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800218a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	605a      	str	r2, [r3, #4]
 8002194:	609a      	str	r2, [r3, #8]
 8002196:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002198:	f107 0320 	add.w	r3, r7, #32
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021a2:	1d3b      	adds	r3, r7, #4
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]
 80021b0:	615a      	str	r2, [r3, #20]
 80021b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80021b4:	4b2c      	ldr	r3, [pc, #176]	; (8002268 <MX_TIM5_Init+0xe4>)
 80021b6:	4a2d      	ldr	r2, [pc, #180]	; (800226c <MX_TIM5_Init+0xe8>)
 80021b8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 52.5-1;
 80021ba:	4b2b      	ldr	r3, [pc, #172]	; (8002268 <MX_TIM5_Init+0xe4>)
 80021bc:	2233      	movs	r2, #51	; 0x33
 80021be:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c0:	4b29      	ldr	r3, [pc, #164]	; (8002268 <MX_TIM5_Init+0xe4>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 400-1;
 80021c6:	4b28      	ldr	r3, [pc, #160]	; (8002268 <MX_TIM5_Init+0xe4>)
 80021c8:	f240 128f 	movw	r2, #399	; 0x18f
 80021cc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ce:	4b26      	ldr	r3, [pc, #152]	; (8002268 <MX_TIM5_Init+0xe4>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021d4:	4b24      	ldr	r3, [pc, #144]	; (8002268 <MX_TIM5_Init+0xe4>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80021da:	4823      	ldr	r0, [pc, #140]	; (8002268 <MX_TIM5_Init+0xe4>)
 80021dc:	f004 f968 	bl	80064b0 <HAL_TIM_Base_Init>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80021e6:	f000 fa51 	bl	800268c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80021f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021f4:	4619      	mov	r1, r3
 80021f6:	481c      	ldr	r0, [pc, #112]	; (8002268 <MX_TIM5_Init+0xe4>)
 80021f8:	f005 f826 	bl	8007248 <HAL_TIM_ConfigClockSource>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8002202:	f000 fa43 	bl	800268c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002206:	4818      	ldr	r0, [pc, #96]	; (8002268 <MX_TIM5_Init+0xe4>)
 8002208:	f004 fa12 	bl	8006630 <HAL_TIM_PWM_Init>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8002212:	f000 fa3b 	bl	800268c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002216:	2300      	movs	r3, #0
 8002218:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800221a:	2300      	movs	r3, #0
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800221e:	f107 0320 	add.w	r3, r7, #32
 8002222:	4619      	mov	r1, r3
 8002224:	4810      	ldr	r0, [pc, #64]	; (8002268 <MX_TIM5_Init+0xe4>)
 8002226:	f005 fd73 	bl	8007d10 <HAL_TIMEx_MasterConfigSynchronization>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8002230:	f000 fa2c 	bl	800268c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002234:	2360      	movs	r3, #96	; 0x60
 8002236:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200-1;
 8002238:	23c7      	movs	r3, #199	; 0xc7
 800223a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800223c:	2300      	movs	r3, #0
 800223e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002244:	1d3b      	adds	r3, r7, #4
 8002246:	220c      	movs	r2, #12
 8002248:	4619      	mov	r1, r3
 800224a:	4807      	ldr	r0, [pc, #28]	; (8002268 <MX_TIM5_Init+0xe4>)
 800224c:	f004 ff3a 	bl	80070c4 <HAL_TIM_PWM_ConfigChannel>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8002256:	f000 fa19 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800225a:	4803      	ldr	r0, [pc, #12]	; (8002268 <MX_TIM5_Init+0xe4>)
 800225c:	f000 fc74 	bl	8002b48 <HAL_TIM_MspPostInit>

}
 8002260:	bf00      	nop
 8002262:	3738      	adds	r7, #56	; 0x38
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	2000048c 	.word	0x2000048c
 800226c:	40000c00 	.word	0x40000c00

08002270 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002274:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <MX_TIM10_Init+0x40>)
 8002276:	4a0f      	ldr	r2, [pc, #60]	; (80022b4 <MX_TIM10_Init+0x44>)
 8002278:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 800227a:	4b0d      	ldr	r3, [pc, #52]	; (80022b0 <MX_TIM10_Init+0x40>)
 800227c:	22a7      	movs	r2, #167	; 0xa7
 800227e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002280:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <MX_TIM10_Init+0x40>)
 8002282:	2200      	movs	r2, #0
 8002284:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 8002286:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <MX_TIM10_Init+0x40>)
 8002288:	f242 720f 	movw	r2, #9999	; 0x270f
 800228c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800228e:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <MX_TIM10_Init+0x40>)
 8002290:	2200      	movs	r2, #0
 8002292:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002294:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <MX_TIM10_Init+0x40>)
 8002296:	2200      	movs	r2, #0
 8002298:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800229a:	4805      	ldr	r0, [pc, #20]	; (80022b0 <MX_TIM10_Init+0x40>)
 800229c:	f004 f908 	bl	80064b0 <HAL_TIM_Base_Init>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80022a6:	f000 f9f1 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	200004d4 	.word	0x200004d4
 80022b4:	40014400 	.word	0x40014400

080022b8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80022bc:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <MX_TIM11_Init+0x40>)
 80022be:	4a0f      	ldr	r2, [pc, #60]	; (80022fc <MX_TIM11_Init+0x44>)
 80022c0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 80022c2:	4b0d      	ldr	r3, [pc, #52]	; (80022f8 <MX_TIM11_Init+0x40>)
 80022c4:	22a7      	movs	r2, #167	; 0xa7
 80022c6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c8:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <MX_TIM11_Init+0x40>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80022ce:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <MX_TIM11_Init+0x40>)
 80022d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022d4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d6:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <MX_TIM11_Init+0x40>)
 80022d8:	2200      	movs	r2, #0
 80022da:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022dc:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <MX_TIM11_Init+0x40>)
 80022de:	2200      	movs	r2, #0
 80022e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80022e2:	4805      	ldr	r0, [pc, #20]	; (80022f8 <MX_TIM11_Init+0x40>)
 80022e4:	f004 f8e4 	bl	80064b0 <HAL_TIM_Base_Init>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80022ee:	f000 f9cd 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	2000051c 	.word	0x2000051c
 80022fc:	40014800 	.word	0x40014800

08002300 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002304:	4b11      	ldr	r3, [pc, #68]	; (800234c <MX_USART3_UART_Init+0x4c>)
 8002306:	4a12      	ldr	r2, [pc, #72]	; (8002350 <MX_USART3_UART_Init+0x50>)
 8002308:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800230a:	4b10      	ldr	r3, [pc, #64]	; (800234c <MX_USART3_UART_Init+0x4c>)
 800230c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002310:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002312:	4b0e      	ldr	r3, [pc, #56]	; (800234c <MX_USART3_UART_Init+0x4c>)
 8002314:	2200      	movs	r2, #0
 8002316:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <MX_USART3_UART_Init+0x4c>)
 800231a:	2200      	movs	r2, #0
 800231c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800231e:	4b0b      	ldr	r3, [pc, #44]	; (800234c <MX_USART3_UART_Init+0x4c>)
 8002320:	2200      	movs	r2, #0
 8002322:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002324:	4b09      	ldr	r3, [pc, #36]	; (800234c <MX_USART3_UART_Init+0x4c>)
 8002326:	220c      	movs	r2, #12
 8002328:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800232a:	4b08      	ldr	r3, [pc, #32]	; (800234c <MX_USART3_UART_Init+0x4c>)
 800232c:	2200      	movs	r2, #0
 800232e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <MX_USART3_UART_Init+0x4c>)
 8002332:	2200      	movs	r2, #0
 8002334:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002336:	4805      	ldr	r0, [pc, #20]	; (800234c <MX_USART3_UART_Init+0x4c>)
 8002338:	f005 fd7a 	bl	8007e30 <HAL_UART_Init>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002342:	f000 f9a3 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20000564 	.word	0x20000564
 8002350:	40004800 	.word	0x40004800

08002354 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002358:	4b11      	ldr	r3, [pc, #68]	; (80023a0 <MX_USART6_UART_Init+0x4c>)
 800235a:	4a12      	ldr	r2, [pc, #72]	; (80023a4 <MX_USART6_UART_Init+0x50>)
 800235c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800235e:	4b10      	ldr	r3, [pc, #64]	; (80023a0 <MX_USART6_UART_Init+0x4c>)
 8002360:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002364:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002366:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <MX_USART6_UART_Init+0x4c>)
 8002368:	2200      	movs	r2, #0
 800236a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800236c:	4b0c      	ldr	r3, [pc, #48]	; (80023a0 <MX_USART6_UART_Init+0x4c>)
 800236e:	2200      	movs	r2, #0
 8002370:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002372:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <MX_USART6_UART_Init+0x4c>)
 8002374:	2200      	movs	r2, #0
 8002376:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002378:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <MX_USART6_UART_Init+0x4c>)
 800237a:	220c      	movs	r2, #12
 800237c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800237e:	4b08      	ldr	r3, [pc, #32]	; (80023a0 <MX_USART6_UART_Init+0x4c>)
 8002380:	2200      	movs	r2, #0
 8002382:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002384:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <MX_USART6_UART_Init+0x4c>)
 8002386:	2200      	movs	r2, #0
 8002388:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800238a:	4805      	ldr	r0, [pc, #20]	; (80023a0 <MX_USART6_UART_Init+0x4c>)
 800238c:	f005 fd50 	bl	8007e30 <HAL_UART_Init>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002396:	f000 f979 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	200005a8 	.word	0x200005a8
 80023a4:	40011400 	.word	0x40011400

080023a8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80023ac:	4b14      	ldr	r3, [pc, #80]	; (8002400 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80023b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80023b4:	4b12      	ldr	r3, [pc, #72]	; (8002400 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023b6:	2204      	movs	r2, #4
 80023b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80023ba:	4b11      	ldr	r3, [pc, #68]	; (8002400 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023bc:	2202      	movs	r2, #2
 80023be:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80023c0:	4b0f      	ldr	r3, [pc, #60]	; (8002400 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80023c6:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023c8:	2202      	movs	r2, #2
 80023ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80023cc:	4b0c      	ldr	r3, [pc, #48]	; (8002400 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023ce:	2201      	movs	r2, #1
 80023d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80023d2:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80023d8:	4b09      	ldr	r3, [pc, #36]	; (8002400 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023da:	2200      	movs	r2, #0
 80023dc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80023de:	4b08      	ldr	r3, [pc, #32]	; (8002400 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023e0:	2201      	movs	r2, #1
 80023e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80023e4:	4b06      	ldr	r3, [pc, #24]	; (8002400 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80023ea:	4805      	ldr	r0, [pc, #20]	; (8002400 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023ec:	f002 fdec 	bl	8004fc8 <HAL_PCD_Init>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80023f6:	f000 f949 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	200005ec 	.word	0x200005ec

08002404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08e      	sub	sp, #56	; 0x38
 8002408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	605a      	str	r2, [r3, #4]
 8002414:	609a      	str	r2, [r3, #8]
 8002416:	60da      	str	r2, [r3, #12]
 8002418:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	623b      	str	r3, [r7, #32]
 800241e:	4b93      	ldr	r3, [pc, #588]	; (800266c <MX_GPIO_Init+0x268>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	4a92      	ldr	r2, [pc, #584]	; (800266c <MX_GPIO_Init+0x268>)
 8002424:	f043 0304 	orr.w	r3, r3, #4
 8002428:	6313      	str	r3, [r2, #48]	; 0x30
 800242a:	4b90      	ldr	r3, [pc, #576]	; (800266c <MX_GPIO_Init+0x268>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	f003 0304 	and.w	r3, r3, #4
 8002432:	623b      	str	r3, [r7, #32]
 8002434:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
 800243a:	4b8c      	ldr	r3, [pc, #560]	; (800266c <MX_GPIO_Init+0x268>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	4a8b      	ldr	r2, [pc, #556]	; (800266c <MX_GPIO_Init+0x268>)
 8002440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002444:	6313      	str	r3, [r2, #48]	; 0x30
 8002446:	4b89      	ldr	r3, [pc, #548]	; (800266c <MX_GPIO_Init+0x268>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800244e:	61fb      	str	r3, [r7, #28]
 8002450:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	61bb      	str	r3, [r7, #24]
 8002456:	4b85      	ldr	r3, [pc, #532]	; (800266c <MX_GPIO_Init+0x268>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	4a84      	ldr	r2, [pc, #528]	; (800266c <MX_GPIO_Init+0x268>)
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	6313      	str	r3, [r2, #48]	; 0x30
 8002462:	4b82      	ldr	r3, [pc, #520]	; (800266c <MX_GPIO_Init+0x268>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	61bb      	str	r3, [r7, #24]
 800246c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
 8002472:	4b7e      	ldr	r3, [pc, #504]	; (800266c <MX_GPIO_Init+0x268>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	4a7d      	ldr	r2, [pc, #500]	; (800266c <MX_GPIO_Init+0x268>)
 8002478:	f043 0302 	orr.w	r3, r3, #2
 800247c:	6313      	str	r3, [r2, #48]	; 0x30
 800247e:	4b7b      	ldr	r3, [pc, #492]	; (800266c <MX_GPIO_Init+0x268>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	613b      	str	r3, [r7, #16]
 800248e:	4b77      	ldr	r3, [pc, #476]	; (800266c <MX_GPIO_Init+0x268>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	4a76      	ldr	r2, [pc, #472]	; (800266c <MX_GPIO_Init+0x268>)
 8002494:	f043 0320 	orr.w	r3, r3, #32
 8002498:	6313      	str	r3, [r2, #48]	; 0x30
 800249a:	4b74      	ldr	r3, [pc, #464]	; (800266c <MX_GPIO_Init+0x268>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	f003 0320 	and.w	r3, r3, #32
 80024a2:	613b      	str	r3, [r7, #16]
 80024a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80024a6:	2300      	movs	r3, #0
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	4b70      	ldr	r3, [pc, #448]	; (800266c <MX_GPIO_Init+0x268>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	4a6f      	ldr	r2, [pc, #444]	; (800266c <MX_GPIO_Init+0x268>)
 80024b0:	f043 0310 	orr.w	r3, r3, #16
 80024b4:	6313      	str	r3, [r2, #48]	; 0x30
 80024b6:	4b6d      	ldr	r3, [pc, #436]	; (800266c <MX_GPIO_Init+0x268>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	f003 0310 	and.w	r3, r3, #16
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	60bb      	str	r3, [r7, #8]
 80024c6:	4b69      	ldr	r3, [pc, #420]	; (800266c <MX_GPIO_Init+0x268>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	4a68      	ldr	r2, [pc, #416]	; (800266c <MX_GPIO_Init+0x268>)
 80024cc:	f043 0308 	orr.w	r3, r3, #8
 80024d0:	6313      	str	r3, [r2, #48]	; 0x30
 80024d2:	4b66      	ldr	r3, [pc, #408]	; (800266c <MX_GPIO_Init+0x268>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	60bb      	str	r3, [r7, #8]
 80024dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	607b      	str	r3, [r7, #4]
 80024e2:	4b62      	ldr	r3, [pc, #392]	; (800266c <MX_GPIO_Init+0x268>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	4a61      	ldr	r2, [pc, #388]	; (800266c <MX_GPIO_Init+0x268>)
 80024e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024ec:	6313      	str	r3, [r2, #48]	; 0x30
 80024ee:	4b5f      	ldr	r3, [pc, #380]	; (800266c <MX_GPIO_Init+0x268>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f6:	607b      	str	r3, [r7, #4]
 80024f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 80024fa:	2200      	movs	r2, #0
 80024fc:	2101      	movs	r1, #1
 80024fe:	485c      	ldr	r0, [pc, #368]	; (8002670 <MX_GPIO_Init+0x26c>)
 8002500:	f002 f882 	bl	8004608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|FND_A_Pin|FND_B_Pin|FND_G_Pin
 8002504:	2200      	movs	r2, #0
 8002506:	f24d 01ff 	movw	r1, #53503	; 0xd0ff
 800250a:	485a      	ldr	r0, [pc, #360]	; (8002674 <MX_GPIO_Init+0x270>)
 800250c:	f002 f87c 	bl	8004608 <HAL_GPIO_WritePin>
                          |LD3_Pin|FND_DP_Pin|FND_C_Pin|FND_D_Pin
                          |FND_E_Pin|FND_F_Pin|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, GPIO_PIN_RESET);
 8002510:	2200      	movs	r2, #0
 8002512:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002516:	4858      	ldr	r0, [pc, #352]	; (8002678 <MX_GPIO_Init+0x274>)
 8002518:	f002 f876 	bl	8004608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, IN1_DCMOTOR_Pin|IN2_DCMOTOR_Pin, GPIO_PIN_RESET);
 800251c:	2200      	movs	r2, #0
 800251e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002522:	4856      	ldr	r0, [pc, #344]	; (800267c <MX_GPIO_Init+0x278>)
 8002524:	f002 f870 	bl	8004608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002528:	2200      	movs	r2, #0
 800252a:	2140      	movs	r1, #64	; 0x40
 800252c:	4854      	ldr	r0, [pc, #336]	; (8002680 <MX_GPIO_Init+0x27c>)
 800252e:	f002 f86b 	bl	8004608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FND_D1_Pin|FND_D2_Pin|FND_D3_Pin|FND_D4_Pin, GPIO_PIN_RESET);
 8002532:	2200      	movs	r2, #0
 8002534:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8002538:	4852      	ldr	r0, [pc, #328]	; (8002684 <MX_GPIO_Init+0x280>)
 800253a:	f002 f865 	bl	8004608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800253e:	2200      	movs	r2, #0
 8002540:	21ff      	movs	r1, #255	; 0xff
 8002542:	4851      	ldr	r0, [pc, #324]	; (8002688 <MX_GPIO_Init+0x284>)
 8002544:	f002 f860 	bl	8004608 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002548:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800254c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800254e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002552:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002554:	2300      	movs	r3, #0
 8002556:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800255c:	4619      	mov	r1, r3
 800255e:	4849      	ldr	r0, [pc, #292]	; (8002684 <MX_GPIO_Init+0x280>)
 8002560:	f001 fe8e 	bl	8004280 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8002564:	2301      	movs	r3, #1
 8002566:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002568:	2301      	movs	r3, #1
 800256a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256c:	2300      	movs	r3, #0
 800256e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002570:	2300      	movs	r3, #0
 8002572:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8002574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002578:	4619      	mov	r1, r3
 800257a:	483d      	ldr	r0, [pc, #244]	; (8002670 <MX_GPIO_Init+0x26c>)
 800257c:	f001 fe80 	bl	8004280 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin FND_A_Pin FND_B_Pin FND_G_Pin
                           LD3_Pin FND_DP_Pin FND_C_Pin FND_D_Pin
                           FND_E_Pin FND_F_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|FND_A_Pin|FND_B_Pin|FND_G_Pin
 8002580:	f24d 03ff 	movw	r3, #53503	; 0xd0ff
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
                          |LD3_Pin|FND_DP_Pin|FND_C_Pin|FND_D_Pin
                          |FND_E_Pin|FND_F_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002586:	2301      	movs	r3, #1
 8002588:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258a:	2300      	movs	r3, #0
 800258c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258e:	2300      	movs	r3, #0
 8002590:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002596:	4619      	mov	r1, r3
 8002598:	4836      	ldr	r0, [pc, #216]	; (8002674 <MX_GPIO_Init+0x270>)
 800259a:	f001 fe71 	bl	8004280 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULTRASONIC_TRIGGER_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIGGER_Pin;
 800259e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025a4:	2301      	movs	r3, #1
 80025a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ac:	2300      	movs	r3, #0
 80025ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ULTRASONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 80025b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025b4:	4619      	mov	r1, r3
 80025b6:	4830      	ldr	r0, [pc, #192]	; (8002678 <MX_GPIO_Init+0x274>)
 80025b8:	f001 fe62 	bl	8004280 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_DCMOTOR_Pin IN2_DCMOTOR_Pin */
  GPIO_InitStruct.Pin = IN1_DCMOTOR_Pin|IN2_DCMOTOR_Pin;
 80025bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025c2:	2301      	movs	r3, #1
 80025c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ca:	2300      	movs	r3, #0
 80025cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025d2:	4619      	mov	r1, r3
 80025d4:	4829      	ldr	r0, [pc, #164]	; (800267c <MX_GPIO_Init+0x278>)
 80025d6:	f001 fe53 	bl	8004280 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin|BUTTON0_Pin;
 80025da:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 80025de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025e0:	2300      	movs	r3, #0
 80025e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025ec:	4619      	mov	r1, r3
 80025ee:	4823      	ldr	r0, [pc, #140]	; (800267c <MX_GPIO_Init+0x278>)
 80025f0:	f001 fe46 	bl	8004280 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80025f4:	2340      	movs	r3, #64	; 0x40
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f8:	2301      	movs	r3, #1
 80025fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002600:	2300      	movs	r3, #0
 8002602:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002608:	4619      	mov	r1, r3
 800260a:	481d      	ldr	r0, [pc, #116]	; (8002680 <MX_GPIO_Init+0x27c>)
 800260c:	f001 fe38 	bl	8004280 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002610:	2380      	movs	r3, #128	; 0x80
 8002612:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002614:	2300      	movs	r3, #0
 8002616:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002618:	2300      	movs	r3, #0
 800261a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800261c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002620:	4619      	mov	r1, r3
 8002622:	4817      	ldr	r0, [pc, #92]	; (8002680 <MX_GPIO_Init+0x27c>)
 8002624:	f001 fe2c 	bl	8004280 <HAL_GPIO_Init>

  /*Configure GPIO pins : FND_D1_Pin FND_D2_Pin FND_D3_Pin FND_D4_Pin */
  GPIO_InitStruct.Pin = FND_D1_Pin|FND_D2_Pin|FND_D3_Pin|FND_D4_Pin;
 8002628:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800262c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800262e:	2301      	movs	r3, #1
 8002630:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	2300      	movs	r3, #0
 8002634:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002636:	2300      	movs	r3, #0
 8002638:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800263a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800263e:	4619      	mov	r1, r3
 8002640:	4810      	ldr	r0, [pc, #64]	; (8002684 <MX_GPIO_Init+0x280>)
 8002642:	f001 fe1d 	bl	8004280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002646:	23ff      	movs	r3, #255	; 0xff
 8002648:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800264a:	2301      	movs	r3, #1
 800264c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264e:	2300      	movs	r3, #0
 8002650:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002652:	2300      	movs	r3, #0
 8002654:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800265a:	4619      	mov	r1, r3
 800265c:	480a      	ldr	r0, [pc, #40]	; (8002688 <MX_GPIO_Init+0x284>)
 800265e:	f001 fe0f 	bl	8004280 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002662:	bf00      	nop
 8002664:	3738      	adds	r7, #56	; 0x38
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40023800 	.word	0x40023800
 8002670:	40020000 	.word	0x40020000
 8002674:	40020400 	.word	0x40020400
 8002678:	40021400 	.word	0x40021400
 800267c:	40021000 	.word	0x40021000
 8002680:	40021800 	.word	0x40021800
 8002684:	40020800 	.word	0x40020800
 8002688:	40020c00 	.word	0x40020c00

0800268c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002690:	b672      	cpsid	i
}
 8002692:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002694:	e7fe      	b.n	8002694 <Error_Handler+0x8>
	...

08002698 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	607b      	str	r3, [r7, #4]
 80026a2:	4b10      	ldr	r3, [pc, #64]	; (80026e4 <HAL_MspInit+0x4c>)
 80026a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a6:	4a0f      	ldr	r2, [pc, #60]	; (80026e4 <HAL_MspInit+0x4c>)
 80026a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ac:	6453      	str	r3, [r2, #68]	; 0x44
 80026ae:	4b0d      	ldr	r3, [pc, #52]	; (80026e4 <HAL_MspInit+0x4c>)
 80026b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026b6:	607b      	str	r3, [r7, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	603b      	str	r3, [r7, #0]
 80026be:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <HAL_MspInit+0x4c>)
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	4a08      	ldr	r2, [pc, #32]	; (80026e4 <HAL_MspInit+0x4c>)
 80026c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ca:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <HAL_MspInit+0x4c>)
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d2:	603b      	str	r3, [r7, #0]
 80026d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	40023800 	.word	0x40023800

080026e8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b08e      	sub	sp, #56	; 0x38
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	605a      	str	r2, [r3, #4]
 80026fa:	609a      	str	r2, [r3, #8]
 80026fc:	60da      	str	r2, [r3, #12]
 80026fe:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a55      	ldr	r2, [pc, #340]	; (800285c <HAL_ETH_MspInit+0x174>)
 8002706:	4293      	cmp	r3, r2
 8002708:	f040 80a4 	bne.w	8002854 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800270c:	2300      	movs	r3, #0
 800270e:	623b      	str	r3, [r7, #32]
 8002710:	4b53      	ldr	r3, [pc, #332]	; (8002860 <HAL_ETH_MspInit+0x178>)
 8002712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002714:	4a52      	ldr	r2, [pc, #328]	; (8002860 <HAL_ETH_MspInit+0x178>)
 8002716:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800271a:	6313      	str	r3, [r2, #48]	; 0x30
 800271c:	4b50      	ldr	r3, [pc, #320]	; (8002860 <HAL_ETH_MspInit+0x178>)
 800271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002724:	623b      	str	r3, [r7, #32]
 8002726:	6a3b      	ldr	r3, [r7, #32]
 8002728:	2300      	movs	r3, #0
 800272a:	61fb      	str	r3, [r7, #28]
 800272c:	4b4c      	ldr	r3, [pc, #304]	; (8002860 <HAL_ETH_MspInit+0x178>)
 800272e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002730:	4a4b      	ldr	r2, [pc, #300]	; (8002860 <HAL_ETH_MspInit+0x178>)
 8002732:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002736:	6313      	str	r3, [r2, #48]	; 0x30
 8002738:	4b49      	ldr	r3, [pc, #292]	; (8002860 <HAL_ETH_MspInit+0x178>)
 800273a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002740:	61fb      	str	r3, [r7, #28]
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	2300      	movs	r3, #0
 8002746:	61bb      	str	r3, [r7, #24]
 8002748:	4b45      	ldr	r3, [pc, #276]	; (8002860 <HAL_ETH_MspInit+0x178>)
 800274a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274c:	4a44      	ldr	r2, [pc, #272]	; (8002860 <HAL_ETH_MspInit+0x178>)
 800274e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002752:	6313      	str	r3, [r2, #48]	; 0x30
 8002754:	4b42      	ldr	r3, [pc, #264]	; (8002860 <HAL_ETH_MspInit+0x178>)
 8002756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002758:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800275c:	61bb      	str	r3, [r7, #24]
 800275e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	4b3e      	ldr	r3, [pc, #248]	; (8002860 <HAL_ETH_MspInit+0x178>)
 8002766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002768:	4a3d      	ldr	r2, [pc, #244]	; (8002860 <HAL_ETH_MspInit+0x178>)
 800276a:	f043 0304 	orr.w	r3, r3, #4
 800276e:	6313      	str	r3, [r2, #48]	; 0x30
 8002770:	4b3b      	ldr	r3, [pc, #236]	; (8002860 <HAL_ETH_MspInit+0x178>)
 8002772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	617b      	str	r3, [r7, #20]
 800277a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800277c:	2300      	movs	r3, #0
 800277e:	613b      	str	r3, [r7, #16]
 8002780:	4b37      	ldr	r3, [pc, #220]	; (8002860 <HAL_ETH_MspInit+0x178>)
 8002782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002784:	4a36      	ldr	r2, [pc, #216]	; (8002860 <HAL_ETH_MspInit+0x178>)
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	6313      	str	r3, [r2, #48]	; 0x30
 800278c:	4b34      	ldr	r3, [pc, #208]	; (8002860 <HAL_ETH_MspInit+0x178>)
 800278e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002798:	2300      	movs	r3, #0
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	4b30      	ldr	r3, [pc, #192]	; (8002860 <HAL_ETH_MspInit+0x178>)
 800279e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a0:	4a2f      	ldr	r2, [pc, #188]	; (8002860 <HAL_ETH_MspInit+0x178>)
 80027a2:	f043 0302 	orr.w	r3, r3, #2
 80027a6:	6313      	str	r3, [r2, #48]	; 0x30
 80027a8:	4b2d      	ldr	r3, [pc, #180]	; (8002860 <HAL_ETH_MspInit+0x178>)
 80027aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	60fb      	str	r3, [r7, #12]
 80027b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80027b4:	2300      	movs	r3, #0
 80027b6:	60bb      	str	r3, [r7, #8]
 80027b8:	4b29      	ldr	r3, [pc, #164]	; (8002860 <HAL_ETH_MspInit+0x178>)
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027bc:	4a28      	ldr	r2, [pc, #160]	; (8002860 <HAL_ETH_MspInit+0x178>)
 80027be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027c2:	6313      	str	r3, [r2, #48]	; 0x30
 80027c4:	4b26      	ldr	r3, [pc, #152]	; (8002860 <HAL_ETH_MspInit+0x178>)
 80027c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027cc:	60bb      	str	r3, [r7, #8]
 80027ce:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80027d0:	2332      	movs	r3, #50	; 0x32
 80027d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d4:	2302      	movs	r3, #2
 80027d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d8:	2300      	movs	r3, #0
 80027da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027dc:	2303      	movs	r3, #3
 80027de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80027e0:	230b      	movs	r3, #11
 80027e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027e8:	4619      	mov	r1, r3
 80027ea:	481e      	ldr	r0, [pc, #120]	; (8002864 <HAL_ETH_MspInit+0x17c>)
 80027ec:	f001 fd48 	bl	8004280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80027f0:	2386      	movs	r3, #134	; 0x86
 80027f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f4:	2302      	movs	r3, #2
 80027f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027fc:	2303      	movs	r3, #3
 80027fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002800:	230b      	movs	r3, #11
 8002802:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002808:	4619      	mov	r1, r3
 800280a:	4817      	ldr	r0, [pc, #92]	; (8002868 <HAL_ETH_MspInit+0x180>)
 800280c:	f001 fd38 	bl	8004280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002810:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002814:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002816:	2302      	movs	r3, #2
 8002818:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281a:	2300      	movs	r3, #0
 800281c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800281e:	2303      	movs	r3, #3
 8002820:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002822:	230b      	movs	r3, #11
 8002824:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800282a:	4619      	mov	r1, r3
 800282c:	480f      	ldr	r0, [pc, #60]	; (800286c <HAL_ETH_MspInit+0x184>)
 800282e:	f001 fd27 	bl	8004280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002832:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002836:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002838:	2302      	movs	r3, #2
 800283a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283c:	2300      	movs	r3, #0
 800283e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002840:	2303      	movs	r3, #3
 8002842:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002844:	230b      	movs	r3, #11
 8002846:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800284c:	4619      	mov	r1, r3
 800284e:	4808      	ldr	r0, [pc, #32]	; (8002870 <HAL_ETH_MspInit+0x188>)
 8002850:	f001 fd16 	bl	8004280 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002854:	bf00      	nop
 8002856:	3738      	adds	r7, #56	; 0x38
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40028000 	.word	0x40028000
 8002860:	40023800 	.word	0x40023800
 8002864:	40020800 	.word	0x40020800
 8002868:	40020000 	.word	0x40020000
 800286c:	40020400 	.word	0x40020400
 8002870:	40021800 	.word	0x40021800

08002874 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b08a      	sub	sp, #40	; 0x28
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800287c:	f107 0314 	add.w	r3, r7, #20
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	605a      	str	r2, [r3, #4]
 8002886:	609a      	str	r2, [r3, #8]
 8002888:	60da      	str	r2, [r3, #12]
 800288a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a19      	ldr	r2, [pc, #100]	; (80028f8 <HAL_I2C_MspInit+0x84>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d12c      	bne.n	80028f0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	613b      	str	r3, [r7, #16]
 800289a:	4b18      	ldr	r3, [pc, #96]	; (80028fc <HAL_I2C_MspInit+0x88>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	4a17      	ldr	r2, [pc, #92]	; (80028fc <HAL_I2C_MspInit+0x88>)
 80028a0:	f043 0302 	orr.w	r3, r3, #2
 80028a4:	6313      	str	r3, [r2, #48]	; 0x30
 80028a6:	4b15      	ldr	r3, [pc, #84]	; (80028fc <HAL_I2C_MspInit+0x88>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	613b      	str	r3, [r7, #16]
 80028b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80028b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028b8:	2312      	movs	r3, #18
 80028ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028bc:	2300      	movs	r3, #0
 80028be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c0:	2303      	movs	r3, #3
 80028c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028c4:	2304      	movs	r3, #4
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c8:	f107 0314 	add.w	r3, r7, #20
 80028cc:	4619      	mov	r1, r3
 80028ce:	480c      	ldr	r0, [pc, #48]	; (8002900 <HAL_I2C_MspInit+0x8c>)
 80028d0:	f001 fcd6 	bl	8004280 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028d4:	2300      	movs	r3, #0
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	4b08      	ldr	r3, [pc, #32]	; (80028fc <HAL_I2C_MspInit+0x88>)
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	4a07      	ldr	r2, [pc, #28]	; (80028fc <HAL_I2C_MspInit+0x88>)
 80028de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028e2:	6413      	str	r3, [r2, #64]	; 0x40
 80028e4:	4b05      	ldr	r3, [pc, #20]	; (80028fc <HAL_I2C_MspInit+0x88>)
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80028f0:	bf00      	nop
 80028f2:	3728      	adds	r7, #40	; 0x28
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40005400 	.word	0x40005400
 80028fc:	40023800 	.word	0x40023800
 8002900:	40020400 	.word	0x40020400

08002904 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08e      	sub	sp, #56	; 0x38
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800290c:	f107 0308 	add.w	r3, r7, #8
 8002910:	2230      	movs	r2, #48	; 0x30
 8002912:	2100      	movs	r1, #0
 8002914:	4618      	mov	r0, r3
 8002916:	f006 fe33 	bl	8009580 <memset>
  if(hrtc->Instance==RTC)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a0c      	ldr	r2, [pc, #48]	; (8002950 <HAL_RTC_MspInit+0x4c>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d111      	bne.n	8002948 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002924:	2320      	movs	r3, #32
 8002926:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002928:	f44f 7300 	mov.w	r3, #512	; 0x200
 800292c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800292e:	f107 0308 	add.w	r3, r7, #8
 8002932:	4618      	mov	r0, r3
 8002934:	f003 f8fe 	bl	8005b34 <HAL_RCCEx_PeriphCLKConfig>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800293e:	f7ff fea5 	bl	800268c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002942:	4b04      	ldr	r3, [pc, #16]	; (8002954 <HAL_RTC_MspInit+0x50>)
 8002944:	2201      	movs	r2, #1
 8002946:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002948:	bf00      	nop
 800294a:	3738      	adds	r7, #56	; 0x38
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40002800 	.word	0x40002800
 8002954:	42470e3c 	.word	0x42470e3c

08002958 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002968:	d115      	bne.n	8002996 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	4b0c      	ldr	r3, [pc, #48]	; (80029a0 <HAL_TIM_PWM_MspInit+0x48>)
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	4a0b      	ldr	r2, [pc, #44]	; (80029a0 <HAL_TIM_PWM_MspInit+0x48>)
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	6413      	str	r3, [r2, #64]	; 0x40
 800297a:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <HAL_TIM_PWM_MspInit+0x48>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002986:	2200      	movs	r2, #0
 8002988:	2100      	movs	r1, #0
 800298a:	201c      	movs	r0, #28
 800298c:	f001 f887 	bl	8003a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002990:	201c      	movs	r0, #28
 8002992:	f001 f8a0 	bl	8003ad6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002996:	bf00      	nop
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40023800 	.word	0x40023800

080029a4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08a      	sub	sp, #40	; 0x28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ac:	f107 0314 	add.w	r3, r7, #20
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	60da      	str	r2, [r3, #12]
 80029ba:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a1d      	ldr	r2, [pc, #116]	; (8002a38 <HAL_TIM_IC_MspInit+0x94>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d133      	bne.n	8002a2e <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	613b      	str	r3, [r7, #16]
 80029ca:	4b1c      	ldr	r3, [pc, #112]	; (8002a3c <HAL_TIM_IC_MspInit+0x98>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	4a1b      	ldr	r2, [pc, #108]	; (8002a3c <HAL_TIM_IC_MspInit+0x98>)
 80029d0:	f043 0302 	orr.w	r3, r3, #2
 80029d4:	6413      	str	r3, [r2, #64]	; 0x40
 80029d6:	4b19      	ldr	r3, [pc, #100]	; (8002a3c <HAL_TIM_IC_MspInit+0x98>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	613b      	str	r3, [r7, #16]
 80029e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	4b15      	ldr	r3, [pc, #84]	; (8002a3c <HAL_TIM_IC_MspInit+0x98>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	4a14      	ldr	r2, [pc, #80]	; (8002a3c <HAL_TIM_IC_MspInit+0x98>)
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	6313      	str	r3, [r2, #48]	; 0x30
 80029f2:	4b12      	ldr	r3, [pc, #72]	; (8002a3c <HAL_TIM_IC_MspInit+0x98>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ULTRASONIC_TIM3_CH1_Pin;
 80029fe:	2340      	movs	r3, #64	; 0x40
 8002a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a02:	2302      	movs	r3, #2
 8002a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULTRASONIC_TIM3_CH1_GPIO_Port, &GPIO_InitStruct);
 8002a12:	f107 0314 	add.w	r3, r7, #20
 8002a16:	4619      	mov	r1, r3
 8002a18:	4809      	ldr	r0, [pc, #36]	; (8002a40 <HAL_TIM_IC_MspInit+0x9c>)
 8002a1a:	f001 fc31 	bl	8004280 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002a1e:	2200      	movs	r2, #0
 8002a20:	2100      	movs	r1, #0
 8002a22:	201d      	movs	r0, #29
 8002a24:	f001 f83b 	bl	8003a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a28:	201d      	movs	r0, #29
 8002a2a:	f001 f854 	bl	8003ad6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002a2e:	bf00      	nop
 8002a30:	3728      	adds	r7, #40	; 0x28
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40000400 	.word	0x40000400
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	40020000 	.word	0x40020000

08002a44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a38      	ldr	r2, [pc, #224]	; (8002b34 <HAL_TIM_Base_MspInit+0xf0>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d116      	bne.n	8002a84 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]
 8002a5a:	4b37      	ldr	r3, [pc, #220]	; (8002b38 <HAL_TIM_Base_MspInit+0xf4>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	4a36      	ldr	r2, [pc, #216]	; (8002b38 <HAL_TIM_Base_MspInit+0xf4>)
 8002a60:	f043 0304 	orr.w	r3, r3, #4
 8002a64:	6413      	str	r3, [r2, #64]	; 0x40
 8002a66:	4b34      	ldr	r3, [pc, #208]	; (8002b38 <HAL_TIM_Base_MspInit+0xf4>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	617b      	str	r3, [r7, #20]
 8002a70:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002a72:	2200      	movs	r2, #0
 8002a74:	2100      	movs	r1, #0
 8002a76:	201e      	movs	r0, #30
 8002a78:	f001 f811 	bl	8003a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002a7c:	201e      	movs	r0, #30
 8002a7e:	f001 f82a 	bl	8003ad6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002a82:	e052      	b.n	8002b2a <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM5)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a2c      	ldr	r2, [pc, #176]	; (8002b3c <HAL_TIM_Base_MspInit+0xf8>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d116      	bne.n	8002abc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	613b      	str	r3, [r7, #16]
 8002a92:	4b29      	ldr	r3, [pc, #164]	; (8002b38 <HAL_TIM_Base_MspInit+0xf4>)
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	4a28      	ldr	r2, [pc, #160]	; (8002b38 <HAL_TIM_Base_MspInit+0xf4>)
 8002a98:	f043 0308 	orr.w	r3, r3, #8
 8002a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a9e:	4b26      	ldr	r3, [pc, #152]	; (8002b38 <HAL_TIM_Base_MspInit+0xf4>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	613b      	str	r3, [r7, #16]
 8002aa8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002aaa:	2200      	movs	r2, #0
 8002aac:	2100      	movs	r1, #0
 8002aae:	2032      	movs	r0, #50	; 0x32
 8002ab0:	f000 fff5 	bl	8003a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002ab4:	2032      	movs	r0, #50	; 0x32
 8002ab6:	f001 f80e 	bl	8003ad6 <HAL_NVIC_EnableIRQ>
}
 8002aba:	e036      	b.n	8002b2a <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM10)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a1f      	ldr	r2, [pc, #124]	; (8002b40 <HAL_TIM_Base_MspInit+0xfc>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d116      	bne.n	8002af4 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	4b1b      	ldr	r3, [pc, #108]	; (8002b38 <HAL_TIM_Base_MspInit+0xf4>)
 8002acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ace:	4a1a      	ldr	r2, [pc, #104]	; (8002b38 <HAL_TIM_Base_MspInit+0xf4>)
 8002ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ad6:	4b18      	ldr	r3, [pc, #96]	; (8002b38 <HAL_TIM_Base_MspInit+0xf4>)
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	2019      	movs	r0, #25
 8002ae8:	f000 ffd9 	bl	8003a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002aec:	2019      	movs	r0, #25
 8002aee:	f000 fff2 	bl	8003ad6 <HAL_NVIC_EnableIRQ>
}
 8002af2:	e01a      	b.n	8002b2a <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM11)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a12      	ldr	r2, [pc, #72]	; (8002b44 <HAL_TIM_Base_MspInit+0x100>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d115      	bne.n	8002b2a <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	60bb      	str	r3, [r7, #8]
 8002b02:	4b0d      	ldr	r3, [pc, #52]	; (8002b38 <HAL_TIM_Base_MspInit+0xf4>)
 8002b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b06:	4a0c      	ldr	r2, [pc, #48]	; (8002b38 <HAL_TIM_Base_MspInit+0xf4>)
 8002b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b0e:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <HAL_TIM_Base_MspInit+0xf4>)
 8002b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b16:	60bb      	str	r3, [r7, #8]
 8002b18:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	201a      	movs	r0, #26
 8002b20:	f000 ffbd 	bl	8003a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002b24:	201a      	movs	r0, #26
 8002b26:	f000 ffd6 	bl	8003ad6 <HAL_NVIC_EnableIRQ>
}
 8002b2a:	bf00      	nop
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40000800 	.word	0x40000800
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	40000c00 	.word	0x40000c00
 8002b40:	40014400 	.word	0x40014400
 8002b44:	40014800 	.word	0x40014800

08002b48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08a      	sub	sp, #40	; 0x28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b50:	f107 0314 	add.w	r3, r7, #20
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	605a      	str	r2, [r3, #4]
 8002b5a:	609a      	str	r2, [r3, #8]
 8002b5c:	60da      	str	r2, [r3, #12]
 8002b5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b68:	d11e      	bne.n	8002ba8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	613b      	str	r3, [r7, #16]
 8002b6e:	4b34      	ldr	r3, [pc, #208]	; (8002c40 <HAL_TIM_MspPostInit+0xf8>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	4a33      	ldr	r2, [pc, #204]	; (8002c40 <HAL_TIM_MspPostInit+0xf8>)
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	6313      	str	r3, [r2, #48]	; 0x30
 8002b7a:	4b31      	ldr	r3, [pc, #196]	; (8002c40 <HAL_TIM_MspPostInit+0xf8>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	613b      	str	r3, [r7, #16]
 8002b84:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_CH1_SERVO_Pin;
 8002b86:	2320      	movs	r3, #32
 8002b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b92:	2300      	movs	r3, #0
 8002b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b96:	2301      	movs	r3, #1
 8002b98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM2_CH1_SERVO_GPIO_Port, &GPIO_InitStruct);
 8002b9a:	f107 0314 	add.w	r3, r7, #20
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4828      	ldr	r0, [pc, #160]	; (8002c44 <HAL_TIM_MspPostInit+0xfc>)
 8002ba2:	f001 fb6d 	bl	8004280 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002ba6:	e047      	b.n	8002c38 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM4)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a26      	ldr	r2, [pc, #152]	; (8002c48 <HAL_TIM_MspPostInit+0x100>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d11f      	bne.n	8002bf2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	4b22      	ldr	r3, [pc, #136]	; (8002c40 <HAL_TIM_MspPostInit+0xf8>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	4a21      	ldr	r2, [pc, #132]	; (8002c40 <HAL_TIM_MspPostInit+0xf8>)
 8002bbc:	f043 0308 	orr.w	r3, r3, #8
 8002bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc2:	4b1f      	ldr	r3, [pc, #124]	; (8002c40 <HAL_TIM_MspPostInit+0xf8>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002bce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002be0:	2302      	movs	r3, #2
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002be4:	f107 0314 	add.w	r3, r7, #20
 8002be8:	4619      	mov	r1, r3
 8002bea:	4818      	ldr	r0, [pc, #96]	; (8002c4c <HAL_TIM_MspPostInit+0x104>)
 8002bec:	f001 fb48 	bl	8004280 <HAL_GPIO_Init>
}
 8002bf0:	e022      	b.n	8002c38 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM5)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a16      	ldr	r2, [pc, #88]	; (8002c50 <HAL_TIM_MspPostInit+0x108>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d11d      	bne.n	8002c38 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	60bb      	str	r3, [r7, #8]
 8002c00:	4b0f      	ldr	r3, [pc, #60]	; (8002c40 <HAL_TIM_MspPostInit+0xf8>)
 8002c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c04:	4a0e      	ldr	r2, [pc, #56]	; (8002c40 <HAL_TIM_MspPostInit+0xf8>)
 8002c06:	f043 0301 	orr.w	r3, r3, #1
 8002c0a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <HAL_TIM_MspPostInit+0xf8>)
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	60bb      	str	r3, [r7, #8]
 8002c16:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c18:	2308      	movs	r3, #8
 8002c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c20:	2300      	movs	r3, #0
 8002c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c24:	2300      	movs	r3, #0
 8002c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c2c:	f107 0314 	add.w	r3, r7, #20
 8002c30:	4619      	mov	r1, r3
 8002c32:	4804      	ldr	r0, [pc, #16]	; (8002c44 <HAL_TIM_MspPostInit+0xfc>)
 8002c34:	f001 fb24 	bl	8004280 <HAL_GPIO_Init>
}
 8002c38:	bf00      	nop
 8002c3a:	3728      	adds	r7, #40	; 0x28
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40023800 	.word	0x40023800
 8002c44:	40020000 	.word	0x40020000
 8002c48:	40000800 	.word	0x40000800
 8002c4c:	40020c00 	.word	0x40020c00
 8002c50:	40000c00 	.word	0x40000c00

08002c54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08c      	sub	sp, #48	; 0x30
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c5c:	f107 031c 	add.w	r3, r7, #28
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	605a      	str	r2, [r3, #4]
 8002c66:	609a      	str	r2, [r3, #8]
 8002c68:	60da      	str	r2, [r3, #12]
 8002c6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a3a      	ldr	r2, [pc, #232]	; (8002d5c <HAL_UART_MspInit+0x108>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d135      	bne.n	8002ce2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	61bb      	str	r3, [r7, #24]
 8002c7a:	4b39      	ldr	r3, [pc, #228]	; (8002d60 <HAL_UART_MspInit+0x10c>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	4a38      	ldr	r2, [pc, #224]	; (8002d60 <HAL_UART_MspInit+0x10c>)
 8002c80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c84:	6413      	str	r3, [r2, #64]	; 0x40
 8002c86:	4b36      	ldr	r3, [pc, #216]	; (8002d60 <HAL_UART_MspInit+0x10c>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c8e:	61bb      	str	r3, [r7, #24]
 8002c90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	617b      	str	r3, [r7, #20]
 8002c96:	4b32      	ldr	r3, [pc, #200]	; (8002d60 <HAL_UART_MspInit+0x10c>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	4a31      	ldr	r2, [pc, #196]	; (8002d60 <HAL_UART_MspInit+0x10c>)
 8002c9c:	f043 0308 	orr.w	r3, r3, #8
 8002ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca2:	4b2f      	ldr	r3, [pc, #188]	; (8002d60 <HAL_UART_MspInit+0x10c>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	f003 0308 	and.w	r3, r3, #8
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002cae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002cc0:	2307      	movs	r3, #7
 8002cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cc4:	f107 031c 	add.w	r3, r7, #28
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4826      	ldr	r0, [pc, #152]	; (8002d64 <HAL_UART_MspInit+0x110>)
 8002ccc:	f001 fad8 	bl	8004280 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	2027      	movs	r0, #39	; 0x27
 8002cd6:	f000 fee2 	bl	8003a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002cda:	2027      	movs	r0, #39	; 0x27
 8002cdc:	f000 fefb 	bl	8003ad6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002ce0:	e038      	b.n	8002d54 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART6)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a20      	ldr	r2, [pc, #128]	; (8002d68 <HAL_UART_MspInit+0x114>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d133      	bne.n	8002d54 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002cec:	2300      	movs	r3, #0
 8002cee:	613b      	str	r3, [r7, #16]
 8002cf0:	4b1b      	ldr	r3, [pc, #108]	; (8002d60 <HAL_UART_MspInit+0x10c>)
 8002cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf4:	4a1a      	ldr	r2, [pc, #104]	; (8002d60 <HAL_UART_MspInit+0x10c>)
 8002cf6:	f043 0320 	orr.w	r3, r3, #32
 8002cfa:	6453      	str	r3, [r2, #68]	; 0x44
 8002cfc:	4b18      	ldr	r3, [pc, #96]	; (8002d60 <HAL_UART_MspInit+0x10c>)
 8002cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d00:	f003 0320 	and.w	r3, r3, #32
 8002d04:	613b      	str	r3, [r7, #16]
 8002d06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	4b14      	ldr	r3, [pc, #80]	; (8002d60 <HAL_UART_MspInit+0x10c>)
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d10:	4a13      	ldr	r2, [pc, #76]	; (8002d60 <HAL_UART_MspInit+0x10c>)
 8002d12:	f043 0304 	orr.w	r3, r3, #4
 8002d16:	6313      	str	r3, [r2, #48]	; 0x30
 8002d18:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <HAL_UART_MspInit+0x10c>)
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	60fb      	str	r3, [r7, #12]
 8002d22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d24:	23c0      	movs	r3, #192	; 0xc0
 8002d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d28:	2302      	movs	r3, #2
 8002d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d30:	2303      	movs	r3, #3
 8002d32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002d34:	2308      	movs	r3, #8
 8002d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d38:	f107 031c 	add.w	r3, r7, #28
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	480b      	ldr	r0, [pc, #44]	; (8002d6c <HAL_UART_MspInit+0x118>)
 8002d40:	f001 fa9e 	bl	8004280 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002d44:	2200      	movs	r2, #0
 8002d46:	2100      	movs	r1, #0
 8002d48:	2047      	movs	r0, #71	; 0x47
 8002d4a:	f000 fea8 	bl	8003a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002d4e:	2047      	movs	r0, #71	; 0x47
 8002d50:	f000 fec1 	bl	8003ad6 <HAL_NVIC_EnableIRQ>
}
 8002d54:	bf00      	nop
 8002d56:	3730      	adds	r7, #48	; 0x30
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40004800 	.word	0x40004800
 8002d60:	40023800 	.word	0x40023800
 8002d64:	40020c00 	.word	0x40020c00
 8002d68:	40011400 	.word	0x40011400
 8002d6c:	40020800 	.word	0x40020800

08002d70 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08a      	sub	sp, #40	; 0x28
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d78:	f107 0314 	add.w	r3, r7, #20
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	605a      	str	r2, [r3, #4]
 8002d82:	609a      	str	r2, [r3, #8]
 8002d84:	60da      	str	r2, [r3, #12]
 8002d86:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d90:	d13f      	bne.n	8002e12 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	613b      	str	r3, [r7, #16]
 8002d96:	4b21      	ldr	r3, [pc, #132]	; (8002e1c <HAL_PCD_MspInit+0xac>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	4a20      	ldr	r2, [pc, #128]	; (8002e1c <HAL_PCD_MspInit+0xac>)
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	6313      	str	r3, [r2, #48]	; 0x30
 8002da2:	4b1e      	ldr	r3, [pc, #120]	; (8002e1c <HAL_PCD_MspInit+0xac>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	613b      	str	r3, [r7, #16]
 8002dac:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002dae:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db4:	2302      	movs	r3, #2
 8002db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002dc0:	230a      	movs	r3, #10
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc4:	f107 0314 	add.w	r3, r7, #20
 8002dc8:	4619      	mov	r1, r3
 8002dca:	4815      	ldr	r0, [pc, #84]	; (8002e20 <HAL_PCD_MspInit+0xb0>)
 8002dcc:	f001 fa58 	bl	8004280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002dd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002dde:	f107 0314 	add.w	r3, r7, #20
 8002de2:	4619      	mov	r1, r3
 8002de4:	480e      	ldr	r0, [pc, #56]	; (8002e20 <HAL_PCD_MspInit+0xb0>)
 8002de6:	f001 fa4b 	bl	8004280 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002dea:	4b0c      	ldr	r3, [pc, #48]	; (8002e1c <HAL_PCD_MspInit+0xac>)
 8002dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dee:	4a0b      	ldr	r2, [pc, #44]	; (8002e1c <HAL_PCD_MspInit+0xac>)
 8002df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002df4:	6353      	str	r3, [r2, #52]	; 0x34
 8002df6:	2300      	movs	r3, #0
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	4b08      	ldr	r3, [pc, #32]	; (8002e1c <HAL_PCD_MspInit+0xac>)
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfe:	4a07      	ldr	r2, [pc, #28]	; (8002e1c <HAL_PCD_MspInit+0xac>)
 8002e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e04:	6453      	str	r3, [r2, #68]	; 0x44
 8002e06:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <HAL_PCD_MspInit+0xac>)
 8002e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002e12:	bf00      	nop
 8002e14:	3728      	adds	r7, #40	; 0x28
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	40020000 	.word	0x40020000

08002e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e28:	e7fe      	b.n	8002e28 <NMI_Handler+0x4>

08002e2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e2e:	e7fe      	b.n	8002e2e <HardFault_Handler+0x4>

08002e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e34:	e7fe      	b.n	8002e34 <MemManage_Handler+0x4>

08002e36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e36:	b480      	push	{r7}
 8002e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e3a:	e7fe      	b.n	8002e3a <BusFault_Handler+0x4>

08002e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e40:	e7fe      	b.n	8002e40 <UsageFault_Handler+0x4>

08002e42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e42:	b480      	push	{r7}
 8002e44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e46:	bf00      	nop
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e54:	bf00      	nop
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e62:	bf00      	nop
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e70:	f000 fcf6 	bl	8003860 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_STSTICK_Handler(); // ADD_kenGwon_231006
 8002e74:	f7fe fe38 	bl	8001ae8 <HAL_STSTICK_Handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002e78:	bf00      	nop
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002e80:	4802      	ldr	r0, [pc, #8]	; (8002e8c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002e82:	f003 ff7b 	bl	8006d7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002e86:	bf00      	nop
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	200004d4 	.word	0x200004d4

08002e90 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002e94:	4802      	ldr	r0, [pc, #8]	; (8002ea0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002e96:	f003 ff71 	bl	8006d7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002e9a:	bf00      	nop
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	2000051c 	.word	0x2000051c

08002ea4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002ea8:	4802      	ldr	r0, [pc, #8]	; (8002eb4 <TIM2_IRQHandler+0x10>)
 8002eaa:	f003 ff67 	bl	8006d7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002eae:	bf00      	nop
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	200003b4 	.word	0x200003b4

08002eb8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002ebc:	4802      	ldr	r0, [pc, #8]	; (8002ec8 <TIM3_IRQHandler+0x10>)
 8002ebe:	f003 ff5d 	bl	8006d7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002ec2:	bf00      	nop
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	200003fc 	.word	0x200003fc

08002ecc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002ed0:	4802      	ldr	r0, [pc, #8]	; (8002edc <TIM4_IRQHandler+0x10>)
 8002ed2:	f003 ff53 	bl	8006d7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002ed6:	bf00      	nop
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	20000444 	.word	0x20000444

08002ee0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002ee4:	4802      	ldr	r0, [pc, #8]	; (8002ef0 <USART3_IRQHandler+0x10>)
 8002ee6:	f005 f8b3 	bl	8008050 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002eea:	bf00      	nop
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	20000564 	.word	0x20000564

08002ef4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002ef8:	4802      	ldr	r0, [pc, #8]	; (8002f04 <TIM5_IRQHandler+0x10>)
 8002efa:	f003 ff3f 	bl	8006d7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002efe:	bf00      	nop
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	2000048c 	.word	0x2000048c

08002f08 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002f0c:	4802      	ldr	r0, [pc, #8]	; (8002f18 <USART6_IRQHandler+0x10>)
 8002f0e:	f005 f89f 	bl	8008050 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002f12:	bf00      	nop
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	200005a8 	.word	0x200005a8

08002f1c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	e00a      	b.n	8002f44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f2e:	f3af 8000 	nop.w
 8002f32:	4601      	mov	r1, r0
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	1c5a      	adds	r2, r3, #1
 8002f38:	60ba      	str	r2, [r7, #8]
 8002f3a:	b2ca      	uxtb	r2, r1
 8002f3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	3301      	adds	r3, #1
 8002f42:	617b      	str	r3, [r7, #20]
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	dbf0      	blt.n	8002f2e <_read+0x12>
  }

  return len;
 8002f4c:	687b      	ldr	r3, [r7, #4]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3718      	adds	r7, #24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b086      	sub	sp, #24
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	60f8      	str	r0, [r7, #12]
 8002f5e:	60b9      	str	r1, [r7, #8]
 8002f60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f62:	2300      	movs	r3, #0
 8002f64:	617b      	str	r3, [r7, #20]
 8002f66:	e009      	b.n	8002f7c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	60ba      	str	r2, [r7, #8]
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7fe fe07 	bl	8001b84 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	dbf1      	blt.n	8002f68 <_write+0x12>
  }
  return len;
 8002f84:	687b      	ldr	r3, [r7, #4]
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <_close>:

int _close(int file)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b083      	sub	sp, #12
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b083      	sub	sp, #12
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
 8002fae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fb6:	605a      	str	r2, [r3, #4]
  return 0;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <_isatty>:

int _isatty(int file)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002fce:	2301      	movs	r3, #1
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
	...

08002ff8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003000:	4a14      	ldr	r2, [pc, #80]	; (8003054 <_sbrk+0x5c>)
 8003002:	4b15      	ldr	r3, [pc, #84]	; (8003058 <_sbrk+0x60>)
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800300c:	4b13      	ldr	r3, [pc, #76]	; (800305c <_sbrk+0x64>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d102      	bne.n	800301a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003014:	4b11      	ldr	r3, [pc, #68]	; (800305c <_sbrk+0x64>)
 8003016:	4a12      	ldr	r2, [pc, #72]	; (8003060 <_sbrk+0x68>)
 8003018:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800301a:	4b10      	ldr	r3, [pc, #64]	; (800305c <_sbrk+0x64>)
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4413      	add	r3, r2
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	429a      	cmp	r2, r3
 8003026:	d207      	bcs.n	8003038 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003028:	f006 fa80 	bl	800952c <__errno>
 800302c:	4603      	mov	r3, r0
 800302e:	220c      	movs	r2, #12
 8003030:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003032:	f04f 33ff 	mov.w	r3, #4294967295
 8003036:	e009      	b.n	800304c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003038:	4b08      	ldr	r3, [pc, #32]	; (800305c <_sbrk+0x64>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800303e:	4b07      	ldr	r3, [pc, #28]	; (800305c <_sbrk+0x64>)
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4413      	add	r3, r2
 8003046:	4a05      	ldr	r2, [pc, #20]	; (800305c <_sbrk+0x64>)
 8003048:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800304a:	68fb      	ldr	r3, [r7, #12]
}
 800304c:	4618      	mov	r0, r3
 800304e:	3718      	adds	r7, #24
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	20030000 	.word	0x20030000
 8003058:	00000400 	.word	0x00000400
 800305c:	20000b14 	.word	0x20000b14
 8003060:	20000e98 	.word	0x20000e98

08003064 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003068:	4b06      	ldr	r3, [pc, #24]	; (8003084 <SystemInit+0x20>)
 800306a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800306e:	4a05      	ldr	r2, [pc, #20]	; (8003084 <SystemInit+0x20>)
 8003070:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003074:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003078:	bf00      	nop
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	e000ed00 	.word	0xe000ed00

08003088 <HAL_UART_RxCpltCallback>:
volatile int bt_rx_index = 0; // bt_rx_buff의 save위치
volatile int bt_newline_detect_flag = 0; // \n을 만났다는 것을 알려주는 플래그변수..


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003088:	b590      	push	{r4, r7, lr}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]

#if 1

	if (huart == &huart3)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a4c      	ldr	r2, [pc, #304]	; (80031c4 <HAL_UART_RxCpltCallback+0x13c>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d160      	bne.n	800315a <HAL_UART_RxCpltCallback+0xd2>
	{
		if ((queue_rear+1)%QUEUE_MAX != queue_front)
 8003098:	4b4b      	ldr	r3, [pc, #300]	; (80031c8 <HAL_UART_RxCpltCallback+0x140>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	1c59      	adds	r1, r3, #1
 800309e:	4b4b      	ldr	r3, [pc, #300]	; (80031cc <HAL_UART_RxCpltCallback+0x144>)
 80030a0:	fb83 2301 	smull	r2, r3, r3, r1
 80030a4:	10da      	asrs	r2, r3, #3
 80030a6:	17cb      	asrs	r3, r1, #31
 80030a8:	1ad2      	subs	r2, r2, r3
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	1aca      	subs	r2, r1, r3
 80030b4:	4b46      	ldr	r3, [pc, #280]	; (80031d0 <HAL_UART_RxCpltCallback+0x148>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d049      	beq.n	8003150 <HAL_UART_RxCpltCallback+0xc8>
		{
			if (rx_index < COMMAND_LENGTH)
 80030bc:	4b45      	ldr	r3, [pc, #276]	; (80031d4 <HAL_UART_RxCpltCallback+0x14c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b27      	cmp	r3, #39	; 0x27
 80030c2:	dc3f      	bgt.n	8003144 <HAL_UART_RxCpltCallback+0xbc>
			{
				if (rx_data == '\n' || rx_data == '\r')
 80030c4:	4b44      	ldr	r3, [pc, #272]	; (80031d8 <HAL_UART_RxCpltCallback+0x150>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2b0a      	cmp	r3, #10
 80030ca:	d003      	beq.n	80030d4 <HAL_UART_RxCpltCallback+0x4c>
 80030cc:	4b42      	ldr	r3, [pc, #264]	; (80031d8 <HAL_UART_RxCpltCallback+0x150>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b0d      	cmp	r3, #13
 80030d2:	d124      	bne.n	800311e <HAL_UART_RxCpltCallback+0x96>
				{
					rx_buff[queue_rear][rx_index] = '\0';
 80030d4:	4b3c      	ldr	r3, [pc, #240]	; (80031c8 <HAL_UART_RxCpltCallback+0x140>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	4b3e      	ldr	r3, [pc, #248]	; (80031d4 <HAL_UART_RxCpltCallback+0x14c>)
 80030da:	6819      	ldr	r1, [r3, #0]
 80030dc:	483f      	ldr	r0, [pc, #252]	; (80031dc <HAL_UART_RxCpltCallback+0x154>)
 80030de:	4613      	mov	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	4403      	add	r3, r0
 80030e8:	440b      	add	r3, r1
 80030ea:	2200      	movs	r2, #0
 80030ec:	701a      	strb	r2, [r3, #0]
					rx_index = 0;
 80030ee:	4b39      	ldr	r3, [pc, #228]	; (80031d4 <HAL_UART_RxCpltCallback+0x14c>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
					queue_rear++;
 80030f4:	4b34      	ldr	r3, [pc, #208]	; (80031c8 <HAL_UART_RxCpltCallback+0x140>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	3301      	adds	r3, #1
 80030fa:	4a33      	ldr	r2, [pc, #204]	; (80031c8 <HAL_UART_RxCpltCallback+0x140>)
 80030fc:	6013      	str	r3, [r2, #0]
					queue_rear %= QUEUE_MAX;
 80030fe:	4b32      	ldr	r3, [pc, #200]	; (80031c8 <HAL_UART_RxCpltCallback+0x140>)
 8003100:	6819      	ldr	r1, [r3, #0]
 8003102:	4b32      	ldr	r3, [pc, #200]	; (80031cc <HAL_UART_RxCpltCallback+0x144>)
 8003104:	fb83 2301 	smull	r2, r3, r3, r1
 8003108:	10da      	asrs	r2, r3, #3
 800310a:	17cb      	asrs	r3, r1, #31
 800310c:	1ad2      	subs	r2, r2, r3
 800310e:	4613      	mov	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4413      	add	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	1aca      	subs	r2, r1, r3
 8003118:	4b2b      	ldr	r3, [pc, #172]	; (80031c8 <HAL_UART_RxCpltCallback+0x140>)
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	e018      	b.n	8003150 <HAL_UART_RxCpltCallback+0xc8>
				}
				else
				{
					rx_buff[queue_rear][rx_index++] = rx_data;
 800311e:	4b2a      	ldr	r3, [pc, #168]	; (80031c8 <HAL_UART_RxCpltCallback+0x140>)
 8003120:	6819      	ldr	r1, [r3, #0]
 8003122:	4b2c      	ldr	r3, [pc, #176]	; (80031d4 <HAL_UART_RxCpltCallback+0x14c>)
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	1c53      	adds	r3, r2, #1
 8003128:	482a      	ldr	r0, [pc, #168]	; (80031d4 <HAL_UART_RxCpltCallback+0x14c>)
 800312a:	6003      	str	r3, [r0, #0]
 800312c:	4b2a      	ldr	r3, [pc, #168]	; (80031d8 <HAL_UART_RxCpltCallback+0x150>)
 800312e:	781c      	ldrb	r4, [r3, #0]
 8003130:	482a      	ldr	r0, [pc, #168]	; (80031dc <HAL_UART_RxCpltCallback+0x154>)
 8003132:	460b      	mov	r3, r1
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	440b      	add	r3, r1
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	4403      	add	r3, r0
 800313c:	4413      	add	r3, r2
 800313e:	4622      	mov	r2, r4
 8003140:	701a      	strb	r2, [r3, #0]
 8003142:	e005      	b.n	8003150 <HAL_UART_RxCpltCallback+0xc8>
				}
			}
			else
			{
				rx_index = 0;
 8003144:	4b23      	ldr	r3, [pc, #140]	; (80031d4 <HAL_UART_RxCpltCallback+0x14c>)
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
				printf("Message Overflow !!!\n");
 800314a:	4825      	ldr	r0, [pc, #148]	; (80031e0 <HAL_UART_RxCpltCallback+0x158>)
 800314c:	f006 faa6 	bl	800969c <puts>
		{

		}

		// 주의: 반드시 HAL_UART_Receive_IT() 함수를 call 해줘야 다음 인터럽트가 이어서 발생이 가능해진다.
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8003150:	2201      	movs	r2, #1
 8003152:	4921      	ldr	r1, [pc, #132]	; (80031d8 <HAL_UART_RxCpltCallback+0x150>)
 8003154:	481b      	ldr	r0, [pc, #108]	; (80031c4 <HAL_UART_RxCpltCallback+0x13c>)
 8003156:	f004 ff4a 	bl	8007fee <HAL_UART_Receive_IT>
		// 주의: 반드시 HAL_UART_Receive_IT() 함수를 call 해줘야 다음 인터럽트가 이어서 발생이 가능해진다.
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);
	}
#endif

	if (huart == &huart6) // Bluetooth와 연결된 uart
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a21      	ldr	r2, [pc, #132]	; (80031e4 <HAL_UART_RxCpltCallback+0x15c>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d12c      	bne.n	80031bc <HAL_UART_RxCpltCallback+0x134>
	{
		if (bt_rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 8003162:	4b21      	ldr	r3, [pc, #132]	; (80031e8 <HAL_UART_RxCpltCallback+0x160>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2b27      	cmp	r3, #39	; 0x27
 8003168:	dc1d      	bgt.n	80031a6 <HAL_UART_RxCpltCallback+0x11e>
		{
			if(bt_rx_data == '\n' || bt_rx_data == '\r')
 800316a:	4b20      	ldr	r3, [pc, #128]	; (80031ec <HAL_UART_RxCpltCallback+0x164>)
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	2b0a      	cmp	r3, #10
 8003170:	d003      	beq.n	800317a <HAL_UART_RxCpltCallback+0xf2>
 8003172:	4b1e      	ldr	r3, [pc, #120]	; (80031ec <HAL_UART_RxCpltCallback+0x164>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	2b0d      	cmp	r3, #13
 8003178:	d10b      	bne.n	8003192 <HAL_UART_RxCpltCallback+0x10a>
			{
				bt_rx_buff[bt_rx_index] = 0; // '\0'
 800317a:	4b1b      	ldr	r3, [pc, #108]	; (80031e8 <HAL_UART_RxCpltCallback+0x160>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a1c      	ldr	r2, [pc, #112]	; (80031f0 <HAL_UART_RxCpltCallback+0x168>)
 8003180:	2100      	movs	r1, #0
 8003182:	54d1      	strb	r1, [r2, r3]
				bt_newline_detect_flag = 1;
 8003184:	4b1b      	ldr	r3, [pc, #108]	; (80031f4 <HAL_UART_RxCpltCallback+0x16c>)
 8003186:	2201      	movs	r2, #1
 8003188:	601a      	str	r2, [r3, #0]
				bt_rx_index = 0; // 다음 메시지 저장을 위해서 rx_index값을 0으로 한다.
 800318a:	4b17      	ldr	r3, [pc, #92]	; (80031e8 <HAL_UART_RxCpltCallback+0x160>)
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	e00f      	b.n	80031b2 <HAL_UART_RxCpltCallback+0x12a>
			}
			else
			{
				bt_rx_buff[bt_rx_index++] = bt_rx_data;
 8003192:	4b15      	ldr	r3, [pc, #84]	; (80031e8 <HAL_UART_RxCpltCallback+0x160>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	1c5a      	adds	r2, r3, #1
 8003198:	4913      	ldr	r1, [pc, #76]	; (80031e8 <HAL_UART_RxCpltCallback+0x160>)
 800319a:	600a      	str	r2, [r1, #0]
 800319c:	4a13      	ldr	r2, [pc, #76]	; (80031ec <HAL_UART_RxCpltCallback+0x164>)
 800319e:	7811      	ldrb	r1, [r2, #0]
 80031a0:	4a13      	ldr	r2, [pc, #76]	; (80031f0 <HAL_UART_RxCpltCallback+0x168>)
 80031a2:	54d1      	strb	r1, [r2, r3]
 80031a4:	e005      	b.n	80031b2 <HAL_UART_RxCpltCallback+0x12a>
			}
		}
		else
		{
			bt_rx_index = 0;
 80031a6:	4b10      	ldr	r3, [pc, #64]	; (80031e8 <HAL_UART_RxCpltCallback+0x160>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
			printf("Message Overflow !!!\n");
 80031ac:	480c      	ldr	r0, [pc, #48]	; (80031e0 <HAL_UART_RxCpltCallback+0x158>)
 80031ae:	f006 fa75 	bl	800969c <puts>
		}

		// 주의: 반드시 HAL_UART_Receive_IT() 함수를 call 해줘야 다음 인터럽트가 이어서 발생이 가능해진다.
		HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);
 80031b2:	2201      	movs	r2, #1
 80031b4:	490d      	ldr	r1, [pc, #52]	; (80031ec <HAL_UART_RxCpltCallback+0x164>)
 80031b6:	480b      	ldr	r0, [pc, #44]	; (80031e4 <HAL_UART_RxCpltCallback+0x15c>)
 80031b8:	f004 ff19 	bl	8007fee <HAL_UART_Receive_IT>
	}
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd90      	pop	{r4, r7, pc}
 80031c4:	20000564 	.word	0x20000564
 80031c8:	20000e3c 	.word	0x20000e3c
 80031cc:	66666667 	.word	0x66666667
 80031d0:	20000e38 	.word	0x20000e38
 80031d4:	20000e40 	.word	0x20000e40
 80031d8:	20000af8 	.word	0x20000af8
 80031dc:	20000b18 	.word	0x20000b18
 80031e0:	0800ab7c 	.word	0x0800ab7c
 80031e4:	200005a8 	.word	0x200005a8
 80031e8:	20000e6c 	.word	0x20000e6c
 80031ec:	20000af9 	.word	0x20000af9
 80031f0:	20000e44 	.word	0x20000e44
 80031f4:	20000e70 	.word	0x20000e70

080031f8 <pc_command_processing>:

void pc_command_processing(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
	if (queue_front != queue_rear) // 원형쿠로 구성한게 아니기 때무네, 뉴라인 플래그가 서 있을 때만 완전한 문장이 들어왔다고 판단하고 함수가 진해오디어야 하낟.
 80031fc:	4bad      	ldr	r3, [pc, #692]	; (80034b4 <pc_command_processing+0x2bc>)
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	4bad      	ldr	r3, [pc, #692]	; (80034b8 <pc_command_processing+0x2c0>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	f000 8154 	beq.w	80034b2 <pc_command_processing+0x2ba>
	{
		queue_front++;
 800320a:	4baa      	ldr	r3, [pc, #680]	; (80034b4 <pc_command_processing+0x2bc>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	3301      	adds	r3, #1
 8003210:	4aa8      	ldr	r2, [pc, #672]	; (80034b4 <pc_command_processing+0x2bc>)
 8003212:	6013      	str	r3, [r2, #0]
		queue_front %= QUEUE_MAX;
 8003214:	4ba7      	ldr	r3, [pc, #668]	; (80034b4 <pc_command_processing+0x2bc>)
 8003216:	6819      	ldr	r1, [r3, #0]
 8003218:	4ba8      	ldr	r3, [pc, #672]	; (80034bc <pc_command_processing+0x2c4>)
 800321a:	fb83 2301 	smull	r2, r3, r3, r1
 800321e:	10da      	asrs	r2, r3, #3
 8003220:	17cb      	asrs	r3, r1, #31
 8003222:	1ad2      	subs	r2, r2, r3
 8003224:	4613      	mov	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	1aca      	subs	r2, r1, r3
 800322e:	4ba1      	ldr	r3, [pc, #644]	; (80034b4 <pc_command_processing+0x2bc>)
 8003230:	601a      	str	r2, [r3, #0]
//		newline_detect_flag = 0;

		printf("%s\n", rx_buff[queue_front - 1]);
 8003232:	4ba0      	ldr	r3, [pc, #640]	; (80034b4 <pc_command_processing+0x2bc>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	1e5a      	subs	r2, r3, #1
 8003238:	4613      	mov	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	4a9f      	ldr	r2, [pc, #636]	; (80034c0 <pc_command_processing+0x2c8>)
 8003242:	4413      	add	r3, r2
 8003244:	4618      	mov	r0, r3
 8003246:	f006 fa29 	bl	800969c <puts>

		if (!strncmp(rx_buff[queue_front - 1], "led_all_on", strlen("led_all_on"))) // 느낌표가 들어갔다!! strcmp는 같으면 0을 리턴하기 때문에 if문에 진입하려먼 !not을 통해서 1(true)로 뒤집어 줘야 한다.
 800324a:	4b9a      	ldr	r3, [pc, #616]	; (80034b4 <pc_command_processing+0x2bc>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	1e5a      	subs	r2, r3, #1
 8003250:	4613      	mov	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	4a99      	ldr	r2, [pc, #612]	; (80034c0 <pc_command_processing+0x2c8>)
 800325a:	4413      	add	r3, r2
 800325c:	220a      	movs	r2, #10
 800325e:	4999      	ldr	r1, [pc, #612]	; (80034c4 <pc_command_processing+0x2cc>)
 8003260:	4618      	mov	r0, r3
 8003262:	f006 fa43 	bl	80096ec <strncmp>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d102      	bne.n	8003272 <pc_command_processing+0x7a>
		{
			led_all_on();
 800326c:	f7fe fafa 	bl	8001864 <led_all_on>
			return;
 8003270:	e11f      	b.n	80034b2 <pc_command_processing+0x2ba>
		}
		if (!strncmp(rx_buff[queue_front - 1], "led_all_off", strlen("led_all_off")))
 8003272:	4b90      	ldr	r3, [pc, #576]	; (80034b4 <pc_command_processing+0x2bc>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	1e5a      	subs	r2, r3, #1
 8003278:	4613      	mov	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	4a8f      	ldr	r2, [pc, #572]	; (80034c0 <pc_command_processing+0x2c8>)
 8003282:	4413      	add	r3, r2
 8003284:	220b      	movs	r2, #11
 8003286:	4990      	ldr	r1, [pc, #576]	; (80034c8 <pc_command_processing+0x2d0>)
 8003288:	4618      	mov	r0, r3
 800328a:	f006 fa2f 	bl	80096ec <strncmp>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d102      	bne.n	800329a <pc_command_processing+0xa2>
		{
			led_all_off();
 8003294:	f7fe faf2 	bl	800187c <led_all_off>
			return;
 8003298:	e10b      	b.n	80034b2 <pc_command_processing+0x2ba>
		}
		if (!strncmp(rx_buff[queue_front - 1], "led_on_up", strlen("led_on_up")))
 800329a:	4b86      	ldr	r3, [pc, #536]	; (80034b4 <pc_command_processing+0x2bc>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	1e5a      	subs	r2, r3, #1
 80032a0:	4613      	mov	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	4a85      	ldr	r2, [pc, #532]	; (80034c0 <pc_command_processing+0x2c8>)
 80032aa:	4413      	add	r3, r2
 80032ac:	2209      	movs	r2, #9
 80032ae:	4987      	ldr	r1, [pc, #540]	; (80034cc <pc_command_processing+0x2d4>)
 80032b0:	4618      	mov	r0, r3
 80032b2:	f006 fa1b 	bl	80096ec <strncmp>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d102      	bne.n	80032c2 <pc_command_processing+0xca>
		{
			led_on_up();
 80032bc:	f7fe faea 	bl	8001894 <led_on_up>
			return;
 80032c0:	e0f7      	b.n	80034b2 <pc_command_processing+0x2ba>
		}
		if (!strncmp(rx_buff[queue_front - 1], "led_on_down", strlen("led_on_down")))
 80032c2:	4b7c      	ldr	r3, [pc, #496]	; (80034b4 <pc_command_processing+0x2bc>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	1e5a      	subs	r2, r3, #1
 80032c8:	4613      	mov	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	4a7b      	ldr	r2, [pc, #492]	; (80034c0 <pc_command_processing+0x2c8>)
 80032d2:	4413      	add	r3, r2
 80032d4:	220b      	movs	r2, #11
 80032d6:	497e      	ldr	r1, [pc, #504]	; (80034d0 <pc_command_processing+0x2d8>)
 80032d8:	4618      	mov	r0, r3
 80032da:	f006 fa07 	bl	80096ec <strncmp>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d102      	bne.n	80032ea <pc_command_processing+0xf2>
		{
			led_on_down();
 80032e4:	f7fe fb02 	bl	80018ec <led_on_down>
			return;
 80032e8:	e0e3      	b.n	80034b2 <pc_command_processing+0x2ba>
		}
		if (!strncmp(rx_buff[queue_front - 1], "led_keepon_up", strlen("led_keepon_up")))
 80032ea:	4b72      	ldr	r3, [pc, #456]	; (80034b4 <pc_command_processing+0x2bc>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	1e5a      	subs	r2, r3, #1
 80032f0:	4613      	mov	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	4a71      	ldr	r2, [pc, #452]	; (80034c0 <pc_command_processing+0x2c8>)
 80032fa:	4413      	add	r3, r2
 80032fc:	220d      	movs	r2, #13
 80032fe:	4975      	ldr	r1, [pc, #468]	; (80034d4 <pc_command_processing+0x2dc>)
 8003300:	4618      	mov	r0, r3
 8003302:	f006 f9f3 	bl	80096ec <strncmp>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d102      	bne.n	8003312 <pc_command_processing+0x11a>
		{
			led_keepon_up();
 800330c:	f7fe fb1a 	bl	8001944 <led_keepon_up>
			return;
 8003310:	e0cf      	b.n	80034b2 <pc_command_processing+0x2ba>
		}
		if (!strncmp(rx_buff[queue_front - 1], "led_keepon_down", strlen("led_keepon_down")))
 8003312:	4b68      	ldr	r3, [pc, #416]	; (80034b4 <pc_command_processing+0x2bc>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	1e5a      	subs	r2, r3, #1
 8003318:	4613      	mov	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4413      	add	r3, r2
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	4a67      	ldr	r2, [pc, #412]	; (80034c0 <pc_command_processing+0x2c8>)
 8003322:	4413      	add	r3, r2
 8003324:	220f      	movs	r2, #15
 8003326:	496c      	ldr	r1, [pc, #432]	; (80034d8 <pc_command_processing+0x2e0>)
 8003328:	4618      	mov	r0, r3
 800332a:	f006 f9df 	bl	80096ec <strncmp>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d102      	bne.n	800333a <pc_command_processing+0x142>
		{
			led_keepon_down();
 8003334:	f7fe fb30 	bl	8001998 <led_keepon_down>
			return;
 8003338:	e0bb      	b.n	80034b2 <pc_command_processing+0x2ba>
		}
		if (!strncmp(rx_buff[queue_front - 1], "led_flower_on", strlen("led_flower_on")))
 800333a:	4b5e      	ldr	r3, [pc, #376]	; (80034b4 <pc_command_processing+0x2bc>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	1e5a      	subs	r2, r3, #1
 8003340:	4613      	mov	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	4a5d      	ldr	r2, [pc, #372]	; (80034c0 <pc_command_processing+0x2c8>)
 800334a:	4413      	add	r3, r2
 800334c:	220d      	movs	r2, #13
 800334e:	4963      	ldr	r1, [pc, #396]	; (80034dc <pc_command_processing+0x2e4>)
 8003350:	4618      	mov	r0, r3
 8003352:	f006 f9cb 	bl	80096ec <strncmp>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d102      	bne.n	8003362 <pc_command_processing+0x16a>
		{
			led_flower_on();
 800335c:	f7fe fb46 	bl	80019ec <led_flower_on>
			return;
 8003360:	e0a7      	b.n	80034b2 <pc_command_processing+0x2ba>
		}
		if (!strncmp(rx_buff[queue_front - 1], "led_flower_off", strlen("led_flower_off")))
 8003362:	4b54      	ldr	r3, [pc, #336]	; (80034b4 <pc_command_processing+0x2bc>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	1e5a      	subs	r2, r3, #1
 8003368:	4613      	mov	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	4a53      	ldr	r2, [pc, #332]	; (80034c0 <pc_command_processing+0x2c8>)
 8003372:	4413      	add	r3, r2
 8003374:	220e      	movs	r2, #14
 8003376:	495a      	ldr	r1, [pc, #360]	; (80034e0 <pc_command_processing+0x2e8>)
 8003378:	4618      	mov	r0, r3
 800337a:	f006 f9b7 	bl	80096ec <strncmp>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d102      	bne.n	800338a <pc_command_processing+0x192>
		{
			led_flower_off();
 8003384:	f7fe fb72 	bl	8001a6c <led_flower_off>
			return;
 8003388:	e093      	b.n	80034b2 <pc_command_processing+0x2ba>
		}


		if (!strncmp(rx_buff[queue_front - 1], "dht11time", strlen("dht11time")))
 800338a:	4b4a      	ldr	r3, [pc, #296]	; (80034b4 <pc_command_processing+0x2bc>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	1e5a      	subs	r2, r3, #1
 8003390:	4613      	mov	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4413      	add	r3, r2
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	4a49      	ldr	r2, [pc, #292]	; (80034c0 <pc_command_processing+0x2c8>)
 800339a:	4413      	add	r3, r2
 800339c:	2209      	movs	r2, #9
 800339e:	4951      	ldr	r1, [pc, #324]	; (80034e4 <pc_command_processing+0x2ec>)
 80033a0:	4618      	mov	r0, r3
 80033a2:	f006 f9a3 	bl	80096ec <strncmp>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d110      	bne.n	80033ce <pc_command_processing+0x1d6>
		{
			dht11time = atoi(rx_buff[queue_front - 1] + 9);
 80033ac:	4b41      	ldr	r3, [pc, #260]	; (80034b4 <pc_command_processing+0x2bc>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	1e5a      	subs	r2, r3, #1
 80033b2:	4613      	mov	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	4a41      	ldr	r2, [pc, #260]	; (80034c0 <pc_command_processing+0x2c8>)
 80033bc:	4413      	add	r3, r2
 80033be:	3309      	adds	r3, #9
 80033c0:	4618      	mov	r0, r3
 80033c2:	f006 f8af 	bl	8009524 <atoi>
 80033c6:	4603      	mov	r3, r0
 80033c8:	4a47      	ldr	r2, [pc, #284]	; (80034e8 <pc_command_processing+0x2f0>)
 80033ca:	6013      	str	r3, [r2, #0]
			return;
 80033cc:	e071      	b.n	80034b2 <pc_command_processing+0x2ba>
		}

		if (!strncmp(rx_buff[queue_front - 1], "dht11_on", strlen("dht11_on")))
 80033ce:	4b39      	ldr	r3, [pc, #228]	; (80034b4 <pc_command_processing+0x2bc>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	1e5a      	subs	r2, r3, #1
 80033d4:	4613      	mov	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4413      	add	r3, r2
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	4a38      	ldr	r2, [pc, #224]	; (80034c0 <pc_command_processing+0x2c8>)
 80033de:	4413      	add	r3, r2
 80033e0:	2208      	movs	r2, #8
 80033e2:	4942      	ldr	r1, [pc, #264]	; (80034ec <pc_command_processing+0x2f4>)
 80033e4:	4618      	mov	r0, r3
 80033e6:	f006 f981 	bl	80096ec <strncmp>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d103      	bne.n	80033f8 <pc_command_processing+0x200>
		{
			DHT11_print_flag = 1;
 80033f0:	4b3f      	ldr	r3, [pc, #252]	; (80034f0 <pc_command_processing+0x2f8>)
 80033f2:	2201      	movs	r2, #1
 80033f4:	601a      	str	r2, [r3, #0]
			return;
 80033f6:	e05c      	b.n	80034b2 <pc_command_processing+0x2ba>
		}
		if (!strncmp(rx_buff[queue_front - 1], "dht11_off", strlen("dht11_off")))
 80033f8:	4b2e      	ldr	r3, [pc, #184]	; (80034b4 <pc_command_processing+0x2bc>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	1e5a      	subs	r2, r3, #1
 80033fe:	4613      	mov	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4413      	add	r3, r2
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	4a2e      	ldr	r2, [pc, #184]	; (80034c0 <pc_command_processing+0x2c8>)
 8003408:	4413      	add	r3, r2
 800340a:	2209      	movs	r2, #9
 800340c:	4939      	ldr	r1, [pc, #228]	; (80034f4 <pc_command_processing+0x2fc>)
 800340e:	4618      	mov	r0, r3
 8003410:	f006 f96c 	bl	80096ec <strncmp>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d103      	bne.n	8003422 <pc_command_processing+0x22a>
		{
			DHT11_print_flag = 0;
 800341a:	4b35      	ldr	r3, [pc, #212]	; (80034f0 <pc_command_processing+0x2f8>)
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]
			return;
 8003420:	e047      	b.n	80034b2 <pc_command_processing+0x2ba>
		}
		if (!strncmp(rx_buff[queue_front - 1], "ultra_on", strlen("ultra_on")))
 8003422:	4b24      	ldr	r3, [pc, #144]	; (80034b4 <pc_command_processing+0x2bc>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	1e5a      	subs	r2, r3, #1
 8003428:	4613      	mov	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	4a23      	ldr	r2, [pc, #140]	; (80034c0 <pc_command_processing+0x2c8>)
 8003432:	4413      	add	r3, r2
 8003434:	2208      	movs	r2, #8
 8003436:	4930      	ldr	r1, [pc, #192]	; (80034f8 <pc_command_processing+0x300>)
 8003438:	4618      	mov	r0, r3
 800343a:	f006 f957 	bl	80096ec <strncmp>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d103      	bne.n	800344c <pc_command_processing+0x254>
		{
			ultrasonic_print_flag = 1;
 8003444:	4b2d      	ldr	r3, [pc, #180]	; (80034fc <pc_command_processing+0x304>)
 8003446:	2201      	movs	r2, #1
 8003448:	601a      	str	r2, [r3, #0]
			return;
 800344a:	e032      	b.n	80034b2 <pc_command_processing+0x2ba>
		}
		if (!strncmp(rx_buff[queue_front - 1], "ultra_off", strlen("ultra_off")))
 800344c:	4b19      	ldr	r3, [pc, #100]	; (80034b4 <pc_command_processing+0x2bc>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	1e5a      	subs	r2, r3, #1
 8003452:	4613      	mov	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	4a19      	ldr	r2, [pc, #100]	; (80034c0 <pc_command_processing+0x2c8>)
 800345c:	4413      	add	r3, r2
 800345e:	2209      	movs	r2, #9
 8003460:	4927      	ldr	r1, [pc, #156]	; (8003500 <pc_command_processing+0x308>)
 8003462:	4618      	mov	r0, r3
 8003464:	f006 f942 	bl	80096ec <strncmp>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d103      	bne.n	8003476 <pc_command_processing+0x27e>
		{
			ultrasonic_print_flag = 0;
 800346e:	4b23      	ldr	r3, [pc, #140]	; (80034fc <pc_command_processing+0x304>)
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]
			return;
 8003474:	e01d      	b.n	80034b2 <pc_command_processing+0x2ba>
		}


		if (!strncmp(rx_buff[queue_front - 1], "setrtc", strlen("setrtc")))
 8003476:	4b0f      	ldr	r3, [pc, #60]	; (80034b4 <pc_command_processing+0x2bc>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	1e5a      	subs	r2, r3, #1
 800347c:	4613      	mov	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	4a0e      	ldr	r2, [pc, #56]	; (80034c0 <pc_command_processing+0x2c8>)
 8003486:	4413      	add	r3, r2
 8003488:	2206      	movs	r2, #6
 800348a:	491e      	ldr	r1, [pc, #120]	; (8003504 <pc_command_processing+0x30c>)
 800348c:	4618      	mov	r0, r3
 800348e:	f006 f92d 	bl	80096ec <strncmp>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10c      	bne.n	80034b2 <pc_command_processing+0x2ba>
		{
			set_rtc(rx_buff[queue_front - 1]);
 8003498:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <pc_command_processing+0x2bc>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	1e5a      	subs	r2, r3, #1
 800349e:	4613      	mov	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4413      	add	r3, r2
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	4a06      	ldr	r2, [pc, #24]	; (80034c0 <pc_command_processing+0x2c8>)
 80034a8:	4413      	add	r3, r2
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fe f804 	bl	80014b8 <set_rtc>
			return;
 80034b0:	bf00      	nop
		}

	}
}
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	20000e38 	.word	0x20000e38
 80034b8:	20000e3c 	.word	0x20000e3c
 80034bc:	66666667 	.word	0x66666667
 80034c0:	20000b18 	.word	0x20000b18
 80034c4:	0800ab94 	.word	0x0800ab94
 80034c8:	0800aba0 	.word	0x0800aba0
 80034cc:	0800abac 	.word	0x0800abac
 80034d0:	0800abb8 	.word	0x0800abb8
 80034d4:	0800abc4 	.word	0x0800abc4
 80034d8:	0800abd4 	.word	0x0800abd4
 80034dc:	0800abe4 	.word	0x0800abe4
 80034e0:	0800abf4 	.word	0x0800abf4
 80034e4:	0800ac04 	.word	0x0800ac04
 80034e8:	20000004 	.word	0x20000004
 80034ec:	0800ac10 	.word	0x0800ac10
 80034f0:	20000000 	.word	0x20000000
 80034f4:	0800ac1c 	.word	0x0800ac1c
 80034f8:	0800ac28 	.word	0x0800ac28
 80034fc:	20000044 	.word	0x20000044
 8003500:	0800ac34 	.word	0x0800ac34
 8003504:	0800ac40 	.word	0x0800ac40

08003508 <bt_command_processing>:

void bt_command_processing(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
	if (bt_newline_detect_flag) // 원형쿠로 구성한게 아니기 때무네, 뉴라인 플래그가 서 있을 때만 완전한 문장이 들어왔다고 판단하고 함수가 진해오디어야 하낟.
 800350c:	4b31      	ldr	r3, [pc, #196]	; (80035d4 <bt_command_processing+0xcc>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d05d      	beq.n	80035d0 <bt_command_processing+0xc8>
	{
		bt_newline_detect_flag = 0;
 8003514:	4b2f      	ldr	r3, [pc, #188]	; (80035d4 <bt_command_processing+0xcc>)
 8003516:	2200      	movs	r2, #0
 8003518:	601a      	str	r2, [r3, #0]
		printf("%s\n", bt_rx_buff);
 800351a:	482f      	ldr	r0, [pc, #188]	; (80035d8 <bt_command_processing+0xd0>)
 800351c:	f006 f8be 	bl	800969c <puts>
		if (!strncmp(bt_rx_buff, "ledallon", strlen("ledallon"))) // 느낌표가 들어갔다!! strcmp는 같으면 0을 리턴하기 때문에 if문에 진입하려먼 !not을 통해서 1(true)로 뒤집어 줘야 한다.
 8003520:	2208      	movs	r2, #8
 8003522:	492e      	ldr	r1, [pc, #184]	; (80035dc <bt_command_processing+0xd4>)
 8003524:	482c      	ldr	r0, [pc, #176]	; (80035d8 <bt_command_processing+0xd0>)
 8003526:	f006 f8e1 	bl	80096ec <strncmp>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <bt_command_processing+0x2e>
		{
			led_all_on();
 8003530:	f7fe f998 	bl	8001864 <led_all_on>
			return;
 8003534:	e04c      	b.n	80035d0 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "ledalloff", strlen("ledalloff")))
 8003536:	2209      	movs	r2, #9
 8003538:	4929      	ldr	r1, [pc, #164]	; (80035e0 <bt_command_processing+0xd8>)
 800353a:	4827      	ldr	r0, [pc, #156]	; (80035d8 <bt_command_processing+0xd0>)
 800353c:	f006 f8d6 	bl	80096ec <strncmp>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d102      	bne.n	800354c <bt_command_processing+0x44>
		{
			led_all_off();
 8003546:	f7fe f999 	bl	800187c <led_all_off>
			return;
 800354a:	e041      	b.n	80035d0 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_on_up", strlen("led_on_up")))
 800354c:	2209      	movs	r2, #9
 800354e:	4925      	ldr	r1, [pc, #148]	; (80035e4 <bt_command_processing+0xdc>)
 8003550:	4821      	ldr	r0, [pc, #132]	; (80035d8 <bt_command_processing+0xd0>)
 8003552:	f006 f8cb 	bl	80096ec <strncmp>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d102      	bne.n	8003562 <bt_command_processing+0x5a>
		{
			led_on_up();
 800355c:	f7fe f99a 	bl	8001894 <led_on_up>
			return;
 8003560:	e036      	b.n	80035d0 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_on_down", strlen("led_on_down")))
 8003562:	220b      	movs	r2, #11
 8003564:	4920      	ldr	r1, [pc, #128]	; (80035e8 <bt_command_processing+0xe0>)
 8003566:	481c      	ldr	r0, [pc, #112]	; (80035d8 <bt_command_processing+0xd0>)
 8003568:	f006 f8c0 	bl	80096ec <strncmp>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d102      	bne.n	8003578 <bt_command_processing+0x70>
		{
			led_on_down();
 8003572:	f7fe f9bb 	bl	80018ec <led_on_down>
			return;
 8003576:	e02b      	b.n	80035d0 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_keepon_up", strlen("led_keepon_up")))
 8003578:	220d      	movs	r2, #13
 800357a:	491c      	ldr	r1, [pc, #112]	; (80035ec <bt_command_processing+0xe4>)
 800357c:	4816      	ldr	r0, [pc, #88]	; (80035d8 <bt_command_processing+0xd0>)
 800357e:	f006 f8b5 	bl	80096ec <strncmp>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d102      	bne.n	800358e <bt_command_processing+0x86>
		{
			led_keepon_up();
 8003588:	f7fe f9dc 	bl	8001944 <led_keepon_up>
			return;
 800358c:	e020      	b.n	80035d0 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_keepon_down", strlen("led_keepon_down")))
 800358e:	220f      	movs	r2, #15
 8003590:	4917      	ldr	r1, [pc, #92]	; (80035f0 <bt_command_processing+0xe8>)
 8003592:	4811      	ldr	r0, [pc, #68]	; (80035d8 <bt_command_processing+0xd0>)
 8003594:	f006 f8aa 	bl	80096ec <strncmp>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d102      	bne.n	80035a4 <bt_command_processing+0x9c>
		{
			led_keepon_down();
 800359e:	f7fe f9fb 	bl	8001998 <led_keepon_down>
			return;
 80035a2:	e015      	b.n	80035d0 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_flower_on", strlen("led_flower_on")))
 80035a4:	220d      	movs	r2, #13
 80035a6:	4913      	ldr	r1, [pc, #76]	; (80035f4 <bt_command_processing+0xec>)
 80035a8:	480b      	ldr	r0, [pc, #44]	; (80035d8 <bt_command_processing+0xd0>)
 80035aa:	f006 f89f 	bl	80096ec <strncmp>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d102      	bne.n	80035ba <bt_command_processing+0xb2>
		{
			led_flower_on();
 80035b4:	f7fe fa1a 	bl	80019ec <led_flower_on>
			return;
 80035b8:	e00a      	b.n	80035d0 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_flower_off", strlen("led_flower_off")))
 80035ba:	220e      	movs	r2, #14
 80035bc:	490e      	ldr	r1, [pc, #56]	; (80035f8 <bt_command_processing+0xf0>)
 80035be:	4806      	ldr	r0, [pc, #24]	; (80035d8 <bt_command_processing+0xd0>)
 80035c0:	f006 f894 	bl	80096ec <strncmp>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d102      	bne.n	80035d0 <bt_command_processing+0xc8>
		{
			led_flower_off();
 80035ca:	f7fe fa4f 	bl	8001a6c <led_flower_off>
			return;
 80035ce:	bf00      	nop
		}
	}
}
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20000e70 	.word	0x20000e70
 80035d8:	20000e44 	.word	0x20000e44
 80035dc:	0800ac48 	.word	0x0800ac48
 80035e0:	0800ac54 	.word	0x0800ac54
 80035e4:	0800abac 	.word	0x0800abac
 80035e8:	0800abb8 	.word	0x0800abb8
 80035ec:	0800abc4 	.word	0x0800abc4
 80035f0:	0800abd4 	.word	0x0800abd4
 80035f4:	0800abe4 	.word	0x0800abe4
 80035f8:	0800abf4 	.word	0x0800abf4

080035fc <HAL_TIM_IC_CaptureCallback>:
volatile int ultrasonic_print_flag = 1;

// 1. Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c에 가서 가져온 call-back function
// 2. 초음파 센서의 ECHO핀의 상승edge와 하강edge 발생 시 이 함수로 들어온다!!!
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a13      	ldr	r2, [pc, #76]	; (8003658 <HAL_TIM_IC_CaptureCallback+0x5c>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d11f      	bne.n	800364e <HAL_TIM_IC_CaptureCallback+0x52>
	{
		if (is_first_capture == 0) // 상승엣지 때문에 콜백 펑션에 들어온 경우
 800360e:	4b13      	ldr	r3, [pc, #76]	; (800365c <HAL_TIM_IC_CaptureCallback+0x60>)
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d107      	bne.n	8003628 <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			__HAL_TIM_SET_COUNTER(htim, 0); // 펄스를 셀 카운터를 초기화 하고 세기 시작하는 것이다.
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2200      	movs	r2, #0
 800361e:	625a      	str	r2, [r3, #36]	; 0x24
			is_first_capture = 1; // 다음에 콜백 펑선이 불릴 때는 당연히 하강 엣지일 때 일 것이므로 플래그변수를 1로 셋팅해준다.
 8003620:	4b0e      	ldr	r3, [pc, #56]	; (800365c <HAL_TIM_IC_CaptureCallback+0x60>)
 8003622:	2201      	movs	r2, #1
 8003624:	701a      	strb	r2, [r3, #0]
			is_first_capture = 0; // 이제 다음 펄스를 또 카운트 하기 위해서 플래그 변수를 초기화 해준다.
			distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // 상승엣지부터 하강엣지까지 펄스가 몇번 카운트 되었는지 그 값을 읽어온다.
			ic_cpt_finish_flag = 1; // 초음파 측정완료
		}
	}
}
 8003626:	e012      	b.n	800364e <HAL_TIM_IC_CaptureCallback+0x52>
		else if (is_first_capture == 1) // 하강 엣지 때문에 콜백 펑션에 들어온 경우
 8003628:	4b0c      	ldr	r3, [pc, #48]	; (800365c <HAL_TIM_IC_CaptureCallback+0x60>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b01      	cmp	r3, #1
 8003630:	d10d      	bne.n	800364e <HAL_TIM_IC_CaptureCallback+0x52>
			is_first_capture = 0; // 이제 다음 펄스를 또 카운트 하기 위해서 플래그 변수를 초기화 해준다.
 8003632:	4b0a      	ldr	r3, [pc, #40]	; (800365c <HAL_TIM_IC_CaptureCallback+0x60>)
 8003634:	2200      	movs	r2, #0
 8003636:	701a      	strb	r2, [r3, #0]
			distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // 상승엣지부터 하강엣지까지 펄스가 몇번 카운트 되었는지 그 값을 읽어온다.
 8003638:	2100      	movs	r1, #0
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f003 fecc 	bl	80073d8 <HAL_TIM_ReadCapturedValue>
 8003640:	4603      	mov	r3, r0
 8003642:	461a      	mov	r2, r3
 8003644:	4b06      	ldr	r3, [pc, #24]	; (8003660 <HAL_TIM_IC_CaptureCallback+0x64>)
 8003646:	601a      	str	r2, [r3, #0]
			ic_cpt_finish_flag = 1; // 초음파 측정완료
 8003648:	4b06      	ldr	r3, [pc, #24]	; (8003664 <HAL_TIM_IC_CaptureCallback+0x68>)
 800364a:	2201      	movs	r2, #1
 800364c:	601a      	str	r2, [r3, #0]
}
 800364e:	bf00      	nop
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	40000400 	.word	0x40000400
 800365c:	20000e7c 	.word	0x20000e7c
 8003660:	20000e74 	.word	0x20000e74
 8003664:	20000e78 	.word	0x20000e78

08003668 <ultrasonic_processing>:

void ultrasonic_processing(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
	int distance_lv; // 전역변수 값을 바로 쓰지 않고 지역변수에 복사하여 사용하는 것이 안전하기 때문에 별도의 지역변수를 선언함
	char lcd_buff[20];

	if (TIM10_10ms_ultrasonic >= 100) // 10ms가 100개면 1초
 800366e:	4b28      	ldr	r3, [pc, #160]	; (8003710 <ultrasonic_processing+0xa8>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b63      	cmp	r3, #99	; 0x63
 8003674:	dd42      	ble.n	80036fc <ultrasonic_processing+0x94>
	{
		TIM10_10ms_ultrasonic = 0;
 8003676:	4b26      	ldr	r3, [pc, #152]	; (8003710 <ultrasonic_processing+0xa8>)
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]
		make_trigger();
 800367c:	f000 f856 	bl	800372c <make_trigger>
		if (ic_cpt_finish_flag) // 초음파 측정이 완료 되었다면..
 8003680:	4b24      	ldr	r3, [pc, #144]	; (8003714 <ultrasonic_processing+0xac>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d039      	beq.n	80036fc <ultrasonic_processing+0x94>
		{
			ic_cpt_finish_flag = 0;
 8003688:	4b22      	ldr	r3, [pc, #136]	; (8003714 <ultrasonic_processing+0xac>)
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]
			distance_lv = distance; // 전역변수 값을 바로 쓰지 않고 지역변수에 복사하여 사용하는 것임
 800368e:	4b22      	ldr	r3, [pc, #136]	; (8003718 <ultrasonic_processing+0xb0>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	617b      	str	r3, [r7, #20]
			distance_lv = distance_lv * 0.034 / 2; // 1us마다 0.034cm를 이동한다. 그리고 초음파 센서가 리턴한 distance값은 왕복 거리이기 때문에 /2를 해서 편도 거리를 얻어낸다.
 8003694:	6978      	ldr	r0, [r7, #20]
 8003696:	f7fc ff4d 	bl	8000534 <__aeabi_i2d>
 800369a:	a31b      	add	r3, pc, #108	; (adr r3, 8003708 <ultrasonic_processing+0xa0>)
 800369c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a0:	f7fc ffb2 	bl	8000608 <__aeabi_dmul>
 80036a4:	4602      	mov	r2, r0
 80036a6:	460b      	mov	r3, r1
 80036a8:	4610      	mov	r0, r2
 80036aa:	4619      	mov	r1, r3
 80036ac:	f04f 0200 	mov.w	r2, #0
 80036b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80036b4:	f7fd f8d2 	bl	800085c <__aeabi_ddiv>
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	4610      	mov	r0, r2
 80036be:	4619      	mov	r1, r3
 80036c0:	f7fd f9b4 	bl	8000a2c <__aeabi_d2iz>
 80036c4:	4603      	mov	r3, r0
 80036c6:	617b      	str	r3, [r7, #20]

			if (ultrasonic_print_flag)
 80036c8:	4b14      	ldr	r3, [pc, #80]	; (800371c <ultrasonic_processing+0xb4>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d015      	beq.n	80036fc <ultrasonic_processing+0x94>
			{
				printf("distance_lv: %dcm\n", distance_lv);
 80036d0:	6979      	ldr	r1, [r7, #20]
 80036d2:	4813      	ldr	r0, [pc, #76]	; (8003720 <ultrasonic_processing+0xb8>)
 80036d4:	f005 ff5c 	bl	8009590 <iprintf>
				sprintf(lcd_buff, "distance: %dcm", distance_lv);
 80036d8:	463b      	mov	r3, r7
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	4911      	ldr	r1, [pc, #68]	; (8003724 <ultrasonic_processing+0xbc>)
 80036de:	4618      	mov	r0, r3
 80036e0:	f005 ffe4 	bl	80096ac <siprintf>

				if (lcd_display_mode_flag == 2)
 80036e4:	4b10      	ldr	r3, [pc, #64]	; (8003728 <ultrasonic_processing+0xc0>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d107      	bne.n	80036fc <ultrasonic_processing+0x94>
				{
					move_cursor(1,0);
 80036ec:	2100      	movs	r1, #0
 80036ee:	2001      	movs	r0, #1
 80036f0:	f7fd fe1e 	bl	8001330 <move_cursor>
					lcd_string(lcd_buff);
 80036f4:	463b      	mov	r3, r7
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fd fe05 	bl	8001306 <lcd_string>
				}
			}

		}
	}
}
 80036fc:	bf00      	nop
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	f3af 8000 	nop.w
 8003708:	b020c49c 	.word	0xb020c49c
 800370c:	3fa16872 	.word	0x3fa16872
 8003710:	20000b08 	.word	0x20000b08
 8003714:	20000e78 	.word	0x20000e78
 8003718:	20000e74 	.word	0x20000e74
 800371c:	20000044 	.word	0x20000044
 8003720:	0800ac60 	.word	0x0800ac60
 8003724:	0800ac74 	.word	0x0800ac74
 8003728:	200000d0 	.word	0x200000d0

0800372c <make_trigger>:

void make_trigger(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, 0);
 8003730:	2200      	movs	r2, #0
 8003732:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003736:	480b      	ldr	r0, [pc, #44]	; (8003764 <make_trigger+0x38>)
 8003738:	f000 ff66 	bl	8004608 <HAL_GPIO_WritePin>
	delay_us(2);
 800373c:	2002      	movs	r0, #2
 800373e:	f7fe fa09 	bl	8001b54 <delay_us>
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, 1);
 8003742:	2201      	movs	r2, #1
 8003744:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003748:	4806      	ldr	r0, [pc, #24]	; (8003764 <make_trigger+0x38>)
 800374a:	f000 ff5d 	bl	8004608 <HAL_GPIO_WritePin>
	delay_us(10);
 800374e:	200a      	movs	r0, #10
 8003750:	f7fe fa00 	bl	8001b54 <delay_us>
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, 0);
 8003754:	2200      	movs	r2, #0
 8003756:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800375a:	4802      	ldr	r0, [pc, #8]	; (8003764 <make_trigger+0x38>)
 800375c:	f000 ff54 	bl	8004608 <HAL_GPIO_WritePin>
	// 위 5줄의 코드 라인을 통해 초음파 센서에서 요구하는 트리거 신호의 전기적 파형을 MCU가 날릴 수 있도록 구현했다.

}
 8003760:	bf00      	nop
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40021400 	.word	0x40021400

08003768 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003768:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037a0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800376c:	480d      	ldr	r0, [pc, #52]	; (80037a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800376e:	490e      	ldr	r1, [pc, #56]	; (80037a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003770:	4a0e      	ldr	r2, [pc, #56]	; (80037ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003772:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003774:	e002      	b.n	800377c <LoopCopyDataInit>

08003776 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003776:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003778:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800377a:	3304      	adds	r3, #4

0800377c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800377c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800377e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003780:	d3f9      	bcc.n	8003776 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003782:	4a0b      	ldr	r2, [pc, #44]	; (80037b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003784:	4c0b      	ldr	r4, [pc, #44]	; (80037b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003786:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003788:	e001      	b.n	800378e <LoopFillZerobss>

0800378a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800378a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800378c:	3204      	adds	r2, #4

0800378e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800378e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003790:	d3fb      	bcc.n	800378a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003792:	f7ff fc67 	bl	8003064 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003796:	f005 fecf 	bl	8009538 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800379a:	f7fe fa05 	bl	8001ba8 <main>
  bx  lr    
 800379e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80037a0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80037a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037a8:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 80037ac:	0800ae48 	.word	0x0800ae48
  ldr r2, =_sbss
 80037b0:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 80037b4:	20000e94 	.word	0x20000e94

080037b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037b8:	e7fe      	b.n	80037b8 <ADC_IRQHandler>
	...

080037bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037c0:	4b0e      	ldr	r3, [pc, #56]	; (80037fc <HAL_Init+0x40>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a0d      	ldr	r2, [pc, #52]	; (80037fc <HAL_Init+0x40>)
 80037c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037cc:	4b0b      	ldr	r3, [pc, #44]	; (80037fc <HAL_Init+0x40>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a0a      	ldr	r2, [pc, #40]	; (80037fc <HAL_Init+0x40>)
 80037d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037d8:	4b08      	ldr	r3, [pc, #32]	; (80037fc <HAL_Init+0x40>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a07      	ldr	r2, [pc, #28]	; (80037fc <HAL_Init+0x40>)
 80037de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037e4:	2003      	movs	r0, #3
 80037e6:	f000 f94f 	bl	8003a88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037ea:	2000      	movs	r0, #0
 80037ec:	f000 f808 	bl	8003800 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037f0:	f7fe ff52 	bl	8002698 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	40023c00 	.word	0x40023c00

08003800 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003808:	4b12      	ldr	r3, [pc, #72]	; (8003854 <HAL_InitTick+0x54>)
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	4b12      	ldr	r3, [pc, #72]	; (8003858 <HAL_InitTick+0x58>)
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	4619      	mov	r1, r3
 8003812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003816:	fbb3 f3f1 	udiv	r3, r3, r1
 800381a:	fbb2 f3f3 	udiv	r3, r2, r3
 800381e:	4618      	mov	r0, r3
 8003820:	f000 f967 	bl	8003af2 <HAL_SYSTICK_Config>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e00e      	b.n	800384c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b0f      	cmp	r3, #15
 8003832:	d80a      	bhi.n	800384a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003834:	2200      	movs	r2, #0
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	f04f 30ff 	mov.w	r0, #4294967295
 800383c:	f000 f92f 	bl	8003a9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003840:	4a06      	ldr	r2, [pc, #24]	; (800385c <HAL_InitTick+0x5c>)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003846:	2300      	movs	r3, #0
 8003848:	e000      	b.n	800384c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
}
 800384c:	4618      	mov	r0, r3
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	20000040 	.word	0x20000040
 8003858:	2000004c 	.word	0x2000004c
 800385c:	20000048 	.word	0x20000048

08003860 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003864:	4b06      	ldr	r3, [pc, #24]	; (8003880 <HAL_IncTick+0x20>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	461a      	mov	r2, r3
 800386a:	4b06      	ldr	r3, [pc, #24]	; (8003884 <HAL_IncTick+0x24>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4413      	add	r3, r2
 8003870:	4a04      	ldr	r2, [pc, #16]	; (8003884 <HAL_IncTick+0x24>)
 8003872:	6013      	str	r3, [r2, #0]
}
 8003874:	bf00      	nop
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	2000004c 	.word	0x2000004c
 8003884:	20000e80 	.word	0x20000e80

08003888 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  return uwTick;
 800388c:	4b03      	ldr	r3, [pc, #12]	; (800389c <HAL_GetTick+0x14>)
 800388e:	681b      	ldr	r3, [r3, #0]
}
 8003890:	4618      	mov	r0, r3
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	20000e80 	.word	0x20000e80

080038a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038a8:	f7ff ffee 	bl	8003888 <HAL_GetTick>
 80038ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b8:	d005      	beq.n	80038c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038ba:	4b0a      	ldr	r3, [pc, #40]	; (80038e4 <HAL_Delay+0x44>)
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	461a      	mov	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4413      	add	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038c6:	bf00      	nop
 80038c8:	f7ff ffde 	bl	8003888 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d8f7      	bhi.n	80038c8 <HAL_Delay+0x28>
  {
  }
}
 80038d8:	bf00      	nop
 80038da:	bf00      	nop
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	2000004c 	.word	0x2000004c

080038e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f003 0307 	and.w	r3, r3, #7
 80038f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038f8:	4b0c      	ldr	r3, [pc, #48]	; (800392c <__NVIC_SetPriorityGrouping+0x44>)
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003904:	4013      	ands	r3, r2
 8003906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003910:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800391a:	4a04      	ldr	r2, [pc, #16]	; (800392c <__NVIC_SetPriorityGrouping+0x44>)
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	60d3      	str	r3, [r2, #12]
}
 8003920:	bf00      	nop
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	e000ed00 	.word	0xe000ed00

08003930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003934:	4b04      	ldr	r3, [pc, #16]	; (8003948 <__NVIC_GetPriorityGrouping+0x18>)
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	0a1b      	lsrs	r3, r3, #8
 800393a:	f003 0307 	and.w	r3, r3, #7
}
 800393e:	4618      	mov	r0, r3
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr
 8003948:	e000ed00 	.word	0xe000ed00

0800394c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	4603      	mov	r3, r0
 8003954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800395a:	2b00      	cmp	r3, #0
 800395c:	db0b      	blt.n	8003976 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	f003 021f 	and.w	r2, r3, #31
 8003964:	4907      	ldr	r1, [pc, #28]	; (8003984 <__NVIC_EnableIRQ+0x38>)
 8003966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396a:	095b      	lsrs	r3, r3, #5
 800396c:	2001      	movs	r0, #1
 800396e:	fa00 f202 	lsl.w	r2, r0, r2
 8003972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	e000e100 	.word	0xe000e100

08003988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	6039      	str	r1, [r7, #0]
 8003992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003998:	2b00      	cmp	r3, #0
 800399a:	db0a      	blt.n	80039b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	b2da      	uxtb	r2, r3
 80039a0:	490c      	ldr	r1, [pc, #48]	; (80039d4 <__NVIC_SetPriority+0x4c>)
 80039a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a6:	0112      	lsls	r2, r2, #4
 80039a8:	b2d2      	uxtb	r2, r2
 80039aa:	440b      	add	r3, r1
 80039ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039b0:	e00a      	b.n	80039c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	4908      	ldr	r1, [pc, #32]	; (80039d8 <__NVIC_SetPriority+0x50>)
 80039b8:	79fb      	ldrb	r3, [r7, #7]
 80039ba:	f003 030f 	and.w	r3, r3, #15
 80039be:	3b04      	subs	r3, #4
 80039c0:	0112      	lsls	r2, r2, #4
 80039c2:	b2d2      	uxtb	r2, r2
 80039c4:	440b      	add	r3, r1
 80039c6:	761a      	strb	r2, [r3, #24]
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	e000e100 	.word	0xe000e100
 80039d8:	e000ed00 	.word	0xe000ed00

080039dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039dc:	b480      	push	{r7}
 80039de:	b089      	sub	sp, #36	; 0x24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	f1c3 0307 	rsb	r3, r3, #7
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	bf28      	it	cs
 80039fa:	2304      	movcs	r3, #4
 80039fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	3304      	adds	r3, #4
 8003a02:	2b06      	cmp	r3, #6
 8003a04:	d902      	bls.n	8003a0c <NVIC_EncodePriority+0x30>
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	3b03      	subs	r3, #3
 8003a0a:	e000      	b.n	8003a0e <NVIC_EncodePriority+0x32>
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a10:	f04f 32ff 	mov.w	r2, #4294967295
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1a:	43da      	mvns	r2, r3
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	401a      	ands	r2, r3
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a24:	f04f 31ff 	mov.w	r1, #4294967295
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a2e:	43d9      	mvns	r1, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a34:	4313      	orrs	r3, r2
         );
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3724      	adds	r7, #36	; 0x24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
	...

08003a44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a54:	d301      	bcc.n	8003a5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a56:	2301      	movs	r3, #1
 8003a58:	e00f      	b.n	8003a7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a5a:	4a0a      	ldr	r2, [pc, #40]	; (8003a84 <SysTick_Config+0x40>)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a62:	210f      	movs	r1, #15
 8003a64:	f04f 30ff 	mov.w	r0, #4294967295
 8003a68:	f7ff ff8e 	bl	8003988 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a6c:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <SysTick_Config+0x40>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a72:	4b04      	ldr	r3, [pc, #16]	; (8003a84 <SysTick_Config+0x40>)
 8003a74:	2207      	movs	r2, #7
 8003a76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	e000e010 	.word	0xe000e010

08003a88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f7ff ff29 	bl	80038e8 <__NVIC_SetPriorityGrouping>
}
 8003a96:	bf00      	nop
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b086      	sub	sp, #24
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	60b9      	str	r1, [r7, #8]
 8003aa8:	607a      	str	r2, [r7, #4]
 8003aaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ab0:	f7ff ff3e 	bl	8003930 <__NVIC_GetPriorityGrouping>
 8003ab4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	68b9      	ldr	r1, [r7, #8]
 8003aba:	6978      	ldr	r0, [r7, #20]
 8003abc:	f7ff ff8e 	bl	80039dc <NVIC_EncodePriority>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7ff ff5d 	bl	8003988 <__NVIC_SetPriority>
}
 8003ace:	bf00      	nop
 8003ad0:	3718      	adds	r7, #24
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b082      	sub	sp, #8
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	4603      	mov	r3, r0
 8003ade:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7ff ff31 	bl	800394c <__NVIC_EnableIRQ>
}
 8003aea:	bf00      	nop
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b082      	sub	sp, #8
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7ff ffa2 	bl	8003a44 <SysTick_Config>
 8003b00:	4603      	mov	r3, r0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b084      	sub	sp, #16
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b16:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b18:	f7ff feb6 	bl	8003888 <HAL_GetTick>
 8003b1c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d008      	beq.n	8003b3c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2280      	movs	r2, #128	; 0x80
 8003b2e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e052      	b.n	8003be2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0216 	bic.w	r2, r2, #22
 8003b4a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695a      	ldr	r2, [r3, #20]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b5a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d103      	bne.n	8003b6c <HAL_DMA_Abort+0x62>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d007      	beq.n	8003b7c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0208 	bic.w	r2, r2, #8
 8003b7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 0201 	bic.w	r2, r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b8c:	e013      	b.n	8003bb6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b8e:	f7ff fe7b 	bl	8003888 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b05      	cmp	r3, #5
 8003b9a:	d90c      	bls.n	8003bb6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2203      	movs	r2, #3
 8003ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e015      	b.n	8003be2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1e4      	bne.n	8003b8e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc8:	223f      	movs	r2, #63	; 0x3f
 8003bca:	409a      	lsls	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b083      	sub	sp, #12
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d004      	beq.n	8003c08 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2280      	movs	r2, #128	; 0x80
 8003c02:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e00c      	b.n	8003c22 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2205      	movs	r2, #5
 8003c0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 0201 	bic.w	r2, r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
	...

08003c30 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e06c      	b.n	8003d1c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d106      	bne.n	8003c5a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2223      	movs	r2, #35	; 0x23
 8003c50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f7fe fd47 	bl	80026e8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60bb      	str	r3, [r7, #8]
 8003c5e:	4b31      	ldr	r3, [pc, #196]	; (8003d24 <HAL_ETH_Init+0xf4>)
 8003c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c62:	4a30      	ldr	r2, [pc, #192]	; (8003d24 <HAL_ETH_Init+0xf4>)
 8003c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c68:	6453      	str	r3, [r2, #68]	; 0x44
 8003c6a:	4b2e      	ldr	r3, [pc, #184]	; (8003d24 <HAL_ETH_Init+0xf4>)
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c72:	60bb      	str	r3, [r7, #8]
 8003c74:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003c76:	4b2c      	ldr	r3, [pc, #176]	; (8003d28 <HAL_ETH_Init+0xf8>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	4a2b      	ldr	r2, [pc, #172]	; (8003d28 <HAL_ETH_Init+0xf8>)
 8003c7c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c80:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003c82:	4b29      	ldr	r3, [pc, #164]	; (8003d28 <HAL_ETH_Init+0xf8>)
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	4927      	ldr	r1, [pc, #156]	; (8003d28 <HAL_ETH_Init+0xf8>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003c90:	4b25      	ldr	r3, [pc, #148]	; (8003d28 <HAL_ETH_Init+0xf8>)
 8003c92:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6812      	ldr	r2, [r2, #0]
 8003ca2:	f043 0301 	orr.w	r3, r3, #1
 8003ca6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003caa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cac:	f7ff fdec 	bl	8003888 <HAL_GetTick>
 8003cb0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003cb2:	e011      	b.n	8003cd8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003cb4:	f7ff fde8 	bl	8003888 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003cc2:	d909      	bls.n	8003cd8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2204      	movs	r2, #4
 8003cc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	22e0      	movs	r2, #224	; 0xe0
 8003cd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e021      	b.n	8003d1c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1e4      	bne.n	8003cb4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f958 	bl	8003fa0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 f9ff 	bl	80040f4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 fa55 	bl	80041a6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	461a      	mov	r2, r3
 8003d02:	2100      	movs	r1, #0
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 f9bd 	bl	8004084 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2210      	movs	r2, #16
 8003d16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	40023800 	.word	0x40023800
 8003d28:	40013800 	.word	0x40013800

08003d2c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	4b51      	ldr	r3, [pc, #324]	; (8003e88 <ETH_SetMACConfig+0x15c>)
 8003d42:	4013      	ands	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	7c1b      	ldrb	r3, [r3, #16]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d102      	bne.n	8003d54 <ETH_SetMACConfig+0x28>
 8003d4e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003d52:	e000      	b.n	8003d56 <ETH_SetMACConfig+0x2a>
 8003d54:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	7c5b      	ldrb	r3, [r3, #17]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d102      	bne.n	8003d64 <ETH_SetMACConfig+0x38>
 8003d5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d62:	e000      	b.n	8003d66 <ETH_SetMACConfig+0x3a>
 8003d64:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003d66:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003d6c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	7fdb      	ldrb	r3, [r3, #31]
 8003d72:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003d74:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003d7a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	7f92      	ldrb	r2, [r2, #30]
 8003d80:	2a00      	cmp	r2, #0
 8003d82:	d102      	bne.n	8003d8a <ETH_SetMACConfig+0x5e>
 8003d84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d88:	e000      	b.n	8003d8c <ETH_SetMACConfig+0x60>
 8003d8a:	2200      	movs	r2, #0
                        macconf->Speed |
 8003d8c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	7f1b      	ldrb	r3, [r3, #28]
 8003d92:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003d94:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003d9a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	791b      	ldrb	r3, [r3, #4]
 8003da0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003da2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003daa:	2a00      	cmp	r2, #0
 8003dac:	d102      	bne.n	8003db4 <ETH_SetMACConfig+0x88>
 8003dae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003db2:	e000      	b.n	8003db6 <ETH_SetMACConfig+0x8a>
 8003db4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003db6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	7bdb      	ldrb	r3, [r3, #15]
 8003dbc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003dbe:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003dc4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003dcc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003de6:	2001      	movs	r0, #1
 8003de8:	f7ff fd5a 	bl	80038a0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003e02:	4013      	ands	r3, r2
 8003e04:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e0a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003e0c:	683a      	ldr	r2, [r7, #0]
 8003e0e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003e12:	2a00      	cmp	r2, #0
 8003e14:	d101      	bne.n	8003e1a <ETH_SetMACConfig+0xee>
 8003e16:	2280      	movs	r2, #128	; 0x80
 8003e18:	e000      	b.n	8003e1c <ETH_SetMACConfig+0xf0>
 8003e1a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003e1c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003e22:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003e2a:	2a01      	cmp	r2, #1
 8003e2c:	d101      	bne.n	8003e32 <ETH_SetMACConfig+0x106>
 8003e2e:	2208      	movs	r2, #8
 8003e30:	e000      	b.n	8003e34 <ETH_SetMACConfig+0x108>
 8003e32:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003e34:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003e3c:	2a01      	cmp	r2, #1
 8003e3e:	d101      	bne.n	8003e44 <ETH_SetMACConfig+0x118>
 8003e40:	2204      	movs	r2, #4
 8003e42:	e000      	b.n	8003e46 <ETH_SetMACConfig+0x11a>
 8003e44:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003e46:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003e4e:	2a01      	cmp	r2, #1
 8003e50:	d101      	bne.n	8003e56 <ETH_SetMACConfig+0x12a>
 8003e52:	2202      	movs	r2, #2
 8003e54:	e000      	b.n	8003e58 <ETH_SetMACConfig+0x12c>
 8003e56:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e70:	2001      	movs	r0, #1
 8003e72:	f7ff fd15 	bl	80038a0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	619a      	str	r2, [r3, #24]
}
 8003e7e:	bf00      	nop
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	ff20810f 	.word	0xff20810f

08003e8c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	4b3d      	ldr	r3, [pc, #244]	; (8003f9c <ETH_SetDMAConfig+0x110>)
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	7b1b      	ldrb	r3, [r3, #12]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d102      	bne.n	8003eb8 <ETH_SetDMAConfig+0x2c>
 8003eb2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003eb6:	e000      	b.n	8003eba <ETH_SetDMAConfig+0x2e>
 8003eb8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	7b5b      	ldrb	r3, [r3, #13]
 8003ebe:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003ec0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	7f52      	ldrb	r2, [r2, #29]
 8003ec6:	2a00      	cmp	r2, #0
 8003ec8:	d102      	bne.n	8003ed0 <ETH_SetDMAConfig+0x44>
 8003eca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003ece:	e000      	b.n	8003ed2 <ETH_SetDMAConfig+0x46>
 8003ed0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003ed2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	7b9b      	ldrb	r3, [r3, #14]
 8003ed8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003eda:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003ee0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	7f1b      	ldrb	r3, [r3, #28]
 8003ee6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003ee8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	7f9b      	ldrb	r3, [r3, #30]
 8003eee:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003ef0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003ef6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003efe:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003f00:	4313      	orrs	r3, r2
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f10:	461a      	mov	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f22:	2001      	movs	r0, #1
 8003f24:	f7ff fcbc 	bl	80038a0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f30:	461a      	mov	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	791b      	ldrb	r3, [r3, #4]
 8003f3a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003f40:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003f46:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003f4c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f54:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003f56:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003f5e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003f64:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6812      	ldr	r2, [r2, #0]
 8003f6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f6e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f72:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f80:	2001      	movs	r0, #1
 8003f82:	f7ff fc8d 	bl	80038a0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f8e:	461a      	mov	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6013      	str	r3, [r2, #0]
}
 8003f94:	bf00      	nop
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	f8de3f23 	.word	0xf8de3f23

08003fa0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b0a6      	sub	sp, #152	; 0x98
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003fea:	2300      	movs	r3, #0
 8003fec:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004002:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004006:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004008:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800400c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800400e:	2300      	movs	r3, #0
 8004010:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004014:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004018:	4619      	mov	r1, r3
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7ff fe86 	bl	8003d2c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004020:	2301      	movs	r3, #1
 8004022:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004024:	2301      	movs	r3, #1
 8004026:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004028:	2301      	movs	r3, #1
 800402a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800402e:	2301      	movs	r3, #1
 8004030:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004032:	2300      	movs	r3, #0
 8004034:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004036:	2300      	movs	r3, #0
 8004038:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800403c:	2300      	movs	r3, #0
 800403e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004042:	2300      	movs	r3, #0
 8004044:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004046:	2301      	movs	r3, #1
 8004048:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800404c:	2301      	movs	r3, #1
 800404e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004050:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004054:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004056:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800405a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800405c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004060:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004062:	2301      	movs	r3, #1
 8004064:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004068:	2300      	movs	r3, #0
 800406a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800406c:	2300      	movs	r3, #0
 800406e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004070:	f107 0308 	add.w	r3, r7, #8
 8004074:	4619      	mov	r1, r3
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7ff ff08 	bl	8003e8c <ETH_SetDMAConfig>
}
 800407c:	bf00      	nop
 800407e:	3798      	adds	r7, #152	; 0x98
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004084:	b480      	push	{r7}
 8004086:	b087      	sub	sp, #28
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3305      	adds	r3, #5
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	021b      	lsls	r3, r3, #8
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	3204      	adds	r2, #4
 800409c:	7812      	ldrb	r2, [r2, #0]
 800409e:	4313      	orrs	r3, r2
 80040a0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80040a2:	68ba      	ldr	r2, [r7, #8]
 80040a4:	4b11      	ldr	r3, [pc, #68]	; (80040ec <ETH_MACAddressConfig+0x68>)
 80040a6:	4413      	add	r3, r2
 80040a8:	461a      	mov	r2, r3
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	3303      	adds	r3, #3
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	061a      	lsls	r2, r3, #24
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	3302      	adds	r3, #2
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	041b      	lsls	r3, r3, #16
 80040be:	431a      	orrs	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	3301      	adds	r3, #1
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	021b      	lsls	r3, r3, #8
 80040c8:	4313      	orrs	r3, r2
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	7812      	ldrb	r2, [r2, #0]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	4b06      	ldr	r3, [pc, #24]	; (80040f0 <ETH_MACAddressConfig+0x6c>)
 80040d6:	4413      	add	r3, r2
 80040d8:	461a      	mov	r2, r3
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	6013      	str	r3, [r2, #0]
}
 80040de:	bf00      	nop
 80040e0:	371c      	adds	r7, #28
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	40028040 	.word	0x40028040
 80040f0:	40028044 	.word	0x40028044

080040f4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80040fc:	2300      	movs	r3, #0
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	e03e      	b.n	8004180 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68d9      	ldr	r1, [r3, #12]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	4613      	mov	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	440b      	add	r3, r1
 8004112:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	2200      	movs	r2, #0
 8004118:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	2200      	movs	r2, #0
 800411e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	2200      	movs	r2, #0
 8004124:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2200      	movs	r2, #0
 800412a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800412c:	68b9      	ldr	r1, [r7, #8]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	3206      	adds	r2, #6
 8004134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2b02      	cmp	r3, #2
 8004148:	d80c      	bhi.n	8004164 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68d9      	ldr	r1, [r3, #12]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	4613      	mov	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4413      	add	r3, r2
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	440b      	add	r3, r1
 800415c:	461a      	mov	r2, r3
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	60da      	str	r2, [r3, #12]
 8004162:	e004      	b.n	800416e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	461a      	mov	r2, r3
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	3301      	adds	r3, #1
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2b03      	cmp	r3, #3
 8004184:	d9bd      	bls.n	8004102 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68da      	ldr	r2, [r3, #12]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004198:	611a      	str	r2, [r3, #16]
}
 800419a:	bf00      	nop
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr

080041a6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b085      	sub	sp, #20
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80041ae:	2300      	movs	r3, #0
 80041b0:	60fb      	str	r3, [r7, #12]
 80041b2:	e046      	b.n	8004242 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6919      	ldr	r1, [r3, #16]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	4613      	mov	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	440b      	add	r3, r1
 80041c4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2200      	movs	r2, #0
 80041d0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	2200      	movs	r2, #0
 80041d6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	2200      	movs	r2, #0
 80041dc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	2200      	movs	r2, #0
 80041e2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	2200      	movs	r2, #0
 80041e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80041f0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80041f8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004206:	68b9      	ldr	r1, [r7, #8]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	3212      	adds	r2, #18
 800420e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2b02      	cmp	r3, #2
 8004216:	d80c      	bhi.n	8004232 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6919      	ldr	r1, [r3, #16]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	4613      	mov	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	440b      	add	r3, r1
 800422a:	461a      	mov	r2, r3
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	60da      	str	r2, [r3, #12]
 8004230:	e004      	b.n	800423c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	461a      	mov	r2, r3
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	3301      	adds	r3, #1
 8004240:	60fb      	str	r3, [r7, #12]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2b03      	cmp	r3, #3
 8004246:	d9b5      	bls.n	80041b4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	691a      	ldr	r2, [r3, #16]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004272:	60da      	str	r2, [r3, #12]
}
 8004274:	bf00      	nop
 8004276:	3714      	adds	r7, #20
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004280:	b480      	push	{r7}
 8004282:	b089      	sub	sp, #36	; 0x24
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800428a:	2300      	movs	r3, #0
 800428c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800428e:	2300      	movs	r3, #0
 8004290:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004292:	2300      	movs	r3, #0
 8004294:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004296:	2300      	movs	r3, #0
 8004298:	61fb      	str	r3, [r7, #28]
 800429a:	e177      	b.n	800458c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800429c:	2201      	movs	r2, #1
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	fa02 f303 	lsl.w	r3, r2, r3
 80042a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	4013      	ands	r3, r2
 80042ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	f040 8166 	bne.w	8004586 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d005      	beq.n	80042d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d130      	bne.n	8004334 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	2203      	movs	r2, #3
 80042de:	fa02 f303 	lsl.w	r3, r2, r3
 80042e2:	43db      	mvns	r3, r3
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	4013      	ands	r3, r2
 80042e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	68da      	ldr	r2, [r3, #12]
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	fa02 f303 	lsl.w	r3, r2, r3
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	69ba      	ldr	r2, [r7, #24]
 8004300:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004308:	2201      	movs	r2, #1
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	43db      	mvns	r3, r3
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	4013      	ands	r3, r2
 8004316:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	091b      	lsrs	r3, r3, #4
 800431e:	f003 0201 	and.w	r2, r3, #1
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	fa02 f303 	lsl.w	r3, r2, r3
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	4313      	orrs	r3, r2
 800432c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f003 0303 	and.w	r3, r3, #3
 800433c:	2b03      	cmp	r3, #3
 800433e:	d017      	beq.n	8004370 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	005b      	lsls	r3, r3, #1
 800434a:	2203      	movs	r2, #3
 800434c:	fa02 f303 	lsl.w	r3, r2, r3
 8004350:	43db      	mvns	r3, r3
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	4013      	ands	r3, r2
 8004356:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	689a      	ldr	r2, [r3, #8]
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	fa02 f303 	lsl.w	r3, r2, r3
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	4313      	orrs	r3, r2
 8004368:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f003 0303 	and.w	r3, r3, #3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d123      	bne.n	80043c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	08da      	lsrs	r2, r3, #3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3208      	adds	r2, #8
 8004384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004388:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	f003 0307 	and.w	r3, r3, #7
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	220f      	movs	r2, #15
 8004394:	fa02 f303 	lsl.w	r3, r2, r3
 8004398:	43db      	mvns	r3, r3
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	4013      	ands	r3, r2
 800439e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	691a      	ldr	r2, [r3, #16]
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	f003 0307 	and.w	r3, r3, #7
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	fa02 f303 	lsl.w	r3, r2, r3
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	08da      	lsrs	r2, r3, #3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	3208      	adds	r2, #8
 80043be:	69b9      	ldr	r1, [r7, #24]
 80043c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	005b      	lsls	r3, r3, #1
 80043ce:	2203      	movs	r2, #3
 80043d0:	fa02 f303 	lsl.w	r3, r2, r3
 80043d4:	43db      	mvns	r3, r3
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	4013      	ands	r3, r2
 80043da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f003 0203 	and.w	r2, r3, #3
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 80c0 	beq.w	8004586 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004406:	2300      	movs	r3, #0
 8004408:	60fb      	str	r3, [r7, #12]
 800440a:	4b66      	ldr	r3, [pc, #408]	; (80045a4 <HAL_GPIO_Init+0x324>)
 800440c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440e:	4a65      	ldr	r2, [pc, #404]	; (80045a4 <HAL_GPIO_Init+0x324>)
 8004410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004414:	6453      	str	r3, [r2, #68]	; 0x44
 8004416:	4b63      	ldr	r3, [pc, #396]	; (80045a4 <HAL_GPIO_Init+0x324>)
 8004418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800441e:	60fb      	str	r3, [r7, #12]
 8004420:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004422:	4a61      	ldr	r2, [pc, #388]	; (80045a8 <HAL_GPIO_Init+0x328>)
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	089b      	lsrs	r3, r3, #2
 8004428:	3302      	adds	r3, #2
 800442a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800442e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	220f      	movs	r2, #15
 800443a:	fa02 f303 	lsl.w	r3, r2, r3
 800443e:	43db      	mvns	r3, r3
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	4013      	ands	r3, r2
 8004444:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a58      	ldr	r2, [pc, #352]	; (80045ac <HAL_GPIO_Init+0x32c>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d037      	beq.n	80044be <HAL_GPIO_Init+0x23e>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a57      	ldr	r2, [pc, #348]	; (80045b0 <HAL_GPIO_Init+0x330>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d031      	beq.n	80044ba <HAL_GPIO_Init+0x23a>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a56      	ldr	r2, [pc, #344]	; (80045b4 <HAL_GPIO_Init+0x334>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d02b      	beq.n	80044b6 <HAL_GPIO_Init+0x236>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a55      	ldr	r2, [pc, #340]	; (80045b8 <HAL_GPIO_Init+0x338>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d025      	beq.n	80044b2 <HAL_GPIO_Init+0x232>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a54      	ldr	r2, [pc, #336]	; (80045bc <HAL_GPIO_Init+0x33c>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d01f      	beq.n	80044ae <HAL_GPIO_Init+0x22e>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a53      	ldr	r2, [pc, #332]	; (80045c0 <HAL_GPIO_Init+0x340>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d019      	beq.n	80044aa <HAL_GPIO_Init+0x22a>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a52      	ldr	r2, [pc, #328]	; (80045c4 <HAL_GPIO_Init+0x344>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d013      	beq.n	80044a6 <HAL_GPIO_Init+0x226>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a51      	ldr	r2, [pc, #324]	; (80045c8 <HAL_GPIO_Init+0x348>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d00d      	beq.n	80044a2 <HAL_GPIO_Init+0x222>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a50      	ldr	r2, [pc, #320]	; (80045cc <HAL_GPIO_Init+0x34c>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d007      	beq.n	800449e <HAL_GPIO_Init+0x21e>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a4f      	ldr	r2, [pc, #316]	; (80045d0 <HAL_GPIO_Init+0x350>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d101      	bne.n	800449a <HAL_GPIO_Init+0x21a>
 8004496:	2309      	movs	r3, #9
 8004498:	e012      	b.n	80044c0 <HAL_GPIO_Init+0x240>
 800449a:	230a      	movs	r3, #10
 800449c:	e010      	b.n	80044c0 <HAL_GPIO_Init+0x240>
 800449e:	2308      	movs	r3, #8
 80044a0:	e00e      	b.n	80044c0 <HAL_GPIO_Init+0x240>
 80044a2:	2307      	movs	r3, #7
 80044a4:	e00c      	b.n	80044c0 <HAL_GPIO_Init+0x240>
 80044a6:	2306      	movs	r3, #6
 80044a8:	e00a      	b.n	80044c0 <HAL_GPIO_Init+0x240>
 80044aa:	2305      	movs	r3, #5
 80044ac:	e008      	b.n	80044c0 <HAL_GPIO_Init+0x240>
 80044ae:	2304      	movs	r3, #4
 80044b0:	e006      	b.n	80044c0 <HAL_GPIO_Init+0x240>
 80044b2:	2303      	movs	r3, #3
 80044b4:	e004      	b.n	80044c0 <HAL_GPIO_Init+0x240>
 80044b6:	2302      	movs	r3, #2
 80044b8:	e002      	b.n	80044c0 <HAL_GPIO_Init+0x240>
 80044ba:	2301      	movs	r3, #1
 80044bc:	e000      	b.n	80044c0 <HAL_GPIO_Init+0x240>
 80044be:	2300      	movs	r3, #0
 80044c0:	69fa      	ldr	r2, [r7, #28]
 80044c2:	f002 0203 	and.w	r2, r2, #3
 80044c6:	0092      	lsls	r2, r2, #2
 80044c8:	4093      	lsls	r3, r2
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044d0:	4935      	ldr	r1, [pc, #212]	; (80045a8 <HAL_GPIO_Init+0x328>)
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	089b      	lsrs	r3, r3, #2
 80044d6:	3302      	adds	r3, #2
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044de:	4b3d      	ldr	r3, [pc, #244]	; (80045d4 <HAL_GPIO_Init+0x354>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	43db      	mvns	r3, r3
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	4013      	ands	r3, r2
 80044ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	4313      	orrs	r3, r2
 8004500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004502:	4a34      	ldr	r2, [pc, #208]	; (80045d4 <HAL_GPIO_Init+0x354>)
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004508:	4b32      	ldr	r3, [pc, #200]	; (80045d4 <HAL_GPIO_Init+0x354>)
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	43db      	mvns	r3, r3
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	4013      	ands	r3, r2
 8004516:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d003      	beq.n	800452c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	4313      	orrs	r3, r2
 800452a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800452c:	4a29      	ldr	r2, [pc, #164]	; (80045d4 <HAL_GPIO_Init+0x354>)
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004532:	4b28      	ldr	r3, [pc, #160]	; (80045d4 <HAL_GPIO_Init+0x354>)
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	43db      	mvns	r3, r3
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	4013      	ands	r3, r2
 8004540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	4313      	orrs	r3, r2
 8004554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004556:	4a1f      	ldr	r2, [pc, #124]	; (80045d4 <HAL_GPIO_Init+0x354>)
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800455c:	4b1d      	ldr	r3, [pc, #116]	; (80045d4 <HAL_GPIO_Init+0x354>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	43db      	mvns	r3, r3
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	4013      	ands	r3, r2
 800456a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	4313      	orrs	r3, r2
 800457e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004580:	4a14      	ldr	r2, [pc, #80]	; (80045d4 <HAL_GPIO_Init+0x354>)
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	3301      	adds	r3, #1
 800458a:	61fb      	str	r3, [r7, #28]
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	2b0f      	cmp	r3, #15
 8004590:	f67f ae84 	bls.w	800429c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004594:	bf00      	nop
 8004596:	bf00      	nop
 8004598:	3724      	adds	r7, #36	; 0x24
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	40023800 	.word	0x40023800
 80045a8:	40013800 	.word	0x40013800
 80045ac:	40020000 	.word	0x40020000
 80045b0:	40020400 	.word	0x40020400
 80045b4:	40020800 	.word	0x40020800
 80045b8:	40020c00 	.word	0x40020c00
 80045bc:	40021000 	.word	0x40021000
 80045c0:	40021400 	.word	0x40021400
 80045c4:	40021800 	.word	0x40021800
 80045c8:	40021c00 	.word	0x40021c00
 80045cc:	40022000 	.word	0x40022000
 80045d0:	40022400 	.word	0x40022400
 80045d4:	40013c00 	.word	0x40013c00

080045d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	460b      	mov	r3, r1
 80045e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	691a      	ldr	r2, [r3, #16]
 80045e8:	887b      	ldrh	r3, [r7, #2]
 80045ea:	4013      	ands	r3, r2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d002      	beq.n	80045f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80045f0:	2301      	movs	r3, #1
 80045f2:	73fb      	strb	r3, [r7, #15]
 80045f4:	e001      	b.n	80045fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80045f6:	2300      	movs	r3, #0
 80045f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3714      	adds	r7, #20
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	460b      	mov	r3, r1
 8004612:	807b      	strh	r3, [r7, #2]
 8004614:	4613      	mov	r3, r2
 8004616:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004618:	787b      	ldrb	r3, [r7, #1]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800461e:	887a      	ldrh	r2, [r7, #2]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004624:	e003      	b.n	800462e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004626:	887b      	ldrh	r3, [r7, #2]
 8004628:	041a      	lsls	r2, r3, #16
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	619a      	str	r2, [r3, #24]
}
 800462e:	bf00      	nop
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
	...

0800463c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e12b      	b.n	80048a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d106      	bne.n	8004668 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7fe f906 	bl	8002874 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2224      	movs	r2, #36	; 0x24
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0201 	bic.w	r2, r2, #1
 800467e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800468e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800469e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80046a0:	f001 fa20 	bl	8005ae4 <HAL_RCC_GetPCLK1Freq>
 80046a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	4a81      	ldr	r2, [pc, #516]	; (80048b0 <HAL_I2C_Init+0x274>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d807      	bhi.n	80046c0 <HAL_I2C_Init+0x84>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4a80      	ldr	r2, [pc, #512]	; (80048b4 <HAL_I2C_Init+0x278>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	bf94      	ite	ls
 80046b8:	2301      	movls	r3, #1
 80046ba:	2300      	movhi	r3, #0
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	e006      	b.n	80046ce <HAL_I2C_Init+0x92>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4a7d      	ldr	r2, [pc, #500]	; (80048b8 <HAL_I2C_Init+0x27c>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	bf94      	ite	ls
 80046c8:	2301      	movls	r3, #1
 80046ca:	2300      	movhi	r3, #0
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e0e7      	b.n	80048a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	4a78      	ldr	r2, [pc, #480]	; (80048bc <HAL_I2C_Init+0x280>)
 80046da:	fba2 2303 	umull	r2, r3, r2, r3
 80046de:	0c9b      	lsrs	r3, r3, #18
 80046e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	4a6a      	ldr	r2, [pc, #424]	; (80048b0 <HAL_I2C_Init+0x274>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d802      	bhi.n	8004710 <HAL_I2C_Init+0xd4>
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	3301      	adds	r3, #1
 800470e:	e009      	b.n	8004724 <HAL_I2C_Init+0xe8>
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004716:	fb02 f303 	mul.w	r3, r2, r3
 800471a:	4a69      	ldr	r2, [pc, #420]	; (80048c0 <HAL_I2C_Init+0x284>)
 800471c:	fba2 2303 	umull	r2, r3, r2, r3
 8004720:	099b      	lsrs	r3, r3, #6
 8004722:	3301      	adds	r3, #1
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6812      	ldr	r2, [r2, #0]
 8004728:	430b      	orrs	r3, r1
 800472a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004736:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	495c      	ldr	r1, [pc, #368]	; (80048b0 <HAL_I2C_Init+0x274>)
 8004740:	428b      	cmp	r3, r1
 8004742:	d819      	bhi.n	8004778 <HAL_I2C_Init+0x13c>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	1e59      	subs	r1, r3, #1
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004752:	1c59      	adds	r1, r3, #1
 8004754:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004758:	400b      	ands	r3, r1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00a      	beq.n	8004774 <HAL_I2C_Init+0x138>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	1e59      	subs	r1, r3, #1
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	fbb1 f3f3 	udiv	r3, r1, r3
 800476c:	3301      	adds	r3, #1
 800476e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004772:	e051      	b.n	8004818 <HAL_I2C_Init+0x1dc>
 8004774:	2304      	movs	r3, #4
 8004776:	e04f      	b.n	8004818 <HAL_I2C_Init+0x1dc>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d111      	bne.n	80047a4 <HAL_I2C_Init+0x168>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	1e58      	subs	r0, r3, #1
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6859      	ldr	r1, [r3, #4]
 8004788:	460b      	mov	r3, r1
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	440b      	add	r3, r1
 800478e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004792:	3301      	adds	r3, #1
 8004794:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004798:	2b00      	cmp	r3, #0
 800479a:	bf0c      	ite	eq
 800479c:	2301      	moveq	r3, #1
 800479e:	2300      	movne	r3, #0
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	e012      	b.n	80047ca <HAL_I2C_Init+0x18e>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	1e58      	subs	r0, r3, #1
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6859      	ldr	r1, [r3, #4]
 80047ac:	460b      	mov	r3, r1
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	440b      	add	r3, r1
 80047b2:	0099      	lsls	r1, r3, #2
 80047b4:	440b      	add	r3, r1
 80047b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80047ba:	3301      	adds	r3, #1
 80047bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	bf0c      	ite	eq
 80047c4:	2301      	moveq	r3, #1
 80047c6:	2300      	movne	r3, #0
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <HAL_I2C_Init+0x196>
 80047ce:	2301      	movs	r3, #1
 80047d0:	e022      	b.n	8004818 <HAL_I2C_Init+0x1dc>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10e      	bne.n	80047f8 <HAL_I2C_Init+0x1bc>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	1e58      	subs	r0, r3, #1
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6859      	ldr	r1, [r3, #4]
 80047e2:	460b      	mov	r3, r1
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	440b      	add	r3, r1
 80047e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80047ec:	3301      	adds	r3, #1
 80047ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047f6:	e00f      	b.n	8004818 <HAL_I2C_Init+0x1dc>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	1e58      	subs	r0, r3, #1
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6859      	ldr	r1, [r3, #4]
 8004800:	460b      	mov	r3, r1
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	440b      	add	r3, r1
 8004806:	0099      	lsls	r1, r3, #2
 8004808:	440b      	add	r3, r1
 800480a:	fbb0 f3f3 	udiv	r3, r0, r3
 800480e:	3301      	adds	r3, #1
 8004810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004814:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004818:	6879      	ldr	r1, [r7, #4]
 800481a:	6809      	ldr	r1, [r1, #0]
 800481c:	4313      	orrs	r3, r2
 800481e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	69da      	ldr	r2, [r3, #28]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	431a      	orrs	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	430a      	orrs	r2, r1
 800483a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004846:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	6911      	ldr	r1, [r2, #16]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	68d2      	ldr	r2, [r2, #12]
 8004852:	4311      	orrs	r1, r2
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	6812      	ldr	r2, [r2, #0]
 8004858:	430b      	orrs	r3, r1
 800485a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	695a      	ldr	r2, [r3, #20]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	431a      	orrs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	430a      	orrs	r2, r1
 8004876:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f042 0201 	orr.w	r2, r2, #1
 8004886:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2220      	movs	r2, #32
 8004892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	000186a0 	.word	0x000186a0
 80048b4:	001e847f 	.word	0x001e847f
 80048b8:	003d08ff 	.word	0x003d08ff
 80048bc:	431bde83 	.word	0x431bde83
 80048c0:	10624dd3 	.word	0x10624dd3

080048c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b088      	sub	sp, #32
 80048c8:	af02      	add	r7, sp, #8
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	607a      	str	r2, [r7, #4]
 80048ce:	461a      	mov	r2, r3
 80048d0:	460b      	mov	r3, r1
 80048d2:	817b      	strh	r3, [r7, #10]
 80048d4:	4613      	mov	r3, r2
 80048d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048d8:	f7fe ffd6 	bl	8003888 <HAL_GetTick>
 80048dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b20      	cmp	r3, #32
 80048e8:	f040 80e0 	bne.w	8004aac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	2319      	movs	r3, #25
 80048f2:	2201      	movs	r2, #1
 80048f4:	4970      	ldr	r1, [pc, #448]	; (8004ab8 <HAL_I2C_Master_Transmit+0x1f4>)
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 f964 	bl	8004bc4 <I2C_WaitOnFlagUntilTimeout>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004902:	2302      	movs	r3, #2
 8004904:	e0d3      	b.n	8004aae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800490c:	2b01      	cmp	r3, #1
 800490e:	d101      	bne.n	8004914 <HAL_I2C_Master_Transmit+0x50>
 8004910:	2302      	movs	r3, #2
 8004912:	e0cc      	b.n	8004aae <HAL_I2C_Master_Transmit+0x1ea>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b01      	cmp	r3, #1
 8004928:	d007      	beq.n	800493a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f042 0201 	orr.w	r2, r2, #1
 8004938:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004948:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2221      	movs	r2, #33	; 0x21
 800494e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2210      	movs	r2, #16
 8004956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	893a      	ldrh	r2, [r7, #8]
 800496a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004970:	b29a      	uxth	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	4a50      	ldr	r2, [pc, #320]	; (8004abc <HAL_I2C_Master_Transmit+0x1f8>)
 800497a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800497c:	8979      	ldrh	r1, [r7, #10]
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	6a3a      	ldr	r2, [r7, #32]
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f000 f89c 	bl	8004ac0 <I2C_MasterRequestWrite>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e08d      	b.n	8004aae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004992:	2300      	movs	r3, #0
 8004994:	613b      	str	r3, [r7, #16]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	613b      	str	r3, [r7, #16]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	613b      	str	r3, [r7, #16]
 80049a6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80049a8:	e066      	b.n	8004a78 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	6a39      	ldr	r1, [r7, #32]
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f000 f9de 	bl	8004d70 <I2C_WaitOnTXEFlagUntilTimeout>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00d      	beq.n	80049d6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	2b04      	cmp	r3, #4
 80049c0:	d107      	bne.n	80049d2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e06b      	b.n	8004aae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	781a      	ldrb	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	1c5a      	adds	r2, r3, #1
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	3b01      	subs	r3, #1
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049fe:	3b01      	subs	r3, #1
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	2b04      	cmp	r3, #4
 8004a12:	d11b      	bne.n	8004a4c <HAL_I2C_Master_Transmit+0x188>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d017      	beq.n	8004a4c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	781a      	ldrb	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2c:	1c5a      	adds	r2, r3, #1
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a44:	3b01      	subs	r3, #1
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	6a39      	ldr	r1, [r7, #32]
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f000 f9ce 	bl	8004df2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00d      	beq.n	8004a78 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a60:	2b04      	cmp	r3, #4
 8004a62:	d107      	bne.n	8004a74 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a72:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e01a      	b.n	8004aae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d194      	bne.n	80049aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2220      	movs	r2, #32
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	e000      	b.n	8004aae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004aac:	2302      	movs	r3, #2
  }
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3718      	adds	r7, #24
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	00100002 	.word	0x00100002
 8004abc:	ffff0000 	.word	0xffff0000

08004ac0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b088      	sub	sp, #32
 8004ac4:	af02      	add	r7, sp, #8
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	607a      	str	r2, [r7, #4]
 8004aca:	603b      	str	r3, [r7, #0]
 8004acc:	460b      	mov	r3, r1
 8004ace:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d006      	beq.n	8004aea <I2C_MasterRequestWrite+0x2a>
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d003      	beq.n	8004aea <I2C_MasterRequestWrite+0x2a>
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ae8:	d108      	bne.n	8004afc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004af8:	601a      	str	r2, [r3, #0]
 8004afa:	e00b      	b.n	8004b14 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b00:	2b12      	cmp	r3, #18
 8004b02:	d107      	bne.n	8004b14 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b12:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f000 f84f 	bl	8004bc4 <I2C_WaitOnFlagUntilTimeout>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00d      	beq.n	8004b48 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b3a:	d103      	bne.n	8004b44 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b42:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e035      	b.n	8004bb4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b50:	d108      	bne.n	8004b64 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b52:	897b      	ldrh	r3, [r7, #10]
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	461a      	mov	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b60:	611a      	str	r2, [r3, #16]
 8004b62:	e01b      	b.n	8004b9c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004b64:	897b      	ldrh	r3, [r7, #10]
 8004b66:	11db      	asrs	r3, r3, #7
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	f003 0306 	and.w	r3, r3, #6
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	f063 030f 	orn	r3, r3, #15
 8004b74:	b2da      	uxtb	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	490e      	ldr	r1, [pc, #56]	; (8004bbc <I2C_MasterRequestWrite+0xfc>)
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 f875 	bl	8004c72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e010      	b.n	8004bb4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b92:	897b      	ldrh	r3, [r7, #10]
 8004b94:	b2da      	uxtb	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	4907      	ldr	r1, [pc, #28]	; (8004bc0 <I2C_MasterRequestWrite+0x100>)
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f000 f865 	bl	8004c72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e000      	b.n	8004bb4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3718      	adds	r7, #24
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	00010008 	.word	0x00010008
 8004bc0:	00010002 	.word	0x00010002

08004bc4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	603b      	str	r3, [r7, #0]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bd4:	e025      	b.n	8004c22 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bdc:	d021      	beq.n	8004c22 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bde:	f7fe fe53 	bl	8003888 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d302      	bcc.n	8004bf4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d116      	bne.n	8004c22 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	f043 0220 	orr.w	r2, r3, #32
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e023      	b.n	8004c6a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	0c1b      	lsrs	r3, r3, #16
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d10d      	bne.n	8004c48 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	43da      	mvns	r2, r3
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	4013      	ands	r3, r2
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	bf0c      	ite	eq
 8004c3e:	2301      	moveq	r3, #1
 8004c40:	2300      	movne	r3, #0
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	461a      	mov	r2, r3
 8004c46:	e00c      	b.n	8004c62 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	43da      	mvns	r2, r3
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	4013      	ands	r3, r2
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	bf0c      	ite	eq
 8004c5a:	2301      	moveq	r3, #1
 8004c5c:	2300      	movne	r3, #0
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	461a      	mov	r2, r3
 8004c62:	79fb      	ldrb	r3, [r7, #7]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d0b6      	beq.n	8004bd6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b084      	sub	sp, #16
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	60f8      	str	r0, [r7, #12]
 8004c7a:	60b9      	str	r1, [r7, #8]
 8004c7c:	607a      	str	r2, [r7, #4]
 8004c7e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c80:	e051      	b.n	8004d26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c90:	d123      	bne.n	8004cda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ca0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004caa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	f043 0204 	orr.w	r2, r3, #4
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e046      	b.n	8004d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce0:	d021      	beq.n	8004d26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ce2:	f7fe fdd1 	bl	8003888 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d302      	bcc.n	8004cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d116      	bne.n	8004d26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2220      	movs	r2, #32
 8004d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	f043 0220 	orr.w	r2, r3, #32
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e020      	b.n	8004d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	0c1b      	lsrs	r3, r3, #16
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d10c      	bne.n	8004d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	43da      	mvns	r2, r3
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	bf14      	ite	ne
 8004d42:	2301      	movne	r3, #1
 8004d44:	2300      	moveq	r3, #0
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	e00b      	b.n	8004d62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	43da      	mvns	r2, r3
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	4013      	ands	r3, r2
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	bf14      	ite	ne
 8004d5c:	2301      	movne	r3, #1
 8004d5e:	2300      	moveq	r3, #0
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d18d      	bne.n	8004c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3710      	adds	r7, #16
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d7c:	e02d      	b.n	8004dda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f000 f878 	bl	8004e74 <I2C_IsAcknowledgeFailed>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d001      	beq.n	8004d8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e02d      	b.n	8004dea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d94:	d021      	beq.n	8004dda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d96:	f7fe fd77 	bl	8003888 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d302      	bcc.n	8004dac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d116      	bne.n	8004dda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2220      	movs	r2, #32
 8004db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc6:	f043 0220 	orr.w	r2, r3, #32
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e007      	b.n	8004dea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de4:	2b80      	cmp	r3, #128	; 0x80
 8004de6:	d1ca      	bne.n	8004d7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b084      	sub	sp, #16
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	60f8      	str	r0, [r7, #12]
 8004dfa:	60b9      	str	r1, [r7, #8]
 8004dfc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004dfe:	e02d      	b.n	8004e5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 f837 	bl	8004e74 <I2C_IsAcknowledgeFailed>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d001      	beq.n	8004e10 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e02d      	b.n	8004e6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e16:	d021      	beq.n	8004e5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e18:	f7fe fd36 	bl	8003888 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d302      	bcc.n	8004e2e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d116      	bne.n	8004e5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2220      	movs	r2, #32
 8004e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e48:	f043 0220 	orr.w	r2, r3, #32
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e007      	b.n	8004e6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	f003 0304 	and.w	r3, r3, #4
 8004e66:	2b04      	cmp	r3, #4
 8004e68:	d1ca      	bne.n	8004e00 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e8a:	d11b      	bne.n	8004ec4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2220      	movs	r2, #32
 8004ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb0:	f043 0204 	orr.w	r2, r3, #4
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e000      	b.n	8004ec6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b083      	sub	sp, #12
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
 8004eda:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b20      	cmp	r3, #32
 8004ee6:	d129      	bne.n	8004f3c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2224      	movs	r2, #36	; 0x24
 8004eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f022 0201 	bic.w	r2, r2, #1
 8004efe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f022 0210 	bic.w	r2, r2, #16
 8004f0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f042 0201 	orr.w	r2, r2, #1
 8004f2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2220      	movs	r2, #32
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	e000      	b.n	8004f3e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004f3c:	2302      	movs	r3, #2
  }
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b085      	sub	sp, #20
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
 8004f52:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004f54:	2300      	movs	r3, #0
 8004f56:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	2b20      	cmp	r3, #32
 8004f62:	d12a      	bne.n	8004fba <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2224      	movs	r2, #36	; 0x24
 8004f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 0201 	bic.w	r2, r2, #1
 8004f7a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f82:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004f84:	89fb      	ldrh	r3, [r7, #14]
 8004f86:	f023 030f 	bic.w	r3, r3, #15
 8004f8a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	89fb      	ldrh	r3, [r7, #14]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	89fa      	ldrh	r2, [r7, #14]
 8004f9c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f042 0201 	orr.w	r2, r2, #1
 8004fac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	e000      	b.n	8004fbc <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004fba:	2302      	movs	r3, #2
  }
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3714      	adds	r7, #20
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fca:	b08f      	sub	sp, #60	; 0x3c
 8004fcc:	af0a      	add	r7, sp, #40	; 0x28
 8004fce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e10f      	b.n	80051fa <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d106      	bne.n	8004ffa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f7fd febb 	bl	8002d70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2203      	movs	r2, #3
 8004ffe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800500a:	2b00      	cmp	r3, #0
 800500c:	d102      	bne.n	8005014 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4618      	mov	r0, r3
 800501a:	f003 ffe2 	bl	8008fe2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	603b      	str	r3, [r7, #0]
 8005024:	687e      	ldr	r6, [r7, #4]
 8005026:	466d      	mov	r5, sp
 8005028:	f106 0410 	add.w	r4, r6, #16
 800502c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800502e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005030:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005032:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005034:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005038:	e885 0003 	stmia.w	r5, {r0, r1}
 800503c:	1d33      	adds	r3, r6, #4
 800503e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005040:	6838      	ldr	r0, [r7, #0]
 8005042:	f003 ff6d 	bl	8008f20 <USB_CoreInit>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d005      	beq.n	8005058 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2202      	movs	r2, #2
 8005050:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e0d0      	b.n	80051fa <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2100      	movs	r1, #0
 800505e:	4618      	mov	r0, r3
 8005060:	f003 ffd0 	bl	8009004 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005064:	2300      	movs	r3, #0
 8005066:	73fb      	strb	r3, [r7, #15]
 8005068:	e04a      	b.n	8005100 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800506a:	7bfa      	ldrb	r2, [r7, #15]
 800506c:	6879      	ldr	r1, [r7, #4]
 800506e:	4613      	mov	r3, r2
 8005070:	00db      	lsls	r3, r3, #3
 8005072:	4413      	add	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	440b      	add	r3, r1
 8005078:	333d      	adds	r3, #61	; 0x3d
 800507a:	2201      	movs	r2, #1
 800507c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800507e:	7bfa      	ldrb	r2, [r7, #15]
 8005080:	6879      	ldr	r1, [r7, #4]
 8005082:	4613      	mov	r3, r2
 8005084:	00db      	lsls	r3, r3, #3
 8005086:	4413      	add	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	440b      	add	r3, r1
 800508c:	333c      	adds	r3, #60	; 0x3c
 800508e:	7bfa      	ldrb	r2, [r7, #15]
 8005090:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005092:	7bfa      	ldrb	r2, [r7, #15]
 8005094:	7bfb      	ldrb	r3, [r7, #15]
 8005096:	b298      	uxth	r0, r3
 8005098:	6879      	ldr	r1, [r7, #4]
 800509a:	4613      	mov	r3, r2
 800509c:	00db      	lsls	r3, r3, #3
 800509e:	4413      	add	r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	440b      	add	r3, r1
 80050a4:	3344      	adds	r3, #68	; 0x44
 80050a6:	4602      	mov	r2, r0
 80050a8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80050aa:	7bfa      	ldrb	r2, [r7, #15]
 80050ac:	6879      	ldr	r1, [r7, #4]
 80050ae:	4613      	mov	r3, r2
 80050b0:	00db      	lsls	r3, r3, #3
 80050b2:	4413      	add	r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	440b      	add	r3, r1
 80050b8:	3340      	adds	r3, #64	; 0x40
 80050ba:	2200      	movs	r2, #0
 80050bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80050be:	7bfa      	ldrb	r2, [r7, #15]
 80050c0:	6879      	ldr	r1, [r7, #4]
 80050c2:	4613      	mov	r3, r2
 80050c4:	00db      	lsls	r3, r3, #3
 80050c6:	4413      	add	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	440b      	add	r3, r1
 80050cc:	3348      	adds	r3, #72	; 0x48
 80050ce:	2200      	movs	r2, #0
 80050d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80050d2:	7bfa      	ldrb	r2, [r7, #15]
 80050d4:	6879      	ldr	r1, [r7, #4]
 80050d6:	4613      	mov	r3, r2
 80050d8:	00db      	lsls	r3, r3, #3
 80050da:	4413      	add	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	440b      	add	r3, r1
 80050e0:	334c      	adds	r3, #76	; 0x4c
 80050e2:	2200      	movs	r2, #0
 80050e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80050e6:	7bfa      	ldrb	r2, [r7, #15]
 80050e8:	6879      	ldr	r1, [r7, #4]
 80050ea:	4613      	mov	r3, r2
 80050ec:	00db      	lsls	r3, r3, #3
 80050ee:	4413      	add	r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	440b      	add	r3, r1
 80050f4:	3354      	adds	r3, #84	; 0x54
 80050f6:	2200      	movs	r2, #0
 80050f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050fa:	7bfb      	ldrb	r3, [r7, #15]
 80050fc:	3301      	adds	r3, #1
 80050fe:	73fb      	strb	r3, [r7, #15]
 8005100:	7bfa      	ldrb	r2, [r7, #15]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	429a      	cmp	r2, r3
 8005108:	d3af      	bcc.n	800506a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800510a:	2300      	movs	r3, #0
 800510c:	73fb      	strb	r3, [r7, #15]
 800510e:	e044      	b.n	800519a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005110:	7bfa      	ldrb	r2, [r7, #15]
 8005112:	6879      	ldr	r1, [r7, #4]
 8005114:	4613      	mov	r3, r2
 8005116:	00db      	lsls	r3, r3, #3
 8005118:	4413      	add	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	440b      	add	r3, r1
 800511e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005122:	2200      	movs	r2, #0
 8005124:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005126:	7bfa      	ldrb	r2, [r7, #15]
 8005128:	6879      	ldr	r1, [r7, #4]
 800512a:	4613      	mov	r3, r2
 800512c:	00db      	lsls	r3, r3, #3
 800512e:	4413      	add	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	440b      	add	r3, r1
 8005134:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005138:	7bfa      	ldrb	r2, [r7, #15]
 800513a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800513c:	7bfa      	ldrb	r2, [r7, #15]
 800513e:	6879      	ldr	r1, [r7, #4]
 8005140:	4613      	mov	r3, r2
 8005142:	00db      	lsls	r3, r3, #3
 8005144:	4413      	add	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	440b      	add	r3, r1
 800514a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800514e:	2200      	movs	r2, #0
 8005150:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005152:	7bfa      	ldrb	r2, [r7, #15]
 8005154:	6879      	ldr	r1, [r7, #4]
 8005156:	4613      	mov	r3, r2
 8005158:	00db      	lsls	r3, r3, #3
 800515a:	4413      	add	r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	440b      	add	r3, r1
 8005160:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005164:	2200      	movs	r2, #0
 8005166:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005168:	7bfa      	ldrb	r2, [r7, #15]
 800516a:	6879      	ldr	r1, [r7, #4]
 800516c:	4613      	mov	r3, r2
 800516e:	00db      	lsls	r3, r3, #3
 8005170:	4413      	add	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	440b      	add	r3, r1
 8005176:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800517a:	2200      	movs	r2, #0
 800517c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800517e:	7bfa      	ldrb	r2, [r7, #15]
 8005180:	6879      	ldr	r1, [r7, #4]
 8005182:	4613      	mov	r3, r2
 8005184:	00db      	lsls	r3, r3, #3
 8005186:	4413      	add	r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	440b      	add	r3, r1
 800518c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005190:	2200      	movs	r2, #0
 8005192:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005194:	7bfb      	ldrb	r3, [r7, #15]
 8005196:	3301      	adds	r3, #1
 8005198:	73fb      	strb	r3, [r7, #15]
 800519a:	7bfa      	ldrb	r2, [r7, #15]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d3b5      	bcc.n	8005110 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	603b      	str	r3, [r7, #0]
 80051aa:	687e      	ldr	r6, [r7, #4]
 80051ac:	466d      	mov	r5, sp
 80051ae:	f106 0410 	add.w	r4, r6, #16
 80051b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80051be:	e885 0003 	stmia.w	r5, {r0, r1}
 80051c2:	1d33      	adds	r3, r6, #4
 80051c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051c6:	6838      	ldr	r0, [r7, #0]
 80051c8:	f003 ff68 	bl	800909c <USB_DevInit>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d005      	beq.n	80051de <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2202      	movs	r2, #2
 80051d6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e00d      	b.n	80051fa <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f004 f933 	bl	800945e <USB_DevDisconnect>

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005204 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e267      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d075      	beq.n	800530e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005222:	4b88      	ldr	r3, [pc, #544]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f003 030c 	and.w	r3, r3, #12
 800522a:	2b04      	cmp	r3, #4
 800522c:	d00c      	beq.n	8005248 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800522e:	4b85      	ldr	r3, [pc, #532]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005236:	2b08      	cmp	r3, #8
 8005238:	d112      	bne.n	8005260 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800523a:	4b82      	ldr	r3, [pc, #520]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005242:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005246:	d10b      	bne.n	8005260 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005248:	4b7e      	ldr	r3, [pc, #504]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d05b      	beq.n	800530c <HAL_RCC_OscConfig+0x108>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d157      	bne.n	800530c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e242      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005268:	d106      	bne.n	8005278 <HAL_RCC_OscConfig+0x74>
 800526a:	4b76      	ldr	r3, [pc, #472]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a75      	ldr	r2, [pc, #468]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005274:	6013      	str	r3, [r2, #0]
 8005276:	e01d      	b.n	80052b4 <HAL_RCC_OscConfig+0xb0>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005280:	d10c      	bne.n	800529c <HAL_RCC_OscConfig+0x98>
 8005282:	4b70      	ldr	r3, [pc, #448]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a6f      	ldr	r2, [pc, #444]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800528c:	6013      	str	r3, [r2, #0]
 800528e:	4b6d      	ldr	r3, [pc, #436]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a6c      	ldr	r2, [pc, #432]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005298:	6013      	str	r3, [r2, #0]
 800529a:	e00b      	b.n	80052b4 <HAL_RCC_OscConfig+0xb0>
 800529c:	4b69      	ldr	r3, [pc, #420]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a68      	ldr	r2, [pc, #416]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 80052a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052a6:	6013      	str	r3, [r2, #0]
 80052a8:	4b66      	ldr	r3, [pc, #408]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a65      	ldr	r2, [pc, #404]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 80052ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d013      	beq.n	80052e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052bc:	f7fe fae4 	bl	8003888 <HAL_GetTick>
 80052c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052c2:	e008      	b.n	80052d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052c4:	f7fe fae0 	bl	8003888 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b64      	cmp	r3, #100	; 0x64
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e207      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052d6:	4b5b      	ldr	r3, [pc, #364]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d0f0      	beq.n	80052c4 <HAL_RCC_OscConfig+0xc0>
 80052e2:	e014      	b.n	800530e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e4:	f7fe fad0 	bl	8003888 <HAL_GetTick>
 80052e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052ea:	e008      	b.n	80052fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052ec:	f7fe facc 	bl	8003888 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b64      	cmp	r3, #100	; 0x64
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e1f3      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052fe:	4b51      	ldr	r3, [pc, #324]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1f0      	bne.n	80052ec <HAL_RCC_OscConfig+0xe8>
 800530a:	e000      	b.n	800530e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800530c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d063      	beq.n	80053e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800531a:	4b4a      	ldr	r3, [pc, #296]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f003 030c 	and.w	r3, r3, #12
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00b      	beq.n	800533e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005326:	4b47      	ldr	r3, [pc, #284]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800532e:	2b08      	cmp	r3, #8
 8005330:	d11c      	bne.n	800536c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005332:	4b44      	ldr	r3, [pc, #272]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d116      	bne.n	800536c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800533e:	4b41      	ldr	r3, [pc, #260]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0302 	and.w	r3, r3, #2
 8005346:	2b00      	cmp	r3, #0
 8005348:	d005      	beq.n	8005356 <HAL_RCC_OscConfig+0x152>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d001      	beq.n	8005356 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e1c7      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005356:	4b3b      	ldr	r3, [pc, #236]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	4937      	ldr	r1, [pc, #220]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005366:	4313      	orrs	r3, r2
 8005368:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800536a:	e03a      	b.n	80053e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d020      	beq.n	80053b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005374:	4b34      	ldr	r3, [pc, #208]	; (8005448 <HAL_RCC_OscConfig+0x244>)
 8005376:	2201      	movs	r2, #1
 8005378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800537a:	f7fe fa85 	bl	8003888 <HAL_GetTick>
 800537e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005380:	e008      	b.n	8005394 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005382:	f7fe fa81 	bl	8003888 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	2b02      	cmp	r3, #2
 800538e:	d901      	bls.n	8005394 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e1a8      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005394:	4b2b      	ldr	r3, [pc, #172]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b00      	cmp	r3, #0
 800539e:	d0f0      	beq.n	8005382 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053a0:	4b28      	ldr	r3, [pc, #160]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	00db      	lsls	r3, r3, #3
 80053ae:	4925      	ldr	r1, [pc, #148]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	600b      	str	r3, [r1, #0]
 80053b4:	e015      	b.n	80053e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053b6:	4b24      	ldr	r3, [pc, #144]	; (8005448 <HAL_RCC_OscConfig+0x244>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053bc:	f7fe fa64 	bl	8003888 <HAL_GetTick>
 80053c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053c2:	e008      	b.n	80053d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053c4:	f7fe fa60 	bl	8003888 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e187      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053d6:	4b1b      	ldr	r3, [pc, #108]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1f0      	bne.n	80053c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0308 	and.w	r3, r3, #8
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d036      	beq.n	800545c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d016      	beq.n	8005424 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053f6:	4b15      	ldr	r3, [pc, #84]	; (800544c <HAL_RCC_OscConfig+0x248>)
 80053f8:	2201      	movs	r2, #1
 80053fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053fc:	f7fe fa44 	bl	8003888 <HAL_GetTick>
 8005400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005402:	e008      	b.n	8005416 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005404:	f7fe fa40 	bl	8003888 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b02      	cmp	r3, #2
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e167      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005416:	4b0b      	ldr	r3, [pc, #44]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	2b00      	cmp	r3, #0
 8005420:	d0f0      	beq.n	8005404 <HAL_RCC_OscConfig+0x200>
 8005422:	e01b      	b.n	800545c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005424:	4b09      	ldr	r3, [pc, #36]	; (800544c <HAL_RCC_OscConfig+0x248>)
 8005426:	2200      	movs	r2, #0
 8005428:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800542a:	f7fe fa2d 	bl	8003888 <HAL_GetTick>
 800542e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005430:	e00e      	b.n	8005450 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005432:	f7fe fa29 	bl	8003888 <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	2b02      	cmp	r3, #2
 800543e:	d907      	bls.n	8005450 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e150      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
 8005444:	40023800 	.word	0x40023800
 8005448:	42470000 	.word	0x42470000
 800544c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005450:	4b88      	ldr	r3, [pc, #544]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 8005452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005454:	f003 0302 	and.w	r3, r3, #2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1ea      	bne.n	8005432 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0304 	and.w	r3, r3, #4
 8005464:	2b00      	cmp	r3, #0
 8005466:	f000 8097 	beq.w	8005598 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800546a:	2300      	movs	r3, #0
 800546c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800546e:	4b81      	ldr	r3, [pc, #516]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 8005470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10f      	bne.n	800549a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800547a:	2300      	movs	r3, #0
 800547c:	60bb      	str	r3, [r7, #8]
 800547e:	4b7d      	ldr	r3, [pc, #500]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	4a7c      	ldr	r2, [pc, #496]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 8005484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005488:	6413      	str	r3, [r2, #64]	; 0x40
 800548a:	4b7a      	ldr	r3, [pc, #488]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 800548c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005492:	60bb      	str	r3, [r7, #8]
 8005494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005496:	2301      	movs	r3, #1
 8005498:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800549a:	4b77      	ldr	r3, [pc, #476]	; (8005678 <HAL_RCC_OscConfig+0x474>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d118      	bne.n	80054d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054a6:	4b74      	ldr	r3, [pc, #464]	; (8005678 <HAL_RCC_OscConfig+0x474>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a73      	ldr	r2, [pc, #460]	; (8005678 <HAL_RCC_OscConfig+0x474>)
 80054ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054b2:	f7fe f9e9 	bl	8003888 <HAL_GetTick>
 80054b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054b8:	e008      	b.n	80054cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054ba:	f7fe f9e5 	bl	8003888 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d901      	bls.n	80054cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e10c      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054cc:	4b6a      	ldr	r3, [pc, #424]	; (8005678 <HAL_RCC_OscConfig+0x474>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d0f0      	beq.n	80054ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d106      	bne.n	80054ee <HAL_RCC_OscConfig+0x2ea>
 80054e0:	4b64      	ldr	r3, [pc, #400]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 80054e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e4:	4a63      	ldr	r2, [pc, #396]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 80054e6:	f043 0301 	orr.w	r3, r3, #1
 80054ea:	6713      	str	r3, [r2, #112]	; 0x70
 80054ec:	e01c      	b.n	8005528 <HAL_RCC_OscConfig+0x324>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	2b05      	cmp	r3, #5
 80054f4:	d10c      	bne.n	8005510 <HAL_RCC_OscConfig+0x30c>
 80054f6:	4b5f      	ldr	r3, [pc, #380]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 80054f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054fa:	4a5e      	ldr	r2, [pc, #376]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 80054fc:	f043 0304 	orr.w	r3, r3, #4
 8005500:	6713      	str	r3, [r2, #112]	; 0x70
 8005502:	4b5c      	ldr	r3, [pc, #368]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 8005504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005506:	4a5b      	ldr	r2, [pc, #364]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 8005508:	f043 0301 	orr.w	r3, r3, #1
 800550c:	6713      	str	r3, [r2, #112]	; 0x70
 800550e:	e00b      	b.n	8005528 <HAL_RCC_OscConfig+0x324>
 8005510:	4b58      	ldr	r3, [pc, #352]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 8005512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005514:	4a57      	ldr	r2, [pc, #348]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 8005516:	f023 0301 	bic.w	r3, r3, #1
 800551a:	6713      	str	r3, [r2, #112]	; 0x70
 800551c:	4b55      	ldr	r3, [pc, #340]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 800551e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005520:	4a54      	ldr	r2, [pc, #336]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 8005522:	f023 0304 	bic.w	r3, r3, #4
 8005526:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d015      	beq.n	800555c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005530:	f7fe f9aa 	bl	8003888 <HAL_GetTick>
 8005534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005536:	e00a      	b.n	800554e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005538:	f7fe f9a6 	bl	8003888 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	f241 3288 	movw	r2, #5000	; 0x1388
 8005546:	4293      	cmp	r3, r2
 8005548:	d901      	bls.n	800554e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e0cb      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800554e:	4b49      	ldr	r3, [pc, #292]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 8005550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	2b00      	cmp	r3, #0
 8005558:	d0ee      	beq.n	8005538 <HAL_RCC_OscConfig+0x334>
 800555a:	e014      	b.n	8005586 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800555c:	f7fe f994 	bl	8003888 <HAL_GetTick>
 8005560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005562:	e00a      	b.n	800557a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005564:	f7fe f990 	bl	8003888 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005572:	4293      	cmp	r3, r2
 8005574:	d901      	bls.n	800557a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e0b5      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800557a:	4b3e      	ldr	r3, [pc, #248]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 800557c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800557e:	f003 0302 	and.w	r3, r3, #2
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1ee      	bne.n	8005564 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005586:	7dfb      	ldrb	r3, [r7, #23]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d105      	bne.n	8005598 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800558c:	4b39      	ldr	r3, [pc, #228]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 800558e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005590:	4a38      	ldr	r2, [pc, #224]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 8005592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005596:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	2b00      	cmp	r3, #0
 800559e:	f000 80a1 	beq.w	80056e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055a2:	4b34      	ldr	r3, [pc, #208]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f003 030c 	and.w	r3, r3, #12
 80055aa:	2b08      	cmp	r3, #8
 80055ac:	d05c      	beq.n	8005668 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d141      	bne.n	800563a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055b6:	4b31      	ldr	r3, [pc, #196]	; (800567c <HAL_RCC_OscConfig+0x478>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055bc:	f7fe f964 	bl	8003888 <HAL_GetTick>
 80055c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055c2:	e008      	b.n	80055d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055c4:	f7fe f960 	bl	8003888 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e087      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055d6:	4b27      	ldr	r3, [pc, #156]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1f0      	bne.n	80055c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	69da      	ldr	r2, [r3, #28]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	431a      	orrs	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f0:	019b      	lsls	r3, r3, #6
 80055f2:	431a      	orrs	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f8:	085b      	lsrs	r3, r3, #1
 80055fa:	3b01      	subs	r3, #1
 80055fc:	041b      	lsls	r3, r3, #16
 80055fe:	431a      	orrs	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005604:	061b      	lsls	r3, r3, #24
 8005606:	491b      	ldr	r1, [pc, #108]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 8005608:	4313      	orrs	r3, r2
 800560a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800560c:	4b1b      	ldr	r3, [pc, #108]	; (800567c <HAL_RCC_OscConfig+0x478>)
 800560e:	2201      	movs	r2, #1
 8005610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005612:	f7fe f939 	bl	8003888 <HAL_GetTick>
 8005616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005618:	e008      	b.n	800562c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800561a:	f7fe f935 	bl	8003888 <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	2b02      	cmp	r3, #2
 8005626:	d901      	bls.n	800562c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005628:	2303      	movs	r3, #3
 800562a:	e05c      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800562c:	4b11      	ldr	r3, [pc, #68]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d0f0      	beq.n	800561a <HAL_RCC_OscConfig+0x416>
 8005638:	e054      	b.n	80056e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800563a:	4b10      	ldr	r3, [pc, #64]	; (800567c <HAL_RCC_OscConfig+0x478>)
 800563c:	2200      	movs	r2, #0
 800563e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005640:	f7fe f922 	bl	8003888 <HAL_GetTick>
 8005644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005646:	e008      	b.n	800565a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005648:	f7fe f91e 	bl	8003888 <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	2b02      	cmp	r3, #2
 8005654:	d901      	bls.n	800565a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e045      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800565a:	4b06      	ldr	r3, [pc, #24]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1f0      	bne.n	8005648 <HAL_RCC_OscConfig+0x444>
 8005666:	e03d      	b.n	80056e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d107      	bne.n	8005680 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e038      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
 8005674:	40023800 	.word	0x40023800
 8005678:	40007000 	.word	0x40007000
 800567c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005680:	4b1b      	ldr	r3, [pc, #108]	; (80056f0 <HAL_RCC_OscConfig+0x4ec>)
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d028      	beq.n	80056e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005698:	429a      	cmp	r2, r3
 800569a:	d121      	bne.n	80056e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d11a      	bne.n	80056e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80056b0:	4013      	ands	r3, r2
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d111      	bne.n	80056e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c6:	085b      	lsrs	r3, r3, #1
 80056c8:	3b01      	subs	r3, #1
 80056ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d107      	bne.n	80056e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056dc:	429a      	cmp	r2, r3
 80056de:	d001      	beq.n	80056e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e000      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3718      	adds	r7, #24
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	40023800 	.word	0x40023800

080056f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e0cc      	b.n	80058a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005708:	4b68      	ldr	r3, [pc, #416]	; (80058ac <HAL_RCC_ClockConfig+0x1b8>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 030f 	and.w	r3, r3, #15
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	429a      	cmp	r2, r3
 8005714:	d90c      	bls.n	8005730 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005716:	4b65      	ldr	r3, [pc, #404]	; (80058ac <HAL_RCC_ClockConfig+0x1b8>)
 8005718:	683a      	ldr	r2, [r7, #0]
 800571a:	b2d2      	uxtb	r2, r2
 800571c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800571e:	4b63      	ldr	r3, [pc, #396]	; (80058ac <HAL_RCC_ClockConfig+0x1b8>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 030f 	and.w	r3, r3, #15
 8005726:	683a      	ldr	r2, [r7, #0]
 8005728:	429a      	cmp	r2, r3
 800572a:	d001      	beq.n	8005730 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e0b8      	b.n	80058a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0302 	and.w	r3, r3, #2
 8005738:	2b00      	cmp	r3, #0
 800573a:	d020      	beq.n	800577e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0304 	and.w	r3, r3, #4
 8005744:	2b00      	cmp	r3, #0
 8005746:	d005      	beq.n	8005754 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005748:	4b59      	ldr	r3, [pc, #356]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	4a58      	ldr	r2, [pc, #352]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 800574e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005752:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0308 	and.w	r3, r3, #8
 800575c:	2b00      	cmp	r3, #0
 800575e:	d005      	beq.n	800576c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005760:	4b53      	ldr	r3, [pc, #332]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	4a52      	ldr	r2, [pc, #328]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005766:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800576a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800576c:	4b50      	ldr	r3, [pc, #320]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	494d      	ldr	r1, [pc, #308]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 800577a:	4313      	orrs	r3, r2
 800577c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	2b00      	cmp	r3, #0
 8005788:	d044      	beq.n	8005814 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d107      	bne.n	80057a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005792:	4b47      	ldr	r3, [pc, #284]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d119      	bne.n	80057d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e07f      	b.n	80058a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d003      	beq.n	80057b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057ae:	2b03      	cmp	r3, #3
 80057b0:	d107      	bne.n	80057c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057b2:	4b3f      	ldr	r3, [pc, #252]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d109      	bne.n	80057d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e06f      	b.n	80058a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057c2:	4b3b      	ldr	r3, [pc, #236]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e067      	b.n	80058a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057d2:	4b37      	ldr	r3, [pc, #220]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f023 0203 	bic.w	r2, r3, #3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	4934      	ldr	r1, [pc, #208]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057e4:	f7fe f850 	bl	8003888 <HAL_GetTick>
 80057e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ea:	e00a      	b.n	8005802 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057ec:	f7fe f84c 	bl	8003888 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e04f      	b.n	80058a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005802:	4b2b      	ldr	r3, [pc, #172]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f003 020c 	and.w	r2, r3, #12
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	429a      	cmp	r2, r3
 8005812:	d1eb      	bne.n	80057ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005814:	4b25      	ldr	r3, [pc, #148]	; (80058ac <HAL_RCC_ClockConfig+0x1b8>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 030f 	and.w	r3, r3, #15
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	429a      	cmp	r2, r3
 8005820:	d20c      	bcs.n	800583c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005822:	4b22      	ldr	r3, [pc, #136]	; (80058ac <HAL_RCC_ClockConfig+0x1b8>)
 8005824:	683a      	ldr	r2, [r7, #0]
 8005826:	b2d2      	uxtb	r2, r2
 8005828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800582a:	4b20      	ldr	r3, [pc, #128]	; (80058ac <HAL_RCC_ClockConfig+0x1b8>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 030f 	and.w	r3, r3, #15
 8005832:	683a      	ldr	r2, [r7, #0]
 8005834:	429a      	cmp	r2, r3
 8005836:	d001      	beq.n	800583c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e032      	b.n	80058a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0304 	and.w	r3, r3, #4
 8005844:	2b00      	cmp	r3, #0
 8005846:	d008      	beq.n	800585a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005848:	4b19      	ldr	r3, [pc, #100]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	4916      	ldr	r1, [pc, #88]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005856:	4313      	orrs	r3, r2
 8005858:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0308 	and.w	r3, r3, #8
 8005862:	2b00      	cmp	r3, #0
 8005864:	d009      	beq.n	800587a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005866:	4b12      	ldr	r3, [pc, #72]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	00db      	lsls	r3, r3, #3
 8005874:	490e      	ldr	r1, [pc, #56]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005876:	4313      	orrs	r3, r2
 8005878:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800587a:	f000 f821 	bl	80058c0 <HAL_RCC_GetSysClockFreq>
 800587e:	4602      	mov	r2, r0
 8005880:	4b0b      	ldr	r3, [pc, #44]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	091b      	lsrs	r3, r3, #4
 8005886:	f003 030f 	and.w	r3, r3, #15
 800588a:	490a      	ldr	r1, [pc, #40]	; (80058b4 <HAL_RCC_ClockConfig+0x1c0>)
 800588c:	5ccb      	ldrb	r3, [r1, r3]
 800588e:	fa22 f303 	lsr.w	r3, r2, r3
 8005892:	4a09      	ldr	r2, [pc, #36]	; (80058b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005896:	4b09      	ldr	r3, [pc, #36]	; (80058bc <HAL_RCC_ClockConfig+0x1c8>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4618      	mov	r0, r3
 800589c:	f7fd ffb0 	bl	8003800 <HAL_InitTick>

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	40023c00 	.word	0x40023c00
 80058b0:	40023800 	.word	0x40023800
 80058b4:	0800ac84 	.word	0x0800ac84
 80058b8:	20000040 	.word	0x20000040
 80058bc:	20000048 	.word	0x20000048

080058c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058c4:	b094      	sub	sp, #80	; 0x50
 80058c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80058c8:	2300      	movs	r3, #0
 80058ca:	647b      	str	r3, [r7, #68]	; 0x44
 80058cc:	2300      	movs	r3, #0
 80058ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058d0:	2300      	movs	r3, #0
 80058d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80058d4:	2300      	movs	r3, #0
 80058d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058d8:	4b79      	ldr	r3, [pc, #484]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f003 030c 	and.w	r3, r3, #12
 80058e0:	2b08      	cmp	r3, #8
 80058e2:	d00d      	beq.n	8005900 <HAL_RCC_GetSysClockFreq+0x40>
 80058e4:	2b08      	cmp	r3, #8
 80058e6:	f200 80e1 	bhi.w	8005aac <HAL_RCC_GetSysClockFreq+0x1ec>
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d002      	beq.n	80058f4 <HAL_RCC_GetSysClockFreq+0x34>
 80058ee:	2b04      	cmp	r3, #4
 80058f0:	d003      	beq.n	80058fa <HAL_RCC_GetSysClockFreq+0x3a>
 80058f2:	e0db      	b.n	8005aac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058f4:	4b73      	ldr	r3, [pc, #460]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x204>)
 80058f6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80058f8:	e0db      	b.n	8005ab2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058fa:	4b73      	ldr	r3, [pc, #460]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0x208>)
 80058fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80058fe:	e0d8      	b.n	8005ab2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005900:	4b6f      	ldr	r3, [pc, #444]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005908:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800590a:	4b6d      	ldr	r3, [pc, #436]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d063      	beq.n	80059de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005916:	4b6a      	ldr	r3, [pc, #424]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	099b      	lsrs	r3, r3, #6
 800591c:	2200      	movs	r2, #0
 800591e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005920:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005928:	633b      	str	r3, [r7, #48]	; 0x30
 800592a:	2300      	movs	r3, #0
 800592c:	637b      	str	r3, [r7, #52]	; 0x34
 800592e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005932:	4622      	mov	r2, r4
 8005934:	462b      	mov	r3, r5
 8005936:	f04f 0000 	mov.w	r0, #0
 800593a:	f04f 0100 	mov.w	r1, #0
 800593e:	0159      	lsls	r1, r3, #5
 8005940:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005944:	0150      	lsls	r0, r2, #5
 8005946:	4602      	mov	r2, r0
 8005948:	460b      	mov	r3, r1
 800594a:	4621      	mov	r1, r4
 800594c:	1a51      	subs	r1, r2, r1
 800594e:	6139      	str	r1, [r7, #16]
 8005950:	4629      	mov	r1, r5
 8005952:	eb63 0301 	sbc.w	r3, r3, r1
 8005956:	617b      	str	r3, [r7, #20]
 8005958:	f04f 0200 	mov.w	r2, #0
 800595c:	f04f 0300 	mov.w	r3, #0
 8005960:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005964:	4659      	mov	r1, fp
 8005966:	018b      	lsls	r3, r1, #6
 8005968:	4651      	mov	r1, sl
 800596a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800596e:	4651      	mov	r1, sl
 8005970:	018a      	lsls	r2, r1, #6
 8005972:	4651      	mov	r1, sl
 8005974:	ebb2 0801 	subs.w	r8, r2, r1
 8005978:	4659      	mov	r1, fp
 800597a:	eb63 0901 	sbc.w	r9, r3, r1
 800597e:	f04f 0200 	mov.w	r2, #0
 8005982:	f04f 0300 	mov.w	r3, #0
 8005986:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800598a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800598e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005992:	4690      	mov	r8, r2
 8005994:	4699      	mov	r9, r3
 8005996:	4623      	mov	r3, r4
 8005998:	eb18 0303 	adds.w	r3, r8, r3
 800599c:	60bb      	str	r3, [r7, #8]
 800599e:	462b      	mov	r3, r5
 80059a0:	eb49 0303 	adc.w	r3, r9, r3
 80059a4:	60fb      	str	r3, [r7, #12]
 80059a6:	f04f 0200 	mov.w	r2, #0
 80059aa:	f04f 0300 	mov.w	r3, #0
 80059ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80059b2:	4629      	mov	r1, r5
 80059b4:	024b      	lsls	r3, r1, #9
 80059b6:	4621      	mov	r1, r4
 80059b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80059bc:	4621      	mov	r1, r4
 80059be:	024a      	lsls	r2, r1, #9
 80059c0:	4610      	mov	r0, r2
 80059c2:	4619      	mov	r1, r3
 80059c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059c6:	2200      	movs	r2, #0
 80059c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80059ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80059d0:	f7fb f854 	bl	8000a7c <__aeabi_uldivmod>
 80059d4:	4602      	mov	r2, r0
 80059d6:	460b      	mov	r3, r1
 80059d8:	4613      	mov	r3, r2
 80059da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059dc:	e058      	b.n	8005a90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059de:	4b38      	ldr	r3, [pc, #224]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	099b      	lsrs	r3, r3, #6
 80059e4:	2200      	movs	r2, #0
 80059e6:	4618      	mov	r0, r3
 80059e8:	4611      	mov	r1, r2
 80059ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80059ee:	623b      	str	r3, [r7, #32]
 80059f0:	2300      	movs	r3, #0
 80059f2:	627b      	str	r3, [r7, #36]	; 0x24
 80059f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80059f8:	4642      	mov	r2, r8
 80059fa:	464b      	mov	r3, r9
 80059fc:	f04f 0000 	mov.w	r0, #0
 8005a00:	f04f 0100 	mov.w	r1, #0
 8005a04:	0159      	lsls	r1, r3, #5
 8005a06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a0a:	0150      	lsls	r0, r2, #5
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	460b      	mov	r3, r1
 8005a10:	4641      	mov	r1, r8
 8005a12:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a16:	4649      	mov	r1, r9
 8005a18:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a1c:	f04f 0200 	mov.w	r2, #0
 8005a20:	f04f 0300 	mov.w	r3, #0
 8005a24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a30:	ebb2 040a 	subs.w	r4, r2, sl
 8005a34:	eb63 050b 	sbc.w	r5, r3, fp
 8005a38:	f04f 0200 	mov.w	r2, #0
 8005a3c:	f04f 0300 	mov.w	r3, #0
 8005a40:	00eb      	lsls	r3, r5, #3
 8005a42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a46:	00e2      	lsls	r2, r4, #3
 8005a48:	4614      	mov	r4, r2
 8005a4a:	461d      	mov	r5, r3
 8005a4c:	4643      	mov	r3, r8
 8005a4e:	18e3      	adds	r3, r4, r3
 8005a50:	603b      	str	r3, [r7, #0]
 8005a52:	464b      	mov	r3, r9
 8005a54:	eb45 0303 	adc.w	r3, r5, r3
 8005a58:	607b      	str	r3, [r7, #4]
 8005a5a:	f04f 0200 	mov.w	r2, #0
 8005a5e:	f04f 0300 	mov.w	r3, #0
 8005a62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a66:	4629      	mov	r1, r5
 8005a68:	028b      	lsls	r3, r1, #10
 8005a6a:	4621      	mov	r1, r4
 8005a6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a70:	4621      	mov	r1, r4
 8005a72:	028a      	lsls	r2, r1, #10
 8005a74:	4610      	mov	r0, r2
 8005a76:	4619      	mov	r1, r3
 8005a78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	61bb      	str	r3, [r7, #24]
 8005a7e:	61fa      	str	r2, [r7, #28]
 8005a80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a84:	f7fa fffa 	bl	8000a7c <__aeabi_uldivmod>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a90:	4b0b      	ldr	r3, [pc, #44]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	0c1b      	lsrs	r3, r3, #16
 8005a96:	f003 0303 	and.w	r3, r3, #3
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	005b      	lsls	r3, r3, #1
 8005a9e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005aa0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005aa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005aaa:	e002      	b.n	8005ab2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005aac:	4b05      	ldr	r3, [pc, #20]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005aae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ab0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3750      	adds	r7, #80	; 0x50
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005abe:	bf00      	nop
 8005ac0:	40023800 	.word	0x40023800
 8005ac4:	00f42400 	.word	0x00f42400
 8005ac8:	007a1200 	.word	0x007a1200

08005acc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005acc:	b480      	push	{r7}
 8005ace:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ad0:	4b03      	ldr	r3, [pc, #12]	; (8005ae0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	20000040 	.word	0x20000040

08005ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ae8:	f7ff fff0 	bl	8005acc <HAL_RCC_GetHCLKFreq>
 8005aec:	4602      	mov	r2, r0
 8005aee:	4b05      	ldr	r3, [pc, #20]	; (8005b04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	0a9b      	lsrs	r3, r3, #10
 8005af4:	f003 0307 	and.w	r3, r3, #7
 8005af8:	4903      	ldr	r1, [pc, #12]	; (8005b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005afa:	5ccb      	ldrb	r3, [r1, r3]
 8005afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	40023800 	.word	0x40023800
 8005b08:	0800ac94 	.word	0x0800ac94

08005b0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b10:	f7ff ffdc 	bl	8005acc <HAL_RCC_GetHCLKFreq>
 8005b14:	4602      	mov	r2, r0
 8005b16:	4b05      	ldr	r3, [pc, #20]	; (8005b2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	0b5b      	lsrs	r3, r3, #13
 8005b1c:	f003 0307 	and.w	r3, r3, #7
 8005b20:	4903      	ldr	r1, [pc, #12]	; (8005b30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b22:	5ccb      	ldrb	r3, [r1, r3]
 8005b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	40023800 	.word	0x40023800
 8005b30:	0800ac94 	.word	0x0800ac94

08005b34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b086      	sub	sp, #24
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0301 	and.w	r3, r3, #1
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10b      	bne.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d105      	bne.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d075      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005b68:	4b91      	ldr	r3, [pc, #580]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b6e:	f7fd fe8b 	bl	8003888 <HAL_GetTick>
 8005b72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b74:	e008      	b.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005b76:	f7fd fe87 	bl	8003888 <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d901      	bls.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e189      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b88:	4b8a      	ldr	r3, [pc, #552]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1f0      	bne.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0301 	and.w	r3, r3, #1
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d009      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	019a      	lsls	r2, r3, #6
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	071b      	lsls	r3, r3, #28
 8005bac:	4981      	ldr	r1, [pc, #516]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0302 	and.w	r3, r3, #2
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d01f      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005bc0:	4b7c      	ldr	r3, [pc, #496]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bc6:	0f1b      	lsrs	r3, r3, #28
 8005bc8:	f003 0307 	and.w	r3, r3, #7
 8005bcc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	019a      	lsls	r2, r3, #6
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	061b      	lsls	r3, r3, #24
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	071b      	lsls	r3, r3, #28
 8005be0:	4974      	ldr	r1, [pc, #464]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005be8:	4b72      	ldr	r3, [pc, #456]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bee:	f023 021f 	bic.w	r2, r3, #31
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	496e      	ldr	r1, [pc, #440]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00d      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	019a      	lsls	r2, r3, #6
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	061b      	lsls	r3, r3, #24
 8005c18:	431a      	orrs	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	071b      	lsls	r3, r3, #28
 8005c20:	4964      	ldr	r1, [pc, #400]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005c28:	4b61      	ldr	r3, [pc, #388]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c2e:	f7fd fe2b 	bl	8003888 <HAL_GetTick>
 8005c32:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c34:	e008      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005c36:	f7fd fe27 	bl	8003888 <HAL_GetTick>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d901      	bls.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e129      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c48:	4b5a      	ldr	r3, [pc, #360]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d0f0      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0304 	and.w	r3, r3, #4
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d105      	bne.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d079      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005c6c:	4b52      	ldr	r3, [pc, #328]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005c6e:	2200      	movs	r2, #0
 8005c70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c72:	f7fd fe09 	bl	8003888 <HAL_GetTick>
 8005c76:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c78:	e008      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005c7a:	f7fd fe05 	bl	8003888 <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d901      	bls.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e107      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c8c:	4b49      	ldr	r3, [pc, #292]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c98:	d0ef      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0304 	and.w	r3, r3, #4
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d020      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ca6:	4b43      	ldr	r3, [pc, #268]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cac:	0f1b      	lsrs	r3, r3, #28
 8005cae:	f003 0307 	and.w	r3, r3, #7
 8005cb2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	019a      	lsls	r2, r3, #6
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	061b      	lsls	r3, r3, #24
 8005cc0:	431a      	orrs	r2, r3
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	071b      	lsls	r3, r3, #28
 8005cc6:	493b      	ldr	r1, [pc, #236]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005cce:	4b39      	ldr	r3, [pc, #228]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cd4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a1b      	ldr	r3, [r3, #32]
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	021b      	lsls	r3, r3, #8
 8005ce0:	4934      	ldr	r1, [pc, #208]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0308 	and.w	r3, r3, #8
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d01e      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005cf4:	4b2f      	ldr	r3, [pc, #188]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cfa:	0e1b      	lsrs	r3, r3, #24
 8005cfc:	f003 030f 	and.w	r3, r3, #15
 8005d00:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	019a      	lsls	r2, r3, #6
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	061b      	lsls	r3, r3, #24
 8005d0c:	431a      	orrs	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	071b      	lsls	r3, r3, #28
 8005d14:	4927      	ldr	r1, [pc, #156]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005d1c:	4b25      	ldr	r3, [pc, #148]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d22:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2a:	4922      	ldr	r1, [pc, #136]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005d32:	4b21      	ldr	r3, [pc, #132]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005d34:	2201      	movs	r2, #1
 8005d36:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d38:	f7fd fda6 	bl	8003888 <HAL_GetTick>
 8005d3c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d3e:	e008      	b.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005d40:	f7fd fda2 	bl	8003888 <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d901      	bls.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e0a4      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d52:	4b18      	ldr	r3, [pc, #96]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d5e:	d1ef      	bne.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0320 	and.w	r3, r3, #32
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 808b 	beq.w	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d6e:	2300      	movs	r3, #0
 8005d70:	60fb      	str	r3, [r7, #12]
 8005d72:	4b10      	ldr	r3, [pc, #64]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d76:	4a0f      	ldr	r2, [pc, #60]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8005d7e:	4b0d      	ldr	r3, [pc, #52]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d86:	60fb      	str	r3, [r7, #12]
 8005d88:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d8a:	4b0c      	ldr	r3, [pc, #48]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a0b      	ldr	r2, [pc, #44]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d94:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d96:	f7fd fd77 	bl	8003888 <HAL_GetTick>
 8005d9a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d9c:	e010      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005d9e:	f7fd fd73 	bl	8003888 <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d909      	bls.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e075      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005db0:	42470068 	.word	0x42470068
 8005db4:	40023800 	.word	0x40023800
 8005db8:	42470070 	.word	0x42470070
 8005dbc:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005dc0:	4b38      	ldr	r3, [pc, #224]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d0e8      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005dcc:	4b36      	ldr	r3, [pc, #216]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dd4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d02f      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d028      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005dea:	4b2f      	ldr	r3, [pc, #188]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005df2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005df4:	4b2d      	ldr	r3, [pc, #180]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005df6:	2201      	movs	r2, #1
 8005df8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005dfa:	4b2c      	ldr	r3, [pc, #176]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005e00:	4a29      	ldr	r2, [pc, #164]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005e06:	4b28      	ldr	r3, [pc, #160]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d114      	bne.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005e12:	f7fd fd39 	bl	8003888 <HAL_GetTick>
 8005e16:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e18:	e00a      	b.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e1a:	f7fd fd35 	bl	8003888 <HAL_GetTick>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d901      	bls.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e035      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e30:	4b1d      	ldr	r3, [pc, #116]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e34:	f003 0302 	and.w	r3, r3, #2
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d0ee      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e48:	d10d      	bne.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005e4a:	4b17      	ldr	r3, [pc, #92]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e56:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e5e:	4912      	ldr	r1, [pc, #72]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e60:	4313      	orrs	r3, r2
 8005e62:	608b      	str	r3, [r1, #8]
 8005e64:	e005      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005e66:	4b10      	ldr	r3, [pc, #64]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	4a0f      	ldr	r2, [pc, #60]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e6c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005e70:	6093      	str	r3, [r2, #8]
 8005e72:	4b0d      	ldr	r3, [pc, #52]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e7e:	490a      	ldr	r1, [pc, #40]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e80:	4313      	orrs	r3, r2
 8005e82:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0310 	and.w	r3, r3, #16
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d004      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005e96:	4b06      	ldr	r3, [pc, #24]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005e98:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3718      	adds	r7, #24
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	40007000 	.word	0x40007000
 8005ea8:	40023800 	.word	0x40023800
 8005eac:	42470e40 	.word	0x42470e40
 8005eb0:	424711e0 	.word	0x424711e0

08005eb4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e066      	b.n	8005f98 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	7f5b      	ldrb	r3, [r3, #29]
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d105      	bne.n	8005ee0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f7fc fd12 	bl	8002904 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	22ca      	movs	r2, #202	; 0xca
 8005eec:	625a      	str	r2, [r3, #36]	; 0x24
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2253      	movs	r2, #83	; 0x53
 8005ef4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 fa45 	bl	8006386 <RTC_EnterInitMode>
 8005efc:	4603      	mov	r3, r0
 8005efe:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005f00:	7bfb      	ldrb	r3, [r7, #15]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d12c      	bne.n	8005f60 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	6812      	ldr	r2, [r2, #0]
 8005f10:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005f14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f18:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	6899      	ldr	r1, [r3, #8]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685a      	ldr	r2, [r3, #4]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	431a      	orrs	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	431a      	orrs	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	430a      	orrs	r2, r1
 8005f36:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	68d2      	ldr	r2, [r2, #12]
 8005f40:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	6919      	ldr	r1, [r3, #16]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	041a      	lsls	r2, r3, #16
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 fa4c 	bl	80063f4 <RTC_ExitInitMode>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005f60:	7bfb      	ldrb	r3, [r7, #15]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d113      	bne.n	8005f8e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005f74:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	699a      	ldr	r2, [r3, #24]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	430a      	orrs	r2, r1
 8005f86:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	22ff      	movs	r2, #255	; 0xff
 8005f94:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3710      	adds	r7, #16
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005fa0:	b590      	push	{r4, r7, lr}
 8005fa2:	b087      	sub	sp, #28
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005fac:	2300      	movs	r3, #0
 8005fae:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	7f1b      	ldrb	r3, [r3, #28]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d101      	bne.n	8005fbc <HAL_RTC_SetTime+0x1c>
 8005fb8:	2302      	movs	r3, #2
 8005fba:	e087      	b.n	80060cc <HAL_RTC_SetTime+0x12c>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2202      	movs	r2, #2
 8005fc6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d126      	bne.n	800601c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d102      	bne.n	8005fe2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 fa29 	bl	800643e <RTC_ByteToBcd2>
 8005fec:	4603      	mov	r3, r0
 8005fee:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	785b      	ldrb	r3, [r3, #1]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f000 fa22 	bl	800643e <RTC_ByteToBcd2>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005ffe:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	789b      	ldrb	r3, [r3, #2]
 8006004:	4618      	mov	r0, r3
 8006006:	f000 fa1a 	bl	800643e <RTC_ByteToBcd2>
 800600a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800600c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	78db      	ldrb	r3, [r3, #3]
 8006014:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006016:	4313      	orrs	r3, r2
 8006018:	617b      	str	r3, [r7, #20]
 800601a:	e018      	b.n	800604e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006026:	2b00      	cmp	r3, #0
 8006028:	d102      	bne.n	8006030 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	2200      	movs	r2, #0
 800602e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	785b      	ldrb	r3, [r3, #1]
 800603a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800603c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800603e:	68ba      	ldr	r2, [r7, #8]
 8006040:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006042:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	78db      	ldrb	r3, [r3, #3]
 8006048:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800604a:	4313      	orrs	r3, r2
 800604c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	22ca      	movs	r2, #202	; 0xca
 8006054:	625a      	str	r2, [r3, #36]	; 0x24
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2253      	movs	r2, #83	; 0x53
 800605c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f000 f991 	bl	8006386 <RTC_EnterInitMode>
 8006064:	4603      	mov	r3, r0
 8006066:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006068:	7cfb      	ldrb	r3, [r7, #19]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d120      	bne.n	80060b0 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006078:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800607c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	689a      	ldr	r2, [r3, #8]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800608c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6899      	ldr	r1, [r3, #8]
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	68da      	ldr	r2, [r3, #12]
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	431a      	orrs	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	430a      	orrs	r2, r1
 80060a4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f000 f9a4 	bl	80063f4 <RTC_ExitInitMode>
 80060ac:	4603      	mov	r3, r0
 80060ae:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80060b0:	7cfb      	ldrb	r3, [r7, #19]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d102      	bne.n	80060bc <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2201      	movs	r2, #1
 80060ba:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	22ff      	movs	r2, #255	; 0xff
 80060c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2200      	movs	r2, #0
 80060c8:	771a      	strb	r2, [r3, #28]

  return status;
 80060ca:	7cfb      	ldrb	r3, [r7, #19]
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	371c      	adds	r7, #28
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd90      	pop	{r4, r7, pc}

080060d4 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80060e0:	2300      	movs	r3, #0
 80060e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006106:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800610a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	0c1b      	lsrs	r3, r3, #16
 8006110:	b2db      	uxtb	r3, r3
 8006112:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006116:	b2da      	uxtb	r2, r3
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	0a1b      	lsrs	r3, r3, #8
 8006120:	b2db      	uxtb	r3, r3
 8006122:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006126:	b2da      	uxtb	r2, r3
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	b2db      	uxtb	r3, r3
 8006130:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006134:	b2da      	uxtb	r2, r3
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	0d9b      	lsrs	r3, r3, #22
 800613e:	b2db      	uxtb	r3, r3
 8006140:	f003 0301 	and.w	r3, r3, #1
 8006144:	b2da      	uxtb	r2, r3
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d11a      	bne.n	8006186 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	4618      	mov	r0, r3
 8006156:	f000 f98f 	bl	8006478 <RTC_Bcd2ToByte>
 800615a:	4603      	mov	r3, r0
 800615c:	461a      	mov	r2, r3
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	785b      	ldrb	r3, [r3, #1]
 8006166:	4618      	mov	r0, r3
 8006168:	f000 f986 	bl	8006478 <RTC_Bcd2ToByte>
 800616c:	4603      	mov	r3, r0
 800616e:	461a      	mov	r2, r3
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	789b      	ldrb	r3, [r3, #2]
 8006178:	4618      	mov	r0, r3
 800617a:	f000 f97d 	bl	8006478 <RTC_Bcd2ToByte>
 800617e:	4603      	mov	r3, r0
 8006180:	461a      	mov	r2, r3
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3718      	adds	r7, #24
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006190:	b590      	push	{r4, r7, lr}
 8006192:	b087      	sub	sp, #28
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800619c:	2300      	movs	r3, #0
 800619e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	7f1b      	ldrb	r3, [r3, #28]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d101      	bne.n	80061ac <HAL_RTC_SetDate+0x1c>
 80061a8:	2302      	movs	r3, #2
 80061aa:	e071      	b.n	8006290 <HAL_RTC_SetDate+0x100>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2201      	movs	r2, #1
 80061b0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2202      	movs	r2, #2
 80061b6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10e      	bne.n	80061dc <HAL_RTC_SetDate+0x4c>
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	785b      	ldrb	r3, [r3, #1]
 80061c2:	f003 0310 	and.w	r3, r3, #16
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d008      	beq.n	80061dc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	785b      	ldrb	r3, [r3, #1]
 80061ce:	f023 0310 	bic.w	r3, r3, #16
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	330a      	adds	r3, #10
 80061d6:	b2da      	uxtb	r2, r3
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d11c      	bne.n	800621c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	78db      	ldrb	r3, [r3, #3]
 80061e6:	4618      	mov	r0, r3
 80061e8:	f000 f929 	bl	800643e <RTC_ByteToBcd2>
 80061ec:	4603      	mov	r3, r0
 80061ee:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	785b      	ldrb	r3, [r3, #1]
 80061f4:	4618      	mov	r0, r3
 80061f6:	f000 f922 	bl	800643e <RTC_ByteToBcd2>
 80061fa:	4603      	mov	r3, r0
 80061fc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80061fe:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	789b      	ldrb	r3, [r3, #2]
 8006204:	4618      	mov	r0, r3
 8006206:	f000 f91a 	bl	800643e <RTC_ByteToBcd2>
 800620a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800620c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006216:	4313      	orrs	r3, r2
 8006218:	617b      	str	r3, [r7, #20]
 800621a:	e00e      	b.n	800623a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	78db      	ldrb	r3, [r3, #3]
 8006220:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	785b      	ldrb	r3, [r3, #1]
 8006226:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006228:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800622e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006236:	4313      	orrs	r3, r2
 8006238:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	22ca      	movs	r2, #202	; 0xca
 8006240:	625a      	str	r2, [r3, #36]	; 0x24
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2253      	movs	r2, #83	; 0x53
 8006248:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	f000 f89b 	bl	8006386 <RTC_EnterInitMode>
 8006250:	4603      	mov	r3, r0
 8006252:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006254:	7cfb      	ldrb	r3, [r7, #19]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d10c      	bne.n	8006274 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006264:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006268:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f000 f8c2 	bl	80063f4 <RTC_ExitInitMode>
 8006270:	4603      	mov	r3, r0
 8006272:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006274:	7cfb      	ldrb	r3, [r7, #19]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d102      	bne.n	8006280 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2201      	movs	r2, #1
 800627e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	22ff      	movs	r2, #255	; 0xff
 8006286:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	771a      	strb	r2, [r3, #28]

  return status;
 800628e:	7cfb      	ldrb	r3, [r7, #19]
}
 8006290:	4618      	mov	r0, r3
 8006292:	371c      	adds	r7, #28
 8006294:	46bd      	mov	sp, r7
 8006296:	bd90      	pop	{r4, r7, pc}

08006298 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b086      	sub	sp, #24
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80062a4:	2300      	movs	r3, #0
 80062a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80062b2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80062b6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	0c1b      	lsrs	r3, r3, #16
 80062bc:	b2da      	uxtb	r2, r3
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	0a1b      	lsrs	r3, r3, #8
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	f003 031f 	and.w	r3, r3, #31
 80062cc:	b2da      	uxtb	r2, r3
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062da:	b2da      	uxtb	r2, r3
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	0b5b      	lsrs	r3, r3, #13
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	f003 0307 	and.w	r3, r3, #7
 80062ea:	b2da      	uxtb	r2, r3
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d11a      	bne.n	800632c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	78db      	ldrb	r3, [r3, #3]
 80062fa:	4618      	mov	r0, r3
 80062fc:	f000 f8bc 	bl	8006478 <RTC_Bcd2ToByte>
 8006300:	4603      	mov	r3, r0
 8006302:	461a      	mov	r2, r3
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	785b      	ldrb	r3, [r3, #1]
 800630c:	4618      	mov	r0, r3
 800630e:	f000 f8b3 	bl	8006478 <RTC_Bcd2ToByte>
 8006312:	4603      	mov	r3, r0
 8006314:	461a      	mov	r2, r3
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	789b      	ldrb	r3, [r3, #2]
 800631e:	4618      	mov	r0, r3
 8006320:	f000 f8aa 	bl	8006478 <RTC_Bcd2ToByte>
 8006324:	4603      	mov	r3, r0
 8006326:	461a      	mov	r2, r3
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3718      	adds	r7, #24
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b084      	sub	sp, #16
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800633e:	2300      	movs	r3, #0
 8006340:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68da      	ldr	r2, [r3, #12]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006350:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006352:	f7fd fa99 	bl	8003888 <HAL_GetTick>
 8006356:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006358:	e009      	b.n	800636e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800635a:	f7fd fa95 	bl	8003888 <HAL_GetTick>
 800635e:	4602      	mov	r2, r0
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006368:	d901      	bls.n	800636e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e007      	b.n	800637e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	f003 0320 	and.w	r3, r3, #32
 8006378:	2b00      	cmp	r3, #0
 800637a:	d0ee      	beq.n	800635a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b084      	sub	sp, #16
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800638e:	2300      	movs	r3, #0
 8006390:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006392:	2300      	movs	r3, #0
 8006394:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d122      	bne.n	80063ea <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68da      	ldr	r2, [r3, #12]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80063b2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80063b4:	f7fd fa68 	bl	8003888 <HAL_GetTick>
 80063b8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80063ba:	e00c      	b.n	80063d6 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80063bc:	f7fd fa64 	bl	8003888 <HAL_GetTick>
 80063c0:	4602      	mov	r2, r0
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063ca:	d904      	bls.n	80063d6 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2204      	movs	r2, #4
 80063d0:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d102      	bne.n	80063ea <RTC_EnterInitMode+0x64>
 80063e4:	7bfb      	ldrb	r3, [r7, #15]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d1e8      	bne.n	80063bc <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80063ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063fc:	2300      	movs	r3, #0
 80063fe:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68da      	ldr	r2, [r3, #12]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800640e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f003 0320 	and.w	r3, r3, #32
 800641a:	2b00      	cmp	r3, #0
 800641c:	d10a      	bne.n	8006434 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f7ff ff89 	bl	8006336 <HAL_RTC_WaitForSynchro>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d004      	beq.n	8006434 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2204      	movs	r2, #4
 800642e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006434:	7bfb      	ldrb	r3, [r7, #15]
}
 8006436:	4618      	mov	r0, r3
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800643e:	b480      	push	{r7}
 8006440:	b085      	sub	sp, #20
 8006442:	af00      	add	r7, sp, #0
 8006444:	4603      	mov	r3, r0
 8006446:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006448:	2300      	movs	r3, #0
 800644a:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800644c:	e005      	b.n	800645a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800644e:	7bfb      	ldrb	r3, [r7, #15]
 8006450:	3301      	adds	r3, #1
 8006452:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006454:	79fb      	ldrb	r3, [r7, #7]
 8006456:	3b0a      	subs	r3, #10
 8006458:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800645a:	79fb      	ldrb	r3, [r7, #7]
 800645c:	2b09      	cmp	r3, #9
 800645e:	d8f6      	bhi.n	800644e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006460:	7bfb      	ldrb	r3, [r7, #15]
 8006462:	011b      	lsls	r3, r3, #4
 8006464:	b2da      	uxtb	r2, r3
 8006466:	79fb      	ldrb	r3, [r7, #7]
 8006468:	4313      	orrs	r3, r2
 800646a:	b2db      	uxtb	r3, r3
}
 800646c:	4618      	mov	r0, r3
 800646e:	3714      	adds	r7, #20
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
 800647e:	4603      	mov	r3, r0
 8006480:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8006482:	2300      	movs	r3, #0
 8006484:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006486:	79fb      	ldrb	r3, [r7, #7]
 8006488:	091b      	lsrs	r3, r3, #4
 800648a:	b2db      	uxtb	r3, r3
 800648c:	461a      	mov	r2, r3
 800648e:	0092      	lsls	r2, r2, #2
 8006490:	4413      	add	r3, r2
 8006492:	005b      	lsls	r3, r3, #1
 8006494:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8006496:	79fb      	ldrb	r3, [r7, #7]
 8006498:	f003 030f 	and.w	r3, r3, #15
 800649c:	b2da      	uxtb	r2, r3
 800649e:	7bfb      	ldrb	r3, [r7, #15]
 80064a0:	4413      	add	r3, r2
 80064a2:	b2db      	uxtb	r3, r3
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3714      	adds	r7, #20
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e041      	b.n	8006546 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d106      	bne.n	80064dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f7fc fab4 	bl	8002a44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2202      	movs	r2, #2
 80064e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	3304      	adds	r3, #4
 80064ec:	4619      	mov	r1, r3
 80064ee:	4610      	mov	r0, r2
 80064f0:	f000 ffd4 	bl	800749c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3708      	adds	r7, #8
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
	...

08006550 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800655e:	b2db      	uxtb	r3, r3
 8006560:	2b01      	cmp	r3, #1
 8006562:	d001      	beq.n	8006568 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e04e      	b.n	8006606 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2202      	movs	r2, #2
 800656c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68da      	ldr	r2, [r3, #12]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f042 0201 	orr.w	r2, r2, #1
 800657e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a23      	ldr	r2, [pc, #140]	; (8006614 <HAL_TIM_Base_Start_IT+0xc4>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d022      	beq.n	80065d0 <HAL_TIM_Base_Start_IT+0x80>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006592:	d01d      	beq.n	80065d0 <HAL_TIM_Base_Start_IT+0x80>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a1f      	ldr	r2, [pc, #124]	; (8006618 <HAL_TIM_Base_Start_IT+0xc8>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d018      	beq.n	80065d0 <HAL_TIM_Base_Start_IT+0x80>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a1e      	ldr	r2, [pc, #120]	; (800661c <HAL_TIM_Base_Start_IT+0xcc>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d013      	beq.n	80065d0 <HAL_TIM_Base_Start_IT+0x80>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a1c      	ldr	r2, [pc, #112]	; (8006620 <HAL_TIM_Base_Start_IT+0xd0>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d00e      	beq.n	80065d0 <HAL_TIM_Base_Start_IT+0x80>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a1b      	ldr	r2, [pc, #108]	; (8006624 <HAL_TIM_Base_Start_IT+0xd4>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d009      	beq.n	80065d0 <HAL_TIM_Base_Start_IT+0x80>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a19      	ldr	r2, [pc, #100]	; (8006628 <HAL_TIM_Base_Start_IT+0xd8>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d004      	beq.n	80065d0 <HAL_TIM_Base_Start_IT+0x80>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a18      	ldr	r2, [pc, #96]	; (800662c <HAL_TIM_Base_Start_IT+0xdc>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d111      	bne.n	80065f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f003 0307 	and.w	r3, r3, #7
 80065da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2b06      	cmp	r3, #6
 80065e0:	d010      	beq.n	8006604 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f042 0201 	orr.w	r2, r2, #1
 80065f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065f2:	e007      	b.n	8006604 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f042 0201 	orr.w	r2, r2, #1
 8006602:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3714      	adds	r7, #20
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	40010000 	.word	0x40010000
 8006618:	40000400 	.word	0x40000400
 800661c:	40000800 	.word	0x40000800
 8006620:	40000c00 	.word	0x40000c00
 8006624:	40010400 	.word	0x40010400
 8006628:	40014000 	.word	0x40014000
 800662c:	40001800 	.word	0x40001800

08006630 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d101      	bne.n	8006642 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e041      	b.n	80066c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d106      	bne.n	800665c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f7fc f97e 	bl	8002958 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2202      	movs	r2, #2
 8006660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	3304      	adds	r3, #4
 800666c:	4619      	mov	r1, r3
 800666e:	4610      	mov	r0, r2
 8006670:	f000 ff14 	bl	800749c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3708      	adds	r7, #8
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
	...

080066d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d109      	bne.n	80066f4 <HAL_TIM_PWM_Start+0x24>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	bf14      	ite	ne
 80066ec:	2301      	movne	r3, #1
 80066ee:	2300      	moveq	r3, #0
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	e022      	b.n	800673a <HAL_TIM_PWM_Start+0x6a>
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	2b04      	cmp	r3, #4
 80066f8:	d109      	bne.n	800670e <HAL_TIM_PWM_Start+0x3e>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006700:	b2db      	uxtb	r3, r3
 8006702:	2b01      	cmp	r3, #1
 8006704:	bf14      	ite	ne
 8006706:	2301      	movne	r3, #1
 8006708:	2300      	moveq	r3, #0
 800670a:	b2db      	uxtb	r3, r3
 800670c:	e015      	b.n	800673a <HAL_TIM_PWM_Start+0x6a>
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	2b08      	cmp	r3, #8
 8006712:	d109      	bne.n	8006728 <HAL_TIM_PWM_Start+0x58>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800671a:	b2db      	uxtb	r3, r3
 800671c:	2b01      	cmp	r3, #1
 800671e:	bf14      	ite	ne
 8006720:	2301      	movne	r3, #1
 8006722:	2300      	moveq	r3, #0
 8006724:	b2db      	uxtb	r3, r3
 8006726:	e008      	b.n	800673a <HAL_TIM_PWM_Start+0x6a>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800672e:	b2db      	uxtb	r3, r3
 8006730:	2b01      	cmp	r3, #1
 8006732:	bf14      	ite	ne
 8006734:	2301      	movne	r3, #1
 8006736:	2300      	moveq	r3, #0
 8006738:	b2db      	uxtb	r3, r3
 800673a:	2b00      	cmp	r3, #0
 800673c:	d001      	beq.n	8006742 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e07c      	b.n	800683c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d104      	bne.n	8006752 <HAL_TIM_PWM_Start+0x82>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2202      	movs	r2, #2
 800674c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006750:	e013      	b.n	800677a <HAL_TIM_PWM_Start+0xaa>
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	2b04      	cmp	r3, #4
 8006756:	d104      	bne.n	8006762 <HAL_TIM_PWM_Start+0x92>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2202      	movs	r2, #2
 800675c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006760:	e00b      	b.n	800677a <HAL_TIM_PWM_Start+0xaa>
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	2b08      	cmp	r3, #8
 8006766:	d104      	bne.n	8006772 <HAL_TIM_PWM_Start+0xa2>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2202      	movs	r2, #2
 800676c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006770:	e003      	b.n	800677a <HAL_TIM_PWM_Start+0xaa>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2202      	movs	r2, #2
 8006776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2201      	movs	r2, #1
 8006780:	6839      	ldr	r1, [r7, #0]
 8006782:	4618      	mov	r0, r3
 8006784:	f001 fa9e 	bl	8007cc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a2d      	ldr	r2, [pc, #180]	; (8006844 <HAL_TIM_PWM_Start+0x174>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d004      	beq.n	800679c <HAL_TIM_PWM_Start+0xcc>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a2c      	ldr	r2, [pc, #176]	; (8006848 <HAL_TIM_PWM_Start+0x178>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d101      	bne.n	80067a0 <HAL_TIM_PWM_Start+0xd0>
 800679c:	2301      	movs	r3, #1
 800679e:	e000      	b.n	80067a2 <HAL_TIM_PWM_Start+0xd2>
 80067a0:	2300      	movs	r3, #0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d007      	beq.n	80067b6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a22      	ldr	r2, [pc, #136]	; (8006844 <HAL_TIM_PWM_Start+0x174>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d022      	beq.n	8006806 <HAL_TIM_PWM_Start+0x136>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067c8:	d01d      	beq.n	8006806 <HAL_TIM_PWM_Start+0x136>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a1f      	ldr	r2, [pc, #124]	; (800684c <HAL_TIM_PWM_Start+0x17c>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d018      	beq.n	8006806 <HAL_TIM_PWM_Start+0x136>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a1d      	ldr	r2, [pc, #116]	; (8006850 <HAL_TIM_PWM_Start+0x180>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d013      	beq.n	8006806 <HAL_TIM_PWM_Start+0x136>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a1c      	ldr	r2, [pc, #112]	; (8006854 <HAL_TIM_PWM_Start+0x184>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d00e      	beq.n	8006806 <HAL_TIM_PWM_Start+0x136>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a16      	ldr	r2, [pc, #88]	; (8006848 <HAL_TIM_PWM_Start+0x178>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d009      	beq.n	8006806 <HAL_TIM_PWM_Start+0x136>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a18      	ldr	r2, [pc, #96]	; (8006858 <HAL_TIM_PWM_Start+0x188>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d004      	beq.n	8006806 <HAL_TIM_PWM_Start+0x136>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a16      	ldr	r2, [pc, #88]	; (800685c <HAL_TIM_PWM_Start+0x18c>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d111      	bne.n	800682a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f003 0307 	and.w	r3, r3, #7
 8006810:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2b06      	cmp	r3, #6
 8006816:	d010      	beq.n	800683a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f042 0201 	orr.w	r2, r2, #1
 8006826:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006828:	e007      	b.n	800683a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f042 0201 	orr.w	r2, r2, #1
 8006838:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	40010000 	.word	0x40010000
 8006848:	40010400 	.word	0x40010400
 800684c:	40000400 	.word	0x40000400
 8006850:	40000800 	.word	0x40000800
 8006854:	40000c00 	.word	0x40000c00
 8006858:	40014000 	.word	0x40014000
 800685c:	40001800 	.word	0x40001800

08006860 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800686a:	2300      	movs	r3, #0
 800686c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d109      	bne.n	8006888 <HAL_TIM_PWM_Start_IT+0x28>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800687a:	b2db      	uxtb	r3, r3
 800687c:	2b01      	cmp	r3, #1
 800687e:	bf14      	ite	ne
 8006880:	2301      	movne	r3, #1
 8006882:	2300      	moveq	r3, #0
 8006884:	b2db      	uxtb	r3, r3
 8006886:	e022      	b.n	80068ce <HAL_TIM_PWM_Start_IT+0x6e>
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	2b04      	cmp	r3, #4
 800688c:	d109      	bne.n	80068a2 <HAL_TIM_PWM_Start_IT+0x42>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b01      	cmp	r3, #1
 8006898:	bf14      	ite	ne
 800689a:	2301      	movne	r3, #1
 800689c:	2300      	moveq	r3, #0
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	e015      	b.n	80068ce <HAL_TIM_PWM_Start_IT+0x6e>
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	2b08      	cmp	r3, #8
 80068a6:	d109      	bne.n	80068bc <HAL_TIM_PWM_Start_IT+0x5c>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	bf14      	ite	ne
 80068b4:	2301      	movne	r3, #1
 80068b6:	2300      	moveq	r3, #0
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	e008      	b.n	80068ce <HAL_TIM_PWM_Start_IT+0x6e>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	bf14      	ite	ne
 80068c8:	2301      	movne	r3, #1
 80068ca:	2300      	moveq	r3, #0
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d001      	beq.n	80068d6 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e0c7      	b.n	8006a66 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d104      	bne.n	80068e6 <HAL_TIM_PWM_Start_IT+0x86>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2202      	movs	r2, #2
 80068e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068e4:	e013      	b.n	800690e <HAL_TIM_PWM_Start_IT+0xae>
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	2b04      	cmp	r3, #4
 80068ea:	d104      	bne.n	80068f6 <HAL_TIM_PWM_Start_IT+0x96>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2202      	movs	r2, #2
 80068f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068f4:	e00b      	b.n	800690e <HAL_TIM_PWM_Start_IT+0xae>
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	2b08      	cmp	r3, #8
 80068fa:	d104      	bne.n	8006906 <HAL_TIM_PWM_Start_IT+0xa6>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2202      	movs	r2, #2
 8006900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006904:	e003      	b.n	800690e <HAL_TIM_PWM_Start_IT+0xae>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2202      	movs	r2, #2
 800690a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	2b0c      	cmp	r3, #12
 8006912:	d841      	bhi.n	8006998 <HAL_TIM_PWM_Start_IT+0x138>
 8006914:	a201      	add	r2, pc, #4	; (adr r2, 800691c <HAL_TIM_PWM_Start_IT+0xbc>)
 8006916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800691a:	bf00      	nop
 800691c:	08006951 	.word	0x08006951
 8006920:	08006999 	.word	0x08006999
 8006924:	08006999 	.word	0x08006999
 8006928:	08006999 	.word	0x08006999
 800692c:	08006963 	.word	0x08006963
 8006930:	08006999 	.word	0x08006999
 8006934:	08006999 	.word	0x08006999
 8006938:	08006999 	.word	0x08006999
 800693c:	08006975 	.word	0x08006975
 8006940:	08006999 	.word	0x08006999
 8006944:	08006999 	.word	0x08006999
 8006948:	08006999 	.word	0x08006999
 800694c:	08006987 	.word	0x08006987
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68da      	ldr	r2, [r3, #12]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f042 0202 	orr.w	r2, r2, #2
 800695e:	60da      	str	r2, [r3, #12]
      break;
 8006960:	e01d      	b.n	800699e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	68da      	ldr	r2, [r3, #12]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f042 0204 	orr.w	r2, r2, #4
 8006970:	60da      	str	r2, [r3, #12]
      break;
 8006972:	e014      	b.n	800699e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68da      	ldr	r2, [r3, #12]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f042 0208 	orr.w	r2, r2, #8
 8006982:	60da      	str	r2, [r3, #12]
      break;
 8006984:	e00b      	b.n	800699e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68da      	ldr	r2, [r3, #12]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f042 0210 	orr.w	r2, r2, #16
 8006994:	60da      	str	r2, [r3, #12]
      break;
 8006996:	e002      	b.n	800699e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	73fb      	strb	r3, [r7, #15]
      break;
 800699c:	bf00      	nop
  }

  if (status == HAL_OK)
 800699e:	7bfb      	ldrb	r3, [r7, #15]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d15f      	bne.n	8006a64 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2201      	movs	r2, #1
 80069aa:	6839      	ldr	r1, [r7, #0]
 80069ac:	4618      	mov	r0, r3
 80069ae:	f001 f989 	bl	8007cc4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a2e      	ldr	r2, [pc, #184]	; (8006a70 <HAL_TIM_PWM_Start_IT+0x210>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d004      	beq.n	80069c6 <HAL_TIM_PWM_Start_IT+0x166>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a2c      	ldr	r2, [pc, #176]	; (8006a74 <HAL_TIM_PWM_Start_IT+0x214>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d101      	bne.n	80069ca <HAL_TIM_PWM_Start_IT+0x16a>
 80069c6:	2301      	movs	r3, #1
 80069c8:	e000      	b.n	80069cc <HAL_TIM_PWM_Start_IT+0x16c>
 80069ca:	2300      	movs	r3, #0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d007      	beq.n	80069e0 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069de:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a22      	ldr	r2, [pc, #136]	; (8006a70 <HAL_TIM_PWM_Start_IT+0x210>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d022      	beq.n	8006a30 <HAL_TIM_PWM_Start_IT+0x1d0>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069f2:	d01d      	beq.n	8006a30 <HAL_TIM_PWM_Start_IT+0x1d0>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a1f      	ldr	r2, [pc, #124]	; (8006a78 <HAL_TIM_PWM_Start_IT+0x218>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d018      	beq.n	8006a30 <HAL_TIM_PWM_Start_IT+0x1d0>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a1e      	ldr	r2, [pc, #120]	; (8006a7c <HAL_TIM_PWM_Start_IT+0x21c>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d013      	beq.n	8006a30 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a1c      	ldr	r2, [pc, #112]	; (8006a80 <HAL_TIM_PWM_Start_IT+0x220>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d00e      	beq.n	8006a30 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a17      	ldr	r2, [pc, #92]	; (8006a74 <HAL_TIM_PWM_Start_IT+0x214>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d009      	beq.n	8006a30 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a18      	ldr	r2, [pc, #96]	; (8006a84 <HAL_TIM_PWM_Start_IT+0x224>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d004      	beq.n	8006a30 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a17      	ldr	r2, [pc, #92]	; (8006a88 <HAL_TIM_PWM_Start_IT+0x228>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d111      	bne.n	8006a54 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	f003 0307 	and.w	r3, r3, #7
 8006a3a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	2b06      	cmp	r3, #6
 8006a40:	d010      	beq.n	8006a64 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f042 0201 	orr.w	r2, r2, #1
 8006a50:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a52:	e007      	b.n	8006a64 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f042 0201 	orr.w	r2, r2, #1
 8006a62:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3710      	adds	r7, #16
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	40010000 	.word	0x40010000
 8006a74:	40010400 	.word	0x40010400
 8006a78:	40000400 	.word	0x40000400
 8006a7c:	40000800 	.word	0x40000800
 8006a80:	40000c00 	.word	0x40000c00
 8006a84:	40014000 	.word	0x40014000
 8006a88:	40001800 	.word	0x40001800

08006a8c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d101      	bne.n	8006a9e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e041      	b.n	8006b22 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d106      	bne.n	8006ab8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f7fb ff76 	bl	80029a4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2202      	movs	r2, #2
 8006abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	3304      	adds	r3, #4
 8006ac8:	4619      	mov	r1, r3
 8006aca:	4610      	mov	r0, r2
 8006acc:	f000 fce6 	bl	800749c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3708      	adds	r7, #8
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
	...

08006b2c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b36:	2300      	movs	r3, #0
 8006b38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d104      	bne.n	8006b4a <HAL_TIM_IC_Start_IT+0x1e>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	e013      	b.n	8006b72 <HAL_TIM_IC_Start_IT+0x46>
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	2b04      	cmp	r3, #4
 8006b4e:	d104      	bne.n	8006b5a <HAL_TIM_IC_Start_IT+0x2e>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	e00b      	b.n	8006b72 <HAL_TIM_IC_Start_IT+0x46>
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	2b08      	cmp	r3, #8
 8006b5e:	d104      	bne.n	8006b6a <HAL_TIM_IC_Start_IT+0x3e>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	e003      	b.n	8006b72 <HAL_TIM_IC_Start_IT+0x46>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d104      	bne.n	8006b84 <HAL_TIM_IC_Start_IT+0x58>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	e013      	b.n	8006bac <HAL_TIM_IC_Start_IT+0x80>
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	2b04      	cmp	r3, #4
 8006b88:	d104      	bne.n	8006b94 <HAL_TIM_IC_Start_IT+0x68>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	e00b      	b.n	8006bac <HAL_TIM_IC_Start_IT+0x80>
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	2b08      	cmp	r3, #8
 8006b98:	d104      	bne.n	8006ba4 <HAL_TIM_IC_Start_IT+0x78>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	e003      	b.n	8006bac <HAL_TIM_IC_Start_IT+0x80>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bae:	7bbb      	ldrb	r3, [r7, #14]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d102      	bne.n	8006bba <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006bb4:	7b7b      	ldrb	r3, [r7, #13]
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d001      	beq.n	8006bbe <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e0cc      	b.n	8006d58 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d104      	bne.n	8006bce <HAL_TIM_IC_Start_IT+0xa2>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bcc:	e013      	b.n	8006bf6 <HAL_TIM_IC_Start_IT+0xca>
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	2b04      	cmp	r3, #4
 8006bd2:	d104      	bne.n	8006bde <HAL_TIM_IC_Start_IT+0xb2>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2202      	movs	r2, #2
 8006bd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bdc:	e00b      	b.n	8006bf6 <HAL_TIM_IC_Start_IT+0xca>
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	2b08      	cmp	r3, #8
 8006be2:	d104      	bne.n	8006bee <HAL_TIM_IC_Start_IT+0xc2>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2202      	movs	r2, #2
 8006be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bec:	e003      	b.n	8006bf6 <HAL_TIM_IC_Start_IT+0xca>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2202      	movs	r2, #2
 8006bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d104      	bne.n	8006c06 <HAL_TIM_IC_Start_IT+0xda>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2202      	movs	r2, #2
 8006c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c04:	e013      	b.n	8006c2e <HAL_TIM_IC_Start_IT+0x102>
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	2b04      	cmp	r3, #4
 8006c0a:	d104      	bne.n	8006c16 <HAL_TIM_IC_Start_IT+0xea>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2202      	movs	r2, #2
 8006c10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c14:	e00b      	b.n	8006c2e <HAL_TIM_IC_Start_IT+0x102>
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	2b08      	cmp	r3, #8
 8006c1a:	d104      	bne.n	8006c26 <HAL_TIM_IC_Start_IT+0xfa>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2202      	movs	r2, #2
 8006c20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c24:	e003      	b.n	8006c2e <HAL_TIM_IC_Start_IT+0x102>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2202      	movs	r2, #2
 8006c2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	2b0c      	cmp	r3, #12
 8006c32:	d841      	bhi.n	8006cb8 <HAL_TIM_IC_Start_IT+0x18c>
 8006c34:	a201      	add	r2, pc, #4	; (adr r2, 8006c3c <HAL_TIM_IC_Start_IT+0x110>)
 8006c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3a:	bf00      	nop
 8006c3c:	08006c71 	.word	0x08006c71
 8006c40:	08006cb9 	.word	0x08006cb9
 8006c44:	08006cb9 	.word	0x08006cb9
 8006c48:	08006cb9 	.word	0x08006cb9
 8006c4c:	08006c83 	.word	0x08006c83
 8006c50:	08006cb9 	.word	0x08006cb9
 8006c54:	08006cb9 	.word	0x08006cb9
 8006c58:	08006cb9 	.word	0x08006cb9
 8006c5c:	08006c95 	.word	0x08006c95
 8006c60:	08006cb9 	.word	0x08006cb9
 8006c64:	08006cb9 	.word	0x08006cb9
 8006c68:	08006cb9 	.word	0x08006cb9
 8006c6c:	08006ca7 	.word	0x08006ca7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68da      	ldr	r2, [r3, #12]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f042 0202 	orr.w	r2, r2, #2
 8006c7e:	60da      	str	r2, [r3, #12]
      break;
 8006c80:	e01d      	b.n	8006cbe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68da      	ldr	r2, [r3, #12]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f042 0204 	orr.w	r2, r2, #4
 8006c90:	60da      	str	r2, [r3, #12]
      break;
 8006c92:	e014      	b.n	8006cbe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68da      	ldr	r2, [r3, #12]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f042 0208 	orr.w	r2, r2, #8
 8006ca2:	60da      	str	r2, [r3, #12]
      break;
 8006ca4:	e00b      	b.n	8006cbe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68da      	ldr	r2, [r3, #12]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f042 0210 	orr.w	r2, r2, #16
 8006cb4:	60da      	str	r2, [r3, #12]
      break;
 8006cb6:	e002      	b.n	8006cbe <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	73fb      	strb	r3, [r7, #15]
      break;
 8006cbc:	bf00      	nop
  }

  if (status == HAL_OK)
 8006cbe:	7bfb      	ldrb	r3, [r7, #15]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d148      	bne.n	8006d56 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	6839      	ldr	r1, [r7, #0]
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f000 fff9 	bl	8007cc4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a22      	ldr	r2, [pc, #136]	; (8006d60 <HAL_TIM_IC_Start_IT+0x234>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d022      	beq.n	8006d22 <HAL_TIM_IC_Start_IT+0x1f6>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ce4:	d01d      	beq.n	8006d22 <HAL_TIM_IC_Start_IT+0x1f6>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a1e      	ldr	r2, [pc, #120]	; (8006d64 <HAL_TIM_IC_Start_IT+0x238>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d018      	beq.n	8006d22 <HAL_TIM_IC_Start_IT+0x1f6>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a1c      	ldr	r2, [pc, #112]	; (8006d68 <HAL_TIM_IC_Start_IT+0x23c>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d013      	beq.n	8006d22 <HAL_TIM_IC_Start_IT+0x1f6>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a1b      	ldr	r2, [pc, #108]	; (8006d6c <HAL_TIM_IC_Start_IT+0x240>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d00e      	beq.n	8006d22 <HAL_TIM_IC_Start_IT+0x1f6>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a19      	ldr	r2, [pc, #100]	; (8006d70 <HAL_TIM_IC_Start_IT+0x244>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d009      	beq.n	8006d22 <HAL_TIM_IC_Start_IT+0x1f6>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a18      	ldr	r2, [pc, #96]	; (8006d74 <HAL_TIM_IC_Start_IT+0x248>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d004      	beq.n	8006d22 <HAL_TIM_IC_Start_IT+0x1f6>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a16      	ldr	r2, [pc, #88]	; (8006d78 <HAL_TIM_IC_Start_IT+0x24c>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d111      	bne.n	8006d46 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	f003 0307 	and.w	r3, r3, #7
 8006d2c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	2b06      	cmp	r3, #6
 8006d32:	d010      	beq.n	8006d56 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f042 0201 	orr.w	r2, r2, #1
 8006d42:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d44:	e007      	b.n	8006d56 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f042 0201 	orr.w	r2, r2, #1
 8006d54:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3710      	adds	r7, #16
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	40010000 	.word	0x40010000
 8006d64:	40000400 	.word	0x40000400
 8006d68:	40000800 	.word	0x40000800
 8006d6c:	40000c00 	.word	0x40000c00
 8006d70:	40010400 	.word	0x40010400
 8006d74:	40014000 	.word	0x40014000
 8006d78:	40001800 	.word	0x40001800

08006d7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	f003 0302 	and.w	r3, r3, #2
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	d122      	bne.n	8006dd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	f003 0302 	and.w	r3, r3, #2
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d11b      	bne.n	8006dd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f06f 0202 	mvn.w	r2, #2
 8006da8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2201      	movs	r2, #1
 8006dae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	f003 0303 	and.w	r3, r3, #3
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d003      	beq.n	8006dc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f7fc fc1c 	bl	80035fc <HAL_TIM_IC_CaptureCallback>
 8006dc4:	e005      	b.n	8006dd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 fb4a 	bl	8007460 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 fb51 	bl	8007474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	f003 0304 	and.w	r3, r3, #4
 8006de2:	2b04      	cmp	r3, #4
 8006de4:	d122      	bne.n	8006e2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	f003 0304 	and.w	r3, r3, #4
 8006df0:	2b04      	cmp	r3, #4
 8006df2:	d11b      	bne.n	8006e2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f06f 0204 	mvn.w	r2, #4
 8006dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2202      	movs	r2, #2
 8006e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d003      	beq.n	8006e1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f7fc fbf2 	bl	80035fc <HAL_TIM_IC_CaptureCallback>
 8006e18:	e005      	b.n	8006e26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 fb20 	bl	8007460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fb27 	bl	8007474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	f003 0308 	and.w	r3, r3, #8
 8006e36:	2b08      	cmp	r3, #8
 8006e38:	d122      	bne.n	8006e80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	f003 0308 	and.w	r3, r3, #8
 8006e44:	2b08      	cmp	r3, #8
 8006e46:	d11b      	bne.n	8006e80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f06f 0208 	mvn.w	r2, #8
 8006e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2204      	movs	r2, #4
 8006e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	69db      	ldr	r3, [r3, #28]
 8006e5e:	f003 0303 	and.w	r3, r3, #3
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d003      	beq.n	8006e6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f7fc fbc8 	bl	80035fc <HAL_TIM_IC_CaptureCallback>
 8006e6c:	e005      	b.n	8006e7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 faf6 	bl	8007460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 fafd 	bl	8007474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	f003 0310 	and.w	r3, r3, #16
 8006e8a:	2b10      	cmp	r3, #16
 8006e8c:	d122      	bne.n	8006ed4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	f003 0310 	and.w	r3, r3, #16
 8006e98:	2b10      	cmp	r3, #16
 8006e9a:	d11b      	bne.n	8006ed4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f06f 0210 	mvn.w	r2, #16
 8006ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2208      	movs	r2, #8
 8006eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d003      	beq.n	8006ec2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f7fc fb9e 	bl	80035fc <HAL_TIM_IC_CaptureCallback>
 8006ec0:	e005      	b.n	8006ece <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 facc 	bl	8007460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 fad3 	bl	8007474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	f003 0301 	and.w	r3, r3, #1
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d10e      	bne.n	8006f00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	f003 0301 	and.w	r3, r3, #1
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d107      	bne.n	8006f00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f06f 0201 	mvn.w	r2, #1
 8006ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7fa fe0a 	bl	8001b14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f0a:	2b80      	cmp	r3, #128	; 0x80
 8006f0c:	d10e      	bne.n	8006f2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f18:	2b80      	cmp	r3, #128	; 0x80
 8006f1a:	d107      	bne.n	8006f2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 ff78 	bl	8007e1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f36:	2b40      	cmp	r3, #64	; 0x40
 8006f38:	d10e      	bne.n	8006f58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f44:	2b40      	cmp	r3, #64	; 0x40
 8006f46:	d107      	bne.n	8006f58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 fa98 	bl	8007488 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	f003 0320 	and.w	r3, r3, #32
 8006f62:	2b20      	cmp	r3, #32
 8006f64:	d10e      	bne.n	8006f84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	f003 0320 	and.w	r3, r3, #32
 8006f70:	2b20      	cmp	r3, #32
 8006f72:	d107      	bne.n	8006f84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f06f 0220 	mvn.w	r2, #32
 8006f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 ff42 	bl	8007e08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f84:	bf00      	nop
 8006f86:	3708      	adds	r7, #8
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b086      	sub	sp, #24
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d101      	bne.n	8006faa <HAL_TIM_IC_ConfigChannel+0x1e>
 8006fa6:	2302      	movs	r3, #2
 8006fa8:	e088      	b.n	80070bc <HAL_TIM_IC_ConfigChannel+0x130>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d11b      	bne.n	8006ff0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6818      	ldr	r0, [r3, #0]
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	6819      	ldr	r1, [r3, #0]
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	685a      	ldr	r2, [r3, #4]
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	f000 fcb8 	bl	800793c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	699a      	ldr	r2, [r3, #24]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f022 020c 	bic.w	r2, r2, #12
 8006fda:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	6999      	ldr	r1, [r3, #24]
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	689a      	ldr	r2, [r3, #8]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	430a      	orrs	r2, r1
 8006fec:	619a      	str	r2, [r3, #24]
 8006fee:	e060      	b.n	80070b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2b04      	cmp	r3, #4
 8006ff4:	d11c      	bne.n	8007030 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6818      	ldr	r0, [r3, #0]
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	6819      	ldr	r1, [r3, #0]
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	685a      	ldr	r2, [r3, #4]
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	f000 fd3c 	bl	8007a82 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	699a      	ldr	r2, [r3, #24]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007018:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	6999      	ldr	r1, [r3, #24]
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	021a      	lsls	r2, r3, #8
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	430a      	orrs	r2, r1
 800702c:	619a      	str	r2, [r3, #24]
 800702e:	e040      	b.n	80070b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2b08      	cmp	r3, #8
 8007034:	d11b      	bne.n	800706e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6818      	ldr	r0, [r3, #0]
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	6819      	ldr	r1, [r3, #0]
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	685a      	ldr	r2, [r3, #4]
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	f000 fd89 	bl	8007b5c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	69da      	ldr	r2, [r3, #28]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f022 020c 	bic.w	r2, r2, #12
 8007058:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	69d9      	ldr	r1, [r3, #28]
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	689a      	ldr	r2, [r3, #8]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	430a      	orrs	r2, r1
 800706a:	61da      	str	r2, [r3, #28]
 800706c:	e021      	b.n	80070b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2b0c      	cmp	r3, #12
 8007072:	d11c      	bne.n	80070ae <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6818      	ldr	r0, [r3, #0]
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	6819      	ldr	r1, [r3, #0]
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	685a      	ldr	r2, [r3, #4]
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	f000 fda6 	bl	8007bd4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	69da      	ldr	r2, [r3, #28]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007096:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	69d9      	ldr	r1, [r3, #28]
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	021a      	lsls	r2, r3, #8
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	430a      	orrs	r2, r1
 80070aa:	61da      	str	r2, [r3, #28]
 80070ac:	e001      	b.n	80070b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80070ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3718      	adds	r7, #24
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b086      	sub	sp, #24
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070d0:	2300      	movs	r3, #0
 80070d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d101      	bne.n	80070e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80070de:	2302      	movs	r3, #2
 80070e0:	e0ae      	b.n	8007240 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2b0c      	cmp	r3, #12
 80070ee:	f200 809f 	bhi.w	8007230 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80070f2:	a201      	add	r2, pc, #4	; (adr r2, 80070f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80070f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f8:	0800712d 	.word	0x0800712d
 80070fc:	08007231 	.word	0x08007231
 8007100:	08007231 	.word	0x08007231
 8007104:	08007231 	.word	0x08007231
 8007108:	0800716d 	.word	0x0800716d
 800710c:	08007231 	.word	0x08007231
 8007110:	08007231 	.word	0x08007231
 8007114:	08007231 	.word	0x08007231
 8007118:	080071af 	.word	0x080071af
 800711c:	08007231 	.word	0x08007231
 8007120:	08007231 	.word	0x08007231
 8007124:	08007231 	.word	0x08007231
 8007128:	080071ef 	.word	0x080071ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68b9      	ldr	r1, [r7, #8]
 8007132:	4618      	mov	r0, r3
 8007134:	f000 fa52 	bl	80075dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	699a      	ldr	r2, [r3, #24]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f042 0208 	orr.w	r2, r2, #8
 8007146:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	699a      	ldr	r2, [r3, #24]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f022 0204 	bic.w	r2, r2, #4
 8007156:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	6999      	ldr	r1, [r3, #24]
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	691a      	ldr	r2, [r3, #16]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	430a      	orrs	r2, r1
 8007168:	619a      	str	r2, [r3, #24]
      break;
 800716a:	e064      	b.n	8007236 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68b9      	ldr	r1, [r7, #8]
 8007172:	4618      	mov	r0, r3
 8007174:	f000 faa2 	bl	80076bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	699a      	ldr	r2, [r3, #24]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007186:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	699a      	ldr	r2, [r3, #24]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007196:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	6999      	ldr	r1, [r3, #24]
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	021a      	lsls	r2, r3, #8
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	430a      	orrs	r2, r1
 80071aa:	619a      	str	r2, [r3, #24]
      break;
 80071ac:	e043      	b.n	8007236 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68b9      	ldr	r1, [r7, #8]
 80071b4:	4618      	mov	r0, r3
 80071b6:	f000 faf7 	bl	80077a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	69da      	ldr	r2, [r3, #28]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f042 0208 	orr.w	r2, r2, #8
 80071c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	69da      	ldr	r2, [r3, #28]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f022 0204 	bic.w	r2, r2, #4
 80071d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	69d9      	ldr	r1, [r3, #28]
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	691a      	ldr	r2, [r3, #16]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	430a      	orrs	r2, r1
 80071ea:	61da      	str	r2, [r3, #28]
      break;
 80071ec:	e023      	b.n	8007236 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68b9      	ldr	r1, [r7, #8]
 80071f4:	4618      	mov	r0, r3
 80071f6:	f000 fb4b 	bl	8007890 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	69da      	ldr	r2, [r3, #28]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007208:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	69da      	ldr	r2, [r3, #28]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007218:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	69d9      	ldr	r1, [r3, #28]
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	021a      	lsls	r2, r3, #8
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	430a      	orrs	r2, r1
 800722c:	61da      	str	r2, [r3, #28]
      break;
 800722e:	e002      	b.n	8007236 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	75fb      	strb	r3, [r7, #23]
      break;
 8007234:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2200      	movs	r2, #0
 800723a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800723e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007240:	4618      	mov	r0, r3
 8007242:	3718      	adds	r7, #24
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007252:	2300      	movs	r3, #0
 8007254:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800725c:	2b01      	cmp	r3, #1
 800725e:	d101      	bne.n	8007264 <HAL_TIM_ConfigClockSource+0x1c>
 8007260:	2302      	movs	r3, #2
 8007262:	e0b4      	b.n	80073ce <HAL_TIM_ConfigClockSource+0x186>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2202      	movs	r2, #2
 8007270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007282:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800728a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68ba      	ldr	r2, [r7, #8]
 8007292:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800729c:	d03e      	beq.n	800731c <HAL_TIM_ConfigClockSource+0xd4>
 800729e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072a2:	f200 8087 	bhi.w	80073b4 <HAL_TIM_ConfigClockSource+0x16c>
 80072a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072aa:	f000 8086 	beq.w	80073ba <HAL_TIM_ConfigClockSource+0x172>
 80072ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072b2:	d87f      	bhi.n	80073b4 <HAL_TIM_ConfigClockSource+0x16c>
 80072b4:	2b70      	cmp	r3, #112	; 0x70
 80072b6:	d01a      	beq.n	80072ee <HAL_TIM_ConfigClockSource+0xa6>
 80072b8:	2b70      	cmp	r3, #112	; 0x70
 80072ba:	d87b      	bhi.n	80073b4 <HAL_TIM_ConfigClockSource+0x16c>
 80072bc:	2b60      	cmp	r3, #96	; 0x60
 80072be:	d050      	beq.n	8007362 <HAL_TIM_ConfigClockSource+0x11a>
 80072c0:	2b60      	cmp	r3, #96	; 0x60
 80072c2:	d877      	bhi.n	80073b4 <HAL_TIM_ConfigClockSource+0x16c>
 80072c4:	2b50      	cmp	r3, #80	; 0x50
 80072c6:	d03c      	beq.n	8007342 <HAL_TIM_ConfigClockSource+0xfa>
 80072c8:	2b50      	cmp	r3, #80	; 0x50
 80072ca:	d873      	bhi.n	80073b4 <HAL_TIM_ConfigClockSource+0x16c>
 80072cc:	2b40      	cmp	r3, #64	; 0x40
 80072ce:	d058      	beq.n	8007382 <HAL_TIM_ConfigClockSource+0x13a>
 80072d0:	2b40      	cmp	r3, #64	; 0x40
 80072d2:	d86f      	bhi.n	80073b4 <HAL_TIM_ConfigClockSource+0x16c>
 80072d4:	2b30      	cmp	r3, #48	; 0x30
 80072d6:	d064      	beq.n	80073a2 <HAL_TIM_ConfigClockSource+0x15a>
 80072d8:	2b30      	cmp	r3, #48	; 0x30
 80072da:	d86b      	bhi.n	80073b4 <HAL_TIM_ConfigClockSource+0x16c>
 80072dc:	2b20      	cmp	r3, #32
 80072de:	d060      	beq.n	80073a2 <HAL_TIM_ConfigClockSource+0x15a>
 80072e0:	2b20      	cmp	r3, #32
 80072e2:	d867      	bhi.n	80073b4 <HAL_TIM_ConfigClockSource+0x16c>
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d05c      	beq.n	80073a2 <HAL_TIM_ConfigClockSource+0x15a>
 80072e8:	2b10      	cmp	r3, #16
 80072ea:	d05a      	beq.n	80073a2 <HAL_TIM_ConfigClockSource+0x15a>
 80072ec:	e062      	b.n	80073b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6818      	ldr	r0, [r3, #0]
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	6899      	ldr	r1, [r3, #8]
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	685a      	ldr	r2, [r3, #4]
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	f000 fcc1 	bl	8007c84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007310:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68ba      	ldr	r2, [r7, #8]
 8007318:	609a      	str	r2, [r3, #8]
      break;
 800731a:	e04f      	b.n	80073bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6818      	ldr	r0, [r3, #0]
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	6899      	ldr	r1, [r3, #8]
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	685a      	ldr	r2, [r3, #4]
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	f000 fcaa 	bl	8007c84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	689a      	ldr	r2, [r3, #8]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800733e:	609a      	str	r2, [r3, #8]
      break;
 8007340:	e03c      	b.n	80073bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6818      	ldr	r0, [r3, #0]
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	6859      	ldr	r1, [r3, #4]
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	461a      	mov	r2, r3
 8007350:	f000 fb68 	bl	8007a24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2150      	movs	r1, #80	; 0x50
 800735a:	4618      	mov	r0, r3
 800735c:	f000 fc77 	bl	8007c4e <TIM_ITRx_SetConfig>
      break;
 8007360:	e02c      	b.n	80073bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6818      	ldr	r0, [r3, #0]
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	6859      	ldr	r1, [r3, #4]
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	461a      	mov	r2, r3
 8007370:	f000 fbc4 	bl	8007afc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2160      	movs	r1, #96	; 0x60
 800737a:	4618      	mov	r0, r3
 800737c:	f000 fc67 	bl	8007c4e <TIM_ITRx_SetConfig>
      break;
 8007380:	e01c      	b.n	80073bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6818      	ldr	r0, [r3, #0]
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	6859      	ldr	r1, [r3, #4]
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	461a      	mov	r2, r3
 8007390:	f000 fb48 	bl	8007a24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2140      	movs	r1, #64	; 0x40
 800739a:	4618      	mov	r0, r3
 800739c:	f000 fc57 	bl	8007c4e <TIM_ITRx_SetConfig>
      break;
 80073a0:	e00c      	b.n	80073bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4619      	mov	r1, r3
 80073ac:	4610      	mov	r0, r2
 80073ae:	f000 fc4e 	bl	8007c4e <TIM_ITRx_SetConfig>
      break;
 80073b2:	e003      	b.n	80073bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	73fb      	strb	r3, [r7, #15]
      break;
 80073b8:	e000      	b.n	80073bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80073ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80073cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
	...

080073d8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80073e2:	2300      	movs	r3, #0
 80073e4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	2b0c      	cmp	r3, #12
 80073ea:	d831      	bhi.n	8007450 <HAL_TIM_ReadCapturedValue+0x78>
 80073ec:	a201      	add	r2, pc, #4	; (adr r2, 80073f4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80073ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f2:	bf00      	nop
 80073f4:	08007429 	.word	0x08007429
 80073f8:	08007451 	.word	0x08007451
 80073fc:	08007451 	.word	0x08007451
 8007400:	08007451 	.word	0x08007451
 8007404:	08007433 	.word	0x08007433
 8007408:	08007451 	.word	0x08007451
 800740c:	08007451 	.word	0x08007451
 8007410:	08007451 	.word	0x08007451
 8007414:	0800743d 	.word	0x0800743d
 8007418:	08007451 	.word	0x08007451
 800741c:	08007451 	.word	0x08007451
 8007420:	08007451 	.word	0x08007451
 8007424:	08007447 	.word	0x08007447
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800742e:	60fb      	str	r3, [r7, #12]

      break;
 8007430:	e00f      	b.n	8007452 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007438:	60fb      	str	r3, [r7, #12]

      break;
 800743a:	e00a      	b.n	8007452 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007442:	60fb      	str	r3, [r7, #12]

      break;
 8007444:	e005      	b.n	8007452 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744c:	60fb      	str	r3, [r7, #12]

      break;
 800744e:	e000      	b.n	8007452 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007450:	bf00      	nop
  }

  return tmpreg;
 8007452:	68fb      	ldr	r3, [r7, #12]
}
 8007454:	4618      	mov	r0, r3
 8007456:	3714      	adds	r7, #20
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007468:	bf00      	nop
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800747c:	bf00      	nop
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007490:	bf00      	nop
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800749c:	b480      	push	{r7}
 800749e:	b085      	sub	sp, #20
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a40      	ldr	r2, [pc, #256]	; (80075b0 <TIM_Base_SetConfig+0x114>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d013      	beq.n	80074dc <TIM_Base_SetConfig+0x40>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074ba:	d00f      	beq.n	80074dc <TIM_Base_SetConfig+0x40>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a3d      	ldr	r2, [pc, #244]	; (80075b4 <TIM_Base_SetConfig+0x118>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d00b      	beq.n	80074dc <TIM_Base_SetConfig+0x40>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4a3c      	ldr	r2, [pc, #240]	; (80075b8 <TIM_Base_SetConfig+0x11c>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d007      	beq.n	80074dc <TIM_Base_SetConfig+0x40>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a3b      	ldr	r2, [pc, #236]	; (80075bc <TIM_Base_SetConfig+0x120>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d003      	beq.n	80074dc <TIM_Base_SetConfig+0x40>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a3a      	ldr	r2, [pc, #232]	; (80075c0 <TIM_Base_SetConfig+0x124>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d108      	bne.n	80074ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a2f      	ldr	r2, [pc, #188]	; (80075b0 <TIM_Base_SetConfig+0x114>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d02b      	beq.n	800754e <TIM_Base_SetConfig+0xb2>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074fc:	d027      	beq.n	800754e <TIM_Base_SetConfig+0xb2>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a2c      	ldr	r2, [pc, #176]	; (80075b4 <TIM_Base_SetConfig+0x118>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d023      	beq.n	800754e <TIM_Base_SetConfig+0xb2>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a2b      	ldr	r2, [pc, #172]	; (80075b8 <TIM_Base_SetConfig+0x11c>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d01f      	beq.n	800754e <TIM_Base_SetConfig+0xb2>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a2a      	ldr	r2, [pc, #168]	; (80075bc <TIM_Base_SetConfig+0x120>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d01b      	beq.n	800754e <TIM_Base_SetConfig+0xb2>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a29      	ldr	r2, [pc, #164]	; (80075c0 <TIM_Base_SetConfig+0x124>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d017      	beq.n	800754e <TIM_Base_SetConfig+0xb2>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a28      	ldr	r2, [pc, #160]	; (80075c4 <TIM_Base_SetConfig+0x128>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d013      	beq.n	800754e <TIM_Base_SetConfig+0xb2>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4a27      	ldr	r2, [pc, #156]	; (80075c8 <TIM_Base_SetConfig+0x12c>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d00f      	beq.n	800754e <TIM_Base_SetConfig+0xb2>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4a26      	ldr	r2, [pc, #152]	; (80075cc <TIM_Base_SetConfig+0x130>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d00b      	beq.n	800754e <TIM_Base_SetConfig+0xb2>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4a25      	ldr	r2, [pc, #148]	; (80075d0 <TIM_Base_SetConfig+0x134>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d007      	beq.n	800754e <TIM_Base_SetConfig+0xb2>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a24      	ldr	r2, [pc, #144]	; (80075d4 <TIM_Base_SetConfig+0x138>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d003      	beq.n	800754e <TIM_Base_SetConfig+0xb2>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	4a23      	ldr	r2, [pc, #140]	; (80075d8 <TIM_Base_SetConfig+0x13c>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d108      	bne.n	8007560 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007554:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	4313      	orrs	r3, r2
 800755e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	695b      	ldr	r3, [r3, #20]
 800756a:	4313      	orrs	r3, r2
 800756c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	689a      	ldr	r2, [r3, #8]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a0a      	ldr	r2, [pc, #40]	; (80075b0 <TIM_Base_SetConfig+0x114>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d003      	beq.n	8007594 <TIM_Base_SetConfig+0xf8>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a0c      	ldr	r2, [pc, #48]	; (80075c0 <TIM_Base_SetConfig+0x124>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d103      	bne.n	800759c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	691a      	ldr	r2, [r3, #16]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	615a      	str	r2, [r3, #20]
}
 80075a2:	bf00      	nop
 80075a4:	3714      	adds	r7, #20
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	40010000 	.word	0x40010000
 80075b4:	40000400 	.word	0x40000400
 80075b8:	40000800 	.word	0x40000800
 80075bc:	40000c00 	.word	0x40000c00
 80075c0:	40010400 	.word	0x40010400
 80075c4:	40014000 	.word	0x40014000
 80075c8:	40014400 	.word	0x40014400
 80075cc:	40014800 	.word	0x40014800
 80075d0:	40001800 	.word	0x40001800
 80075d4:	40001c00 	.word	0x40001c00
 80075d8:	40002000 	.word	0x40002000

080075dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075dc:	b480      	push	{r7}
 80075de:	b087      	sub	sp, #28
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a1b      	ldr	r3, [r3, #32]
 80075ea:	f023 0201 	bic.w	r2, r3, #1
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	699b      	ldr	r3, [r3, #24]
 8007602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800760a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f023 0303 	bic.w	r3, r3, #3
 8007612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	4313      	orrs	r3, r2
 800761c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	f023 0302 	bic.w	r3, r3, #2
 8007624:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	697a      	ldr	r2, [r7, #20]
 800762c:	4313      	orrs	r3, r2
 800762e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a20      	ldr	r2, [pc, #128]	; (80076b4 <TIM_OC1_SetConfig+0xd8>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d003      	beq.n	8007640 <TIM_OC1_SetConfig+0x64>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a1f      	ldr	r2, [pc, #124]	; (80076b8 <TIM_OC1_SetConfig+0xdc>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d10c      	bne.n	800765a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	f023 0308 	bic.w	r3, r3, #8
 8007646:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	697a      	ldr	r2, [r7, #20]
 800764e:	4313      	orrs	r3, r2
 8007650:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	f023 0304 	bic.w	r3, r3, #4
 8007658:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a15      	ldr	r2, [pc, #84]	; (80076b4 <TIM_OC1_SetConfig+0xd8>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d003      	beq.n	800766a <TIM_OC1_SetConfig+0x8e>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4a14      	ldr	r2, [pc, #80]	; (80076b8 <TIM_OC1_SetConfig+0xdc>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d111      	bne.n	800768e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007670:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007678:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	695b      	ldr	r3, [r3, #20]
 800767e:	693a      	ldr	r2, [r7, #16]
 8007680:	4313      	orrs	r3, r2
 8007682:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	699b      	ldr	r3, [r3, #24]
 8007688:	693a      	ldr	r2, [r7, #16]
 800768a:	4313      	orrs	r3, r2
 800768c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	693a      	ldr	r2, [r7, #16]
 8007692:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	68fa      	ldr	r2, [r7, #12]
 8007698:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	685a      	ldr	r2, [r3, #4]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	697a      	ldr	r2, [r7, #20]
 80076a6:	621a      	str	r2, [r3, #32]
}
 80076a8:	bf00      	nop
 80076aa:	371c      	adds	r7, #28
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr
 80076b4:	40010000 	.word	0x40010000
 80076b8:	40010400 	.word	0x40010400

080076bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076bc:	b480      	push	{r7}
 80076be:	b087      	sub	sp, #28
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a1b      	ldr	r3, [r3, #32]
 80076ca:	f023 0210 	bic.w	r2, r3, #16
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a1b      	ldr	r3, [r3, #32]
 80076d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	699b      	ldr	r3, [r3, #24]
 80076e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	021b      	lsls	r3, r3, #8
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	f023 0320 	bic.w	r3, r3, #32
 8007706:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	011b      	lsls	r3, r3, #4
 800770e:	697a      	ldr	r2, [r7, #20]
 8007710:	4313      	orrs	r3, r2
 8007712:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	4a22      	ldr	r2, [pc, #136]	; (80077a0 <TIM_OC2_SetConfig+0xe4>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d003      	beq.n	8007724 <TIM_OC2_SetConfig+0x68>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4a21      	ldr	r2, [pc, #132]	; (80077a4 <TIM_OC2_SetConfig+0xe8>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d10d      	bne.n	8007740 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800772a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	011b      	lsls	r3, r3, #4
 8007732:	697a      	ldr	r2, [r7, #20]
 8007734:	4313      	orrs	r3, r2
 8007736:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800773e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a17      	ldr	r2, [pc, #92]	; (80077a0 <TIM_OC2_SetConfig+0xe4>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d003      	beq.n	8007750 <TIM_OC2_SetConfig+0x94>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a16      	ldr	r2, [pc, #88]	; (80077a4 <TIM_OC2_SetConfig+0xe8>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d113      	bne.n	8007778 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007756:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800775e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	695b      	ldr	r3, [r3, #20]
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	693a      	ldr	r2, [r7, #16]
 8007768:	4313      	orrs	r3, r2
 800776a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	699b      	ldr	r3, [r3, #24]
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	693a      	ldr	r2, [r7, #16]
 8007774:	4313      	orrs	r3, r2
 8007776:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	685a      	ldr	r2, [r3, #4]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	697a      	ldr	r2, [r7, #20]
 8007790:	621a      	str	r2, [r3, #32]
}
 8007792:	bf00      	nop
 8007794:	371c      	adds	r7, #28
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	40010000 	.word	0x40010000
 80077a4:	40010400 	.word	0x40010400

080077a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b087      	sub	sp, #28
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a1b      	ldr	r3, [r3, #32]
 80077b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a1b      	ldr	r3, [r3, #32]
 80077c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	69db      	ldr	r3, [r3, #28]
 80077ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f023 0303 	bic.w	r3, r3, #3
 80077de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68fa      	ldr	r2, [r7, #12]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	021b      	lsls	r3, r3, #8
 80077f8:	697a      	ldr	r2, [r7, #20]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4a21      	ldr	r2, [pc, #132]	; (8007888 <TIM_OC3_SetConfig+0xe0>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d003      	beq.n	800780e <TIM_OC3_SetConfig+0x66>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	4a20      	ldr	r2, [pc, #128]	; (800788c <TIM_OC3_SetConfig+0xe4>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d10d      	bne.n	800782a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007814:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	021b      	lsls	r3, r3, #8
 800781c:	697a      	ldr	r2, [r7, #20]
 800781e:	4313      	orrs	r3, r2
 8007820:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007828:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a16      	ldr	r2, [pc, #88]	; (8007888 <TIM_OC3_SetConfig+0xe0>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d003      	beq.n	800783a <TIM_OC3_SetConfig+0x92>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a15      	ldr	r2, [pc, #84]	; (800788c <TIM_OC3_SetConfig+0xe4>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d113      	bne.n	8007862 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007840:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007848:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	695b      	ldr	r3, [r3, #20]
 800784e:	011b      	lsls	r3, r3, #4
 8007850:	693a      	ldr	r2, [r7, #16]
 8007852:	4313      	orrs	r3, r2
 8007854:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	699b      	ldr	r3, [r3, #24]
 800785a:	011b      	lsls	r3, r3, #4
 800785c:	693a      	ldr	r2, [r7, #16]
 800785e:	4313      	orrs	r3, r2
 8007860:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	693a      	ldr	r2, [r7, #16]
 8007866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	685a      	ldr	r2, [r3, #4]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	697a      	ldr	r2, [r7, #20]
 800787a:	621a      	str	r2, [r3, #32]
}
 800787c:	bf00      	nop
 800787e:	371c      	adds	r7, #28
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr
 8007888:	40010000 	.word	0x40010000
 800788c:	40010400 	.word	0x40010400

08007890 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007890:	b480      	push	{r7}
 8007892:	b087      	sub	sp, #28
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a1b      	ldr	r3, [r3, #32]
 80078aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	69db      	ldr	r3, [r3, #28]
 80078b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	021b      	lsls	r3, r3, #8
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	031b      	lsls	r3, r3, #12
 80078e2:	693a      	ldr	r2, [r7, #16]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a12      	ldr	r2, [pc, #72]	; (8007934 <TIM_OC4_SetConfig+0xa4>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d003      	beq.n	80078f8 <TIM_OC4_SetConfig+0x68>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a11      	ldr	r2, [pc, #68]	; (8007938 <TIM_OC4_SetConfig+0xa8>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d109      	bne.n	800790c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	695b      	ldr	r3, [r3, #20]
 8007904:	019b      	lsls	r3, r3, #6
 8007906:	697a      	ldr	r2, [r7, #20]
 8007908:	4313      	orrs	r3, r2
 800790a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	697a      	ldr	r2, [r7, #20]
 8007910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	685a      	ldr	r2, [r3, #4]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	693a      	ldr	r2, [r7, #16]
 8007924:	621a      	str	r2, [r3, #32]
}
 8007926:	bf00      	nop
 8007928:	371c      	adds	r7, #28
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr
 8007932:	bf00      	nop
 8007934:	40010000 	.word	0x40010000
 8007938:	40010400 	.word	0x40010400

0800793c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800793c:	b480      	push	{r7}
 800793e:	b087      	sub	sp, #28
 8007940:	af00      	add	r7, sp, #0
 8007942:	60f8      	str	r0, [r7, #12]
 8007944:	60b9      	str	r1, [r7, #8]
 8007946:	607a      	str	r2, [r7, #4]
 8007948:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6a1b      	ldr	r3, [r3, #32]
 800794e:	f023 0201 	bic.w	r2, r3, #1
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	699b      	ldr	r3, [r3, #24]
 800795a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6a1b      	ldr	r3, [r3, #32]
 8007960:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	4a28      	ldr	r2, [pc, #160]	; (8007a08 <TIM_TI1_SetConfig+0xcc>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d01b      	beq.n	80079a2 <TIM_TI1_SetConfig+0x66>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007970:	d017      	beq.n	80079a2 <TIM_TI1_SetConfig+0x66>
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	4a25      	ldr	r2, [pc, #148]	; (8007a0c <TIM_TI1_SetConfig+0xd0>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d013      	beq.n	80079a2 <TIM_TI1_SetConfig+0x66>
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	4a24      	ldr	r2, [pc, #144]	; (8007a10 <TIM_TI1_SetConfig+0xd4>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d00f      	beq.n	80079a2 <TIM_TI1_SetConfig+0x66>
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	4a23      	ldr	r2, [pc, #140]	; (8007a14 <TIM_TI1_SetConfig+0xd8>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d00b      	beq.n	80079a2 <TIM_TI1_SetConfig+0x66>
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	4a22      	ldr	r2, [pc, #136]	; (8007a18 <TIM_TI1_SetConfig+0xdc>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d007      	beq.n	80079a2 <TIM_TI1_SetConfig+0x66>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	4a21      	ldr	r2, [pc, #132]	; (8007a1c <TIM_TI1_SetConfig+0xe0>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d003      	beq.n	80079a2 <TIM_TI1_SetConfig+0x66>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	4a20      	ldr	r2, [pc, #128]	; (8007a20 <TIM_TI1_SetConfig+0xe4>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d101      	bne.n	80079a6 <TIM_TI1_SetConfig+0x6a>
 80079a2:	2301      	movs	r3, #1
 80079a4:	e000      	b.n	80079a8 <TIM_TI1_SetConfig+0x6c>
 80079a6:	2300      	movs	r3, #0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d008      	beq.n	80079be <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	f023 0303 	bic.w	r3, r3, #3
 80079b2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80079b4:	697a      	ldr	r2, [r7, #20]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4313      	orrs	r3, r2
 80079ba:	617b      	str	r3, [r7, #20]
 80079bc:	e003      	b.n	80079c6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	f043 0301 	orr.w	r3, r3, #1
 80079c4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	011b      	lsls	r3, r3, #4
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	697a      	ldr	r2, [r7, #20]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	f023 030a 	bic.w	r3, r3, #10
 80079e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	f003 030a 	and.w	r3, r3, #10
 80079e8:	693a      	ldr	r2, [r7, #16]
 80079ea:	4313      	orrs	r3, r2
 80079ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	697a      	ldr	r2, [r7, #20]
 80079f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	693a      	ldr	r2, [r7, #16]
 80079f8:	621a      	str	r2, [r3, #32]
}
 80079fa:	bf00      	nop
 80079fc:	371c      	adds	r7, #28
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop
 8007a08:	40010000 	.word	0x40010000
 8007a0c:	40000400 	.word	0x40000400
 8007a10:	40000800 	.word	0x40000800
 8007a14:	40000c00 	.word	0x40000c00
 8007a18:	40010400 	.word	0x40010400
 8007a1c:	40014000 	.word	0x40014000
 8007a20:	40001800 	.word	0x40001800

08007a24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b087      	sub	sp, #28
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6a1b      	ldr	r3, [r3, #32]
 8007a34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6a1b      	ldr	r3, [r3, #32]
 8007a3a:	f023 0201 	bic.w	r2, r3, #1
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	699b      	ldr	r3, [r3, #24]
 8007a46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	011b      	lsls	r3, r3, #4
 8007a54:	693a      	ldr	r2, [r7, #16]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	f023 030a 	bic.w	r3, r3, #10
 8007a60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a62:	697a      	ldr	r2, [r7, #20]
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	693a      	ldr	r2, [r7, #16]
 8007a6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	697a      	ldr	r2, [r7, #20]
 8007a74:	621a      	str	r2, [r3, #32]
}
 8007a76:	bf00      	nop
 8007a78:	371c      	adds	r7, #28
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr

08007a82 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007a82:	b480      	push	{r7}
 8007a84:	b087      	sub	sp, #28
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	60f8      	str	r0, [r7, #12]
 8007a8a:	60b9      	str	r1, [r7, #8]
 8007a8c:	607a      	str	r2, [r7, #4]
 8007a8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	6a1b      	ldr	r3, [r3, #32]
 8007a94:	f023 0210 	bic.w	r2, r3, #16
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	699b      	ldr	r3, [r3, #24]
 8007aa0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	6a1b      	ldr	r3, [r3, #32]
 8007aa6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007aae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	021b      	lsls	r3, r3, #8
 8007ab4:	697a      	ldr	r2, [r7, #20]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ac0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	031b      	lsls	r3, r3, #12
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	697a      	ldr	r2, [r7, #20]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ad4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	011b      	lsls	r3, r3, #4
 8007ada:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007ade:	693a      	ldr	r2, [r7, #16]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	697a      	ldr	r2, [r7, #20]
 8007ae8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	693a      	ldr	r2, [r7, #16]
 8007aee:	621a      	str	r2, [r3, #32]
}
 8007af0:	bf00      	nop
 8007af2:	371c      	adds	r7, #28
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b087      	sub	sp, #28
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6a1b      	ldr	r3, [r3, #32]
 8007b0c:	f023 0210 	bic.w	r2, r3, #16
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	699b      	ldr	r3, [r3, #24]
 8007b18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6a1b      	ldr	r3, [r3, #32]
 8007b1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	031b      	lsls	r3, r3, #12
 8007b2c:	697a      	ldr	r2, [r7, #20]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	011b      	lsls	r3, r3, #4
 8007b3e:	693a      	ldr	r2, [r7, #16]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	697a      	ldr	r2, [r7, #20]
 8007b48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	693a      	ldr	r2, [r7, #16]
 8007b4e:	621a      	str	r2, [r3, #32]
}
 8007b50:	bf00      	nop
 8007b52:	371c      	adds	r7, #28
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b087      	sub	sp, #28
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	607a      	str	r2, [r7, #4]
 8007b68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6a1b      	ldr	r3, [r3, #32]
 8007b6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	69db      	ldr	r3, [r3, #28]
 8007b7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6a1b      	ldr	r3, [r3, #32]
 8007b80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	f023 0303 	bic.w	r3, r3, #3
 8007b88:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007b8a:	697a      	ldr	r2, [r7, #20]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b98:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	011b      	lsls	r3, r3, #4
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	697a      	ldr	r2, [r7, #20]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007bac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	021b      	lsls	r3, r3, #8
 8007bb2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007bb6:	693a      	ldr	r2, [r7, #16]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	697a      	ldr	r2, [r7, #20]
 8007bc0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	693a      	ldr	r2, [r7, #16]
 8007bc6:	621a      	str	r2, [r3, #32]
}
 8007bc8:	bf00      	nop
 8007bca:	371c      	adds	r7, #28
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b087      	sub	sp, #28
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	607a      	str	r2, [r7, #4]
 8007be0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6a1b      	ldr	r3, [r3, #32]
 8007be6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	69db      	ldr	r3, [r3, #28]
 8007bf2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6a1b      	ldr	r3, [r3, #32]
 8007bf8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c00:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	021b      	lsls	r3, r3, #8
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c12:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	031b      	lsls	r3, r3, #12
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	697a      	ldr	r2, [r7, #20]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007c26:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	031b      	lsls	r3, r3, #12
 8007c2c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007c30:	693a      	ldr	r2, [r7, #16]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	697a      	ldr	r2, [r7, #20]
 8007c3a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	693a      	ldr	r2, [r7, #16]
 8007c40:	621a      	str	r2, [r3, #32]
}
 8007c42:	bf00      	nop
 8007c44:	371c      	adds	r7, #28
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr

08007c4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b085      	sub	sp, #20
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
 8007c56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c66:	683a      	ldr	r2, [r7, #0]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	f043 0307 	orr.w	r3, r3, #7
 8007c70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	68fa      	ldr	r2, [r7, #12]
 8007c76:	609a      	str	r2, [r3, #8]
}
 8007c78:	bf00      	nop
 8007c7a:	3714      	adds	r7, #20
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b087      	sub	sp, #28
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	607a      	str	r2, [r7, #4]
 8007c90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	021a      	lsls	r2, r3, #8
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	431a      	orrs	r2, r3
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	697a      	ldr	r2, [r7, #20]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	697a      	ldr	r2, [r7, #20]
 8007cb6:	609a      	str	r2, [r3, #8]
}
 8007cb8:	bf00      	nop
 8007cba:	371c      	adds	r7, #28
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b087      	sub	sp, #28
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	f003 031f 	and.w	r3, r3, #31
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8007cdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	6a1a      	ldr	r2, [r3, #32]
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	43db      	mvns	r3, r3
 8007ce6:	401a      	ands	r2, r3
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6a1a      	ldr	r2, [r3, #32]
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	f003 031f 	and.w	r3, r3, #31
 8007cf6:	6879      	ldr	r1, [r7, #4]
 8007cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8007cfc:	431a      	orrs	r2, r3
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	621a      	str	r2, [r3, #32]
}
 8007d02:	bf00      	nop
 8007d04:	371c      	adds	r7, #28
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr
	...

08007d10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b085      	sub	sp, #20
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d101      	bne.n	8007d28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d24:	2302      	movs	r3, #2
 8007d26:	e05a      	b.n	8007dde <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2202      	movs	r2, #2
 8007d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	68fa      	ldr	r2, [r7, #12]
 8007d60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a21      	ldr	r2, [pc, #132]	; (8007dec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d022      	beq.n	8007db2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d74:	d01d      	beq.n	8007db2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a1d      	ldr	r2, [pc, #116]	; (8007df0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d018      	beq.n	8007db2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a1b      	ldr	r2, [pc, #108]	; (8007df4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d013      	beq.n	8007db2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a1a      	ldr	r2, [pc, #104]	; (8007df8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d00e      	beq.n	8007db2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a18      	ldr	r2, [pc, #96]	; (8007dfc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d009      	beq.n	8007db2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a17      	ldr	r2, [pc, #92]	; (8007e00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d004      	beq.n	8007db2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a15      	ldr	r2, [pc, #84]	; (8007e04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d10c      	bne.n	8007dcc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007db8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	68ba      	ldr	r2, [r7, #8]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	68ba      	ldr	r2, [r7, #8]
 8007dca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3714      	adds	r7, #20
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr
 8007dea:	bf00      	nop
 8007dec:	40010000 	.word	0x40010000
 8007df0:	40000400 	.word	0x40000400
 8007df4:	40000800 	.word	0x40000800
 8007df8:	40000c00 	.word	0x40000c00
 8007dfc:	40010400 	.word	0x40010400
 8007e00:	40014000 	.word	0x40014000
 8007e04:	40001800 	.word	0x40001800

08007e08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e10:	bf00      	nop
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e24:	bf00      	nop
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d101      	bne.n	8007e42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e03f      	b.n	8007ec2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d106      	bne.n	8007e5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f7fa fefc 	bl	8002c54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2224      	movs	r2, #36	; 0x24
 8007e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	68da      	ldr	r2, [r3, #12]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 fddf 	bl	8008a38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	691a      	ldr	r2, [r3, #16]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	695a      	ldr	r2, [r3, #20]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68da      	ldr	r2, [r3, #12]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ea8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2220      	movs	r2, #32
 8007eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2220      	movs	r2, #32
 8007ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3708      	adds	r7, #8
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b08a      	sub	sp, #40	; 0x28
 8007ece:	af02      	add	r7, sp, #8
 8007ed0:	60f8      	str	r0, [r7, #12]
 8007ed2:	60b9      	str	r1, [r7, #8]
 8007ed4:	603b      	str	r3, [r7, #0]
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007eda:	2300      	movs	r3, #0
 8007edc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b20      	cmp	r3, #32
 8007ee8:	d17c      	bne.n	8007fe4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d002      	beq.n	8007ef6 <HAL_UART_Transmit+0x2c>
 8007ef0:	88fb      	ldrh	r3, [r7, #6]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d101      	bne.n	8007efa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e075      	b.n	8007fe6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d101      	bne.n	8007f08 <HAL_UART_Transmit+0x3e>
 8007f04:	2302      	movs	r3, #2
 8007f06:	e06e      	b.n	8007fe6 <HAL_UART_Transmit+0x11c>
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2200      	movs	r2, #0
 8007f14:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2221      	movs	r2, #33	; 0x21
 8007f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f1e:	f7fb fcb3 	bl	8003888 <HAL_GetTick>
 8007f22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	88fa      	ldrh	r2, [r7, #6]
 8007f28:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	88fa      	ldrh	r2, [r7, #6]
 8007f2e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f38:	d108      	bne.n	8007f4c <HAL_UART_Transmit+0x82>
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d104      	bne.n	8007f4c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007f42:	2300      	movs	r3, #0
 8007f44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	61bb      	str	r3, [r7, #24]
 8007f4a:	e003      	b.n	8007f54 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f50:	2300      	movs	r3, #0
 8007f52:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007f5c:	e02a      	b.n	8007fb4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	9300      	str	r3, [sp, #0]
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	2200      	movs	r2, #0
 8007f66:	2180      	movs	r1, #128	; 0x80
 8007f68:	68f8      	ldr	r0, [r7, #12]
 8007f6a:	f000 fb1f 	bl	80085ac <UART_WaitOnFlagUntilTimeout>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d001      	beq.n	8007f78 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007f74:	2303      	movs	r3, #3
 8007f76:	e036      	b.n	8007fe6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d10b      	bne.n	8007f96 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	881b      	ldrh	r3, [r3, #0]
 8007f82:	461a      	mov	r2, r3
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f8c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	3302      	adds	r3, #2
 8007f92:	61bb      	str	r3, [r7, #24]
 8007f94:	e007      	b.n	8007fa6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f96:	69fb      	ldr	r3, [r7, #28]
 8007f98:	781a      	ldrb	r2, [r3, #0]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	3b01      	subs	r3, #1
 8007fae:	b29a      	uxth	r2, r3
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1cf      	bne.n	8007f5e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	9300      	str	r3, [sp, #0]
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	2140      	movs	r1, #64	; 0x40
 8007fc8:	68f8      	ldr	r0, [r7, #12]
 8007fca:	f000 faef 	bl	80085ac <UART_WaitOnFlagUntilTimeout>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d001      	beq.n	8007fd8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007fd4:	2303      	movs	r3, #3
 8007fd6:	e006      	b.n	8007fe6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2220      	movs	r2, #32
 8007fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	e000      	b.n	8007fe6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007fe4:	2302      	movs	r3, #2
  }
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3720      	adds	r7, #32
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b084      	sub	sp, #16
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	60f8      	str	r0, [r7, #12]
 8007ff6:	60b9      	str	r1, [r7, #8]
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008002:	b2db      	uxtb	r3, r3
 8008004:	2b20      	cmp	r3, #32
 8008006:	d11d      	bne.n	8008044 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d002      	beq.n	8008014 <HAL_UART_Receive_IT+0x26>
 800800e:	88fb      	ldrh	r3, [r7, #6]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d101      	bne.n	8008018 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	e016      	b.n	8008046 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800801e:	2b01      	cmp	r3, #1
 8008020:	d101      	bne.n	8008026 <HAL_UART_Receive_IT+0x38>
 8008022:	2302      	movs	r3, #2
 8008024:	e00f      	b.n	8008046 <HAL_UART_Receive_IT+0x58>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2201      	movs	r2, #1
 800802a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2200      	movs	r2, #0
 8008032:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008034:	88fb      	ldrh	r3, [r7, #6]
 8008036:	461a      	mov	r2, r3
 8008038:	68b9      	ldr	r1, [r7, #8]
 800803a:	68f8      	ldr	r0, [r7, #12]
 800803c:	f000 fb24 	bl	8008688 <UART_Start_Receive_IT>
 8008040:	4603      	mov	r3, r0
 8008042:	e000      	b.n	8008046 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008044:	2302      	movs	r3, #2
  }
}
 8008046:	4618      	mov	r0, r3
 8008048:	3710      	adds	r7, #16
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
	...

08008050 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b0ba      	sub	sp, #232	; 0xe8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	695b      	ldr	r3, [r3, #20]
 8008072:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008076:	2300      	movs	r3, #0
 8008078:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800807c:	2300      	movs	r3, #0
 800807e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008086:	f003 030f 	and.w	r3, r3, #15
 800808a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800808e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008092:	2b00      	cmp	r3, #0
 8008094:	d10f      	bne.n	80080b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800809a:	f003 0320 	and.w	r3, r3, #32
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d009      	beq.n	80080b6 <HAL_UART_IRQHandler+0x66>
 80080a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080a6:	f003 0320 	and.w	r3, r3, #32
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d003      	beq.n	80080b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 fc07 	bl	80088c2 <UART_Receive_IT>
      return;
 80080b4:	e256      	b.n	8008564 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80080b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	f000 80de 	beq.w	800827c <HAL_UART_IRQHandler+0x22c>
 80080c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080c4:	f003 0301 	and.w	r3, r3, #1
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d106      	bne.n	80080da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80080cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	f000 80d1 	beq.w	800827c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80080da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080de:	f003 0301 	and.w	r3, r3, #1
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00b      	beq.n	80080fe <HAL_UART_IRQHandler+0xae>
 80080e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d005      	beq.n	80080fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f6:	f043 0201 	orr.w	r2, r3, #1
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80080fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008102:	f003 0304 	and.w	r3, r3, #4
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00b      	beq.n	8008122 <HAL_UART_IRQHandler+0xd2>
 800810a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800810e:	f003 0301 	and.w	r3, r3, #1
 8008112:	2b00      	cmp	r3, #0
 8008114:	d005      	beq.n	8008122 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800811a:	f043 0202 	orr.w	r2, r3, #2
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008126:	f003 0302 	and.w	r3, r3, #2
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00b      	beq.n	8008146 <HAL_UART_IRQHandler+0xf6>
 800812e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008132:	f003 0301 	and.w	r3, r3, #1
 8008136:	2b00      	cmp	r3, #0
 8008138:	d005      	beq.n	8008146 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813e:	f043 0204 	orr.w	r2, r3, #4
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800814a:	f003 0308 	and.w	r3, r3, #8
 800814e:	2b00      	cmp	r3, #0
 8008150:	d011      	beq.n	8008176 <HAL_UART_IRQHandler+0x126>
 8008152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008156:	f003 0320 	and.w	r3, r3, #32
 800815a:	2b00      	cmp	r3, #0
 800815c:	d105      	bne.n	800816a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800815e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008162:	f003 0301 	and.w	r3, r3, #1
 8008166:	2b00      	cmp	r3, #0
 8008168:	d005      	beq.n	8008176 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816e:	f043 0208 	orr.w	r2, r3, #8
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800817a:	2b00      	cmp	r3, #0
 800817c:	f000 81ed 	beq.w	800855a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008184:	f003 0320 	and.w	r3, r3, #32
 8008188:	2b00      	cmp	r3, #0
 800818a:	d008      	beq.n	800819e <HAL_UART_IRQHandler+0x14e>
 800818c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008190:	f003 0320 	and.w	r3, r3, #32
 8008194:	2b00      	cmp	r3, #0
 8008196:	d002      	beq.n	800819e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 fb92 	bl	80088c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	695b      	ldr	r3, [r3, #20]
 80081a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081a8:	2b40      	cmp	r3, #64	; 0x40
 80081aa:	bf0c      	ite	eq
 80081ac:	2301      	moveq	r3, #1
 80081ae:	2300      	movne	r3, #0
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ba:	f003 0308 	and.w	r3, r3, #8
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d103      	bne.n	80081ca <HAL_UART_IRQHandler+0x17a>
 80081c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d04f      	beq.n	800826a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fa9a 	bl	8008704 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	695b      	ldr	r3, [r3, #20]
 80081d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081da:	2b40      	cmp	r3, #64	; 0x40
 80081dc:	d141      	bne.n	8008262 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	3314      	adds	r3, #20
 80081e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80081ec:	e853 3f00 	ldrex	r3, [r3]
 80081f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80081f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80081f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	3314      	adds	r3, #20
 8008206:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800820a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800820e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008212:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008216:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800821a:	e841 2300 	strex	r3, r2, [r1]
 800821e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008222:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008226:	2b00      	cmp	r3, #0
 8008228:	d1d9      	bne.n	80081de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822e:	2b00      	cmp	r3, #0
 8008230:	d013      	beq.n	800825a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008236:	4a7d      	ldr	r2, [pc, #500]	; (800842c <HAL_UART_IRQHandler+0x3dc>)
 8008238:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823e:	4618      	mov	r0, r3
 8008240:	f7fb fcd3 	bl	8003bea <HAL_DMA_Abort_IT>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d016      	beq.n	8008278 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800824e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008254:	4610      	mov	r0, r2
 8008256:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008258:	e00e      	b.n	8008278 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f990 	bl	8008580 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008260:	e00a      	b.n	8008278 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f98c 	bl	8008580 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008268:	e006      	b.n	8008278 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 f988 	bl	8008580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008276:	e170      	b.n	800855a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008278:	bf00      	nop
    return;
 800827a:	e16e      	b.n	800855a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008280:	2b01      	cmp	r3, #1
 8008282:	f040 814a 	bne.w	800851a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800828a:	f003 0310 	and.w	r3, r3, #16
 800828e:	2b00      	cmp	r3, #0
 8008290:	f000 8143 	beq.w	800851a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008298:	f003 0310 	and.w	r3, r3, #16
 800829c:	2b00      	cmp	r3, #0
 800829e:	f000 813c 	beq.w	800851a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80082a2:	2300      	movs	r3, #0
 80082a4:	60bb      	str	r3, [r7, #8]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	60bb      	str	r3, [r7, #8]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	60bb      	str	r3, [r7, #8]
 80082b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	695b      	ldr	r3, [r3, #20]
 80082be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082c2:	2b40      	cmp	r3, #64	; 0x40
 80082c4:	f040 80b4 	bne.w	8008430 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80082d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f000 8140 	beq.w	800855e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80082e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80082e6:	429a      	cmp	r2, r3
 80082e8:	f080 8139 	bcs.w	800855e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80082f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f8:	69db      	ldr	r3, [r3, #28]
 80082fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082fe:	f000 8088 	beq.w	8008412 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	330c      	adds	r3, #12
 8008308:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008310:	e853 3f00 	ldrex	r3, [r3]
 8008314:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008318:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800831c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008320:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	330c      	adds	r3, #12
 800832a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800832e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008332:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008336:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800833a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800833e:	e841 2300 	strex	r3, r2, [r1]
 8008342:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008346:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800834a:	2b00      	cmp	r3, #0
 800834c:	d1d9      	bne.n	8008302 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	3314      	adds	r3, #20
 8008354:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008358:	e853 3f00 	ldrex	r3, [r3]
 800835c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800835e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008360:	f023 0301 	bic.w	r3, r3, #1
 8008364:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	3314      	adds	r3, #20
 800836e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008372:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008376:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008378:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800837a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800837e:	e841 2300 	strex	r3, r2, [r1]
 8008382:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008384:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008386:	2b00      	cmp	r3, #0
 8008388:	d1e1      	bne.n	800834e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	3314      	adds	r3, #20
 8008390:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008392:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008394:	e853 3f00 	ldrex	r3, [r3]
 8008398:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800839a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800839c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	3314      	adds	r3, #20
 80083aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80083ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80083b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80083b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80083b6:	e841 2300 	strex	r3, r2, [r1]
 80083ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80083bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d1e3      	bne.n	800838a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2220      	movs	r2, #32
 80083c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	330c      	adds	r3, #12
 80083d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083da:	e853 3f00 	ldrex	r3, [r3]
 80083de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80083e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083e2:	f023 0310 	bic.w	r3, r3, #16
 80083e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	330c      	adds	r3, #12
 80083f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80083f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80083f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80083fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80083fc:	e841 2300 	strex	r3, r2, [r1]
 8008400:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008404:	2b00      	cmp	r3, #0
 8008406:	d1e3      	bne.n	80083d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840c:	4618      	mov	r0, r3
 800840e:	f7fb fb7c 	bl	8003b0a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800841a:	b29b      	uxth	r3, r3
 800841c:	1ad3      	subs	r3, r2, r3
 800841e:	b29b      	uxth	r3, r3
 8008420:	4619      	mov	r1, r3
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 f8b6 	bl	8008594 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008428:	e099      	b.n	800855e <HAL_UART_IRQHandler+0x50e>
 800842a:	bf00      	nop
 800842c:	080087cb 	.word	0x080087cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008438:	b29b      	uxth	r3, r3
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008444:	b29b      	uxth	r3, r3
 8008446:	2b00      	cmp	r3, #0
 8008448:	f000 808b 	beq.w	8008562 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800844c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008450:	2b00      	cmp	r3, #0
 8008452:	f000 8086 	beq.w	8008562 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	330c      	adds	r3, #12
 800845c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008460:	e853 3f00 	ldrex	r3, [r3]
 8008464:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008468:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800846c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	330c      	adds	r3, #12
 8008476:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800847a:	647a      	str	r2, [r7, #68]	; 0x44
 800847c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008480:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008482:	e841 2300 	strex	r3, r2, [r1]
 8008486:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1e3      	bne.n	8008456 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	3314      	adds	r3, #20
 8008494:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008498:	e853 3f00 	ldrex	r3, [r3]
 800849c:	623b      	str	r3, [r7, #32]
   return(result);
 800849e:	6a3b      	ldr	r3, [r7, #32]
 80084a0:	f023 0301 	bic.w	r3, r3, #1
 80084a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	3314      	adds	r3, #20
 80084ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80084b2:	633a      	str	r2, [r7, #48]	; 0x30
 80084b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084ba:	e841 2300 	strex	r3, r2, [r1]
 80084be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d1e3      	bne.n	800848e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2220      	movs	r2, #32
 80084ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	330c      	adds	r3, #12
 80084da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	e853 3f00 	ldrex	r3, [r3]
 80084e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f023 0310 	bic.w	r3, r3, #16
 80084ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	330c      	adds	r3, #12
 80084f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80084f8:	61fa      	str	r2, [r7, #28]
 80084fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fc:	69b9      	ldr	r1, [r7, #24]
 80084fe:	69fa      	ldr	r2, [r7, #28]
 8008500:	e841 2300 	strex	r3, r2, [r1]
 8008504:	617b      	str	r3, [r7, #20]
   return(result);
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1e3      	bne.n	80084d4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800850c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008510:	4619      	mov	r1, r3
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 f83e 	bl	8008594 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008518:	e023      	b.n	8008562 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800851a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800851e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008522:	2b00      	cmp	r3, #0
 8008524:	d009      	beq.n	800853a <HAL_UART_IRQHandler+0x4ea>
 8008526:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800852a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800852e:	2b00      	cmp	r3, #0
 8008530:	d003      	beq.n	800853a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 f95d 	bl	80087f2 <UART_Transmit_IT>
    return;
 8008538:	e014      	b.n	8008564 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800853a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800853e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00e      	beq.n	8008564 <HAL_UART_IRQHandler+0x514>
 8008546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800854a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800854e:	2b00      	cmp	r3, #0
 8008550:	d008      	beq.n	8008564 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 f99d 	bl	8008892 <UART_EndTransmit_IT>
    return;
 8008558:	e004      	b.n	8008564 <HAL_UART_IRQHandler+0x514>
    return;
 800855a:	bf00      	nop
 800855c:	e002      	b.n	8008564 <HAL_UART_IRQHandler+0x514>
      return;
 800855e:	bf00      	nop
 8008560:	e000      	b.n	8008564 <HAL_UART_IRQHandler+0x514>
      return;
 8008562:	bf00      	nop
  }
}
 8008564:	37e8      	adds	r7, #232	; 0xe8
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop

0800856c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008574:	bf00      	nop
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008588:	bf00      	nop
 800858a:	370c      	adds	r7, #12
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	460b      	mov	r3, r1
 800859e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80085a0:	bf00      	nop
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b090      	sub	sp, #64	; 0x40
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	603b      	str	r3, [r7, #0]
 80085b8:	4613      	mov	r3, r2
 80085ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085bc:	e050      	b.n	8008660 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085c4:	d04c      	beq.n	8008660 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80085c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d007      	beq.n	80085dc <UART_WaitOnFlagUntilTimeout+0x30>
 80085cc:	f7fb f95c 	bl	8003888 <HAL_GetTick>
 80085d0:	4602      	mov	r2, r0
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	1ad3      	subs	r3, r2, r3
 80085d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085d8:	429a      	cmp	r2, r3
 80085da:	d241      	bcs.n	8008660 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	330c      	adds	r3, #12
 80085e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e6:	e853 3f00 	ldrex	r3, [r3]
 80085ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80085f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	330c      	adds	r3, #12
 80085fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80085fc:	637a      	str	r2, [r7, #52]	; 0x34
 80085fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008600:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008602:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008604:	e841 2300 	strex	r3, r2, [r1]
 8008608:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800860a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800860c:	2b00      	cmp	r3, #0
 800860e:	d1e5      	bne.n	80085dc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	3314      	adds	r3, #20
 8008616:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	e853 3f00 	ldrex	r3, [r3]
 800861e:	613b      	str	r3, [r7, #16]
   return(result);
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	f023 0301 	bic.w	r3, r3, #1
 8008626:	63bb      	str	r3, [r7, #56]	; 0x38
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	3314      	adds	r3, #20
 800862e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008630:	623a      	str	r2, [r7, #32]
 8008632:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008634:	69f9      	ldr	r1, [r7, #28]
 8008636:	6a3a      	ldr	r2, [r7, #32]
 8008638:	e841 2300 	strex	r3, r2, [r1]
 800863c:	61bb      	str	r3, [r7, #24]
   return(result);
 800863e:	69bb      	ldr	r3, [r7, #24]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d1e5      	bne.n	8008610 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2220      	movs	r2, #32
 8008648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2220      	movs	r2, #32
 8008650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2200      	movs	r2, #0
 8008658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800865c:	2303      	movs	r3, #3
 800865e:	e00f      	b.n	8008680 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	4013      	ands	r3, r2
 800866a:	68ba      	ldr	r2, [r7, #8]
 800866c:	429a      	cmp	r2, r3
 800866e:	bf0c      	ite	eq
 8008670:	2301      	moveq	r3, #1
 8008672:	2300      	movne	r3, #0
 8008674:	b2db      	uxtb	r3, r3
 8008676:	461a      	mov	r2, r3
 8008678:	79fb      	ldrb	r3, [r7, #7]
 800867a:	429a      	cmp	r2, r3
 800867c:	d09f      	beq.n	80085be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3740      	adds	r7, #64	; 0x40
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008688:	b480      	push	{r7}
 800868a:	b085      	sub	sp, #20
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	4613      	mov	r3, r2
 8008694:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	68ba      	ldr	r2, [r7, #8]
 800869a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	88fa      	ldrh	r2, [r7, #6]
 80086a0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	88fa      	ldrh	r2, [r7, #6]
 80086a6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2200      	movs	r2, #0
 80086ac:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2222      	movs	r2, #34	; 0x22
 80086b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2200      	movs	r2, #0
 80086ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	691b      	ldr	r3, [r3, #16]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d007      	beq.n	80086d6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	68da      	ldr	r2, [r3, #12]
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086d4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	695a      	ldr	r2, [r3, #20]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f042 0201 	orr.w	r2, r2, #1
 80086e4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	68da      	ldr	r2, [r3, #12]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f042 0220 	orr.w	r2, r2, #32
 80086f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80086f6:	2300      	movs	r3, #0
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3714      	adds	r7, #20
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008704:	b480      	push	{r7}
 8008706:	b095      	sub	sp, #84	; 0x54
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	330c      	adds	r3, #12
 8008712:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008716:	e853 3f00 	ldrex	r3, [r3]
 800871a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800871c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800871e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008722:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	330c      	adds	r3, #12
 800872a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800872c:	643a      	str	r2, [r7, #64]	; 0x40
 800872e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008730:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008732:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008734:	e841 2300 	strex	r3, r2, [r1]
 8008738:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800873a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1e5      	bne.n	800870c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	3314      	adds	r3, #20
 8008746:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008748:	6a3b      	ldr	r3, [r7, #32]
 800874a:	e853 3f00 	ldrex	r3, [r3]
 800874e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008750:	69fb      	ldr	r3, [r7, #28]
 8008752:	f023 0301 	bic.w	r3, r3, #1
 8008756:	64bb      	str	r3, [r7, #72]	; 0x48
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	3314      	adds	r3, #20
 800875e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008760:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008762:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008764:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008766:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008768:	e841 2300 	strex	r3, r2, [r1]
 800876c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800876e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008770:	2b00      	cmp	r3, #0
 8008772:	d1e5      	bne.n	8008740 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008778:	2b01      	cmp	r3, #1
 800877a:	d119      	bne.n	80087b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	330c      	adds	r3, #12
 8008782:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	e853 3f00 	ldrex	r3, [r3]
 800878a:	60bb      	str	r3, [r7, #8]
   return(result);
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	f023 0310 	bic.w	r3, r3, #16
 8008792:	647b      	str	r3, [r7, #68]	; 0x44
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	330c      	adds	r3, #12
 800879a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800879c:	61ba      	str	r2, [r7, #24]
 800879e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a0:	6979      	ldr	r1, [r7, #20]
 80087a2:	69ba      	ldr	r2, [r7, #24]
 80087a4:	e841 2300 	strex	r3, r2, [r1]
 80087a8:	613b      	str	r3, [r7, #16]
   return(result);
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d1e5      	bne.n	800877c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2220      	movs	r2, #32
 80087b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80087be:	bf00      	nop
 80087c0:	3754      	adds	r7, #84	; 0x54
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr

080087ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b084      	sub	sp, #16
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2200      	movs	r2, #0
 80087dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2200      	movs	r2, #0
 80087e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087e4:	68f8      	ldr	r0, [r7, #12]
 80087e6:	f7ff fecb 	bl	8008580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087ea:	bf00      	nop
 80087ec:	3710      	adds	r7, #16
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80087f2:	b480      	push	{r7}
 80087f4:	b085      	sub	sp, #20
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008800:	b2db      	uxtb	r3, r3
 8008802:	2b21      	cmp	r3, #33	; 0x21
 8008804:	d13e      	bne.n	8008884 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800880e:	d114      	bne.n	800883a <UART_Transmit_IT+0x48>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	691b      	ldr	r3, [r3, #16]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d110      	bne.n	800883a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6a1b      	ldr	r3, [r3, #32]
 800881c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	881b      	ldrh	r3, [r3, #0]
 8008822:	461a      	mov	r2, r3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800882c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6a1b      	ldr	r3, [r3, #32]
 8008832:	1c9a      	adds	r2, r3, #2
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	621a      	str	r2, [r3, #32]
 8008838:	e008      	b.n	800884c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6a1b      	ldr	r3, [r3, #32]
 800883e:	1c59      	adds	r1, r3, #1
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	6211      	str	r1, [r2, #32]
 8008844:	781a      	ldrb	r2, [r3, #0]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008850:	b29b      	uxth	r3, r3
 8008852:	3b01      	subs	r3, #1
 8008854:	b29b      	uxth	r3, r3
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	4619      	mov	r1, r3
 800885a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800885c:	2b00      	cmp	r3, #0
 800885e:	d10f      	bne.n	8008880 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68da      	ldr	r2, [r3, #12]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800886e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	68da      	ldr	r2, [r3, #12]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800887e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008880:	2300      	movs	r3, #0
 8008882:	e000      	b.n	8008886 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008884:	2302      	movs	r3, #2
  }
}
 8008886:	4618      	mov	r0, r3
 8008888:	3714      	adds	r7, #20
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr

08008892 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008892:	b580      	push	{r7, lr}
 8008894:	b082      	sub	sp, #8
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	68da      	ldr	r2, [r3, #12]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2220      	movs	r2, #32
 80088ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f7ff fe5a 	bl	800856c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3708      	adds	r7, #8
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b08c      	sub	sp, #48	; 0x30
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	2b22      	cmp	r3, #34	; 0x22
 80088d4:	f040 80ab 	bne.w	8008a2e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088e0:	d117      	bne.n	8008912 <UART_Receive_IT+0x50>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d113      	bne.n	8008912 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80088ea:	2300      	movs	r3, #0
 80088ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008900:	b29a      	uxth	r2, r3
 8008902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008904:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800890a:	1c9a      	adds	r2, r3, #2
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	629a      	str	r2, [r3, #40]	; 0x28
 8008910:	e026      	b.n	8008960 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008916:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008918:	2300      	movs	r3, #0
 800891a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008924:	d007      	beq.n	8008936 <UART_Receive_IT+0x74>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d10a      	bne.n	8008944 <UART_Receive_IT+0x82>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	691b      	ldr	r3, [r3, #16]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d106      	bne.n	8008944 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	b2da      	uxtb	r2, r3
 800893e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008940:	701a      	strb	r2, [r3, #0]
 8008942:	e008      	b.n	8008956 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	b2db      	uxtb	r3, r3
 800894c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008950:	b2da      	uxtb	r2, r3
 8008952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008954:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800895a:	1c5a      	adds	r2, r3, #1
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008964:	b29b      	uxth	r3, r3
 8008966:	3b01      	subs	r3, #1
 8008968:	b29b      	uxth	r3, r3
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	4619      	mov	r1, r3
 800896e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008970:	2b00      	cmp	r3, #0
 8008972:	d15a      	bne.n	8008a2a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	68da      	ldr	r2, [r3, #12]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f022 0220 	bic.w	r2, r2, #32
 8008982:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	68da      	ldr	r2, [r3, #12]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008992:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	695a      	ldr	r2, [r3, #20]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f022 0201 	bic.w	r2, r2, #1
 80089a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2220      	movs	r2, #32
 80089a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d135      	bne.n	8008a20 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	330c      	adds	r3, #12
 80089c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	e853 3f00 	ldrex	r3, [r3]
 80089c8:	613b      	str	r3, [r7, #16]
   return(result);
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	f023 0310 	bic.w	r3, r3, #16
 80089d0:	627b      	str	r3, [r7, #36]	; 0x24
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	330c      	adds	r3, #12
 80089d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089da:	623a      	str	r2, [r7, #32]
 80089dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089de:	69f9      	ldr	r1, [r7, #28]
 80089e0:	6a3a      	ldr	r2, [r7, #32]
 80089e2:	e841 2300 	strex	r3, r2, [r1]
 80089e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80089e8:	69bb      	ldr	r3, [r7, #24]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d1e5      	bne.n	80089ba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f003 0310 	and.w	r3, r3, #16
 80089f8:	2b10      	cmp	r3, #16
 80089fa:	d10a      	bne.n	8008a12 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80089fc:	2300      	movs	r3, #0
 80089fe:	60fb      	str	r3, [r7, #12]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	60fb      	str	r3, [r7, #12]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	60fb      	str	r3, [r7, #12]
 8008a10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008a16:	4619      	mov	r1, r3
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f7ff fdbb 	bl	8008594 <HAL_UARTEx_RxEventCallback>
 8008a1e:	e002      	b.n	8008a26 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f7fa fb31 	bl	8003088 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008a26:	2300      	movs	r3, #0
 8008a28:	e002      	b.n	8008a30 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	e000      	b.n	8008a30 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008a2e:	2302      	movs	r3, #2
  }
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3730      	adds	r7, #48	; 0x30
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a3c:	b0c0      	sub	sp, #256	; 0x100
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a54:	68d9      	ldr	r1, [r3, #12]
 8008a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	ea40 0301 	orr.w	r3, r0, r1
 8008a60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a66:	689a      	ldr	r2, [r3, #8]
 8008a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a6c:	691b      	ldr	r3, [r3, #16]
 8008a6e:	431a      	orrs	r2, r3
 8008a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a74:	695b      	ldr	r3, [r3, #20]
 8008a76:	431a      	orrs	r2, r3
 8008a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a7c:	69db      	ldr	r3, [r3, #28]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	68db      	ldr	r3, [r3, #12]
 8008a8c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008a90:	f021 010c 	bic.w	r1, r1, #12
 8008a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a9e:	430b      	orrs	r3, r1
 8008aa0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	695b      	ldr	r3, [r3, #20]
 8008aaa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ab2:	6999      	ldr	r1, [r3, #24]
 8008ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	ea40 0301 	orr.w	r3, r0, r1
 8008abe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	4b8f      	ldr	r3, [pc, #572]	; (8008d04 <UART_SetConfig+0x2cc>)
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d005      	beq.n	8008ad8 <UART_SetConfig+0xa0>
 8008acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	4b8d      	ldr	r3, [pc, #564]	; (8008d08 <UART_SetConfig+0x2d0>)
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d104      	bne.n	8008ae2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ad8:	f7fd f818 	bl	8005b0c <HAL_RCC_GetPCLK2Freq>
 8008adc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008ae0:	e003      	b.n	8008aea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008ae2:	f7fc ffff 	bl	8005ae4 <HAL_RCC_GetPCLK1Freq>
 8008ae6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aee:	69db      	ldr	r3, [r3, #28]
 8008af0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008af4:	f040 810c 	bne.w	8008d10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008af8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008afc:	2200      	movs	r2, #0
 8008afe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008b02:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008b06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008b0a:	4622      	mov	r2, r4
 8008b0c:	462b      	mov	r3, r5
 8008b0e:	1891      	adds	r1, r2, r2
 8008b10:	65b9      	str	r1, [r7, #88]	; 0x58
 8008b12:	415b      	adcs	r3, r3
 8008b14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008b1a:	4621      	mov	r1, r4
 8008b1c:	eb12 0801 	adds.w	r8, r2, r1
 8008b20:	4629      	mov	r1, r5
 8008b22:	eb43 0901 	adc.w	r9, r3, r1
 8008b26:	f04f 0200 	mov.w	r2, #0
 8008b2a:	f04f 0300 	mov.w	r3, #0
 8008b2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008b32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008b36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008b3a:	4690      	mov	r8, r2
 8008b3c:	4699      	mov	r9, r3
 8008b3e:	4623      	mov	r3, r4
 8008b40:	eb18 0303 	adds.w	r3, r8, r3
 8008b44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008b48:	462b      	mov	r3, r5
 8008b4a:	eb49 0303 	adc.w	r3, r9, r3
 8008b4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008b5e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008b62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008b66:	460b      	mov	r3, r1
 8008b68:	18db      	adds	r3, r3, r3
 8008b6a:	653b      	str	r3, [r7, #80]	; 0x50
 8008b6c:	4613      	mov	r3, r2
 8008b6e:	eb42 0303 	adc.w	r3, r2, r3
 8008b72:	657b      	str	r3, [r7, #84]	; 0x54
 8008b74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008b78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008b7c:	f7f7 ff7e 	bl	8000a7c <__aeabi_uldivmod>
 8008b80:	4602      	mov	r2, r0
 8008b82:	460b      	mov	r3, r1
 8008b84:	4b61      	ldr	r3, [pc, #388]	; (8008d0c <UART_SetConfig+0x2d4>)
 8008b86:	fba3 2302 	umull	r2, r3, r3, r2
 8008b8a:	095b      	lsrs	r3, r3, #5
 8008b8c:	011c      	lsls	r4, r3, #4
 8008b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b92:	2200      	movs	r2, #0
 8008b94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008b98:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008b9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008ba0:	4642      	mov	r2, r8
 8008ba2:	464b      	mov	r3, r9
 8008ba4:	1891      	adds	r1, r2, r2
 8008ba6:	64b9      	str	r1, [r7, #72]	; 0x48
 8008ba8:	415b      	adcs	r3, r3
 8008baa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008bb0:	4641      	mov	r1, r8
 8008bb2:	eb12 0a01 	adds.w	sl, r2, r1
 8008bb6:	4649      	mov	r1, r9
 8008bb8:	eb43 0b01 	adc.w	fp, r3, r1
 8008bbc:	f04f 0200 	mov.w	r2, #0
 8008bc0:	f04f 0300 	mov.w	r3, #0
 8008bc4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008bc8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008bcc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008bd0:	4692      	mov	sl, r2
 8008bd2:	469b      	mov	fp, r3
 8008bd4:	4643      	mov	r3, r8
 8008bd6:	eb1a 0303 	adds.w	r3, sl, r3
 8008bda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008bde:	464b      	mov	r3, r9
 8008be0:	eb4b 0303 	adc.w	r3, fp, r3
 8008be4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008bf4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008bf8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	18db      	adds	r3, r3, r3
 8008c00:	643b      	str	r3, [r7, #64]	; 0x40
 8008c02:	4613      	mov	r3, r2
 8008c04:	eb42 0303 	adc.w	r3, r2, r3
 8008c08:	647b      	str	r3, [r7, #68]	; 0x44
 8008c0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008c0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008c12:	f7f7 ff33 	bl	8000a7c <__aeabi_uldivmod>
 8008c16:	4602      	mov	r2, r0
 8008c18:	460b      	mov	r3, r1
 8008c1a:	4611      	mov	r1, r2
 8008c1c:	4b3b      	ldr	r3, [pc, #236]	; (8008d0c <UART_SetConfig+0x2d4>)
 8008c1e:	fba3 2301 	umull	r2, r3, r3, r1
 8008c22:	095b      	lsrs	r3, r3, #5
 8008c24:	2264      	movs	r2, #100	; 0x64
 8008c26:	fb02 f303 	mul.w	r3, r2, r3
 8008c2a:	1acb      	subs	r3, r1, r3
 8008c2c:	00db      	lsls	r3, r3, #3
 8008c2e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008c32:	4b36      	ldr	r3, [pc, #216]	; (8008d0c <UART_SetConfig+0x2d4>)
 8008c34:	fba3 2302 	umull	r2, r3, r3, r2
 8008c38:	095b      	lsrs	r3, r3, #5
 8008c3a:	005b      	lsls	r3, r3, #1
 8008c3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008c40:	441c      	add	r4, r3
 8008c42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c46:	2200      	movs	r2, #0
 8008c48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008c4c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008c50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008c54:	4642      	mov	r2, r8
 8008c56:	464b      	mov	r3, r9
 8008c58:	1891      	adds	r1, r2, r2
 8008c5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8008c5c:	415b      	adcs	r3, r3
 8008c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008c64:	4641      	mov	r1, r8
 8008c66:	1851      	adds	r1, r2, r1
 8008c68:	6339      	str	r1, [r7, #48]	; 0x30
 8008c6a:	4649      	mov	r1, r9
 8008c6c:	414b      	adcs	r3, r1
 8008c6e:	637b      	str	r3, [r7, #52]	; 0x34
 8008c70:	f04f 0200 	mov.w	r2, #0
 8008c74:	f04f 0300 	mov.w	r3, #0
 8008c78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008c7c:	4659      	mov	r1, fp
 8008c7e:	00cb      	lsls	r3, r1, #3
 8008c80:	4651      	mov	r1, sl
 8008c82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c86:	4651      	mov	r1, sl
 8008c88:	00ca      	lsls	r2, r1, #3
 8008c8a:	4610      	mov	r0, r2
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	4603      	mov	r3, r0
 8008c90:	4642      	mov	r2, r8
 8008c92:	189b      	adds	r3, r3, r2
 8008c94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c98:	464b      	mov	r3, r9
 8008c9a:	460a      	mov	r2, r1
 8008c9c:	eb42 0303 	adc.w	r3, r2, r3
 8008ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008cb0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008cb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008cb8:	460b      	mov	r3, r1
 8008cba:	18db      	adds	r3, r3, r3
 8008cbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cbe:	4613      	mov	r3, r2
 8008cc0:	eb42 0303 	adc.w	r3, r2, r3
 8008cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008cca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008cce:	f7f7 fed5 	bl	8000a7c <__aeabi_uldivmod>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	4b0d      	ldr	r3, [pc, #52]	; (8008d0c <UART_SetConfig+0x2d4>)
 8008cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8008cdc:	095b      	lsrs	r3, r3, #5
 8008cde:	2164      	movs	r1, #100	; 0x64
 8008ce0:	fb01 f303 	mul.w	r3, r1, r3
 8008ce4:	1ad3      	subs	r3, r2, r3
 8008ce6:	00db      	lsls	r3, r3, #3
 8008ce8:	3332      	adds	r3, #50	; 0x32
 8008cea:	4a08      	ldr	r2, [pc, #32]	; (8008d0c <UART_SetConfig+0x2d4>)
 8008cec:	fba2 2303 	umull	r2, r3, r2, r3
 8008cf0:	095b      	lsrs	r3, r3, #5
 8008cf2:	f003 0207 	and.w	r2, r3, #7
 8008cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4422      	add	r2, r4
 8008cfe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008d00:	e105      	b.n	8008f0e <UART_SetConfig+0x4d6>
 8008d02:	bf00      	nop
 8008d04:	40011000 	.word	0x40011000
 8008d08:	40011400 	.word	0x40011400
 8008d0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d14:	2200      	movs	r2, #0
 8008d16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008d1a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008d1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008d22:	4642      	mov	r2, r8
 8008d24:	464b      	mov	r3, r9
 8008d26:	1891      	adds	r1, r2, r2
 8008d28:	6239      	str	r1, [r7, #32]
 8008d2a:	415b      	adcs	r3, r3
 8008d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8008d2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008d32:	4641      	mov	r1, r8
 8008d34:	1854      	adds	r4, r2, r1
 8008d36:	4649      	mov	r1, r9
 8008d38:	eb43 0501 	adc.w	r5, r3, r1
 8008d3c:	f04f 0200 	mov.w	r2, #0
 8008d40:	f04f 0300 	mov.w	r3, #0
 8008d44:	00eb      	lsls	r3, r5, #3
 8008d46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d4a:	00e2      	lsls	r2, r4, #3
 8008d4c:	4614      	mov	r4, r2
 8008d4e:	461d      	mov	r5, r3
 8008d50:	4643      	mov	r3, r8
 8008d52:	18e3      	adds	r3, r4, r3
 8008d54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008d58:	464b      	mov	r3, r9
 8008d5a:	eb45 0303 	adc.w	r3, r5, r3
 8008d5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008d6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008d72:	f04f 0200 	mov.w	r2, #0
 8008d76:	f04f 0300 	mov.w	r3, #0
 8008d7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008d7e:	4629      	mov	r1, r5
 8008d80:	008b      	lsls	r3, r1, #2
 8008d82:	4621      	mov	r1, r4
 8008d84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d88:	4621      	mov	r1, r4
 8008d8a:	008a      	lsls	r2, r1, #2
 8008d8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008d90:	f7f7 fe74 	bl	8000a7c <__aeabi_uldivmod>
 8008d94:	4602      	mov	r2, r0
 8008d96:	460b      	mov	r3, r1
 8008d98:	4b60      	ldr	r3, [pc, #384]	; (8008f1c <UART_SetConfig+0x4e4>)
 8008d9a:	fba3 2302 	umull	r2, r3, r3, r2
 8008d9e:	095b      	lsrs	r3, r3, #5
 8008da0:	011c      	lsls	r4, r3, #4
 8008da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008da6:	2200      	movs	r2, #0
 8008da8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008dac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008db0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008db4:	4642      	mov	r2, r8
 8008db6:	464b      	mov	r3, r9
 8008db8:	1891      	adds	r1, r2, r2
 8008dba:	61b9      	str	r1, [r7, #24]
 8008dbc:	415b      	adcs	r3, r3
 8008dbe:	61fb      	str	r3, [r7, #28]
 8008dc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008dc4:	4641      	mov	r1, r8
 8008dc6:	1851      	adds	r1, r2, r1
 8008dc8:	6139      	str	r1, [r7, #16]
 8008dca:	4649      	mov	r1, r9
 8008dcc:	414b      	adcs	r3, r1
 8008dce:	617b      	str	r3, [r7, #20]
 8008dd0:	f04f 0200 	mov.w	r2, #0
 8008dd4:	f04f 0300 	mov.w	r3, #0
 8008dd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008ddc:	4659      	mov	r1, fp
 8008dde:	00cb      	lsls	r3, r1, #3
 8008de0:	4651      	mov	r1, sl
 8008de2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008de6:	4651      	mov	r1, sl
 8008de8:	00ca      	lsls	r2, r1, #3
 8008dea:	4610      	mov	r0, r2
 8008dec:	4619      	mov	r1, r3
 8008dee:	4603      	mov	r3, r0
 8008df0:	4642      	mov	r2, r8
 8008df2:	189b      	adds	r3, r3, r2
 8008df4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008df8:	464b      	mov	r3, r9
 8008dfa:	460a      	mov	r2, r1
 8008dfc:	eb42 0303 	adc.w	r3, r2, r3
 8008e00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e0e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008e10:	f04f 0200 	mov.w	r2, #0
 8008e14:	f04f 0300 	mov.w	r3, #0
 8008e18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008e1c:	4649      	mov	r1, r9
 8008e1e:	008b      	lsls	r3, r1, #2
 8008e20:	4641      	mov	r1, r8
 8008e22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e26:	4641      	mov	r1, r8
 8008e28:	008a      	lsls	r2, r1, #2
 8008e2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008e2e:	f7f7 fe25 	bl	8000a7c <__aeabi_uldivmod>
 8008e32:	4602      	mov	r2, r0
 8008e34:	460b      	mov	r3, r1
 8008e36:	4b39      	ldr	r3, [pc, #228]	; (8008f1c <UART_SetConfig+0x4e4>)
 8008e38:	fba3 1302 	umull	r1, r3, r3, r2
 8008e3c:	095b      	lsrs	r3, r3, #5
 8008e3e:	2164      	movs	r1, #100	; 0x64
 8008e40:	fb01 f303 	mul.w	r3, r1, r3
 8008e44:	1ad3      	subs	r3, r2, r3
 8008e46:	011b      	lsls	r3, r3, #4
 8008e48:	3332      	adds	r3, #50	; 0x32
 8008e4a:	4a34      	ldr	r2, [pc, #208]	; (8008f1c <UART_SetConfig+0x4e4>)
 8008e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8008e50:	095b      	lsrs	r3, r3, #5
 8008e52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e56:	441c      	add	r4, r3
 8008e58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	673b      	str	r3, [r7, #112]	; 0x70
 8008e60:	677a      	str	r2, [r7, #116]	; 0x74
 8008e62:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008e66:	4642      	mov	r2, r8
 8008e68:	464b      	mov	r3, r9
 8008e6a:	1891      	adds	r1, r2, r2
 8008e6c:	60b9      	str	r1, [r7, #8]
 8008e6e:	415b      	adcs	r3, r3
 8008e70:	60fb      	str	r3, [r7, #12]
 8008e72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008e76:	4641      	mov	r1, r8
 8008e78:	1851      	adds	r1, r2, r1
 8008e7a:	6039      	str	r1, [r7, #0]
 8008e7c:	4649      	mov	r1, r9
 8008e7e:	414b      	adcs	r3, r1
 8008e80:	607b      	str	r3, [r7, #4]
 8008e82:	f04f 0200 	mov.w	r2, #0
 8008e86:	f04f 0300 	mov.w	r3, #0
 8008e8a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008e8e:	4659      	mov	r1, fp
 8008e90:	00cb      	lsls	r3, r1, #3
 8008e92:	4651      	mov	r1, sl
 8008e94:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e98:	4651      	mov	r1, sl
 8008e9a:	00ca      	lsls	r2, r1, #3
 8008e9c:	4610      	mov	r0, r2
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	4642      	mov	r2, r8
 8008ea4:	189b      	adds	r3, r3, r2
 8008ea6:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ea8:	464b      	mov	r3, r9
 8008eaa:	460a      	mov	r2, r1
 8008eac:	eb42 0303 	adc.w	r3, r2, r3
 8008eb0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	663b      	str	r3, [r7, #96]	; 0x60
 8008ebc:	667a      	str	r2, [r7, #100]	; 0x64
 8008ebe:	f04f 0200 	mov.w	r2, #0
 8008ec2:	f04f 0300 	mov.w	r3, #0
 8008ec6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008eca:	4649      	mov	r1, r9
 8008ecc:	008b      	lsls	r3, r1, #2
 8008ece:	4641      	mov	r1, r8
 8008ed0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ed4:	4641      	mov	r1, r8
 8008ed6:	008a      	lsls	r2, r1, #2
 8008ed8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008edc:	f7f7 fdce 	bl	8000a7c <__aeabi_uldivmod>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	4b0d      	ldr	r3, [pc, #52]	; (8008f1c <UART_SetConfig+0x4e4>)
 8008ee6:	fba3 1302 	umull	r1, r3, r3, r2
 8008eea:	095b      	lsrs	r3, r3, #5
 8008eec:	2164      	movs	r1, #100	; 0x64
 8008eee:	fb01 f303 	mul.w	r3, r1, r3
 8008ef2:	1ad3      	subs	r3, r2, r3
 8008ef4:	011b      	lsls	r3, r3, #4
 8008ef6:	3332      	adds	r3, #50	; 0x32
 8008ef8:	4a08      	ldr	r2, [pc, #32]	; (8008f1c <UART_SetConfig+0x4e4>)
 8008efa:	fba2 2303 	umull	r2, r3, r2, r3
 8008efe:	095b      	lsrs	r3, r3, #5
 8008f00:	f003 020f 	and.w	r2, r3, #15
 8008f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4422      	add	r2, r4
 8008f0c:	609a      	str	r2, [r3, #8]
}
 8008f0e:	bf00      	nop
 8008f10:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008f14:	46bd      	mov	sp, r7
 8008f16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f1a:	bf00      	nop
 8008f1c:	51eb851f 	.word	0x51eb851f

08008f20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f20:	b084      	sub	sp, #16
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b084      	sub	sp, #16
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
 8008f2a:	f107 001c 	add.w	r0, r7, #28
 8008f2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d122      	bne.n	8008f7e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008f4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d105      	bne.n	8008f72 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	68db      	ldr	r3, [r3, #12]
 8008f6a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 faa2 	bl	80094bc <USB_CoreReset>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	73fb      	strb	r3, [r7, #15]
 8008f7c:	e01a      	b.n	8008fb4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	68db      	ldr	r3, [r3, #12]
 8008f82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 fa96 	bl	80094bc <USB_CoreReset>
 8008f90:	4603      	mov	r3, r0
 8008f92:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008f94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d106      	bne.n	8008fa8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	639a      	str	r2, [r3, #56]	; 0x38
 8008fa6:	e005      	b.n	8008fb4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d10b      	bne.n	8008fd2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	f043 0206 	orr.w	r2, r3, #6
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	f043 0220 	orr.w	r2, r3, #32
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3710      	adds	r7, #16
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008fde:	b004      	add	sp, #16
 8008fe0:	4770      	bx	lr

08008fe2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008fe2:	b480      	push	{r7}
 8008fe4:	b083      	sub	sp, #12
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	f023 0201 	bic.w	r2, r3, #1
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	460b      	mov	r3, r1
 800900e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009010:	2300      	movs	r3, #0
 8009012:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	68db      	ldr	r3, [r3, #12]
 8009018:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009020:	78fb      	ldrb	r3, [r7, #3]
 8009022:	2b01      	cmp	r3, #1
 8009024:	d115      	bne.n	8009052 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	68db      	ldr	r3, [r3, #12]
 800902a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009032:	2001      	movs	r0, #1
 8009034:	f7fa fc34 	bl	80038a0 <HAL_Delay>
      ms++;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	3301      	adds	r3, #1
 800903c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 fa2e 	bl	80094a0 <USB_GetMode>
 8009044:	4603      	mov	r3, r0
 8009046:	2b01      	cmp	r3, #1
 8009048:	d01e      	beq.n	8009088 <USB_SetCurrentMode+0x84>
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2b31      	cmp	r3, #49	; 0x31
 800904e:	d9f0      	bls.n	8009032 <USB_SetCurrentMode+0x2e>
 8009050:	e01a      	b.n	8009088 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009052:	78fb      	ldrb	r3, [r7, #3]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d115      	bne.n	8009084 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009064:	2001      	movs	r0, #1
 8009066:	f7fa fc1b 	bl	80038a0 <HAL_Delay>
      ms++;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	3301      	adds	r3, #1
 800906e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 fa15 	bl	80094a0 <USB_GetMode>
 8009076:	4603      	mov	r3, r0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d005      	beq.n	8009088 <USB_SetCurrentMode+0x84>
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2b31      	cmp	r3, #49	; 0x31
 8009080:	d9f0      	bls.n	8009064 <USB_SetCurrentMode+0x60>
 8009082:	e001      	b.n	8009088 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009084:	2301      	movs	r3, #1
 8009086:	e005      	b.n	8009094 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2b32      	cmp	r3, #50	; 0x32
 800908c:	d101      	bne.n	8009092 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800908e:	2301      	movs	r3, #1
 8009090:	e000      	b.n	8009094 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3710      	adds	r7, #16
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800909c:	b084      	sub	sp, #16
 800909e:	b580      	push	{r7, lr}
 80090a0:	b086      	sub	sp, #24
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
 80090a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80090aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80090ae:	2300      	movs	r3, #0
 80090b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80090b6:	2300      	movs	r3, #0
 80090b8:	613b      	str	r3, [r7, #16]
 80090ba:	e009      	b.n	80090d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	3340      	adds	r3, #64	; 0x40
 80090c2:	009b      	lsls	r3, r3, #2
 80090c4:	4413      	add	r3, r2
 80090c6:	2200      	movs	r2, #0
 80090c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	3301      	adds	r3, #1
 80090ce:	613b      	str	r3, [r7, #16]
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	2b0e      	cmp	r3, #14
 80090d4:	d9f2      	bls.n	80090bc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80090d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d11c      	bne.n	8009116 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	68fa      	ldr	r2, [r7, #12]
 80090e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090ea:	f043 0302 	orr.w	r3, r3, #2
 80090ee:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009100:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800910c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	639a      	str	r2, [r3, #56]	; 0x38
 8009114:	e00b      	b.n	800912e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800911a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009126:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009134:	461a      	mov	r2, r3
 8009136:	2300      	movs	r3, #0
 8009138:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009140:	4619      	mov	r1, r3
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009148:	461a      	mov	r2, r3
 800914a:	680b      	ldr	r3, [r1, #0]
 800914c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800914e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009150:	2b01      	cmp	r3, #1
 8009152:	d10c      	bne.n	800916e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009156:	2b00      	cmp	r3, #0
 8009158:	d104      	bne.n	8009164 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800915a:	2100      	movs	r1, #0
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 f965 	bl	800942c <USB_SetDevSpeed>
 8009162:	e008      	b.n	8009176 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009164:	2101      	movs	r1, #1
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 f960 	bl	800942c <USB_SetDevSpeed>
 800916c:	e003      	b.n	8009176 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800916e:	2103      	movs	r1, #3
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 f95b 	bl	800942c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009176:	2110      	movs	r1, #16
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 f8f3 	bl	8009364 <USB_FlushTxFifo>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d001      	beq.n	8009188 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009184:	2301      	movs	r3, #1
 8009186:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 f91f 	bl	80093cc <USB_FlushRxFifo>
 800918e:	4603      	mov	r3, r0
 8009190:	2b00      	cmp	r3, #0
 8009192:	d001      	beq.n	8009198 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009194:	2301      	movs	r3, #1
 8009196:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800919e:	461a      	mov	r2, r3
 80091a0:	2300      	movs	r3, #0
 80091a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091aa:	461a      	mov	r2, r3
 80091ac:	2300      	movs	r3, #0
 80091ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091b6:	461a      	mov	r2, r3
 80091b8:	2300      	movs	r3, #0
 80091ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091bc:	2300      	movs	r3, #0
 80091be:	613b      	str	r3, [r7, #16]
 80091c0:	e043      	b.n	800924a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	015a      	lsls	r2, r3, #5
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	4413      	add	r3, r2
 80091ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091d8:	d118      	bne.n	800920c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d10a      	bne.n	80091f6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	015a      	lsls	r2, r3, #5
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	4413      	add	r3, r2
 80091e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091ec:	461a      	mov	r2, r3
 80091ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80091f2:	6013      	str	r3, [r2, #0]
 80091f4:	e013      	b.n	800921e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	015a      	lsls	r2, r3, #5
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	4413      	add	r3, r2
 80091fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009202:	461a      	mov	r2, r3
 8009204:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009208:	6013      	str	r3, [r2, #0]
 800920a:	e008      	b.n	800921e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	015a      	lsls	r2, r3, #5
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	4413      	add	r3, r2
 8009214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009218:	461a      	mov	r2, r3
 800921a:	2300      	movs	r3, #0
 800921c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	015a      	lsls	r2, r3, #5
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	4413      	add	r3, r2
 8009226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800922a:	461a      	mov	r2, r3
 800922c:	2300      	movs	r3, #0
 800922e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	015a      	lsls	r2, r3, #5
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	4413      	add	r3, r2
 8009238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800923c:	461a      	mov	r2, r3
 800923e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009242:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	3301      	adds	r3, #1
 8009248:	613b      	str	r3, [r7, #16]
 800924a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924c:	693a      	ldr	r2, [r7, #16]
 800924e:	429a      	cmp	r2, r3
 8009250:	d3b7      	bcc.n	80091c2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009252:	2300      	movs	r3, #0
 8009254:	613b      	str	r3, [r7, #16]
 8009256:	e043      	b.n	80092e0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	015a      	lsls	r2, r3, #5
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	4413      	add	r3, r2
 8009260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800926a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800926e:	d118      	bne.n	80092a2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d10a      	bne.n	800928c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	015a      	lsls	r2, r3, #5
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	4413      	add	r3, r2
 800927e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009282:	461a      	mov	r2, r3
 8009284:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009288:	6013      	str	r3, [r2, #0]
 800928a:	e013      	b.n	80092b4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	015a      	lsls	r2, r3, #5
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	4413      	add	r3, r2
 8009294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009298:	461a      	mov	r2, r3
 800929a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800929e:	6013      	str	r3, [r2, #0]
 80092a0:	e008      	b.n	80092b4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	015a      	lsls	r2, r3, #5
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	4413      	add	r3, r2
 80092aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ae:	461a      	mov	r2, r3
 80092b0:	2300      	movs	r3, #0
 80092b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	015a      	lsls	r2, r3, #5
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	4413      	add	r3, r2
 80092bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092c0:	461a      	mov	r2, r3
 80092c2:	2300      	movs	r3, #0
 80092c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	015a      	lsls	r2, r3, #5
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	4413      	add	r3, r2
 80092ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092d2:	461a      	mov	r2, r3
 80092d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80092d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	3301      	adds	r3, #1
 80092de:	613b      	str	r3, [r7, #16]
 80092e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e2:	693a      	ldr	r2, [r7, #16]
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d3b7      	bcc.n	8009258 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092ee:	691b      	ldr	r3, [r3, #16]
 80092f0:	68fa      	ldr	r2, [r7, #12]
 80092f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009308:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800930a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930c:	2b00      	cmp	r3, #0
 800930e:	d105      	bne.n	800931c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	699b      	ldr	r3, [r3, #24]
 8009314:	f043 0210 	orr.w	r2, r3, #16
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	699a      	ldr	r2, [r3, #24]
 8009320:	4b0f      	ldr	r3, [pc, #60]	; (8009360 <USB_DevInit+0x2c4>)
 8009322:	4313      	orrs	r3, r2
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800932a:	2b00      	cmp	r3, #0
 800932c:	d005      	beq.n	800933a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	699b      	ldr	r3, [r3, #24]
 8009332:	f043 0208 	orr.w	r2, r3, #8
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800933a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800933c:	2b01      	cmp	r3, #1
 800933e:	d107      	bne.n	8009350 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	699b      	ldr	r3, [r3, #24]
 8009344:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009348:	f043 0304 	orr.w	r3, r3, #4
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009350:	7dfb      	ldrb	r3, [r7, #23]
}
 8009352:	4618      	mov	r0, r3
 8009354:	3718      	adds	r7, #24
 8009356:	46bd      	mov	sp, r7
 8009358:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800935c:	b004      	add	sp, #16
 800935e:	4770      	bx	lr
 8009360:	803c3800 	.word	0x803c3800

08009364 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009364:	b480      	push	{r7}
 8009366:	b085      	sub	sp, #20
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800936e:	2300      	movs	r3, #0
 8009370:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	3301      	adds	r3, #1
 8009376:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	4a13      	ldr	r2, [pc, #76]	; (80093c8 <USB_FlushTxFifo+0x64>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d901      	bls.n	8009384 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009380:	2303      	movs	r3, #3
 8009382:	e01b      	b.n	80093bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	691b      	ldr	r3, [r3, #16]
 8009388:	2b00      	cmp	r3, #0
 800938a:	daf2      	bge.n	8009372 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800938c:	2300      	movs	r3, #0
 800938e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	019b      	lsls	r3, r3, #6
 8009394:	f043 0220 	orr.w	r2, r3, #32
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	3301      	adds	r3, #1
 80093a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	4a08      	ldr	r2, [pc, #32]	; (80093c8 <USB_FlushTxFifo+0x64>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d901      	bls.n	80093ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80093aa:	2303      	movs	r3, #3
 80093ac:	e006      	b.n	80093bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	691b      	ldr	r3, [r3, #16]
 80093b2:	f003 0320 	and.w	r3, r3, #32
 80093b6:	2b20      	cmp	r3, #32
 80093b8:	d0f0      	beq.n	800939c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80093ba:	2300      	movs	r3, #0
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3714      	adds	r7, #20
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr
 80093c8:	00030d40 	.word	0x00030d40

080093cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b085      	sub	sp, #20
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80093d4:	2300      	movs	r3, #0
 80093d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	3301      	adds	r3, #1
 80093dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	4a11      	ldr	r2, [pc, #68]	; (8009428 <USB_FlushRxFifo+0x5c>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d901      	bls.n	80093ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80093e6:	2303      	movs	r3, #3
 80093e8:	e018      	b.n	800941c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	691b      	ldr	r3, [r3, #16]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	daf2      	bge.n	80093d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80093f2:	2300      	movs	r3, #0
 80093f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2210      	movs	r2, #16
 80093fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	3301      	adds	r3, #1
 8009400:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	4a08      	ldr	r2, [pc, #32]	; (8009428 <USB_FlushRxFifo+0x5c>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d901      	bls.n	800940e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800940a:	2303      	movs	r3, #3
 800940c:	e006      	b.n	800941c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	691b      	ldr	r3, [r3, #16]
 8009412:	f003 0310 	and.w	r3, r3, #16
 8009416:	2b10      	cmp	r3, #16
 8009418:	d0f0      	beq.n	80093fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800941a:	2300      	movs	r3, #0
}
 800941c:	4618      	mov	r0, r3
 800941e:	3714      	adds	r7, #20
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr
 8009428:	00030d40 	.word	0x00030d40

0800942c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800942c:	b480      	push	{r7}
 800942e:	b085      	sub	sp, #20
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	460b      	mov	r3, r1
 8009436:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009442:	681a      	ldr	r2, [r3, #0]
 8009444:	78fb      	ldrb	r3, [r7, #3]
 8009446:	68f9      	ldr	r1, [r7, #12]
 8009448:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800944c:	4313      	orrs	r3, r2
 800944e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009450:	2300      	movs	r3, #0
}
 8009452:	4618      	mov	r0, r3
 8009454:	3714      	adds	r7, #20
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr

0800945e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800945e:	b480      	push	{r7}
 8009460:	b085      	sub	sp, #20
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	68fa      	ldr	r2, [r7, #12]
 8009474:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009478:	f023 0303 	bic.w	r3, r3, #3
 800947c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	68fa      	ldr	r2, [r7, #12]
 8009488:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800948c:	f043 0302 	orr.w	r3, r3, #2
 8009490:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009492:	2300      	movs	r3, #0
}
 8009494:	4618      	mov	r0, r3
 8009496:	3714      	adds	r7, #20
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b083      	sub	sp, #12
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	695b      	ldr	r3, [r3, #20]
 80094ac:	f003 0301 	and.w	r3, r3, #1
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80094bc:	b480      	push	{r7}
 80094be:	b085      	sub	sp, #20
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80094c4:	2300      	movs	r3, #0
 80094c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	3301      	adds	r3, #1
 80094cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	4a13      	ldr	r2, [pc, #76]	; (8009520 <USB_CoreReset+0x64>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d901      	bls.n	80094da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80094d6:	2303      	movs	r3, #3
 80094d8:	e01b      	b.n	8009512 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	691b      	ldr	r3, [r3, #16]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	daf2      	bge.n	80094c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80094e2:	2300      	movs	r3, #0
 80094e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	691b      	ldr	r3, [r3, #16]
 80094ea:	f043 0201 	orr.w	r2, r3, #1
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	3301      	adds	r3, #1
 80094f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	4a09      	ldr	r2, [pc, #36]	; (8009520 <USB_CoreReset+0x64>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d901      	bls.n	8009504 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009500:	2303      	movs	r3, #3
 8009502:	e006      	b.n	8009512 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	691b      	ldr	r3, [r3, #16]
 8009508:	f003 0301 	and.w	r3, r3, #1
 800950c:	2b01      	cmp	r3, #1
 800950e:	d0f0      	beq.n	80094f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8009510:	2300      	movs	r3, #0
}
 8009512:	4618      	mov	r0, r3
 8009514:	3714      	adds	r7, #20
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr
 800951e:	bf00      	nop
 8009520:	00030d40 	.word	0x00030d40

08009524 <atoi>:
 8009524:	220a      	movs	r2, #10
 8009526:	2100      	movs	r1, #0
 8009528:	f000 b98a 	b.w	8009840 <strtol>

0800952c <__errno>:
 800952c:	4b01      	ldr	r3, [pc, #4]	; (8009534 <__errno+0x8>)
 800952e:	6818      	ldr	r0, [r3, #0]
 8009530:	4770      	bx	lr
 8009532:	bf00      	nop
 8009534:	20000050 	.word	0x20000050

08009538 <__libc_init_array>:
 8009538:	b570      	push	{r4, r5, r6, lr}
 800953a:	4d0d      	ldr	r5, [pc, #52]	; (8009570 <__libc_init_array+0x38>)
 800953c:	4c0d      	ldr	r4, [pc, #52]	; (8009574 <__libc_init_array+0x3c>)
 800953e:	1b64      	subs	r4, r4, r5
 8009540:	10a4      	asrs	r4, r4, #2
 8009542:	2600      	movs	r6, #0
 8009544:	42a6      	cmp	r6, r4
 8009546:	d109      	bne.n	800955c <__libc_init_array+0x24>
 8009548:	4d0b      	ldr	r5, [pc, #44]	; (8009578 <__libc_init_array+0x40>)
 800954a:	4c0c      	ldr	r4, [pc, #48]	; (800957c <__libc_init_array+0x44>)
 800954c:	f001 fab4 	bl	800aab8 <_init>
 8009550:	1b64      	subs	r4, r4, r5
 8009552:	10a4      	asrs	r4, r4, #2
 8009554:	2600      	movs	r6, #0
 8009556:	42a6      	cmp	r6, r4
 8009558:	d105      	bne.n	8009566 <__libc_init_array+0x2e>
 800955a:	bd70      	pop	{r4, r5, r6, pc}
 800955c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009560:	4798      	blx	r3
 8009562:	3601      	adds	r6, #1
 8009564:	e7ee      	b.n	8009544 <__libc_init_array+0xc>
 8009566:	f855 3b04 	ldr.w	r3, [r5], #4
 800956a:	4798      	blx	r3
 800956c:	3601      	adds	r6, #1
 800956e:	e7f2      	b.n	8009556 <__libc_init_array+0x1e>
 8009570:	0800ae40 	.word	0x0800ae40
 8009574:	0800ae40 	.word	0x0800ae40
 8009578:	0800ae40 	.word	0x0800ae40
 800957c:	0800ae44 	.word	0x0800ae44

08009580 <memset>:
 8009580:	4402      	add	r2, r0
 8009582:	4603      	mov	r3, r0
 8009584:	4293      	cmp	r3, r2
 8009586:	d100      	bne.n	800958a <memset+0xa>
 8009588:	4770      	bx	lr
 800958a:	f803 1b01 	strb.w	r1, [r3], #1
 800958e:	e7f9      	b.n	8009584 <memset+0x4>

08009590 <iprintf>:
 8009590:	b40f      	push	{r0, r1, r2, r3}
 8009592:	4b0a      	ldr	r3, [pc, #40]	; (80095bc <iprintf+0x2c>)
 8009594:	b513      	push	{r0, r1, r4, lr}
 8009596:	681c      	ldr	r4, [r3, #0]
 8009598:	b124      	cbz	r4, 80095a4 <iprintf+0x14>
 800959a:	69a3      	ldr	r3, [r4, #24]
 800959c:	b913      	cbnz	r3, 80095a4 <iprintf+0x14>
 800959e:	4620      	mov	r0, r4
 80095a0:	f000 fb32 	bl	8009c08 <__sinit>
 80095a4:	ab05      	add	r3, sp, #20
 80095a6:	9a04      	ldr	r2, [sp, #16]
 80095a8:	68a1      	ldr	r1, [r4, #8]
 80095aa:	9301      	str	r3, [sp, #4]
 80095ac:	4620      	mov	r0, r4
 80095ae:	f000 fe97 	bl	800a2e0 <_vfiprintf_r>
 80095b2:	b002      	add	sp, #8
 80095b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095b8:	b004      	add	sp, #16
 80095ba:	4770      	bx	lr
 80095bc:	20000050 	.word	0x20000050

080095c0 <_puts_r>:
 80095c0:	b570      	push	{r4, r5, r6, lr}
 80095c2:	460e      	mov	r6, r1
 80095c4:	4605      	mov	r5, r0
 80095c6:	b118      	cbz	r0, 80095d0 <_puts_r+0x10>
 80095c8:	6983      	ldr	r3, [r0, #24]
 80095ca:	b90b      	cbnz	r3, 80095d0 <_puts_r+0x10>
 80095cc:	f000 fb1c 	bl	8009c08 <__sinit>
 80095d0:	69ab      	ldr	r3, [r5, #24]
 80095d2:	68ac      	ldr	r4, [r5, #8]
 80095d4:	b913      	cbnz	r3, 80095dc <_puts_r+0x1c>
 80095d6:	4628      	mov	r0, r5
 80095d8:	f000 fb16 	bl	8009c08 <__sinit>
 80095dc:	4b2c      	ldr	r3, [pc, #176]	; (8009690 <_puts_r+0xd0>)
 80095de:	429c      	cmp	r4, r3
 80095e0:	d120      	bne.n	8009624 <_puts_r+0x64>
 80095e2:	686c      	ldr	r4, [r5, #4]
 80095e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095e6:	07db      	lsls	r3, r3, #31
 80095e8:	d405      	bmi.n	80095f6 <_puts_r+0x36>
 80095ea:	89a3      	ldrh	r3, [r4, #12]
 80095ec:	0598      	lsls	r0, r3, #22
 80095ee:	d402      	bmi.n	80095f6 <_puts_r+0x36>
 80095f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095f2:	f000 fba7 	bl	8009d44 <__retarget_lock_acquire_recursive>
 80095f6:	89a3      	ldrh	r3, [r4, #12]
 80095f8:	0719      	lsls	r1, r3, #28
 80095fa:	d51d      	bpl.n	8009638 <_puts_r+0x78>
 80095fc:	6923      	ldr	r3, [r4, #16]
 80095fe:	b1db      	cbz	r3, 8009638 <_puts_r+0x78>
 8009600:	3e01      	subs	r6, #1
 8009602:	68a3      	ldr	r3, [r4, #8]
 8009604:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009608:	3b01      	subs	r3, #1
 800960a:	60a3      	str	r3, [r4, #8]
 800960c:	bb39      	cbnz	r1, 800965e <_puts_r+0x9e>
 800960e:	2b00      	cmp	r3, #0
 8009610:	da38      	bge.n	8009684 <_puts_r+0xc4>
 8009612:	4622      	mov	r2, r4
 8009614:	210a      	movs	r1, #10
 8009616:	4628      	mov	r0, r5
 8009618:	f000 f91c 	bl	8009854 <__swbuf_r>
 800961c:	3001      	adds	r0, #1
 800961e:	d011      	beq.n	8009644 <_puts_r+0x84>
 8009620:	250a      	movs	r5, #10
 8009622:	e011      	b.n	8009648 <_puts_r+0x88>
 8009624:	4b1b      	ldr	r3, [pc, #108]	; (8009694 <_puts_r+0xd4>)
 8009626:	429c      	cmp	r4, r3
 8009628:	d101      	bne.n	800962e <_puts_r+0x6e>
 800962a:	68ac      	ldr	r4, [r5, #8]
 800962c:	e7da      	b.n	80095e4 <_puts_r+0x24>
 800962e:	4b1a      	ldr	r3, [pc, #104]	; (8009698 <_puts_r+0xd8>)
 8009630:	429c      	cmp	r4, r3
 8009632:	bf08      	it	eq
 8009634:	68ec      	ldreq	r4, [r5, #12]
 8009636:	e7d5      	b.n	80095e4 <_puts_r+0x24>
 8009638:	4621      	mov	r1, r4
 800963a:	4628      	mov	r0, r5
 800963c:	f000 f95c 	bl	80098f8 <__swsetup_r>
 8009640:	2800      	cmp	r0, #0
 8009642:	d0dd      	beq.n	8009600 <_puts_r+0x40>
 8009644:	f04f 35ff 	mov.w	r5, #4294967295
 8009648:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800964a:	07da      	lsls	r2, r3, #31
 800964c:	d405      	bmi.n	800965a <_puts_r+0x9a>
 800964e:	89a3      	ldrh	r3, [r4, #12]
 8009650:	059b      	lsls	r3, r3, #22
 8009652:	d402      	bmi.n	800965a <_puts_r+0x9a>
 8009654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009656:	f000 fb76 	bl	8009d46 <__retarget_lock_release_recursive>
 800965a:	4628      	mov	r0, r5
 800965c:	bd70      	pop	{r4, r5, r6, pc}
 800965e:	2b00      	cmp	r3, #0
 8009660:	da04      	bge.n	800966c <_puts_r+0xac>
 8009662:	69a2      	ldr	r2, [r4, #24]
 8009664:	429a      	cmp	r2, r3
 8009666:	dc06      	bgt.n	8009676 <_puts_r+0xb6>
 8009668:	290a      	cmp	r1, #10
 800966a:	d004      	beq.n	8009676 <_puts_r+0xb6>
 800966c:	6823      	ldr	r3, [r4, #0]
 800966e:	1c5a      	adds	r2, r3, #1
 8009670:	6022      	str	r2, [r4, #0]
 8009672:	7019      	strb	r1, [r3, #0]
 8009674:	e7c5      	b.n	8009602 <_puts_r+0x42>
 8009676:	4622      	mov	r2, r4
 8009678:	4628      	mov	r0, r5
 800967a:	f000 f8eb 	bl	8009854 <__swbuf_r>
 800967e:	3001      	adds	r0, #1
 8009680:	d1bf      	bne.n	8009602 <_puts_r+0x42>
 8009682:	e7df      	b.n	8009644 <_puts_r+0x84>
 8009684:	6823      	ldr	r3, [r4, #0]
 8009686:	250a      	movs	r5, #10
 8009688:	1c5a      	adds	r2, r3, #1
 800968a:	6022      	str	r2, [r4, #0]
 800968c:	701d      	strb	r5, [r3, #0]
 800968e:	e7db      	b.n	8009648 <_puts_r+0x88>
 8009690:	0800adc4 	.word	0x0800adc4
 8009694:	0800ade4 	.word	0x0800ade4
 8009698:	0800ada4 	.word	0x0800ada4

0800969c <puts>:
 800969c:	4b02      	ldr	r3, [pc, #8]	; (80096a8 <puts+0xc>)
 800969e:	4601      	mov	r1, r0
 80096a0:	6818      	ldr	r0, [r3, #0]
 80096a2:	f7ff bf8d 	b.w	80095c0 <_puts_r>
 80096a6:	bf00      	nop
 80096a8:	20000050 	.word	0x20000050

080096ac <siprintf>:
 80096ac:	b40e      	push	{r1, r2, r3}
 80096ae:	b500      	push	{lr}
 80096b0:	b09c      	sub	sp, #112	; 0x70
 80096b2:	ab1d      	add	r3, sp, #116	; 0x74
 80096b4:	9002      	str	r0, [sp, #8]
 80096b6:	9006      	str	r0, [sp, #24]
 80096b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80096bc:	4809      	ldr	r0, [pc, #36]	; (80096e4 <siprintf+0x38>)
 80096be:	9107      	str	r1, [sp, #28]
 80096c0:	9104      	str	r1, [sp, #16]
 80096c2:	4909      	ldr	r1, [pc, #36]	; (80096e8 <siprintf+0x3c>)
 80096c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80096c8:	9105      	str	r1, [sp, #20]
 80096ca:	6800      	ldr	r0, [r0, #0]
 80096cc:	9301      	str	r3, [sp, #4]
 80096ce:	a902      	add	r1, sp, #8
 80096d0:	f000 fcdc 	bl	800a08c <_svfiprintf_r>
 80096d4:	9b02      	ldr	r3, [sp, #8]
 80096d6:	2200      	movs	r2, #0
 80096d8:	701a      	strb	r2, [r3, #0]
 80096da:	b01c      	add	sp, #112	; 0x70
 80096dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80096e0:	b003      	add	sp, #12
 80096e2:	4770      	bx	lr
 80096e4:	20000050 	.word	0x20000050
 80096e8:	ffff0208 	.word	0xffff0208

080096ec <strncmp>:
 80096ec:	b510      	push	{r4, lr}
 80096ee:	b17a      	cbz	r2, 8009710 <strncmp+0x24>
 80096f0:	4603      	mov	r3, r0
 80096f2:	3901      	subs	r1, #1
 80096f4:	1884      	adds	r4, r0, r2
 80096f6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80096fa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80096fe:	4290      	cmp	r0, r2
 8009700:	d101      	bne.n	8009706 <strncmp+0x1a>
 8009702:	42a3      	cmp	r3, r4
 8009704:	d101      	bne.n	800970a <strncmp+0x1e>
 8009706:	1a80      	subs	r0, r0, r2
 8009708:	bd10      	pop	{r4, pc}
 800970a:	2800      	cmp	r0, #0
 800970c:	d1f3      	bne.n	80096f6 <strncmp+0xa>
 800970e:	e7fa      	b.n	8009706 <strncmp+0x1a>
 8009710:	4610      	mov	r0, r2
 8009712:	e7f9      	b.n	8009708 <strncmp+0x1c>

08009714 <strncpy>:
 8009714:	b510      	push	{r4, lr}
 8009716:	3901      	subs	r1, #1
 8009718:	4603      	mov	r3, r0
 800971a:	b132      	cbz	r2, 800972a <strncpy+0x16>
 800971c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009720:	f803 4b01 	strb.w	r4, [r3], #1
 8009724:	3a01      	subs	r2, #1
 8009726:	2c00      	cmp	r4, #0
 8009728:	d1f7      	bne.n	800971a <strncpy+0x6>
 800972a:	441a      	add	r2, r3
 800972c:	2100      	movs	r1, #0
 800972e:	4293      	cmp	r3, r2
 8009730:	d100      	bne.n	8009734 <strncpy+0x20>
 8009732:	bd10      	pop	{r4, pc}
 8009734:	f803 1b01 	strb.w	r1, [r3], #1
 8009738:	e7f9      	b.n	800972e <strncpy+0x1a>
	...

0800973c <_strtol_l.constprop.0>:
 800973c:	2b01      	cmp	r3, #1
 800973e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009742:	d001      	beq.n	8009748 <_strtol_l.constprop.0+0xc>
 8009744:	2b24      	cmp	r3, #36	; 0x24
 8009746:	d906      	bls.n	8009756 <_strtol_l.constprop.0+0x1a>
 8009748:	f7ff fef0 	bl	800952c <__errno>
 800974c:	2316      	movs	r3, #22
 800974e:	6003      	str	r3, [r0, #0]
 8009750:	2000      	movs	r0, #0
 8009752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009756:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800983c <_strtol_l.constprop.0+0x100>
 800975a:	460d      	mov	r5, r1
 800975c:	462e      	mov	r6, r5
 800975e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009762:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009766:	f017 0708 	ands.w	r7, r7, #8
 800976a:	d1f7      	bne.n	800975c <_strtol_l.constprop.0+0x20>
 800976c:	2c2d      	cmp	r4, #45	; 0x2d
 800976e:	d132      	bne.n	80097d6 <_strtol_l.constprop.0+0x9a>
 8009770:	782c      	ldrb	r4, [r5, #0]
 8009772:	2701      	movs	r7, #1
 8009774:	1cb5      	adds	r5, r6, #2
 8009776:	2b00      	cmp	r3, #0
 8009778:	d05b      	beq.n	8009832 <_strtol_l.constprop.0+0xf6>
 800977a:	2b10      	cmp	r3, #16
 800977c:	d109      	bne.n	8009792 <_strtol_l.constprop.0+0x56>
 800977e:	2c30      	cmp	r4, #48	; 0x30
 8009780:	d107      	bne.n	8009792 <_strtol_l.constprop.0+0x56>
 8009782:	782c      	ldrb	r4, [r5, #0]
 8009784:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009788:	2c58      	cmp	r4, #88	; 0x58
 800978a:	d14d      	bne.n	8009828 <_strtol_l.constprop.0+0xec>
 800978c:	786c      	ldrb	r4, [r5, #1]
 800978e:	2310      	movs	r3, #16
 8009790:	3502      	adds	r5, #2
 8009792:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009796:	f108 38ff 	add.w	r8, r8, #4294967295
 800979a:	f04f 0c00 	mov.w	ip, #0
 800979e:	fbb8 f9f3 	udiv	r9, r8, r3
 80097a2:	4666      	mov	r6, ip
 80097a4:	fb03 8a19 	mls	sl, r3, r9, r8
 80097a8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80097ac:	f1be 0f09 	cmp.w	lr, #9
 80097b0:	d816      	bhi.n	80097e0 <_strtol_l.constprop.0+0xa4>
 80097b2:	4674      	mov	r4, lr
 80097b4:	42a3      	cmp	r3, r4
 80097b6:	dd24      	ble.n	8009802 <_strtol_l.constprop.0+0xc6>
 80097b8:	f1bc 0f00 	cmp.w	ip, #0
 80097bc:	db1e      	blt.n	80097fc <_strtol_l.constprop.0+0xc0>
 80097be:	45b1      	cmp	r9, r6
 80097c0:	d31c      	bcc.n	80097fc <_strtol_l.constprop.0+0xc0>
 80097c2:	d101      	bne.n	80097c8 <_strtol_l.constprop.0+0x8c>
 80097c4:	45a2      	cmp	sl, r4
 80097c6:	db19      	blt.n	80097fc <_strtol_l.constprop.0+0xc0>
 80097c8:	fb06 4603 	mla	r6, r6, r3, r4
 80097cc:	f04f 0c01 	mov.w	ip, #1
 80097d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80097d4:	e7e8      	b.n	80097a8 <_strtol_l.constprop.0+0x6c>
 80097d6:	2c2b      	cmp	r4, #43	; 0x2b
 80097d8:	bf04      	itt	eq
 80097da:	782c      	ldrbeq	r4, [r5, #0]
 80097dc:	1cb5      	addeq	r5, r6, #2
 80097de:	e7ca      	b.n	8009776 <_strtol_l.constprop.0+0x3a>
 80097e0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80097e4:	f1be 0f19 	cmp.w	lr, #25
 80097e8:	d801      	bhi.n	80097ee <_strtol_l.constprop.0+0xb2>
 80097ea:	3c37      	subs	r4, #55	; 0x37
 80097ec:	e7e2      	b.n	80097b4 <_strtol_l.constprop.0+0x78>
 80097ee:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80097f2:	f1be 0f19 	cmp.w	lr, #25
 80097f6:	d804      	bhi.n	8009802 <_strtol_l.constprop.0+0xc6>
 80097f8:	3c57      	subs	r4, #87	; 0x57
 80097fa:	e7db      	b.n	80097b4 <_strtol_l.constprop.0+0x78>
 80097fc:	f04f 3cff 	mov.w	ip, #4294967295
 8009800:	e7e6      	b.n	80097d0 <_strtol_l.constprop.0+0x94>
 8009802:	f1bc 0f00 	cmp.w	ip, #0
 8009806:	da05      	bge.n	8009814 <_strtol_l.constprop.0+0xd8>
 8009808:	2322      	movs	r3, #34	; 0x22
 800980a:	6003      	str	r3, [r0, #0]
 800980c:	4646      	mov	r6, r8
 800980e:	b942      	cbnz	r2, 8009822 <_strtol_l.constprop.0+0xe6>
 8009810:	4630      	mov	r0, r6
 8009812:	e79e      	b.n	8009752 <_strtol_l.constprop.0+0x16>
 8009814:	b107      	cbz	r7, 8009818 <_strtol_l.constprop.0+0xdc>
 8009816:	4276      	negs	r6, r6
 8009818:	2a00      	cmp	r2, #0
 800981a:	d0f9      	beq.n	8009810 <_strtol_l.constprop.0+0xd4>
 800981c:	f1bc 0f00 	cmp.w	ip, #0
 8009820:	d000      	beq.n	8009824 <_strtol_l.constprop.0+0xe8>
 8009822:	1e69      	subs	r1, r5, #1
 8009824:	6011      	str	r1, [r2, #0]
 8009826:	e7f3      	b.n	8009810 <_strtol_l.constprop.0+0xd4>
 8009828:	2430      	movs	r4, #48	; 0x30
 800982a:	2b00      	cmp	r3, #0
 800982c:	d1b1      	bne.n	8009792 <_strtol_l.constprop.0+0x56>
 800982e:	2308      	movs	r3, #8
 8009830:	e7af      	b.n	8009792 <_strtol_l.constprop.0+0x56>
 8009832:	2c30      	cmp	r4, #48	; 0x30
 8009834:	d0a5      	beq.n	8009782 <_strtol_l.constprop.0+0x46>
 8009836:	230a      	movs	r3, #10
 8009838:	e7ab      	b.n	8009792 <_strtol_l.constprop.0+0x56>
 800983a:	bf00      	nop
 800983c:	0800aca1 	.word	0x0800aca1

08009840 <strtol>:
 8009840:	4613      	mov	r3, r2
 8009842:	460a      	mov	r2, r1
 8009844:	4601      	mov	r1, r0
 8009846:	4802      	ldr	r0, [pc, #8]	; (8009850 <strtol+0x10>)
 8009848:	6800      	ldr	r0, [r0, #0]
 800984a:	f7ff bf77 	b.w	800973c <_strtol_l.constprop.0>
 800984e:	bf00      	nop
 8009850:	20000050 	.word	0x20000050

08009854 <__swbuf_r>:
 8009854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009856:	460e      	mov	r6, r1
 8009858:	4614      	mov	r4, r2
 800985a:	4605      	mov	r5, r0
 800985c:	b118      	cbz	r0, 8009866 <__swbuf_r+0x12>
 800985e:	6983      	ldr	r3, [r0, #24]
 8009860:	b90b      	cbnz	r3, 8009866 <__swbuf_r+0x12>
 8009862:	f000 f9d1 	bl	8009c08 <__sinit>
 8009866:	4b21      	ldr	r3, [pc, #132]	; (80098ec <__swbuf_r+0x98>)
 8009868:	429c      	cmp	r4, r3
 800986a:	d12b      	bne.n	80098c4 <__swbuf_r+0x70>
 800986c:	686c      	ldr	r4, [r5, #4]
 800986e:	69a3      	ldr	r3, [r4, #24]
 8009870:	60a3      	str	r3, [r4, #8]
 8009872:	89a3      	ldrh	r3, [r4, #12]
 8009874:	071a      	lsls	r2, r3, #28
 8009876:	d52f      	bpl.n	80098d8 <__swbuf_r+0x84>
 8009878:	6923      	ldr	r3, [r4, #16]
 800987a:	b36b      	cbz	r3, 80098d8 <__swbuf_r+0x84>
 800987c:	6923      	ldr	r3, [r4, #16]
 800987e:	6820      	ldr	r0, [r4, #0]
 8009880:	1ac0      	subs	r0, r0, r3
 8009882:	6963      	ldr	r3, [r4, #20]
 8009884:	b2f6      	uxtb	r6, r6
 8009886:	4283      	cmp	r3, r0
 8009888:	4637      	mov	r7, r6
 800988a:	dc04      	bgt.n	8009896 <__swbuf_r+0x42>
 800988c:	4621      	mov	r1, r4
 800988e:	4628      	mov	r0, r5
 8009890:	f000 f926 	bl	8009ae0 <_fflush_r>
 8009894:	bb30      	cbnz	r0, 80098e4 <__swbuf_r+0x90>
 8009896:	68a3      	ldr	r3, [r4, #8]
 8009898:	3b01      	subs	r3, #1
 800989a:	60a3      	str	r3, [r4, #8]
 800989c:	6823      	ldr	r3, [r4, #0]
 800989e:	1c5a      	adds	r2, r3, #1
 80098a0:	6022      	str	r2, [r4, #0]
 80098a2:	701e      	strb	r6, [r3, #0]
 80098a4:	6963      	ldr	r3, [r4, #20]
 80098a6:	3001      	adds	r0, #1
 80098a8:	4283      	cmp	r3, r0
 80098aa:	d004      	beq.n	80098b6 <__swbuf_r+0x62>
 80098ac:	89a3      	ldrh	r3, [r4, #12]
 80098ae:	07db      	lsls	r3, r3, #31
 80098b0:	d506      	bpl.n	80098c0 <__swbuf_r+0x6c>
 80098b2:	2e0a      	cmp	r6, #10
 80098b4:	d104      	bne.n	80098c0 <__swbuf_r+0x6c>
 80098b6:	4621      	mov	r1, r4
 80098b8:	4628      	mov	r0, r5
 80098ba:	f000 f911 	bl	8009ae0 <_fflush_r>
 80098be:	b988      	cbnz	r0, 80098e4 <__swbuf_r+0x90>
 80098c0:	4638      	mov	r0, r7
 80098c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098c4:	4b0a      	ldr	r3, [pc, #40]	; (80098f0 <__swbuf_r+0x9c>)
 80098c6:	429c      	cmp	r4, r3
 80098c8:	d101      	bne.n	80098ce <__swbuf_r+0x7a>
 80098ca:	68ac      	ldr	r4, [r5, #8]
 80098cc:	e7cf      	b.n	800986e <__swbuf_r+0x1a>
 80098ce:	4b09      	ldr	r3, [pc, #36]	; (80098f4 <__swbuf_r+0xa0>)
 80098d0:	429c      	cmp	r4, r3
 80098d2:	bf08      	it	eq
 80098d4:	68ec      	ldreq	r4, [r5, #12]
 80098d6:	e7ca      	b.n	800986e <__swbuf_r+0x1a>
 80098d8:	4621      	mov	r1, r4
 80098da:	4628      	mov	r0, r5
 80098dc:	f000 f80c 	bl	80098f8 <__swsetup_r>
 80098e0:	2800      	cmp	r0, #0
 80098e2:	d0cb      	beq.n	800987c <__swbuf_r+0x28>
 80098e4:	f04f 37ff 	mov.w	r7, #4294967295
 80098e8:	e7ea      	b.n	80098c0 <__swbuf_r+0x6c>
 80098ea:	bf00      	nop
 80098ec:	0800adc4 	.word	0x0800adc4
 80098f0:	0800ade4 	.word	0x0800ade4
 80098f4:	0800ada4 	.word	0x0800ada4

080098f8 <__swsetup_r>:
 80098f8:	4b32      	ldr	r3, [pc, #200]	; (80099c4 <__swsetup_r+0xcc>)
 80098fa:	b570      	push	{r4, r5, r6, lr}
 80098fc:	681d      	ldr	r5, [r3, #0]
 80098fe:	4606      	mov	r6, r0
 8009900:	460c      	mov	r4, r1
 8009902:	b125      	cbz	r5, 800990e <__swsetup_r+0x16>
 8009904:	69ab      	ldr	r3, [r5, #24]
 8009906:	b913      	cbnz	r3, 800990e <__swsetup_r+0x16>
 8009908:	4628      	mov	r0, r5
 800990a:	f000 f97d 	bl	8009c08 <__sinit>
 800990e:	4b2e      	ldr	r3, [pc, #184]	; (80099c8 <__swsetup_r+0xd0>)
 8009910:	429c      	cmp	r4, r3
 8009912:	d10f      	bne.n	8009934 <__swsetup_r+0x3c>
 8009914:	686c      	ldr	r4, [r5, #4]
 8009916:	89a3      	ldrh	r3, [r4, #12]
 8009918:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800991c:	0719      	lsls	r1, r3, #28
 800991e:	d42c      	bmi.n	800997a <__swsetup_r+0x82>
 8009920:	06dd      	lsls	r5, r3, #27
 8009922:	d411      	bmi.n	8009948 <__swsetup_r+0x50>
 8009924:	2309      	movs	r3, #9
 8009926:	6033      	str	r3, [r6, #0]
 8009928:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800992c:	81a3      	strh	r3, [r4, #12]
 800992e:	f04f 30ff 	mov.w	r0, #4294967295
 8009932:	e03e      	b.n	80099b2 <__swsetup_r+0xba>
 8009934:	4b25      	ldr	r3, [pc, #148]	; (80099cc <__swsetup_r+0xd4>)
 8009936:	429c      	cmp	r4, r3
 8009938:	d101      	bne.n	800993e <__swsetup_r+0x46>
 800993a:	68ac      	ldr	r4, [r5, #8]
 800993c:	e7eb      	b.n	8009916 <__swsetup_r+0x1e>
 800993e:	4b24      	ldr	r3, [pc, #144]	; (80099d0 <__swsetup_r+0xd8>)
 8009940:	429c      	cmp	r4, r3
 8009942:	bf08      	it	eq
 8009944:	68ec      	ldreq	r4, [r5, #12]
 8009946:	e7e6      	b.n	8009916 <__swsetup_r+0x1e>
 8009948:	0758      	lsls	r0, r3, #29
 800994a:	d512      	bpl.n	8009972 <__swsetup_r+0x7a>
 800994c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800994e:	b141      	cbz	r1, 8009962 <__swsetup_r+0x6a>
 8009950:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009954:	4299      	cmp	r1, r3
 8009956:	d002      	beq.n	800995e <__swsetup_r+0x66>
 8009958:	4630      	mov	r0, r6
 800995a:	f000 fa5b 	bl	8009e14 <_free_r>
 800995e:	2300      	movs	r3, #0
 8009960:	6363      	str	r3, [r4, #52]	; 0x34
 8009962:	89a3      	ldrh	r3, [r4, #12]
 8009964:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009968:	81a3      	strh	r3, [r4, #12]
 800996a:	2300      	movs	r3, #0
 800996c:	6063      	str	r3, [r4, #4]
 800996e:	6923      	ldr	r3, [r4, #16]
 8009970:	6023      	str	r3, [r4, #0]
 8009972:	89a3      	ldrh	r3, [r4, #12]
 8009974:	f043 0308 	orr.w	r3, r3, #8
 8009978:	81a3      	strh	r3, [r4, #12]
 800997a:	6923      	ldr	r3, [r4, #16]
 800997c:	b94b      	cbnz	r3, 8009992 <__swsetup_r+0x9a>
 800997e:	89a3      	ldrh	r3, [r4, #12]
 8009980:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009984:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009988:	d003      	beq.n	8009992 <__swsetup_r+0x9a>
 800998a:	4621      	mov	r1, r4
 800998c:	4630      	mov	r0, r6
 800998e:	f000 fa01 	bl	8009d94 <__smakebuf_r>
 8009992:	89a0      	ldrh	r0, [r4, #12]
 8009994:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009998:	f010 0301 	ands.w	r3, r0, #1
 800999c:	d00a      	beq.n	80099b4 <__swsetup_r+0xbc>
 800999e:	2300      	movs	r3, #0
 80099a0:	60a3      	str	r3, [r4, #8]
 80099a2:	6963      	ldr	r3, [r4, #20]
 80099a4:	425b      	negs	r3, r3
 80099a6:	61a3      	str	r3, [r4, #24]
 80099a8:	6923      	ldr	r3, [r4, #16]
 80099aa:	b943      	cbnz	r3, 80099be <__swsetup_r+0xc6>
 80099ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80099b0:	d1ba      	bne.n	8009928 <__swsetup_r+0x30>
 80099b2:	bd70      	pop	{r4, r5, r6, pc}
 80099b4:	0781      	lsls	r1, r0, #30
 80099b6:	bf58      	it	pl
 80099b8:	6963      	ldrpl	r3, [r4, #20]
 80099ba:	60a3      	str	r3, [r4, #8]
 80099bc:	e7f4      	b.n	80099a8 <__swsetup_r+0xb0>
 80099be:	2000      	movs	r0, #0
 80099c0:	e7f7      	b.n	80099b2 <__swsetup_r+0xba>
 80099c2:	bf00      	nop
 80099c4:	20000050 	.word	0x20000050
 80099c8:	0800adc4 	.word	0x0800adc4
 80099cc:	0800ade4 	.word	0x0800ade4
 80099d0:	0800ada4 	.word	0x0800ada4

080099d4 <__sflush_r>:
 80099d4:	898a      	ldrh	r2, [r1, #12]
 80099d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099da:	4605      	mov	r5, r0
 80099dc:	0710      	lsls	r0, r2, #28
 80099de:	460c      	mov	r4, r1
 80099e0:	d458      	bmi.n	8009a94 <__sflush_r+0xc0>
 80099e2:	684b      	ldr	r3, [r1, #4]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	dc05      	bgt.n	80099f4 <__sflush_r+0x20>
 80099e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	dc02      	bgt.n	80099f4 <__sflush_r+0x20>
 80099ee:	2000      	movs	r0, #0
 80099f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099f6:	2e00      	cmp	r6, #0
 80099f8:	d0f9      	beq.n	80099ee <__sflush_r+0x1a>
 80099fa:	2300      	movs	r3, #0
 80099fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009a00:	682f      	ldr	r7, [r5, #0]
 8009a02:	602b      	str	r3, [r5, #0]
 8009a04:	d032      	beq.n	8009a6c <__sflush_r+0x98>
 8009a06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009a08:	89a3      	ldrh	r3, [r4, #12]
 8009a0a:	075a      	lsls	r2, r3, #29
 8009a0c:	d505      	bpl.n	8009a1a <__sflush_r+0x46>
 8009a0e:	6863      	ldr	r3, [r4, #4]
 8009a10:	1ac0      	subs	r0, r0, r3
 8009a12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a14:	b10b      	cbz	r3, 8009a1a <__sflush_r+0x46>
 8009a16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a18:	1ac0      	subs	r0, r0, r3
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a20:	6a21      	ldr	r1, [r4, #32]
 8009a22:	4628      	mov	r0, r5
 8009a24:	47b0      	blx	r6
 8009a26:	1c43      	adds	r3, r0, #1
 8009a28:	89a3      	ldrh	r3, [r4, #12]
 8009a2a:	d106      	bne.n	8009a3a <__sflush_r+0x66>
 8009a2c:	6829      	ldr	r1, [r5, #0]
 8009a2e:	291d      	cmp	r1, #29
 8009a30:	d82c      	bhi.n	8009a8c <__sflush_r+0xb8>
 8009a32:	4a2a      	ldr	r2, [pc, #168]	; (8009adc <__sflush_r+0x108>)
 8009a34:	40ca      	lsrs	r2, r1
 8009a36:	07d6      	lsls	r6, r2, #31
 8009a38:	d528      	bpl.n	8009a8c <__sflush_r+0xb8>
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	6062      	str	r2, [r4, #4]
 8009a3e:	04d9      	lsls	r1, r3, #19
 8009a40:	6922      	ldr	r2, [r4, #16]
 8009a42:	6022      	str	r2, [r4, #0]
 8009a44:	d504      	bpl.n	8009a50 <__sflush_r+0x7c>
 8009a46:	1c42      	adds	r2, r0, #1
 8009a48:	d101      	bne.n	8009a4e <__sflush_r+0x7a>
 8009a4a:	682b      	ldr	r3, [r5, #0]
 8009a4c:	b903      	cbnz	r3, 8009a50 <__sflush_r+0x7c>
 8009a4e:	6560      	str	r0, [r4, #84]	; 0x54
 8009a50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a52:	602f      	str	r7, [r5, #0]
 8009a54:	2900      	cmp	r1, #0
 8009a56:	d0ca      	beq.n	80099ee <__sflush_r+0x1a>
 8009a58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a5c:	4299      	cmp	r1, r3
 8009a5e:	d002      	beq.n	8009a66 <__sflush_r+0x92>
 8009a60:	4628      	mov	r0, r5
 8009a62:	f000 f9d7 	bl	8009e14 <_free_r>
 8009a66:	2000      	movs	r0, #0
 8009a68:	6360      	str	r0, [r4, #52]	; 0x34
 8009a6a:	e7c1      	b.n	80099f0 <__sflush_r+0x1c>
 8009a6c:	6a21      	ldr	r1, [r4, #32]
 8009a6e:	2301      	movs	r3, #1
 8009a70:	4628      	mov	r0, r5
 8009a72:	47b0      	blx	r6
 8009a74:	1c41      	adds	r1, r0, #1
 8009a76:	d1c7      	bne.n	8009a08 <__sflush_r+0x34>
 8009a78:	682b      	ldr	r3, [r5, #0]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d0c4      	beq.n	8009a08 <__sflush_r+0x34>
 8009a7e:	2b1d      	cmp	r3, #29
 8009a80:	d001      	beq.n	8009a86 <__sflush_r+0xb2>
 8009a82:	2b16      	cmp	r3, #22
 8009a84:	d101      	bne.n	8009a8a <__sflush_r+0xb6>
 8009a86:	602f      	str	r7, [r5, #0]
 8009a88:	e7b1      	b.n	80099ee <__sflush_r+0x1a>
 8009a8a:	89a3      	ldrh	r3, [r4, #12]
 8009a8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a90:	81a3      	strh	r3, [r4, #12]
 8009a92:	e7ad      	b.n	80099f0 <__sflush_r+0x1c>
 8009a94:	690f      	ldr	r7, [r1, #16]
 8009a96:	2f00      	cmp	r7, #0
 8009a98:	d0a9      	beq.n	80099ee <__sflush_r+0x1a>
 8009a9a:	0793      	lsls	r3, r2, #30
 8009a9c:	680e      	ldr	r6, [r1, #0]
 8009a9e:	bf08      	it	eq
 8009aa0:	694b      	ldreq	r3, [r1, #20]
 8009aa2:	600f      	str	r7, [r1, #0]
 8009aa4:	bf18      	it	ne
 8009aa6:	2300      	movne	r3, #0
 8009aa8:	eba6 0807 	sub.w	r8, r6, r7
 8009aac:	608b      	str	r3, [r1, #8]
 8009aae:	f1b8 0f00 	cmp.w	r8, #0
 8009ab2:	dd9c      	ble.n	80099ee <__sflush_r+0x1a>
 8009ab4:	6a21      	ldr	r1, [r4, #32]
 8009ab6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009ab8:	4643      	mov	r3, r8
 8009aba:	463a      	mov	r2, r7
 8009abc:	4628      	mov	r0, r5
 8009abe:	47b0      	blx	r6
 8009ac0:	2800      	cmp	r0, #0
 8009ac2:	dc06      	bgt.n	8009ad2 <__sflush_r+0xfe>
 8009ac4:	89a3      	ldrh	r3, [r4, #12]
 8009ac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009aca:	81a3      	strh	r3, [r4, #12]
 8009acc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ad0:	e78e      	b.n	80099f0 <__sflush_r+0x1c>
 8009ad2:	4407      	add	r7, r0
 8009ad4:	eba8 0800 	sub.w	r8, r8, r0
 8009ad8:	e7e9      	b.n	8009aae <__sflush_r+0xda>
 8009ada:	bf00      	nop
 8009adc:	20400001 	.word	0x20400001

08009ae0 <_fflush_r>:
 8009ae0:	b538      	push	{r3, r4, r5, lr}
 8009ae2:	690b      	ldr	r3, [r1, #16]
 8009ae4:	4605      	mov	r5, r0
 8009ae6:	460c      	mov	r4, r1
 8009ae8:	b913      	cbnz	r3, 8009af0 <_fflush_r+0x10>
 8009aea:	2500      	movs	r5, #0
 8009aec:	4628      	mov	r0, r5
 8009aee:	bd38      	pop	{r3, r4, r5, pc}
 8009af0:	b118      	cbz	r0, 8009afa <_fflush_r+0x1a>
 8009af2:	6983      	ldr	r3, [r0, #24]
 8009af4:	b90b      	cbnz	r3, 8009afa <_fflush_r+0x1a>
 8009af6:	f000 f887 	bl	8009c08 <__sinit>
 8009afa:	4b14      	ldr	r3, [pc, #80]	; (8009b4c <_fflush_r+0x6c>)
 8009afc:	429c      	cmp	r4, r3
 8009afe:	d11b      	bne.n	8009b38 <_fflush_r+0x58>
 8009b00:	686c      	ldr	r4, [r5, #4]
 8009b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d0ef      	beq.n	8009aea <_fflush_r+0xa>
 8009b0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009b0c:	07d0      	lsls	r0, r2, #31
 8009b0e:	d404      	bmi.n	8009b1a <_fflush_r+0x3a>
 8009b10:	0599      	lsls	r1, r3, #22
 8009b12:	d402      	bmi.n	8009b1a <_fflush_r+0x3a>
 8009b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b16:	f000 f915 	bl	8009d44 <__retarget_lock_acquire_recursive>
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	4621      	mov	r1, r4
 8009b1e:	f7ff ff59 	bl	80099d4 <__sflush_r>
 8009b22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b24:	07da      	lsls	r2, r3, #31
 8009b26:	4605      	mov	r5, r0
 8009b28:	d4e0      	bmi.n	8009aec <_fflush_r+0xc>
 8009b2a:	89a3      	ldrh	r3, [r4, #12]
 8009b2c:	059b      	lsls	r3, r3, #22
 8009b2e:	d4dd      	bmi.n	8009aec <_fflush_r+0xc>
 8009b30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b32:	f000 f908 	bl	8009d46 <__retarget_lock_release_recursive>
 8009b36:	e7d9      	b.n	8009aec <_fflush_r+0xc>
 8009b38:	4b05      	ldr	r3, [pc, #20]	; (8009b50 <_fflush_r+0x70>)
 8009b3a:	429c      	cmp	r4, r3
 8009b3c:	d101      	bne.n	8009b42 <_fflush_r+0x62>
 8009b3e:	68ac      	ldr	r4, [r5, #8]
 8009b40:	e7df      	b.n	8009b02 <_fflush_r+0x22>
 8009b42:	4b04      	ldr	r3, [pc, #16]	; (8009b54 <_fflush_r+0x74>)
 8009b44:	429c      	cmp	r4, r3
 8009b46:	bf08      	it	eq
 8009b48:	68ec      	ldreq	r4, [r5, #12]
 8009b4a:	e7da      	b.n	8009b02 <_fflush_r+0x22>
 8009b4c:	0800adc4 	.word	0x0800adc4
 8009b50:	0800ade4 	.word	0x0800ade4
 8009b54:	0800ada4 	.word	0x0800ada4

08009b58 <std>:
 8009b58:	2300      	movs	r3, #0
 8009b5a:	b510      	push	{r4, lr}
 8009b5c:	4604      	mov	r4, r0
 8009b5e:	e9c0 3300 	strd	r3, r3, [r0]
 8009b62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b66:	6083      	str	r3, [r0, #8]
 8009b68:	8181      	strh	r1, [r0, #12]
 8009b6a:	6643      	str	r3, [r0, #100]	; 0x64
 8009b6c:	81c2      	strh	r2, [r0, #14]
 8009b6e:	6183      	str	r3, [r0, #24]
 8009b70:	4619      	mov	r1, r3
 8009b72:	2208      	movs	r2, #8
 8009b74:	305c      	adds	r0, #92	; 0x5c
 8009b76:	f7ff fd03 	bl	8009580 <memset>
 8009b7a:	4b05      	ldr	r3, [pc, #20]	; (8009b90 <std+0x38>)
 8009b7c:	6263      	str	r3, [r4, #36]	; 0x24
 8009b7e:	4b05      	ldr	r3, [pc, #20]	; (8009b94 <std+0x3c>)
 8009b80:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b82:	4b05      	ldr	r3, [pc, #20]	; (8009b98 <std+0x40>)
 8009b84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b86:	4b05      	ldr	r3, [pc, #20]	; (8009b9c <std+0x44>)
 8009b88:	6224      	str	r4, [r4, #32]
 8009b8a:	6323      	str	r3, [r4, #48]	; 0x30
 8009b8c:	bd10      	pop	{r4, pc}
 8009b8e:	bf00      	nop
 8009b90:	0800a889 	.word	0x0800a889
 8009b94:	0800a8ab 	.word	0x0800a8ab
 8009b98:	0800a8e3 	.word	0x0800a8e3
 8009b9c:	0800a907 	.word	0x0800a907

08009ba0 <_cleanup_r>:
 8009ba0:	4901      	ldr	r1, [pc, #4]	; (8009ba8 <_cleanup_r+0x8>)
 8009ba2:	f000 b8af 	b.w	8009d04 <_fwalk_reent>
 8009ba6:	bf00      	nop
 8009ba8:	08009ae1 	.word	0x08009ae1

08009bac <__sfmoreglue>:
 8009bac:	b570      	push	{r4, r5, r6, lr}
 8009bae:	2268      	movs	r2, #104	; 0x68
 8009bb0:	1e4d      	subs	r5, r1, #1
 8009bb2:	4355      	muls	r5, r2
 8009bb4:	460e      	mov	r6, r1
 8009bb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009bba:	f000 f997 	bl	8009eec <_malloc_r>
 8009bbe:	4604      	mov	r4, r0
 8009bc0:	b140      	cbz	r0, 8009bd4 <__sfmoreglue+0x28>
 8009bc2:	2100      	movs	r1, #0
 8009bc4:	e9c0 1600 	strd	r1, r6, [r0]
 8009bc8:	300c      	adds	r0, #12
 8009bca:	60a0      	str	r0, [r4, #8]
 8009bcc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009bd0:	f7ff fcd6 	bl	8009580 <memset>
 8009bd4:	4620      	mov	r0, r4
 8009bd6:	bd70      	pop	{r4, r5, r6, pc}

08009bd8 <__sfp_lock_acquire>:
 8009bd8:	4801      	ldr	r0, [pc, #4]	; (8009be0 <__sfp_lock_acquire+0x8>)
 8009bda:	f000 b8b3 	b.w	8009d44 <__retarget_lock_acquire_recursive>
 8009bde:	bf00      	nop
 8009be0:	20000e85 	.word	0x20000e85

08009be4 <__sfp_lock_release>:
 8009be4:	4801      	ldr	r0, [pc, #4]	; (8009bec <__sfp_lock_release+0x8>)
 8009be6:	f000 b8ae 	b.w	8009d46 <__retarget_lock_release_recursive>
 8009bea:	bf00      	nop
 8009bec:	20000e85 	.word	0x20000e85

08009bf0 <__sinit_lock_acquire>:
 8009bf0:	4801      	ldr	r0, [pc, #4]	; (8009bf8 <__sinit_lock_acquire+0x8>)
 8009bf2:	f000 b8a7 	b.w	8009d44 <__retarget_lock_acquire_recursive>
 8009bf6:	bf00      	nop
 8009bf8:	20000e86 	.word	0x20000e86

08009bfc <__sinit_lock_release>:
 8009bfc:	4801      	ldr	r0, [pc, #4]	; (8009c04 <__sinit_lock_release+0x8>)
 8009bfe:	f000 b8a2 	b.w	8009d46 <__retarget_lock_release_recursive>
 8009c02:	bf00      	nop
 8009c04:	20000e86 	.word	0x20000e86

08009c08 <__sinit>:
 8009c08:	b510      	push	{r4, lr}
 8009c0a:	4604      	mov	r4, r0
 8009c0c:	f7ff fff0 	bl	8009bf0 <__sinit_lock_acquire>
 8009c10:	69a3      	ldr	r3, [r4, #24]
 8009c12:	b11b      	cbz	r3, 8009c1c <__sinit+0x14>
 8009c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c18:	f7ff bff0 	b.w	8009bfc <__sinit_lock_release>
 8009c1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009c20:	6523      	str	r3, [r4, #80]	; 0x50
 8009c22:	4b13      	ldr	r3, [pc, #76]	; (8009c70 <__sinit+0x68>)
 8009c24:	4a13      	ldr	r2, [pc, #76]	; (8009c74 <__sinit+0x6c>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	62a2      	str	r2, [r4, #40]	; 0x28
 8009c2a:	42a3      	cmp	r3, r4
 8009c2c:	bf04      	itt	eq
 8009c2e:	2301      	moveq	r3, #1
 8009c30:	61a3      	streq	r3, [r4, #24]
 8009c32:	4620      	mov	r0, r4
 8009c34:	f000 f820 	bl	8009c78 <__sfp>
 8009c38:	6060      	str	r0, [r4, #4]
 8009c3a:	4620      	mov	r0, r4
 8009c3c:	f000 f81c 	bl	8009c78 <__sfp>
 8009c40:	60a0      	str	r0, [r4, #8]
 8009c42:	4620      	mov	r0, r4
 8009c44:	f000 f818 	bl	8009c78 <__sfp>
 8009c48:	2200      	movs	r2, #0
 8009c4a:	60e0      	str	r0, [r4, #12]
 8009c4c:	2104      	movs	r1, #4
 8009c4e:	6860      	ldr	r0, [r4, #4]
 8009c50:	f7ff ff82 	bl	8009b58 <std>
 8009c54:	68a0      	ldr	r0, [r4, #8]
 8009c56:	2201      	movs	r2, #1
 8009c58:	2109      	movs	r1, #9
 8009c5a:	f7ff ff7d 	bl	8009b58 <std>
 8009c5e:	68e0      	ldr	r0, [r4, #12]
 8009c60:	2202      	movs	r2, #2
 8009c62:	2112      	movs	r1, #18
 8009c64:	f7ff ff78 	bl	8009b58 <std>
 8009c68:	2301      	movs	r3, #1
 8009c6a:	61a3      	str	r3, [r4, #24]
 8009c6c:	e7d2      	b.n	8009c14 <__sinit+0xc>
 8009c6e:	bf00      	nop
 8009c70:	0800ac9c 	.word	0x0800ac9c
 8009c74:	08009ba1 	.word	0x08009ba1

08009c78 <__sfp>:
 8009c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c7a:	4607      	mov	r7, r0
 8009c7c:	f7ff ffac 	bl	8009bd8 <__sfp_lock_acquire>
 8009c80:	4b1e      	ldr	r3, [pc, #120]	; (8009cfc <__sfp+0x84>)
 8009c82:	681e      	ldr	r6, [r3, #0]
 8009c84:	69b3      	ldr	r3, [r6, #24]
 8009c86:	b913      	cbnz	r3, 8009c8e <__sfp+0x16>
 8009c88:	4630      	mov	r0, r6
 8009c8a:	f7ff ffbd 	bl	8009c08 <__sinit>
 8009c8e:	3648      	adds	r6, #72	; 0x48
 8009c90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009c94:	3b01      	subs	r3, #1
 8009c96:	d503      	bpl.n	8009ca0 <__sfp+0x28>
 8009c98:	6833      	ldr	r3, [r6, #0]
 8009c9a:	b30b      	cbz	r3, 8009ce0 <__sfp+0x68>
 8009c9c:	6836      	ldr	r6, [r6, #0]
 8009c9e:	e7f7      	b.n	8009c90 <__sfp+0x18>
 8009ca0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009ca4:	b9d5      	cbnz	r5, 8009cdc <__sfp+0x64>
 8009ca6:	4b16      	ldr	r3, [pc, #88]	; (8009d00 <__sfp+0x88>)
 8009ca8:	60e3      	str	r3, [r4, #12]
 8009caa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009cae:	6665      	str	r5, [r4, #100]	; 0x64
 8009cb0:	f000 f847 	bl	8009d42 <__retarget_lock_init_recursive>
 8009cb4:	f7ff ff96 	bl	8009be4 <__sfp_lock_release>
 8009cb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009cbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009cc0:	6025      	str	r5, [r4, #0]
 8009cc2:	61a5      	str	r5, [r4, #24]
 8009cc4:	2208      	movs	r2, #8
 8009cc6:	4629      	mov	r1, r5
 8009cc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ccc:	f7ff fc58 	bl	8009580 <memset>
 8009cd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009cd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009cd8:	4620      	mov	r0, r4
 8009cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cdc:	3468      	adds	r4, #104	; 0x68
 8009cde:	e7d9      	b.n	8009c94 <__sfp+0x1c>
 8009ce0:	2104      	movs	r1, #4
 8009ce2:	4638      	mov	r0, r7
 8009ce4:	f7ff ff62 	bl	8009bac <__sfmoreglue>
 8009ce8:	4604      	mov	r4, r0
 8009cea:	6030      	str	r0, [r6, #0]
 8009cec:	2800      	cmp	r0, #0
 8009cee:	d1d5      	bne.n	8009c9c <__sfp+0x24>
 8009cf0:	f7ff ff78 	bl	8009be4 <__sfp_lock_release>
 8009cf4:	230c      	movs	r3, #12
 8009cf6:	603b      	str	r3, [r7, #0]
 8009cf8:	e7ee      	b.n	8009cd8 <__sfp+0x60>
 8009cfa:	bf00      	nop
 8009cfc:	0800ac9c 	.word	0x0800ac9c
 8009d00:	ffff0001 	.word	0xffff0001

08009d04 <_fwalk_reent>:
 8009d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d08:	4606      	mov	r6, r0
 8009d0a:	4688      	mov	r8, r1
 8009d0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009d10:	2700      	movs	r7, #0
 8009d12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d16:	f1b9 0901 	subs.w	r9, r9, #1
 8009d1a:	d505      	bpl.n	8009d28 <_fwalk_reent+0x24>
 8009d1c:	6824      	ldr	r4, [r4, #0]
 8009d1e:	2c00      	cmp	r4, #0
 8009d20:	d1f7      	bne.n	8009d12 <_fwalk_reent+0xe>
 8009d22:	4638      	mov	r0, r7
 8009d24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d28:	89ab      	ldrh	r3, [r5, #12]
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d907      	bls.n	8009d3e <_fwalk_reent+0x3a>
 8009d2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d32:	3301      	adds	r3, #1
 8009d34:	d003      	beq.n	8009d3e <_fwalk_reent+0x3a>
 8009d36:	4629      	mov	r1, r5
 8009d38:	4630      	mov	r0, r6
 8009d3a:	47c0      	blx	r8
 8009d3c:	4307      	orrs	r7, r0
 8009d3e:	3568      	adds	r5, #104	; 0x68
 8009d40:	e7e9      	b.n	8009d16 <_fwalk_reent+0x12>

08009d42 <__retarget_lock_init_recursive>:
 8009d42:	4770      	bx	lr

08009d44 <__retarget_lock_acquire_recursive>:
 8009d44:	4770      	bx	lr

08009d46 <__retarget_lock_release_recursive>:
 8009d46:	4770      	bx	lr

08009d48 <__swhatbuf_r>:
 8009d48:	b570      	push	{r4, r5, r6, lr}
 8009d4a:	460e      	mov	r6, r1
 8009d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d50:	2900      	cmp	r1, #0
 8009d52:	b096      	sub	sp, #88	; 0x58
 8009d54:	4614      	mov	r4, r2
 8009d56:	461d      	mov	r5, r3
 8009d58:	da08      	bge.n	8009d6c <__swhatbuf_r+0x24>
 8009d5a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	602a      	str	r2, [r5, #0]
 8009d62:	061a      	lsls	r2, r3, #24
 8009d64:	d410      	bmi.n	8009d88 <__swhatbuf_r+0x40>
 8009d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d6a:	e00e      	b.n	8009d8a <__swhatbuf_r+0x42>
 8009d6c:	466a      	mov	r2, sp
 8009d6e:	f000 fdf1 	bl	800a954 <_fstat_r>
 8009d72:	2800      	cmp	r0, #0
 8009d74:	dbf1      	blt.n	8009d5a <__swhatbuf_r+0x12>
 8009d76:	9a01      	ldr	r2, [sp, #4]
 8009d78:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d7c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d80:	425a      	negs	r2, r3
 8009d82:	415a      	adcs	r2, r3
 8009d84:	602a      	str	r2, [r5, #0]
 8009d86:	e7ee      	b.n	8009d66 <__swhatbuf_r+0x1e>
 8009d88:	2340      	movs	r3, #64	; 0x40
 8009d8a:	2000      	movs	r0, #0
 8009d8c:	6023      	str	r3, [r4, #0]
 8009d8e:	b016      	add	sp, #88	; 0x58
 8009d90:	bd70      	pop	{r4, r5, r6, pc}
	...

08009d94 <__smakebuf_r>:
 8009d94:	898b      	ldrh	r3, [r1, #12]
 8009d96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d98:	079d      	lsls	r5, r3, #30
 8009d9a:	4606      	mov	r6, r0
 8009d9c:	460c      	mov	r4, r1
 8009d9e:	d507      	bpl.n	8009db0 <__smakebuf_r+0x1c>
 8009da0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009da4:	6023      	str	r3, [r4, #0]
 8009da6:	6123      	str	r3, [r4, #16]
 8009da8:	2301      	movs	r3, #1
 8009daa:	6163      	str	r3, [r4, #20]
 8009dac:	b002      	add	sp, #8
 8009dae:	bd70      	pop	{r4, r5, r6, pc}
 8009db0:	ab01      	add	r3, sp, #4
 8009db2:	466a      	mov	r2, sp
 8009db4:	f7ff ffc8 	bl	8009d48 <__swhatbuf_r>
 8009db8:	9900      	ldr	r1, [sp, #0]
 8009dba:	4605      	mov	r5, r0
 8009dbc:	4630      	mov	r0, r6
 8009dbe:	f000 f895 	bl	8009eec <_malloc_r>
 8009dc2:	b948      	cbnz	r0, 8009dd8 <__smakebuf_r+0x44>
 8009dc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dc8:	059a      	lsls	r2, r3, #22
 8009dca:	d4ef      	bmi.n	8009dac <__smakebuf_r+0x18>
 8009dcc:	f023 0303 	bic.w	r3, r3, #3
 8009dd0:	f043 0302 	orr.w	r3, r3, #2
 8009dd4:	81a3      	strh	r3, [r4, #12]
 8009dd6:	e7e3      	b.n	8009da0 <__smakebuf_r+0xc>
 8009dd8:	4b0d      	ldr	r3, [pc, #52]	; (8009e10 <__smakebuf_r+0x7c>)
 8009dda:	62b3      	str	r3, [r6, #40]	; 0x28
 8009ddc:	89a3      	ldrh	r3, [r4, #12]
 8009dde:	6020      	str	r0, [r4, #0]
 8009de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009de4:	81a3      	strh	r3, [r4, #12]
 8009de6:	9b00      	ldr	r3, [sp, #0]
 8009de8:	6163      	str	r3, [r4, #20]
 8009dea:	9b01      	ldr	r3, [sp, #4]
 8009dec:	6120      	str	r0, [r4, #16]
 8009dee:	b15b      	cbz	r3, 8009e08 <__smakebuf_r+0x74>
 8009df0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009df4:	4630      	mov	r0, r6
 8009df6:	f000 fdbf 	bl	800a978 <_isatty_r>
 8009dfa:	b128      	cbz	r0, 8009e08 <__smakebuf_r+0x74>
 8009dfc:	89a3      	ldrh	r3, [r4, #12]
 8009dfe:	f023 0303 	bic.w	r3, r3, #3
 8009e02:	f043 0301 	orr.w	r3, r3, #1
 8009e06:	81a3      	strh	r3, [r4, #12]
 8009e08:	89a0      	ldrh	r0, [r4, #12]
 8009e0a:	4305      	orrs	r5, r0
 8009e0c:	81a5      	strh	r5, [r4, #12]
 8009e0e:	e7cd      	b.n	8009dac <__smakebuf_r+0x18>
 8009e10:	08009ba1 	.word	0x08009ba1

08009e14 <_free_r>:
 8009e14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e16:	2900      	cmp	r1, #0
 8009e18:	d044      	beq.n	8009ea4 <_free_r+0x90>
 8009e1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e1e:	9001      	str	r0, [sp, #4]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	f1a1 0404 	sub.w	r4, r1, #4
 8009e26:	bfb8      	it	lt
 8009e28:	18e4      	addlt	r4, r4, r3
 8009e2a:	f000 fdef 	bl	800aa0c <__malloc_lock>
 8009e2e:	4a1e      	ldr	r2, [pc, #120]	; (8009ea8 <_free_r+0x94>)
 8009e30:	9801      	ldr	r0, [sp, #4]
 8009e32:	6813      	ldr	r3, [r2, #0]
 8009e34:	b933      	cbnz	r3, 8009e44 <_free_r+0x30>
 8009e36:	6063      	str	r3, [r4, #4]
 8009e38:	6014      	str	r4, [r2, #0]
 8009e3a:	b003      	add	sp, #12
 8009e3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e40:	f000 bdea 	b.w	800aa18 <__malloc_unlock>
 8009e44:	42a3      	cmp	r3, r4
 8009e46:	d908      	bls.n	8009e5a <_free_r+0x46>
 8009e48:	6825      	ldr	r5, [r4, #0]
 8009e4a:	1961      	adds	r1, r4, r5
 8009e4c:	428b      	cmp	r3, r1
 8009e4e:	bf01      	itttt	eq
 8009e50:	6819      	ldreq	r1, [r3, #0]
 8009e52:	685b      	ldreq	r3, [r3, #4]
 8009e54:	1949      	addeq	r1, r1, r5
 8009e56:	6021      	streq	r1, [r4, #0]
 8009e58:	e7ed      	b.n	8009e36 <_free_r+0x22>
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	b10b      	cbz	r3, 8009e64 <_free_r+0x50>
 8009e60:	42a3      	cmp	r3, r4
 8009e62:	d9fa      	bls.n	8009e5a <_free_r+0x46>
 8009e64:	6811      	ldr	r1, [r2, #0]
 8009e66:	1855      	adds	r5, r2, r1
 8009e68:	42a5      	cmp	r5, r4
 8009e6a:	d10b      	bne.n	8009e84 <_free_r+0x70>
 8009e6c:	6824      	ldr	r4, [r4, #0]
 8009e6e:	4421      	add	r1, r4
 8009e70:	1854      	adds	r4, r2, r1
 8009e72:	42a3      	cmp	r3, r4
 8009e74:	6011      	str	r1, [r2, #0]
 8009e76:	d1e0      	bne.n	8009e3a <_free_r+0x26>
 8009e78:	681c      	ldr	r4, [r3, #0]
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	6053      	str	r3, [r2, #4]
 8009e7e:	4421      	add	r1, r4
 8009e80:	6011      	str	r1, [r2, #0]
 8009e82:	e7da      	b.n	8009e3a <_free_r+0x26>
 8009e84:	d902      	bls.n	8009e8c <_free_r+0x78>
 8009e86:	230c      	movs	r3, #12
 8009e88:	6003      	str	r3, [r0, #0]
 8009e8a:	e7d6      	b.n	8009e3a <_free_r+0x26>
 8009e8c:	6825      	ldr	r5, [r4, #0]
 8009e8e:	1961      	adds	r1, r4, r5
 8009e90:	428b      	cmp	r3, r1
 8009e92:	bf04      	itt	eq
 8009e94:	6819      	ldreq	r1, [r3, #0]
 8009e96:	685b      	ldreq	r3, [r3, #4]
 8009e98:	6063      	str	r3, [r4, #4]
 8009e9a:	bf04      	itt	eq
 8009e9c:	1949      	addeq	r1, r1, r5
 8009e9e:	6021      	streq	r1, [r4, #0]
 8009ea0:	6054      	str	r4, [r2, #4]
 8009ea2:	e7ca      	b.n	8009e3a <_free_r+0x26>
 8009ea4:	b003      	add	sp, #12
 8009ea6:	bd30      	pop	{r4, r5, pc}
 8009ea8:	20000e88 	.word	0x20000e88

08009eac <sbrk_aligned>:
 8009eac:	b570      	push	{r4, r5, r6, lr}
 8009eae:	4e0e      	ldr	r6, [pc, #56]	; (8009ee8 <sbrk_aligned+0x3c>)
 8009eb0:	460c      	mov	r4, r1
 8009eb2:	6831      	ldr	r1, [r6, #0]
 8009eb4:	4605      	mov	r5, r0
 8009eb6:	b911      	cbnz	r1, 8009ebe <sbrk_aligned+0x12>
 8009eb8:	f000 fcd6 	bl	800a868 <_sbrk_r>
 8009ebc:	6030      	str	r0, [r6, #0]
 8009ebe:	4621      	mov	r1, r4
 8009ec0:	4628      	mov	r0, r5
 8009ec2:	f000 fcd1 	bl	800a868 <_sbrk_r>
 8009ec6:	1c43      	adds	r3, r0, #1
 8009ec8:	d00a      	beq.n	8009ee0 <sbrk_aligned+0x34>
 8009eca:	1cc4      	adds	r4, r0, #3
 8009ecc:	f024 0403 	bic.w	r4, r4, #3
 8009ed0:	42a0      	cmp	r0, r4
 8009ed2:	d007      	beq.n	8009ee4 <sbrk_aligned+0x38>
 8009ed4:	1a21      	subs	r1, r4, r0
 8009ed6:	4628      	mov	r0, r5
 8009ed8:	f000 fcc6 	bl	800a868 <_sbrk_r>
 8009edc:	3001      	adds	r0, #1
 8009ede:	d101      	bne.n	8009ee4 <sbrk_aligned+0x38>
 8009ee0:	f04f 34ff 	mov.w	r4, #4294967295
 8009ee4:	4620      	mov	r0, r4
 8009ee6:	bd70      	pop	{r4, r5, r6, pc}
 8009ee8:	20000e8c 	.word	0x20000e8c

08009eec <_malloc_r>:
 8009eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ef0:	1ccd      	adds	r5, r1, #3
 8009ef2:	f025 0503 	bic.w	r5, r5, #3
 8009ef6:	3508      	adds	r5, #8
 8009ef8:	2d0c      	cmp	r5, #12
 8009efa:	bf38      	it	cc
 8009efc:	250c      	movcc	r5, #12
 8009efe:	2d00      	cmp	r5, #0
 8009f00:	4607      	mov	r7, r0
 8009f02:	db01      	blt.n	8009f08 <_malloc_r+0x1c>
 8009f04:	42a9      	cmp	r1, r5
 8009f06:	d905      	bls.n	8009f14 <_malloc_r+0x28>
 8009f08:	230c      	movs	r3, #12
 8009f0a:	603b      	str	r3, [r7, #0]
 8009f0c:	2600      	movs	r6, #0
 8009f0e:	4630      	mov	r0, r6
 8009f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f14:	4e2e      	ldr	r6, [pc, #184]	; (8009fd0 <_malloc_r+0xe4>)
 8009f16:	f000 fd79 	bl	800aa0c <__malloc_lock>
 8009f1a:	6833      	ldr	r3, [r6, #0]
 8009f1c:	461c      	mov	r4, r3
 8009f1e:	bb34      	cbnz	r4, 8009f6e <_malloc_r+0x82>
 8009f20:	4629      	mov	r1, r5
 8009f22:	4638      	mov	r0, r7
 8009f24:	f7ff ffc2 	bl	8009eac <sbrk_aligned>
 8009f28:	1c43      	adds	r3, r0, #1
 8009f2a:	4604      	mov	r4, r0
 8009f2c:	d14d      	bne.n	8009fca <_malloc_r+0xde>
 8009f2e:	6834      	ldr	r4, [r6, #0]
 8009f30:	4626      	mov	r6, r4
 8009f32:	2e00      	cmp	r6, #0
 8009f34:	d140      	bne.n	8009fb8 <_malloc_r+0xcc>
 8009f36:	6823      	ldr	r3, [r4, #0]
 8009f38:	4631      	mov	r1, r6
 8009f3a:	4638      	mov	r0, r7
 8009f3c:	eb04 0803 	add.w	r8, r4, r3
 8009f40:	f000 fc92 	bl	800a868 <_sbrk_r>
 8009f44:	4580      	cmp	r8, r0
 8009f46:	d13a      	bne.n	8009fbe <_malloc_r+0xd2>
 8009f48:	6821      	ldr	r1, [r4, #0]
 8009f4a:	3503      	adds	r5, #3
 8009f4c:	1a6d      	subs	r5, r5, r1
 8009f4e:	f025 0503 	bic.w	r5, r5, #3
 8009f52:	3508      	adds	r5, #8
 8009f54:	2d0c      	cmp	r5, #12
 8009f56:	bf38      	it	cc
 8009f58:	250c      	movcc	r5, #12
 8009f5a:	4629      	mov	r1, r5
 8009f5c:	4638      	mov	r0, r7
 8009f5e:	f7ff ffa5 	bl	8009eac <sbrk_aligned>
 8009f62:	3001      	adds	r0, #1
 8009f64:	d02b      	beq.n	8009fbe <_malloc_r+0xd2>
 8009f66:	6823      	ldr	r3, [r4, #0]
 8009f68:	442b      	add	r3, r5
 8009f6a:	6023      	str	r3, [r4, #0]
 8009f6c:	e00e      	b.n	8009f8c <_malloc_r+0xa0>
 8009f6e:	6822      	ldr	r2, [r4, #0]
 8009f70:	1b52      	subs	r2, r2, r5
 8009f72:	d41e      	bmi.n	8009fb2 <_malloc_r+0xc6>
 8009f74:	2a0b      	cmp	r2, #11
 8009f76:	d916      	bls.n	8009fa6 <_malloc_r+0xba>
 8009f78:	1961      	adds	r1, r4, r5
 8009f7a:	42a3      	cmp	r3, r4
 8009f7c:	6025      	str	r5, [r4, #0]
 8009f7e:	bf18      	it	ne
 8009f80:	6059      	strne	r1, [r3, #4]
 8009f82:	6863      	ldr	r3, [r4, #4]
 8009f84:	bf08      	it	eq
 8009f86:	6031      	streq	r1, [r6, #0]
 8009f88:	5162      	str	r2, [r4, r5]
 8009f8a:	604b      	str	r3, [r1, #4]
 8009f8c:	4638      	mov	r0, r7
 8009f8e:	f104 060b 	add.w	r6, r4, #11
 8009f92:	f000 fd41 	bl	800aa18 <__malloc_unlock>
 8009f96:	f026 0607 	bic.w	r6, r6, #7
 8009f9a:	1d23      	adds	r3, r4, #4
 8009f9c:	1af2      	subs	r2, r6, r3
 8009f9e:	d0b6      	beq.n	8009f0e <_malloc_r+0x22>
 8009fa0:	1b9b      	subs	r3, r3, r6
 8009fa2:	50a3      	str	r3, [r4, r2]
 8009fa4:	e7b3      	b.n	8009f0e <_malloc_r+0x22>
 8009fa6:	6862      	ldr	r2, [r4, #4]
 8009fa8:	42a3      	cmp	r3, r4
 8009faa:	bf0c      	ite	eq
 8009fac:	6032      	streq	r2, [r6, #0]
 8009fae:	605a      	strne	r2, [r3, #4]
 8009fb0:	e7ec      	b.n	8009f8c <_malloc_r+0xa0>
 8009fb2:	4623      	mov	r3, r4
 8009fb4:	6864      	ldr	r4, [r4, #4]
 8009fb6:	e7b2      	b.n	8009f1e <_malloc_r+0x32>
 8009fb8:	4634      	mov	r4, r6
 8009fba:	6876      	ldr	r6, [r6, #4]
 8009fbc:	e7b9      	b.n	8009f32 <_malloc_r+0x46>
 8009fbe:	230c      	movs	r3, #12
 8009fc0:	603b      	str	r3, [r7, #0]
 8009fc2:	4638      	mov	r0, r7
 8009fc4:	f000 fd28 	bl	800aa18 <__malloc_unlock>
 8009fc8:	e7a1      	b.n	8009f0e <_malloc_r+0x22>
 8009fca:	6025      	str	r5, [r4, #0]
 8009fcc:	e7de      	b.n	8009f8c <_malloc_r+0xa0>
 8009fce:	bf00      	nop
 8009fd0:	20000e88 	.word	0x20000e88

08009fd4 <__ssputs_r>:
 8009fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fd8:	688e      	ldr	r6, [r1, #8]
 8009fda:	429e      	cmp	r6, r3
 8009fdc:	4682      	mov	sl, r0
 8009fde:	460c      	mov	r4, r1
 8009fe0:	4690      	mov	r8, r2
 8009fe2:	461f      	mov	r7, r3
 8009fe4:	d838      	bhi.n	800a058 <__ssputs_r+0x84>
 8009fe6:	898a      	ldrh	r2, [r1, #12]
 8009fe8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009fec:	d032      	beq.n	800a054 <__ssputs_r+0x80>
 8009fee:	6825      	ldr	r5, [r4, #0]
 8009ff0:	6909      	ldr	r1, [r1, #16]
 8009ff2:	eba5 0901 	sub.w	r9, r5, r1
 8009ff6:	6965      	ldr	r5, [r4, #20]
 8009ff8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ffc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a000:	3301      	adds	r3, #1
 800a002:	444b      	add	r3, r9
 800a004:	106d      	asrs	r5, r5, #1
 800a006:	429d      	cmp	r5, r3
 800a008:	bf38      	it	cc
 800a00a:	461d      	movcc	r5, r3
 800a00c:	0553      	lsls	r3, r2, #21
 800a00e:	d531      	bpl.n	800a074 <__ssputs_r+0xa0>
 800a010:	4629      	mov	r1, r5
 800a012:	f7ff ff6b 	bl	8009eec <_malloc_r>
 800a016:	4606      	mov	r6, r0
 800a018:	b950      	cbnz	r0, 800a030 <__ssputs_r+0x5c>
 800a01a:	230c      	movs	r3, #12
 800a01c:	f8ca 3000 	str.w	r3, [sl]
 800a020:	89a3      	ldrh	r3, [r4, #12]
 800a022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a026:	81a3      	strh	r3, [r4, #12]
 800a028:	f04f 30ff 	mov.w	r0, #4294967295
 800a02c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a030:	6921      	ldr	r1, [r4, #16]
 800a032:	464a      	mov	r2, r9
 800a034:	f000 fcc2 	bl	800a9bc <memcpy>
 800a038:	89a3      	ldrh	r3, [r4, #12]
 800a03a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a03e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a042:	81a3      	strh	r3, [r4, #12]
 800a044:	6126      	str	r6, [r4, #16]
 800a046:	6165      	str	r5, [r4, #20]
 800a048:	444e      	add	r6, r9
 800a04a:	eba5 0509 	sub.w	r5, r5, r9
 800a04e:	6026      	str	r6, [r4, #0]
 800a050:	60a5      	str	r5, [r4, #8]
 800a052:	463e      	mov	r6, r7
 800a054:	42be      	cmp	r6, r7
 800a056:	d900      	bls.n	800a05a <__ssputs_r+0x86>
 800a058:	463e      	mov	r6, r7
 800a05a:	6820      	ldr	r0, [r4, #0]
 800a05c:	4632      	mov	r2, r6
 800a05e:	4641      	mov	r1, r8
 800a060:	f000 fcba 	bl	800a9d8 <memmove>
 800a064:	68a3      	ldr	r3, [r4, #8]
 800a066:	1b9b      	subs	r3, r3, r6
 800a068:	60a3      	str	r3, [r4, #8]
 800a06a:	6823      	ldr	r3, [r4, #0]
 800a06c:	4433      	add	r3, r6
 800a06e:	6023      	str	r3, [r4, #0]
 800a070:	2000      	movs	r0, #0
 800a072:	e7db      	b.n	800a02c <__ssputs_r+0x58>
 800a074:	462a      	mov	r2, r5
 800a076:	f000 fcd5 	bl	800aa24 <_realloc_r>
 800a07a:	4606      	mov	r6, r0
 800a07c:	2800      	cmp	r0, #0
 800a07e:	d1e1      	bne.n	800a044 <__ssputs_r+0x70>
 800a080:	6921      	ldr	r1, [r4, #16]
 800a082:	4650      	mov	r0, sl
 800a084:	f7ff fec6 	bl	8009e14 <_free_r>
 800a088:	e7c7      	b.n	800a01a <__ssputs_r+0x46>
	...

0800a08c <_svfiprintf_r>:
 800a08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a090:	4698      	mov	r8, r3
 800a092:	898b      	ldrh	r3, [r1, #12]
 800a094:	061b      	lsls	r3, r3, #24
 800a096:	b09d      	sub	sp, #116	; 0x74
 800a098:	4607      	mov	r7, r0
 800a09a:	460d      	mov	r5, r1
 800a09c:	4614      	mov	r4, r2
 800a09e:	d50e      	bpl.n	800a0be <_svfiprintf_r+0x32>
 800a0a0:	690b      	ldr	r3, [r1, #16]
 800a0a2:	b963      	cbnz	r3, 800a0be <_svfiprintf_r+0x32>
 800a0a4:	2140      	movs	r1, #64	; 0x40
 800a0a6:	f7ff ff21 	bl	8009eec <_malloc_r>
 800a0aa:	6028      	str	r0, [r5, #0]
 800a0ac:	6128      	str	r0, [r5, #16]
 800a0ae:	b920      	cbnz	r0, 800a0ba <_svfiprintf_r+0x2e>
 800a0b0:	230c      	movs	r3, #12
 800a0b2:	603b      	str	r3, [r7, #0]
 800a0b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b8:	e0d1      	b.n	800a25e <_svfiprintf_r+0x1d2>
 800a0ba:	2340      	movs	r3, #64	; 0x40
 800a0bc:	616b      	str	r3, [r5, #20]
 800a0be:	2300      	movs	r3, #0
 800a0c0:	9309      	str	r3, [sp, #36]	; 0x24
 800a0c2:	2320      	movs	r3, #32
 800a0c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0c8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0cc:	2330      	movs	r3, #48	; 0x30
 800a0ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a278 <_svfiprintf_r+0x1ec>
 800a0d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0d6:	f04f 0901 	mov.w	r9, #1
 800a0da:	4623      	mov	r3, r4
 800a0dc:	469a      	mov	sl, r3
 800a0de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0e2:	b10a      	cbz	r2, 800a0e8 <_svfiprintf_r+0x5c>
 800a0e4:	2a25      	cmp	r2, #37	; 0x25
 800a0e6:	d1f9      	bne.n	800a0dc <_svfiprintf_r+0x50>
 800a0e8:	ebba 0b04 	subs.w	fp, sl, r4
 800a0ec:	d00b      	beq.n	800a106 <_svfiprintf_r+0x7a>
 800a0ee:	465b      	mov	r3, fp
 800a0f0:	4622      	mov	r2, r4
 800a0f2:	4629      	mov	r1, r5
 800a0f4:	4638      	mov	r0, r7
 800a0f6:	f7ff ff6d 	bl	8009fd4 <__ssputs_r>
 800a0fa:	3001      	adds	r0, #1
 800a0fc:	f000 80aa 	beq.w	800a254 <_svfiprintf_r+0x1c8>
 800a100:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a102:	445a      	add	r2, fp
 800a104:	9209      	str	r2, [sp, #36]	; 0x24
 800a106:	f89a 3000 	ldrb.w	r3, [sl]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	f000 80a2 	beq.w	800a254 <_svfiprintf_r+0x1c8>
 800a110:	2300      	movs	r3, #0
 800a112:	f04f 32ff 	mov.w	r2, #4294967295
 800a116:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a11a:	f10a 0a01 	add.w	sl, sl, #1
 800a11e:	9304      	str	r3, [sp, #16]
 800a120:	9307      	str	r3, [sp, #28]
 800a122:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a126:	931a      	str	r3, [sp, #104]	; 0x68
 800a128:	4654      	mov	r4, sl
 800a12a:	2205      	movs	r2, #5
 800a12c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a130:	4851      	ldr	r0, [pc, #324]	; (800a278 <_svfiprintf_r+0x1ec>)
 800a132:	f7f6 f85d 	bl	80001f0 <memchr>
 800a136:	9a04      	ldr	r2, [sp, #16]
 800a138:	b9d8      	cbnz	r0, 800a172 <_svfiprintf_r+0xe6>
 800a13a:	06d0      	lsls	r0, r2, #27
 800a13c:	bf44      	itt	mi
 800a13e:	2320      	movmi	r3, #32
 800a140:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a144:	0711      	lsls	r1, r2, #28
 800a146:	bf44      	itt	mi
 800a148:	232b      	movmi	r3, #43	; 0x2b
 800a14a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a14e:	f89a 3000 	ldrb.w	r3, [sl]
 800a152:	2b2a      	cmp	r3, #42	; 0x2a
 800a154:	d015      	beq.n	800a182 <_svfiprintf_r+0xf6>
 800a156:	9a07      	ldr	r2, [sp, #28]
 800a158:	4654      	mov	r4, sl
 800a15a:	2000      	movs	r0, #0
 800a15c:	f04f 0c0a 	mov.w	ip, #10
 800a160:	4621      	mov	r1, r4
 800a162:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a166:	3b30      	subs	r3, #48	; 0x30
 800a168:	2b09      	cmp	r3, #9
 800a16a:	d94e      	bls.n	800a20a <_svfiprintf_r+0x17e>
 800a16c:	b1b0      	cbz	r0, 800a19c <_svfiprintf_r+0x110>
 800a16e:	9207      	str	r2, [sp, #28]
 800a170:	e014      	b.n	800a19c <_svfiprintf_r+0x110>
 800a172:	eba0 0308 	sub.w	r3, r0, r8
 800a176:	fa09 f303 	lsl.w	r3, r9, r3
 800a17a:	4313      	orrs	r3, r2
 800a17c:	9304      	str	r3, [sp, #16]
 800a17e:	46a2      	mov	sl, r4
 800a180:	e7d2      	b.n	800a128 <_svfiprintf_r+0x9c>
 800a182:	9b03      	ldr	r3, [sp, #12]
 800a184:	1d19      	adds	r1, r3, #4
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	9103      	str	r1, [sp, #12]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	bfbb      	ittet	lt
 800a18e:	425b      	neglt	r3, r3
 800a190:	f042 0202 	orrlt.w	r2, r2, #2
 800a194:	9307      	strge	r3, [sp, #28]
 800a196:	9307      	strlt	r3, [sp, #28]
 800a198:	bfb8      	it	lt
 800a19a:	9204      	strlt	r2, [sp, #16]
 800a19c:	7823      	ldrb	r3, [r4, #0]
 800a19e:	2b2e      	cmp	r3, #46	; 0x2e
 800a1a0:	d10c      	bne.n	800a1bc <_svfiprintf_r+0x130>
 800a1a2:	7863      	ldrb	r3, [r4, #1]
 800a1a4:	2b2a      	cmp	r3, #42	; 0x2a
 800a1a6:	d135      	bne.n	800a214 <_svfiprintf_r+0x188>
 800a1a8:	9b03      	ldr	r3, [sp, #12]
 800a1aa:	1d1a      	adds	r2, r3, #4
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	9203      	str	r2, [sp, #12]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	bfb8      	it	lt
 800a1b4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a1b8:	3402      	adds	r4, #2
 800a1ba:	9305      	str	r3, [sp, #20]
 800a1bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a288 <_svfiprintf_r+0x1fc>
 800a1c0:	7821      	ldrb	r1, [r4, #0]
 800a1c2:	2203      	movs	r2, #3
 800a1c4:	4650      	mov	r0, sl
 800a1c6:	f7f6 f813 	bl	80001f0 <memchr>
 800a1ca:	b140      	cbz	r0, 800a1de <_svfiprintf_r+0x152>
 800a1cc:	2340      	movs	r3, #64	; 0x40
 800a1ce:	eba0 000a 	sub.w	r0, r0, sl
 800a1d2:	fa03 f000 	lsl.w	r0, r3, r0
 800a1d6:	9b04      	ldr	r3, [sp, #16]
 800a1d8:	4303      	orrs	r3, r0
 800a1da:	3401      	adds	r4, #1
 800a1dc:	9304      	str	r3, [sp, #16]
 800a1de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1e2:	4826      	ldr	r0, [pc, #152]	; (800a27c <_svfiprintf_r+0x1f0>)
 800a1e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1e8:	2206      	movs	r2, #6
 800a1ea:	f7f6 f801 	bl	80001f0 <memchr>
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	d038      	beq.n	800a264 <_svfiprintf_r+0x1d8>
 800a1f2:	4b23      	ldr	r3, [pc, #140]	; (800a280 <_svfiprintf_r+0x1f4>)
 800a1f4:	bb1b      	cbnz	r3, 800a23e <_svfiprintf_r+0x1b2>
 800a1f6:	9b03      	ldr	r3, [sp, #12]
 800a1f8:	3307      	adds	r3, #7
 800a1fa:	f023 0307 	bic.w	r3, r3, #7
 800a1fe:	3308      	adds	r3, #8
 800a200:	9303      	str	r3, [sp, #12]
 800a202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a204:	4433      	add	r3, r6
 800a206:	9309      	str	r3, [sp, #36]	; 0x24
 800a208:	e767      	b.n	800a0da <_svfiprintf_r+0x4e>
 800a20a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a20e:	460c      	mov	r4, r1
 800a210:	2001      	movs	r0, #1
 800a212:	e7a5      	b.n	800a160 <_svfiprintf_r+0xd4>
 800a214:	2300      	movs	r3, #0
 800a216:	3401      	adds	r4, #1
 800a218:	9305      	str	r3, [sp, #20]
 800a21a:	4619      	mov	r1, r3
 800a21c:	f04f 0c0a 	mov.w	ip, #10
 800a220:	4620      	mov	r0, r4
 800a222:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a226:	3a30      	subs	r2, #48	; 0x30
 800a228:	2a09      	cmp	r2, #9
 800a22a:	d903      	bls.n	800a234 <_svfiprintf_r+0x1a8>
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d0c5      	beq.n	800a1bc <_svfiprintf_r+0x130>
 800a230:	9105      	str	r1, [sp, #20]
 800a232:	e7c3      	b.n	800a1bc <_svfiprintf_r+0x130>
 800a234:	fb0c 2101 	mla	r1, ip, r1, r2
 800a238:	4604      	mov	r4, r0
 800a23a:	2301      	movs	r3, #1
 800a23c:	e7f0      	b.n	800a220 <_svfiprintf_r+0x194>
 800a23e:	ab03      	add	r3, sp, #12
 800a240:	9300      	str	r3, [sp, #0]
 800a242:	462a      	mov	r2, r5
 800a244:	4b0f      	ldr	r3, [pc, #60]	; (800a284 <_svfiprintf_r+0x1f8>)
 800a246:	a904      	add	r1, sp, #16
 800a248:	4638      	mov	r0, r7
 800a24a:	f3af 8000 	nop.w
 800a24e:	1c42      	adds	r2, r0, #1
 800a250:	4606      	mov	r6, r0
 800a252:	d1d6      	bne.n	800a202 <_svfiprintf_r+0x176>
 800a254:	89ab      	ldrh	r3, [r5, #12]
 800a256:	065b      	lsls	r3, r3, #25
 800a258:	f53f af2c 	bmi.w	800a0b4 <_svfiprintf_r+0x28>
 800a25c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a25e:	b01d      	add	sp, #116	; 0x74
 800a260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a264:	ab03      	add	r3, sp, #12
 800a266:	9300      	str	r3, [sp, #0]
 800a268:	462a      	mov	r2, r5
 800a26a:	4b06      	ldr	r3, [pc, #24]	; (800a284 <_svfiprintf_r+0x1f8>)
 800a26c:	a904      	add	r1, sp, #16
 800a26e:	4638      	mov	r0, r7
 800a270:	f000 f9d4 	bl	800a61c <_printf_i>
 800a274:	e7eb      	b.n	800a24e <_svfiprintf_r+0x1c2>
 800a276:	bf00      	nop
 800a278:	0800ae04 	.word	0x0800ae04
 800a27c:	0800ae0e 	.word	0x0800ae0e
 800a280:	00000000 	.word	0x00000000
 800a284:	08009fd5 	.word	0x08009fd5
 800a288:	0800ae0a 	.word	0x0800ae0a

0800a28c <__sfputc_r>:
 800a28c:	6893      	ldr	r3, [r2, #8]
 800a28e:	3b01      	subs	r3, #1
 800a290:	2b00      	cmp	r3, #0
 800a292:	b410      	push	{r4}
 800a294:	6093      	str	r3, [r2, #8]
 800a296:	da08      	bge.n	800a2aa <__sfputc_r+0x1e>
 800a298:	6994      	ldr	r4, [r2, #24]
 800a29a:	42a3      	cmp	r3, r4
 800a29c:	db01      	blt.n	800a2a2 <__sfputc_r+0x16>
 800a29e:	290a      	cmp	r1, #10
 800a2a0:	d103      	bne.n	800a2aa <__sfputc_r+0x1e>
 800a2a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2a6:	f7ff bad5 	b.w	8009854 <__swbuf_r>
 800a2aa:	6813      	ldr	r3, [r2, #0]
 800a2ac:	1c58      	adds	r0, r3, #1
 800a2ae:	6010      	str	r0, [r2, #0]
 800a2b0:	7019      	strb	r1, [r3, #0]
 800a2b2:	4608      	mov	r0, r1
 800a2b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2b8:	4770      	bx	lr

0800a2ba <__sfputs_r>:
 800a2ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2bc:	4606      	mov	r6, r0
 800a2be:	460f      	mov	r7, r1
 800a2c0:	4614      	mov	r4, r2
 800a2c2:	18d5      	adds	r5, r2, r3
 800a2c4:	42ac      	cmp	r4, r5
 800a2c6:	d101      	bne.n	800a2cc <__sfputs_r+0x12>
 800a2c8:	2000      	movs	r0, #0
 800a2ca:	e007      	b.n	800a2dc <__sfputs_r+0x22>
 800a2cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2d0:	463a      	mov	r2, r7
 800a2d2:	4630      	mov	r0, r6
 800a2d4:	f7ff ffda 	bl	800a28c <__sfputc_r>
 800a2d8:	1c43      	adds	r3, r0, #1
 800a2da:	d1f3      	bne.n	800a2c4 <__sfputs_r+0xa>
 800a2dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a2e0 <_vfiprintf_r>:
 800a2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2e4:	460d      	mov	r5, r1
 800a2e6:	b09d      	sub	sp, #116	; 0x74
 800a2e8:	4614      	mov	r4, r2
 800a2ea:	4698      	mov	r8, r3
 800a2ec:	4606      	mov	r6, r0
 800a2ee:	b118      	cbz	r0, 800a2f8 <_vfiprintf_r+0x18>
 800a2f0:	6983      	ldr	r3, [r0, #24]
 800a2f2:	b90b      	cbnz	r3, 800a2f8 <_vfiprintf_r+0x18>
 800a2f4:	f7ff fc88 	bl	8009c08 <__sinit>
 800a2f8:	4b89      	ldr	r3, [pc, #548]	; (800a520 <_vfiprintf_r+0x240>)
 800a2fa:	429d      	cmp	r5, r3
 800a2fc:	d11b      	bne.n	800a336 <_vfiprintf_r+0x56>
 800a2fe:	6875      	ldr	r5, [r6, #4]
 800a300:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a302:	07d9      	lsls	r1, r3, #31
 800a304:	d405      	bmi.n	800a312 <_vfiprintf_r+0x32>
 800a306:	89ab      	ldrh	r3, [r5, #12]
 800a308:	059a      	lsls	r2, r3, #22
 800a30a:	d402      	bmi.n	800a312 <_vfiprintf_r+0x32>
 800a30c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a30e:	f7ff fd19 	bl	8009d44 <__retarget_lock_acquire_recursive>
 800a312:	89ab      	ldrh	r3, [r5, #12]
 800a314:	071b      	lsls	r3, r3, #28
 800a316:	d501      	bpl.n	800a31c <_vfiprintf_r+0x3c>
 800a318:	692b      	ldr	r3, [r5, #16]
 800a31a:	b9eb      	cbnz	r3, 800a358 <_vfiprintf_r+0x78>
 800a31c:	4629      	mov	r1, r5
 800a31e:	4630      	mov	r0, r6
 800a320:	f7ff faea 	bl	80098f8 <__swsetup_r>
 800a324:	b1c0      	cbz	r0, 800a358 <_vfiprintf_r+0x78>
 800a326:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a328:	07dc      	lsls	r4, r3, #31
 800a32a:	d50e      	bpl.n	800a34a <_vfiprintf_r+0x6a>
 800a32c:	f04f 30ff 	mov.w	r0, #4294967295
 800a330:	b01d      	add	sp, #116	; 0x74
 800a332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a336:	4b7b      	ldr	r3, [pc, #492]	; (800a524 <_vfiprintf_r+0x244>)
 800a338:	429d      	cmp	r5, r3
 800a33a:	d101      	bne.n	800a340 <_vfiprintf_r+0x60>
 800a33c:	68b5      	ldr	r5, [r6, #8]
 800a33e:	e7df      	b.n	800a300 <_vfiprintf_r+0x20>
 800a340:	4b79      	ldr	r3, [pc, #484]	; (800a528 <_vfiprintf_r+0x248>)
 800a342:	429d      	cmp	r5, r3
 800a344:	bf08      	it	eq
 800a346:	68f5      	ldreq	r5, [r6, #12]
 800a348:	e7da      	b.n	800a300 <_vfiprintf_r+0x20>
 800a34a:	89ab      	ldrh	r3, [r5, #12]
 800a34c:	0598      	lsls	r0, r3, #22
 800a34e:	d4ed      	bmi.n	800a32c <_vfiprintf_r+0x4c>
 800a350:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a352:	f7ff fcf8 	bl	8009d46 <__retarget_lock_release_recursive>
 800a356:	e7e9      	b.n	800a32c <_vfiprintf_r+0x4c>
 800a358:	2300      	movs	r3, #0
 800a35a:	9309      	str	r3, [sp, #36]	; 0x24
 800a35c:	2320      	movs	r3, #32
 800a35e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a362:	f8cd 800c 	str.w	r8, [sp, #12]
 800a366:	2330      	movs	r3, #48	; 0x30
 800a368:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a52c <_vfiprintf_r+0x24c>
 800a36c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a370:	f04f 0901 	mov.w	r9, #1
 800a374:	4623      	mov	r3, r4
 800a376:	469a      	mov	sl, r3
 800a378:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a37c:	b10a      	cbz	r2, 800a382 <_vfiprintf_r+0xa2>
 800a37e:	2a25      	cmp	r2, #37	; 0x25
 800a380:	d1f9      	bne.n	800a376 <_vfiprintf_r+0x96>
 800a382:	ebba 0b04 	subs.w	fp, sl, r4
 800a386:	d00b      	beq.n	800a3a0 <_vfiprintf_r+0xc0>
 800a388:	465b      	mov	r3, fp
 800a38a:	4622      	mov	r2, r4
 800a38c:	4629      	mov	r1, r5
 800a38e:	4630      	mov	r0, r6
 800a390:	f7ff ff93 	bl	800a2ba <__sfputs_r>
 800a394:	3001      	adds	r0, #1
 800a396:	f000 80aa 	beq.w	800a4ee <_vfiprintf_r+0x20e>
 800a39a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a39c:	445a      	add	r2, fp
 800a39e:	9209      	str	r2, [sp, #36]	; 0x24
 800a3a0:	f89a 3000 	ldrb.w	r3, [sl]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	f000 80a2 	beq.w	800a4ee <_vfiprintf_r+0x20e>
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	f04f 32ff 	mov.w	r2, #4294967295
 800a3b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3b4:	f10a 0a01 	add.w	sl, sl, #1
 800a3b8:	9304      	str	r3, [sp, #16]
 800a3ba:	9307      	str	r3, [sp, #28]
 800a3bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3c0:	931a      	str	r3, [sp, #104]	; 0x68
 800a3c2:	4654      	mov	r4, sl
 800a3c4:	2205      	movs	r2, #5
 800a3c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3ca:	4858      	ldr	r0, [pc, #352]	; (800a52c <_vfiprintf_r+0x24c>)
 800a3cc:	f7f5 ff10 	bl	80001f0 <memchr>
 800a3d0:	9a04      	ldr	r2, [sp, #16]
 800a3d2:	b9d8      	cbnz	r0, 800a40c <_vfiprintf_r+0x12c>
 800a3d4:	06d1      	lsls	r1, r2, #27
 800a3d6:	bf44      	itt	mi
 800a3d8:	2320      	movmi	r3, #32
 800a3da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3de:	0713      	lsls	r3, r2, #28
 800a3e0:	bf44      	itt	mi
 800a3e2:	232b      	movmi	r3, #43	; 0x2b
 800a3e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3e8:	f89a 3000 	ldrb.w	r3, [sl]
 800a3ec:	2b2a      	cmp	r3, #42	; 0x2a
 800a3ee:	d015      	beq.n	800a41c <_vfiprintf_r+0x13c>
 800a3f0:	9a07      	ldr	r2, [sp, #28]
 800a3f2:	4654      	mov	r4, sl
 800a3f4:	2000      	movs	r0, #0
 800a3f6:	f04f 0c0a 	mov.w	ip, #10
 800a3fa:	4621      	mov	r1, r4
 800a3fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a400:	3b30      	subs	r3, #48	; 0x30
 800a402:	2b09      	cmp	r3, #9
 800a404:	d94e      	bls.n	800a4a4 <_vfiprintf_r+0x1c4>
 800a406:	b1b0      	cbz	r0, 800a436 <_vfiprintf_r+0x156>
 800a408:	9207      	str	r2, [sp, #28]
 800a40a:	e014      	b.n	800a436 <_vfiprintf_r+0x156>
 800a40c:	eba0 0308 	sub.w	r3, r0, r8
 800a410:	fa09 f303 	lsl.w	r3, r9, r3
 800a414:	4313      	orrs	r3, r2
 800a416:	9304      	str	r3, [sp, #16]
 800a418:	46a2      	mov	sl, r4
 800a41a:	e7d2      	b.n	800a3c2 <_vfiprintf_r+0xe2>
 800a41c:	9b03      	ldr	r3, [sp, #12]
 800a41e:	1d19      	adds	r1, r3, #4
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	9103      	str	r1, [sp, #12]
 800a424:	2b00      	cmp	r3, #0
 800a426:	bfbb      	ittet	lt
 800a428:	425b      	neglt	r3, r3
 800a42a:	f042 0202 	orrlt.w	r2, r2, #2
 800a42e:	9307      	strge	r3, [sp, #28]
 800a430:	9307      	strlt	r3, [sp, #28]
 800a432:	bfb8      	it	lt
 800a434:	9204      	strlt	r2, [sp, #16]
 800a436:	7823      	ldrb	r3, [r4, #0]
 800a438:	2b2e      	cmp	r3, #46	; 0x2e
 800a43a:	d10c      	bne.n	800a456 <_vfiprintf_r+0x176>
 800a43c:	7863      	ldrb	r3, [r4, #1]
 800a43e:	2b2a      	cmp	r3, #42	; 0x2a
 800a440:	d135      	bne.n	800a4ae <_vfiprintf_r+0x1ce>
 800a442:	9b03      	ldr	r3, [sp, #12]
 800a444:	1d1a      	adds	r2, r3, #4
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	9203      	str	r2, [sp, #12]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	bfb8      	it	lt
 800a44e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a452:	3402      	adds	r4, #2
 800a454:	9305      	str	r3, [sp, #20]
 800a456:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a53c <_vfiprintf_r+0x25c>
 800a45a:	7821      	ldrb	r1, [r4, #0]
 800a45c:	2203      	movs	r2, #3
 800a45e:	4650      	mov	r0, sl
 800a460:	f7f5 fec6 	bl	80001f0 <memchr>
 800a464:	b140      	cbz	r0, 800a478 <_vfiprintf_r+0x198>
 800a466:	2340      	movs	r3, #64	; 0x40
 800a468:	eba0 000a 	sub.w	r0, r0, sl
 800a46c:	fa03 f000 	lsl.w	r0, r3, r0
 800a470:	9b04      	ldr	r3, [sp, #16]
 800a472:	4303      	orrs	r3, r0
 800a474:	3401      	adds	r4, #1
 800a476:	9304      	str	r3, [sp, #16]
 800a478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a47c:	482c      	ldr	r0, [pc, #176]	; (800a530 <_vfiprintf_r+0x250>)
 800a47e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a482:	2206      	movs	r2, #6
 800a484:	f7f5 feb4 	bl	80001f0 <memchr>
 800a488:	2800      	cmp	r0, #0
 800a48a:	d03f      	beq.n	800a50c <_vfiprintf_r+0x22c>
 800a48c:	4b29      	ldr	r3, [pc, #164]	; (800a534 <_vfiprintf_r+0x254>)
 800a48e:	bb1b      	cbnz	r3, 800a4d8 <_vfiprintf_r+0x1f8>
 800a490:	9b03      	ldr	r3, [sp, #12]
 800a492:	3307      	adds	r3, #7
 800a494:	f023 0307 	bic.w	r3, r3, #7
 800a498:	3308      	adds	r3, #8
 800a49a:	9303      	str	r3, [sp, #12]
 800a49c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a49e:	443b      	add	r3, r7
 800a4a0:	9309      	str	r3, [sp, #36]	; 0x24
 800a4a2:	e767      	b.n	800a374 <_vfiprintf_r+0x94>
 800a4a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4a8:	460c      	mov	r4, r1
 800a4aa:	2001      	movs	r0, #1
 800a4ac:	e7a5      	b.n	800a3fa <_vfiprintf_r+0x11a>
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	3401      	adds	r4, #1
 800a4b2:	9305      	str	r3, [sp, #20]
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	f04f 0c0a 	mov.w	ip, #10
 800a4ba:	4620      	mov	r0, r4
 800a4bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4c0:	3a30      	subs	r2, #48	; 0x30
 800a4c2:	2a09      	cmp	r2, #9
 800a4c4:	d903      	bls.n	800a4ce <_vfiprintf_r+0x1ee>
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d0c5      	beq.n	800a456 <_vfiprintf_r+0x176>
 800a4ca:	9105      	str	r1, [sp, #20]
 800a4cc:	e7c3      	b.n	800a456 <_vfiprintf_r+0x176>
 800a4ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4d2:	4604      	mov	r4, r0
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e7f0      	b.n	800a4ba <_vfiprintf_r+0x1da>
 800a4d8:	ab03      	add	r3, sp, #12
 800a4da:	9300      	str	r3, [sp, #0]
 800a4dc:	462a      	mov	r2, r5
 800a4de:	4b16      	ldr	r3, [pc, #88]	; (800a538 <_vfiprintf_r+0x258>)
 800a4e0:	a904      	add	r1, sp, #16
 800a4e2:	4630      	mov	r0, r6
 800a4e4:	f3af 8000 	nop.w
 800a4e8:	4607      	mov	r7, r0
 800a4ea:	1c78      	adds	r0, r7, #1
 800a4ec:	d1d6      	bne.n	800a49c <_vfiprintf_r+0x1bc>
 800a4ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4f0:	07d9      	lsls	r1, r3, #31
 800a4f2:	d405      	bmi.n	800a500 <_vfiprintf_r+0x220>
 800a4f4:	89ab      	ldrh	r3, [r5, #12]
 800a4f6:	059a      	lsls	r2, r3, #22
 800a4f8:	d402      	bmi.n	800a500 <_vfiprintf_r+0x220>
 800a4fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4fc:	f7ff fc23 	bl	8009d46 <__retarget_lock_release_recursive>
 800a500:	89ab      	ldrh	r3, [r5, #12]
 800a502:	065b      	lsls	r3, r3, #25
 800a504:	f53f af12 	bmi.w	800a32c <_vfiprintf_r+0x4c>
 800a508:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a50a:	e711      	b.n	800a330 <_vfiprintf_r+0x50>
 800a50c:	ab03      	add	r3, sp, #12
 800a50e:	9300      	str	r3, [sp, #0]
 800a510:	462a      	mov	r2, r5
 800a512:	4b09      	ldr	r3, [pc, #36]	; (800a538 <_vfiprintf_r+0x258>)
 800a514:	a904      	add	r1, sp, #16
 800a516:	4630      	mov	r0, r6
 800a518:	f000 f880 	bl	800a61c <_printf_i>
 800a51c:	e7e4      	b.n	800a4e8 <_vfiprintf_r+0x208>
 800a51e:	bf00      	nop
 800a520:	0800adc4 	.word	0x0800adc4
 800a524:	0800ade4 	.word	0x0800ade4
 800a528:	0800ada4 	.word	0x0800ada4
 800a52c:	0800ae04 	.word	0x0800ae04
 800a530:	0800ae0e 	.word	0x0800ae0e
 800a534:	00000000 	.word	0x00000000
 800a538:	0800a2bb 	.word	0x0800a2bb
 800a53c:	0800ae0a 	.word	0x0800ae0a

0800a540 <_printf_common>:
 800a540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a544:	4616      	mov	r6, r2
 800a546:	4699      	mov	r9, r3
 800a548:	688a      	ldr	r2, [r1, #8]
 800a54a:	690b      	ldr	r3, [r1, #16]
 800a54c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a550:	4293      	cmp	r3, r2
 800a552:	bfb8      	it	lt
 800a554:	4613      	movlt	r3, r2
 800a556:	6033      	str	r3, [r6, #0]
 800a558:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a55c:	4607      	mov	r7, r0
 800a55e:	460c      	mov	r4, r1
 800a560:	b10a      	cbz	r2, 800a566 <_printf_common+0x26>
 800a562:	3301      	adds	r3, #1
 800a564:	6033      	str	r3, [r6, #0]
 800a566:	6823      	ldr	r3, [r4, #0]
 800a568:	0699      	lsls	r1, r3, #26
 800a56a:	bf42      	ittt	mi
 800a56c:	6833      	ldrmi	r3, [r6, #0]
 800a56e:	3302      	addmi	r3, #2
 800a570:	6033      	strmi	r3, [r6, #0]
 800a572:	6825      	ldr	r5, [r4, #0]
 800a574:	f015 0506 	ands.w	r5, r5, #6
 800a578:	d106      	bne.n	800a588 <_printf_common+0x48>
 800a57a:	f104 0a19 	add.w	sl, r4, #25
 800a57e:	68e3      	ldr	r3, [r4, #12]
 800a580:	6832      	ldr	r2, [r6, #0]
 800a582:	1a9b      	subs	r3, r3, r2
 800a584:	42ab      	cmp	r3, r5
 800a586:	dc26      	bgt.n	800a5d6 <_printf_common+0x96>
 800a588:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a58c:	1e13      	subs	r3, r2, #0
 800a58e:	6822      	ldr	r2, [r4, #0]
 800a590:	bf18      	it	ne
 800a592:	2301      	movne	r3, #1
 800a594:	0692      	lsls	r2, r2, #26
 800a596:	d42b      	bmi.n	800a5f0 <_printf_common+0xb0>
 800a598:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a59c:	4649      	mov	r1, r9
 800a59e:	4638      	mov	r0, r7
 800a5a0:	47c0      	blx	r8
 800a5a2:	3001      	adds	r0, #1
 800a5a4:	d01e      	beq.n	800a5e4 <_printf_common+0xa4>
 800a5a6:	6823      	ldr	r3, [r4, #0]
 800a5a8:	68e5      	ldr	r5, [r4, #12]
 800a5aa:	6832      	ldr	r2, [r6, #0]
 800a5ac:	f003 0306 	and.w	r3, r3, #6
 800a5b0:	2b04      	cmp	r3, #4
 800a5b2:	bf08      	it	eq
 800a5b4:	1aad      	subeq	r5, r5, r2
 800a5b6:	68a3      	ldr	r3, [r4, #8]
 800a5b8:	6922      	ldr	r2, [r4, #16]
 800a5ba:	bf0c      	ite	eq
 800a5bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5c0:	2500      	movne	r5, #0
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	bfc4      	itt	gt
 800a5c6:	1a9b      	subgt	r3, r3, r2
 800a5c8:	18ed      	addgt	r5, r5, r3
 800a5ca:	2600      	movs	r6, #0
 800a5cc:	341a      	adds	r4, #26
 800a5ce:	42b5      	cmp	r5, r6
 800a5d0:	d11a      	bne.n	800a608 <_printf_common+0xc8>
 800a5d2:	2000      	movs	r0, #0
 800a5d4:	e008      	b.n	800a5e8 <_printf_common+0xa8>
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	4652      	mov	r2, sl
 800a5da:	4649      	mov	r1, r9
 800a5dc:	4638      	mov	r0, r7
 800a5de:	47c0      	blx	r8
 800a5e0:	3001      	adds	r0, #1
 800a5e2:	d103      	bne.n	800a5ec <_printf_common+0xac>
 800a5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5ec:	3501      	adds	r5, #1
 800a5ee:	e7c6      	b.n	800a57e <_printf_common+0x3e>
 800a5f0:	18e1      	adds	r1, r4, r3
 800a5f2:	1c5a      	adds	r2, r3, #1
 800a5f4:	2030      	movs	r0, #48	; 0x30
 800a5f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a5fa:	4422      	add	r2, r4
 800a5fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a600:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a604:	3302      	adds	r3, #2
 800a606:	e7c7      	b.n	800a598 <_printf_common+0x58>
 800a608:	2301      	movs	r3, #1
 800a60a:	4622      	mov	r2, r4
 800a60c:	4649      	mov	r1, r9
 800a60e:	4638      	mov	r0, r7
 800a610:	47c0      	blx	r8
 800a612:	3001      	adds	r0, #1
 800a614:	d0e6      	beq.n	800a5e4 <_printf_common+0xa4>
 800a616:	3601      	adds	r6, #1
 800a618:	e7d9      	b.n	800a5ce <_printf_common+0x8e>
	...

0800a61c <_printf_i>:
 800a61c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a620:	7e0f      	ldrb	r7, [r1, #24]
 800a622:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a624:	2f78      	cmp	r7, #120	; 0x78
 800a626:	4691      	mov	r9, r2
 800a628:	4680      	mov	r8, r0
 800a62a:	460c      	mov	r4, r1
 800a62c:	469a      	mov	sl, r3
 800a62e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a632:	d807      	bhi.n	800a644 <_printf_i+0x28>
 800a634:	2f62      	cmp	r7, #98	; 0x62
 800a636:	d80a      	bhi.n	800a64e <_printf_i+0x32>
 800a638:	2f00      	cmp	r7, #0
 800a63a:	f000 80d8 	beq.w	800a7ee <_printf_i+0x1d2>
 800a63e:	2f58      	cmp	r7, #88	; 0x58
 800a640:	f000 80a3 	beq.w	800a78a <_printf_i+0x16e>
 800a644:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a648:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a64c:	e03a      	b.n	800a6c4 <_printf_i+0xa8>
 800a64e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a652:	2b15      	cmp	r3, #21
 800a654:	d8f6      	bhi.n	800a644 <_printf_i+0x28>
 800a656:	a101      	add	r1, pc, #4	; (adr r1, 800a65c <_printf_i+0x40>)
 800a658:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a65c:	0800a6b5 	.word	0x0800a6b5
 800a660:	0800a6c9 	.word	0x0800a6c9
 800a664:	0800a645 	.word	0x0800a645
 800a668:	0800a645 	.word	0x0800a645
 800a66c:	0800a645 	.word	0x0800a645
 800a670:	0800a645 	.word	0x0800a645
 800a674:	0800a6c9 	.word	0x0800a6c9
 800a678:	0800a645 	.word	0x0800a645
 800a67c:	0800a645 	.word	0x0800a645
 800a680:	0800a645 	.word	0x0800a645
 800a684:	0800a645 	.word	0x0800a645
 800a688:	0800a7d5 	.word	0x0800a7d5
 800a68c:	0800a6f9 	.word	0x0800a6f9
 800a690:	0800a7b7 	.word	0x0800a7b7
 800a694:	0800a645 	.word	0x0800a645
 800a698:	0800a645 	.word	0x0800a645
 800a69c:	0800a7f7 	.word	0x0800a7f7
 800a6a0:	0800a645 	.word	0x0800a645
 800a6a4:	0800a6f9 	.word	0x0800a6f9
 800a6a8:	0800a645 	.word	0x0800a645
 800a6ac:	0800a645 	.word	0x0800a645
 800a6b0:	0800a7bf 	.word	0x0800a7bf
 800a6b4:	682b      	ldr	r3, [r5, #0]
 800a6b6:	1d1a      	adds	r2, r3, #4
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	602a      	str	r2, [r5, #0]
 800a6bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	e0a3      	b.n	800a810 <_printf_i+0x1f4>
 800a6c8:	6820      	ldr	r0, [r4, #0]
 800a6ca:	6829      	ldr	r1, [r5, #0]
 800a6cc:	0606      	lsls	r6, r0, #24
 800a6ce:	f101 0304 	add.w	r3, r1, #4
 800a6d2:	d50a      	bpl.n	800a6ea <_printf_i+0xce>
 800a6d4:	680e      	ldr	r6, [r1, #0]
 800a6d6:	602b      	str	r3, [r5, #0]
 800a6d8:	2e00      	cmp	r6, #0
 800a6da:	da03      	bge.n	800a6e4 <_printf_i+0xc8>
 800a6dc:	232d      	movs	r3, #45	; 0x2d
 800a6de:	4276      	negs	r6, r6
 800a6e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6e4:	485e      	ldr	r0, [pc, #376]	; (800a860 <_printf_i+0x244>)
 800a6e6:	230a      	movs	r3, #10
 800a6e8:	e019      	b.n	800a71e <_printf_i+0x102>
 800a6ea:	680e      	ldr	r6, [r1, #0]
 800a6ec:	602b      	str	r3, [r5, #0]
 800a6ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a6f2:	bf18      	it	ne
 800a6f4:	b236      	sxthne	r6, r6
 800a6f6:	e7ef      	b.n	800a6d8 <_printf_i+0xbc>
 800a6f8:	682b      	ldr	r3, [r5, #0]
 800a6fa:	6820      	ldr	r0, [r4, #0]
 800a6fc:	1d19      	adds	r1, r3, #4
 800a6fe:	6029      	str	r1, [r5, #0]
 800a700:	0601      	lsls	r1, r0, #24
 800a702:	d501      	bpl.n	800a708 <_printf_i+0xec>
 800a704:	681e      	ldr	r6, [r3, #0]
 800a706:	e002      	b.n	800a70e <_printf_i+0xf2>
 800a708:	0646      	lsls	r6, r0, #25
 800a70a:	d5fb      	bpl.n	800a704 <_printf_i+0xe8>
 800a70c:	881e      	ldrh	r6, [r3, #0]
 800a70e:	4854      	ldr	r0, [pc, #336]	; (800a860 <_printf_i+0x244>)
 800a710:	2f6f      	cmp	r7, #111	; 0x6f
 800a712:	bf0c      	ite	eq
 800a714:	2308      	moveq	r3, #8
 800a716:	230a      	movne	r3, #10
 800a718:	2100      	movs	r1, #0
 800a71a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a71e:	6865      	ldr	r5, [r4, #4]
 800a720:	60a5      	str	r5, [r4, #8]
 800a722:	2d00      	cmp	r5, #0
 800a724:	bfa2      	ittt	ge
 800a726:	6821      	ldrge	r1, [r4, #0]
 800a728:	f021 0104 	bicge.w	r1, r1, #4
 800a72c:	6021      	strge	r1, [r4, #0]
 800a72e:	b90e      	cbnz	r6, 800a734 <_printf_i+0x118>
 800a730:	2d00      	cmp	r5, #0
 800a732:	d04d      	beq.n	800a7d0 <_printf_i+0x1b4>
 800a734:	4615      	mov	r5, r2
 800a736:	fbb6 f1f3 	udiv	r1, r6, r3
 800a73a:	fb03 6711 	mls	r7, r3, r1, r6
 800a73e:	5dc7      	ldrb	r7, [r0, r7]
 800a740:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a744:	4637      	mov	r7, r6
 800a746:	42bb      	cmp	r3, r7
 800a748:	460e      	mov	r6, r1
 800a74a:	d9f4      	bls.n	800a736 <_printf_i+0x11a>
 800a74c:	2b08      	cmp	r3, #8
 800a74e:	d10b      	bne.n	800a768 <_printf_i+0x14c>
 800a750:	6823      	ldr	r3, [r4, #0]
 800a752:	07de      	lsls	r6, r3, #31
 800a754:	d508      	bpl.n	800a768 <_printf_i+0x14c>
 800a756:	6923      	ldr	r3, [r4, #16]
 800a758:	6861      	ldr	r1, [r4, #4]
 800a75a:	4299      	cmp	r1, r3
 800a75c:	bfde      	ittt	le
 800a75e:	2330      	movle	r3, #48	; 0x30
 800a760:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a764:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a768:	1b52      	subs	r2, r2, r5
 800a76a:	6122      	str	r2, [r4, #16]
 800a76c:	f8cd a000 	str.w	sl, [sp]
 800a770:	464b      	mov	r3, r9
 800a772:	aa03      	add	r2, sp, #12
 800a774:	4621      	mov	r1, r4
 800a776:	4640      	mov	r0, r8
 800a778:	f7ff fee2 	bl	800a540 <_printf_common>
 800a77c:	3001      	adds	r0, #1
 800a77e:	d14c      	bne.n	800a81a <_printf_i+0x1fe>
 800a780:	f04f 30ff 	mov.w	r0, #4294967295
 800a784:	b004      	add	sp, #16
 800a786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a78a:	4835      	ldr	r0, [pc, #212]	; (800a860 <_printf_i+0x244>)
 800a78c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a790:	6829      	ldr	r1, [r5, #0]
 800a792:	6823      	ldr	r3, [r4, #0]
 800a794:	f851 6b04 	ldr.w	r6, [r1], #4
 800a798:	6029      	str	r1, [r5, #0]
 800a79a:	061d      	lsls	r5, r3, #24
 800a79c:	d514      	bpl.n	800a7c8 <_printf_i+0x1ac>
 800a79e:	07df      	lsls	r7, r3, #31
 800a7a0:	bf44      	itt	mi
 800a7a2:	f043 0320 	orrmi.w	r3, r3, #32
 800a7a6:	6023      	strmi	r3, [r4, #0]
 800a7a8:	b91e      	cbnz	r6, 800a7b2 <_printf_i+0x196>
 800a7aa:	6823      	ldr	r3, [r4, #0]
 800a7ac:	f023 0320 	bic.w	r3, r3, #32
 800a7b0:	6023      	str	r3, [r4, #0]
 800a7b2:	2310      	movs	r3, #16
 800a7b4:	e7b0      	b.n	800a718 <_printf_i+0xfc>
 800a7b6:	6823      	ldr	r3, [r4, #0]
 800a7b8:	f043 0320 	orr.w	r3, r3, #32
 800a7bc:	6023      	str	r3, [r4, #0]
 800a7be:	2378      	movs	r3, #120	; 0x78
 800a7c0:	4828      	ldr	r0, [pc, #160]	; (800a864 <_printf_i+0x248>)
 800a7c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a7c6:	e7e3      	b.n	800a790 <_printf_i+0x174>
 800a7c8:	0659      	lsls	r1, r3, #25
 800a7ca:	bf48      	it	mi
 800a7cc:	b2b6      	uxthmi	r6, r6
 800a7ce:	e7e6      	b.n	800a79e <_printf_i+0x182>
 800a7d0:	4615      	mov	r5, r2
 800a7d2:	e7bb      	b.n	800a74c <_printf_i+0x130>
 800a7d4:	682b      	ldr	r3, [r5, #0]
 800a7d6:	6826      	ldr	r6, [r4, #0]
 800a7d8:	6961      	ldr	r1, [r4, #20]
 800a7da:	1d18      	adds	r0, r3, #4
 800a7dc:	6028      	str	r0, [r5, #0]
 800a7de:	0635      	lsls	r5, r6, #24
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	d501      	bpl.n	800a7e8 <_printf_i+0x1cc>
 800a7e4:	6019      	str	r1, [r3, #0]
 800a7e6:	e002      	b.n	800a7ee <_printf_i+0x1d2>
 800a7e8:	0670      	lsls	r0, r6, #25
 800a7ea:	d5fb      	bpl.n	800a7e4 <_printf_i+0x1c8>
 800a7ec:	8019      	strh	r1, [r3, #0]
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	6123      	str	r3, [r4, #16]
 800a7f2:	4615      	mov	r5, r2
 800a7f4:	e7ba      	b.n	800a76c <_printf_i+0x150>
 800a7f6:	682b      	ldr	r3, [r5, #0]
 800a7f8:	1d1a      	adds	r2, r3, #4
 800a7fa:	602a      	str	r2, [r5, #0]
 800a7fc:	681d      	ldr	r5, [r3, #0]
 800a7fe:	6862      	ldr	r2, [r4, #4]
 800a800:	2100      	movs	r1, #0
 800a802:	4628      	mov	r0, r5
 800a804:	f7f5 fcf4 	bl	80001f0 <memchr>
 800a808:	b108      	cbz	r0, 800a80e <_printf_i+0x1f2>
 800a80a:	1b40      	subs	r0, r0, r5
 800a80c:	6060      	str	r0, [r4, #4]
 800a80e:	6863      	ldr	r3, [r4, #4]
 800a810:	6123      	str	r3, [r4, #16]
 800a812:	2300      	movs	r3, #0
 800a814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a818:	e7a8      	b.n	800a76c <_printf_i+0x150>
 800a81a:	6923      	ldr	r3, [r4, #16]
 800a81c:	462a      	mov	r2, r5
 800a81e:	4649      	mov	r1, r9
 800a820:	4640      	mov	r0, r8
 800a822:	47d0      	blx	sl
 800a824:	3001      	adds	r0, #1
 800a826:	d0ab      	beq.n	800a780 <_printf_i+0x164>
 800a828:	6823      	ldr	r3, [r4, #0]
 800a82a:	079b      	lsls	r3, r3, #30
 800a82c:	d413      	bmi.n	800a856 <_printf_i+0x23a>
 800a82e:	68e0      	ldr	r0, [r4, #12]
 800a830:	9b03      	ldr	r3, [sp, #12]
 800a832:	4298      	cmp	r0, r3
 800a834:	bfb8      	it	lt
 800a836:	4618      	movlt	r0, r3
 800a838:	e7a4      	b.n	800a784 <_printf_i+0x168>
 800a83a:	2301      	movs	r3, #1
 800a83c:	4632      	mov	r2, r6
 800a83e:	4649      	mov	r1, r9
 800a840:	4640      	mov	r0, r8
 800a842:	47d0      	blx	sl
 800a844:	3001      	adds	r0, #1
 800a846:	d09b      	beq.n	800a780 <_printf_i+0x164>
 800a848:	3501      	adds	r5, #1
 800a84a:	68e3      	ldr	r3, [r4, #12]
 800a84c:	9903      	ldr	r1, [sp, #12]
 800a84e:	1a5b      	subs	r3, r3, r1
 800a850:	42ab      	cmp	r3, r5
 800a852:	dcf2      	bgt.n	800a83a <_printf_i+0x21e>
 800a854:	e7eb      	b.n	800a82e <_printf_i+0x212>
 800a856:	2500      	movs	r5, #0
 800a858:	f104 0619 	add.w	r6, r4, #25
 800a85c:	e7f5      	b.n	800a84a <_printf_i+0x22e>
 800a85e:	bf00      	nop
 800a860:	0800ae15 	.word	0x0800ae15
 800a864:	0800ae26 	.word	0x0800ae26

0800a868 <_sbrk_r>:
 800a868:	b538      	push	{r3, r4, r5, lr}
 800a86a:	4d06      	ldr	r5, [pc, #24]	; (800a884 <_sbrk_r+0x1c>)
 800a86c:	2300      	movs	r3, #0
 800a86e:	4604      	mov	r4, r0
 800a870:	4608      	mov	r0, r1
 800a872:	602b      	str	r3, [r5, #0]
 800a874:	f7f8 fbc0 	bl	8002ff8 <_sbrk>
 800a878:	1c43      	adds	r3, r0, #1
 800a87a:	d102      	bne.n	800a882 <_sbrk_r+0x1a>
 800a87c:	682b      	ldr	r3, [r5, #0]
 800a87e:	b103      	cbz	r3, 800a882 <_sbrk_r+0x1a>
 800a880:	6023      	str	r3, [r4, #0]
 800a882:	bd38      	pop	{r3, r4, r5, pc}
 800a884:	20000e90 	.word	0x20000e90

0800a888 <__sread>:
 800a888:	b510      	push	{r4, lr}
 800a88a:	460c      	mov	r4, r1
 800a88c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a890:	f000 f8f8 	bl	800aa84 <_read_r>
 800a894:	2800      	cmp	r0, #0
 800a896:	bfab      	itete	ge
 800a898:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a89a:	89a3      	ldrhlt	r3, [r4, #12]
 800a89c:	181b      	addge	r3, r3, r0
 800a89e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a8a2:	bfac      	ite	ge
 800a8a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a8a6:	81a3      	strhlt	r3, [r4, #12]
 800a8a8:	bd10      	pop	{r4, pc}

0800a8aa <__swrite>:
 800a8aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8ae:	461f      	mov	r7, r3
 800a8b0:	898b      	ldrh	r3, [r1, #12]
 800a8b2:	05db      	lsls	r3, r3, #23
 800a8b4:	4605      	mov	r5, r0
 800a8b6:	460c      	mov	r4, r1
 800a8b8:	4616      	mov	r6, r2
 800a8ba:	d505      	bpl.n	800a8c8 <__swrite+0x1e>
 800a8bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8c0:	2302      	movs	r3, #2
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f000 f868 	bl	800a998 <_lseek_r>
 800a8c8:	89a3      	ldrh	r3, [r4, #12]
 800a8ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8d2:	81a3      	strh	r3, [r4, #12]
 800a8d4:	4632      	mov	r2, r6
 800a8d6:	463b      	mov	r3, r7
 800a8d8:	4628      	mov	r0, r5
 800a8da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8de:	f000 b817 	b.w	800a910 <_write_r>

0800a8e2 <__sseek>:
 800a8e2:	b510      	push	{r4, lr}
 800a8e4:	460c      	mov	r4, r1
 800a8e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8ea:	f000 f855 	bl	800a998 <_lseek_r>
 800a8ee:	1c43      	adds	r3, r0, #1
 800a8f0:	89a3      	ldrh	r3, [r4, #12]
 800a8f2:	bf15      	itete	ne
 800a8f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a8f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a8fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a8fe:	81a3      	strheq	r3, [r4, #12]
 800a900:	bf18      	it	ne
 800a902:	81a3      	strhne	r3, [r4, #12]
 800a904:	bd10      	pop	{r4, pc}

0800a906 <__sclose>:
 800a906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a90a:	f000 b813 	b.w	800a934 <_close_r>
	...

0800a910 <_write_r>:
 800a910:	b538      	push	{r3, r4, r5, lr}
 800a912:	4d07      	ldr	r5, [pc, #28]	; (800a930 <_write_r+0x20>)
 800a914:	4604      	mov	r4, r0
 800a916:	4608      	mov	r0, r1
 800a918:	4611      	mov	r1, r2
 800a91a:	2200      	movs	r2, #0
 800a91c:	602a      	str	r2, [r5, #0]
 800a91e:	461a      	mov	r2, r3
 800a920:	f7f8 fb19 	bl	8002f56 <_write>
 800a924:	1c43      	adds	r3, r0, #1
 800a926:	d102      	bne.n	800a92e <_write_r+0x1e>
 800a928:	682b      	ldr	r3, [r5, #0]
 800a92a:	b103      	cbz	r3, 800a92e <_write_r+0x1e>
 800a92c:	6023      	str	r3, [r4, #0]
 800a92e:	bd38      	pop	{r3, r4, r5, pc}
 800a930:	20000e90 	.word	0x20000e90

0800a934 <_close_r>:
 800a934:	b538      	push	{r3, r4, r5, lr}
 800a936:	4d06      	ldr	r5, [pc, #24]	; (800a950 <_close_r+0x1c>)
 800a938:	2300      	movs	r3, #0
 800a93a:	4604      	mov	r4, r0
 800a93c:	4608      	mov	r0, r1
 800a93e:	602b      	str	r3, [r5, #0]
 800a940:	f7f8 fb25 	bl	8002f8e <_close>
 800a944:	1c43      	adds	r3, r0, #1
 800a946:	d102      	bne.n	800a94e <_close_r+0x1a>
 800a948:	682b      	ldr	r3, [r5, #0]
 800a94a:	b103      	cbz	r3, 800a94e <_close_r+0x1a>
 800a94c:	6023      	str	r3, [r4, #0]
 800a94e:	bd38      	pop	{r3, r4, r5, pc}
 800a950:	20000e90 	.word	0x20000e90

0800a954 <_fstat_r>:
 800a954:	b538      	push	{r3, r4, r5, lr}
 800a956:	4d07      	ldr	r5, [pc, #28]	; (800a974 <_fstat_r+0x20>)
 800a958:	2300      	movs	r3, #0
 800a95a:	4604      	mov	r4, r0
 800a95c:	4608      	mov	r0, r1
 800a95e:	4611      	mov	r1, r2
 800a960:	602b      	str	r3, [r5, #0]
 800a962:	f7f8 fb20 	bl	8002fa6 <_fstat>
 800a966:	1c43      	adds	r3, r0, #1
 800a968:	d102      	bne.n	800a970 <_fstat_r+0x1c>
 800a96a:	682b      	ldr	r3, [r5, #0]
 800a96c:	b103      	cbz	r3, 800a970 <_fstat_r+0x1c>
 800a96e:	6023      	str	r3, [r4, #0]
 800a970:	bd38      	pop	{r3, r4, r5, pc}
 800a972:	bf00      	nop
 800a974:	20000e90 	.word	0x20000e90

0800a978 <_isatty_r>:
 800a978:	b538      	push	{r3, r4, r5, lr}
 800a97a:	4d06      	ldr	r5, [pc, #24]	; (800a994 <_isatty_r+0x1c>)
 800a97c:	2300      	movs	r3, #0
 800a97e:	4604      	mov	r4, r0
 800a980:	4608      	mov	r0, r1
 800a982:	602b      	str	r3, [r5, #0]
 800a984:	f7f8 fb1f 	bl	8002fc6 <_isatty>
 800a988:	1c43      	adds	r3, r0, #1
 800a98a:	d102      	bne.n	800a992 <_isatty_r+0x1a>
 800a98c:	682b      	ldr	r3, [r5, #0]
 800a98e:	b103      	cbz	r3, 800a992 <_isatty_r+0x1a>
 800a990:	6023      	str	r3, [r4, #0]
 800a992:	bd38      	pop	{r3, r4, r5, pc}
 800a994:	20000e90 	.word	0x20000e90

0800a998 <_lseek_r>:
 800a998:	b538      	push	{r3, r4, r5, lr}
 800a99a:	4d07      	ldr	r5, [pc, #28]	; (800a9b8 <_lseek_r+0x20>)
 800a99c:	4604      	mov	r4, r0
 800a99e:	4608      	mov	r0, r1
 800a9a0:	4611      	mov	r1, r2
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	602a      	str	r2, [r5, #0]
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	f7f8 fb18 	bl	8002fdc <_lseek>
 800a9ac:	1c43      	adds	r3, r0, #1
 800a9ae:	d102      	bne.n	800a9b6 <_lseek_r+0x1e>
 800a9b0:	682b      	ldr	r3, [r5, #0]
 800a9b2:	b103      	cbz	r3, 800a9b6 <_lseek_r+0x1e>
 800a9b4:	6023      	str	r3, [r4, #0]
 800a9b6:	bd38      	pop	{r3, r4, r5, pc}
 800a9b8:	20000e90 	.word	0x20000e90

0800a9bc <memcpy>:
 800a9bc:	440a      	add	r2, r1
 800a9be:	4291      	cmp	r1, r2
 800a9c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9c4:	d100      	bne.n	800a9c8 <memcpy+0xc>
 800a9c6:	4770      	bx	lr
 800a9c8:	b510      	push	{r4, lr}
 800a9ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9d2:	4291      	cmp	r1, r2
 800a9d4:	d1f9      	bne.n	800a9ca <memcpy+0xe>
 800a9d6:	bd10      	pop	{r4, pc}

0800a9d8 <memmove>:
 800a9d8:	4288      	cmp	r0, r1
 800a9da:	b510      	push	{r4, lr}
 800a9dc:	eb01 0402 	add.w	r4, r1, r2
 800a9e0:	d902      	bls.n	800a9e8 <memmove+0x10>
 800a9e2:	4284      	cmp	r4, r0
 800a9e4:	4623      	mov	r3, r4
 800a9e6:	d807      	bhi.n	800a9f8 <memmove+0x20>
 800a9e8:	1e43      	subs	r3, r0, #1
 800a9ea:	42a1      	cmp	r1, r4
 800a9ec:	d008      	beq.n	800aa00 <memmove+0x28>
 800a9ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a9f6:	e7f8      	b.n	800a9ea <memmove+0x12>
 800a9f8:	4402      	add	r2, r0
 800a9fa:	4601      	mov	r1, r0
 800a9fc:	428a      	cmp	r2, r1
 800a9fe:	d100      	bne.n	800aa02 <memmove+0x2a>
 800aa00:	bd10      	pop	{r4, pc}
 800aa02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa0a:	e7f7      	b.n	800a9fc <memmove+0x24>

0800aa0c <__malloc_lock>:
 800aa0c:	4801      	ldr	r0, [pc, #4]	; (800aa14 <__malloc_lock+0x8>)
 800aa0e:	f7ff b999 	b.w	8009d44 <__retarget_lock_acquire_recursive>
 800aa12:	bf00      	nop
 800aa14:	20000e84 	.word	0x20000e84

0800aa18 <__malloc_unlock>:
 800aa18:	4801      	ldr	r0, [pc, #4]	; (800aa20 <__malloc_unlock+0x8>)
 800aa1a:	f7ff b994 	b.w	8009d46 <__retarget_lock_release_recursive>
 800aa1e:	bf00      	nop
 800aa20:	20000e84 	.word	0x20000e84

0800aa24 <_realloc_r>:
 800aa24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa28:	4680      	mov	r8, r0
 800aa2a:	4614      	mov	r4, r2
 800aa2c:	460e      	mov	r6, r1
 800aa2e:	b921      	cbnz	r1, 800aa3a <_realloc_r+0x16>
 800aa30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa34:	4611      	mov	r1, r2
 800aa36:	f7ff ba59 	b.w	8009eec <_malloc_r>
 800aa3a:	b92a      	cbnz	r2, 800aa48 <_realloc_r+0x24>
 800aa3c:	f7ff f9ea 	bl	8009e14 <_free_r>
 800aa40:	4625      	mov	r5, r4
 800aa42:	4628      	mov	r0, r5
 800aa44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa48:	f000 f82e 	bl	800aaa8 <_malloc_usable_size_r>
 800aa4c:	4284      	cmp	r4, r0
 800aa4e:	4607      	mov	r7, r0
 800aa50:	d802      	bhi.n	800aa58 <_realloc_r+0x34>
 800aa52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aa56:	d812      	bhi.n	800aa7e <_realloc_r+0x5a>
 800aa58:	4621      	mov	r1, r4
 800aa5a:	4640      	mov	r0, r8
 800aa5c:	f7ff fa46 	bl	8009eec <_malloc_r>
 800aa60:	4605      	mov	r5, r0
 800aa62:	2800      	cmp	r0, #0
 800aa64:	d0ed      	beq.n	800aa42 <_realloc_r+0x1e>
 800aa66:	42bc      	cmp	r4, r7
 800aa68:	4622      	mov	r2, r4
 800aa6a:	4631      	mov	r1, r6
 800aa6c:	bf28      	it	cs
 800aa6e:	463a      	movcs	r2, r7
 800aa70:	f7ff ffa4 	bl	800a9bc <memcpy>
 800aa74:	4631      	mov	r1, r6
 800aa76:	4640      	mov	r0, r8
 800aa78:	f7ff f9cc 	bl	8009e14 <_free_r>
 800aa7c:	e7e1      	b.n	800aa42 <_realloc_r+0x1e>
 800aa7e:	4635      	mov	r5, r6
 800aa80:	e7df      	b.n	800aa42 <_realloc_r+0x1e>
	...

0800aa84 <_read_r>:
 800aa84:	b538      	push	{r3, r4, r5, lr}
 800aa86:	4d07      	ldr	r5, [pc, #28]	; (800aaa4 <_read_r+0x20>)
 800aa88:	4604      	mov	r4, r0
 800aa8a:	4608      	mov	r0, r1
 800aa8c:	4611      	mov	r1, r2
 800aa8e:	2200      	movs	r2, #0
 800aa90:	602a      	str	r2, [r5, #0]
 800aa92:	461a      	mov	r2, r3
 800aa94:	f7f8 fa42 	bl	8002f1c <_read>
 800aa98:	1c43      	adds	r3, r0, #1
 800aa9a:	d102      	bne.n	800aaa2 <_read_r+0x1e>
 800aa9c:	682b      	ldr	r3, [r5, #0]
 800aa9e:	b103      	cbz	r3, 800aaa2 <_read_r+0x1e>
 800aaa0:	6023      	str	r3, [r4, #0]
 800aaa2:	bd38      	pop	{r3, r4, r5, pc}
 800aaa4:	20000e90 	.word	0x20000e90

0800aaa8 <_malloc_usable_size_r>:
 800aaa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aaac:	1f18      	subs	r0, r3, #4
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	bfbc      	itt	lt
 800aab2:	580b      	ldrlt	r3, [r1, r0]
 800aab4:	18c0      	addlt	r0, r0, r3
 800aab6:	4770      	bx	lr

0800aab8 <_init>:
 800aab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaba:	bf00      	nop
 800aabc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aabe:	bc08      	pop	{r3}
 800aac0:	469e      	mov	lr, r3
 800aac2:	4770      	bx	lr

0800aac4 <_fini>:
 800aac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aac6:	bf00      	nop
 800aac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaca:	bc08      	pop	{r3}
 800aacc:	469e      	mov	lr, r3
 800aace:	4770      	bx	lr
